import{a as T,b as se}from"./chunk-T3VNKMFZ.js";import{a as O,b as ee,c as te}from"./chunk-K4MGGVBQ.js";import{a as ce,b as K}from"./chunk-URQKBNG2.js";import"./chunk-USJPHQKU.js";import"./chunk-JLH2EYJI.js";import{E as L,F as ae,b as w,f as l,g as J,i as le,k as Z,l as re,n as b}from"./chunk-NCQMUVAP.js";var B=w(T());var N=w(T()),W=b(({state:t,filter:o,handleCheckboxInputChanged:i})=>{let{fetchIsFinished:c}=t,{title:n,stateKey:d}=o,m=t[d];return l` <div class="collection-collapse-block">
      <div class="collection-collapse-block-content">
        <h3 class="collapse-block-title">${n}</h3>
        <div class="collection-sidebar-filter mt-4">
          <div
            class="form-control custom-checkbox collection-filter-checkbox first-level"
          >
            <input
              type="checkbox"
              @change=${h=>i(o,h)}
              id=${(0,N.default)(d,{lower:!0})}
              ?checked=${m}
              ?disabled=${!c}
            />
            <label
              class="form-control-label"
              for=${(0,N.default)(d,{lower:!0})}
              >${n}</label
            >
          </div>
        </div>
      </div>
    </div>`}),M=W;var k=w(T()),j=b(({state:t,filter:o,handleFirstLevelSelectedOptionsChanged:i,handleSecondLevelSelectedOptionsChanged:c})=>{let{fetchIsFinished:n,searchString:d}=t,{title:m,info:h,stateKey:p}=o,s=t[p];return l` <div
      class=${`collection-collapse-block ${o.stateKey}-nested-filter`}
    >
      <h3 class="collapse-block-title">${m}</h3>
      <div class="collection-collapse-block-content">
        <div class="collection-sidebar-filter mt-4">
          <ul class="sidebar_filter_cls first_level_options">
            ${h.map(([e,r])=>l`
                <li>
                  <div
                    class="form-control custom-checkbox collection-filter-checkbox first-level"
                  >
                    <input
                      ?disabled=${!n||d}
                      type="checkbox"
                      class="form-control-input"
                      id=${(0,k.default)(e,{lower:!0})}
                      ?checked=${!!s?.find(([a])=>a===e)}
                      @change=${a=>i(e,o,a)}
                    />
                    <label
                      class="form-control-label"
                      for=${(0,k.default)(e,{lower:!0})}
                      >${e}</label
                    >
                    <ul
                      class="sidebar_filter_cls second_level_options${s?.find(([a])=>a===e)?"":" hidden"}"
                    >
                      ${r.map(a=>{let y=`${(0,k.default)(e,{lower:!0})}-${(0,k.default)(a,{lower:!0})}`;return l`
                          <li>
                            <div
                              class="form-control custom-checkbox collection-filter-checkbox ml-3"
                            >
                              <input
                                ?disabled=${!n}
                                type="checkbox"
                                class="custom-checkbox collection-filter-checkbox"
                                id=${y}
                                ?checked=${!!s.find(([v])=>v===e)?.[1]?.includes(a)}
                                @change=${v=>c(e,a,o,v)}
                              />
                              <label class="form-control-label" for=${y}
                                >${a}</label
                              >
                            </div>
                          </li>
                        `})}
                    </ul>
                  </div>
                </li>
              `)}
          </ul>
        </div>
      </div>
    </div>`}),_=j;var x=w(T()),G=b(({state:t,filter:o,handleValueUpdated:i})=>{let{title:c,info:[n,d],stateKey:m}=o,[h,p]=t[m];return l`<div class="collection-collapse-block">
    <h3 class="collapse-block-title">${c}</h3>
    <div class="collection-collapse-block-content">
      <div
        class="collection-range-slider-wrapper ${(0,x.default)(c,{lower:!0})}-range-slider-wrapper collection-sidebar-filter mt-4"
      >
        <paper-range-slider
          id=${`${(0,x.default)(c,{lower:!0})}-range-slider`}
          min=${n}
          max=${d}
          value-min=${h}
          value-max=${p}
          @updateValues=${s=>i(o,s)}
        ></paper-range-slider>
        <style>
          .${(0,x.default)(c,{lower:!0})}-range-slider-wrapper
            > paper-range-slider:before {
            content: '${h}';
          }
          .${(0,x.default)(c,{lower:!0})}-range-slider-wrapper
            > paper-range-slider:after {
            content: '${p}';
          }
        </style>
      </div>
    </div>
  </div>`}),V=G;var H=b(({state:t,filter:o,handleSearchStringChanged:i})=>{console.log("state",t);let{searchString:c,fetchIsFinished:n}=t;return l`<input
      type="text"
      ?disabled=${!n}
      class="form-control my-3"
      id="collection-search-input"
      placeholder="Search"
      value=${c}
      @keyup=${d=>i(o,d)}
    />`}),A=H;var C=w(T()),Q=b(({state:t,filter:o,handleSelectedOptionsChanged:i})=>{let{fetchIsFinished:c,searchString:n}=t,{info:d,title:m,stateKey:h}=o,p=t[h];return l` <div class="collection-collapse-block">
      <h3 class="collapse-block-title">${m}</h3>
      <div class="collection-collapse-block-content">
        <div class="collection-sidebar-filter mt-4">
          <ul
            class="sidebar_filter_cls"
            id=${(0,C.default)(m,{lower:!0})}
          >
            ${d.map(s=>l`
                <li>
                  <div
                    class="form-control custom-checkbox collection-filter-checkbox first-level"
                  >
                    <input
                      ?disabled=${!c||n}
                      type="checkbox"
                      class="form-control-input"
                      id=${(0,C.default)(s,{lower:!0})}
                      ?checked=${!!p?.includes(s)}
                      @change=${e=>i(s,o,e)}
                    />
                    <label
                      class="form-control-label"
                      for=${(0,C.default)(s,{lower:!0})}
                      >${s}</label
                    >
                  </div>
                </li>
              `)}
          </ul>
        </div>
      </div>
    </div>`}),R=Q;var X=b(({collectionImages:t})=>l`<div class="collection-images-wrapper">
    ${t.map(o=>l`
      <div class="collection-image-wrapper py-2" style="width: 100%; min-height: 100px;">
        <a href=${o.imageTarget}
          ><img class="w-100" src=${o.imageUrl} alt=${o.imageText}
        /></a>
      </div></div>
    `)}
  </div>`),D=X;function Y(){let{state:t,dispatch:o,arrayOfFilters:i,collectionImages:c}=K(),n=(e,r)=>{o({type:e.actionType,payload:r.target.value})},d=(e,r,a)=>{a.target.checked?o({type:r.actionType,payload:[...t[r.stateKey],e]}):o({type:r.actionType,payload:t[r.stateKey].filter(v=>v!==e)})},m=(e,r,a)=>{let y=a.target;y.checked?o({type:r.actionType,payload:[...t[r.stateKey],[e,[]]]}):(o({type:r.actionType,payload:t[r.stateKey].filter(([u])=>u!==e)}),y.parentNode.querySelectorAll("ul li input").forEach(u=>{u.checked=!1}))},h=(e,r,a,y)=>{y.target.checked?o({type:a.actionType,payload:t[a.stateKey].map(([u,g])=>u===e?[u,[...g,r]]:[u,g])}):o({type:a.actionType,payload:t[a.stateKey].map(([u,g])=>u===e?[u,g.filter(S=>S!==r)]:[u,g])})},p=(e,r)=>{o({type:e.actionType,payload:[r.target.valueMin,r.target.valueMax]})},s=(e,r)=>{o({type:e.actionType,payload:r.target.checked})};return l`<div class="coll_sidebar">
    ${D({collectionImages:c})}
    ${i.find(e=>e.type==="SearchInput")?l`
          ${A({state:t,filter:i.find(e=>e.type==="SearchInput"),handleSearchStringChanged:n})}
        `:null}
    <div class="collection-filter-block custom_filter mt-4">
      ${i.map(e=>{switch(e.type){case"SimpleFilter":return l`${R({state:t,filter:e,handleSelectedOptionsChanged:d})}`;case"Checkbox":return l`${M({state:t,filter:e,handleCheckboxInputChanged:s})}`;case"NestedFilter":return l`${_({state:t,filter:e,handleFirstLevelSelectedOptionsChanged:m,handleSecondLevelSelectedOptionsChanged:h})}`;case"RangeSlider":return l`${V({state:t,filter:e,handleValueUpdated:p})}`;default:return null}})}
    </div>
  </div>`}var E={tagName:"product-type-sidebar",renderer:Y,options:{observedAttributes:[],useShadowDOM:!1}};function oe(){let{collectionTitle:t,emptyCollectionImage:o,getFilteredSortedProducts:i,getFilteredSortedProductsOfCurrentPage:c,getPageCount:n,getDisplayedPageNumbers:d,productsOfFirstPage:m,state:h,dispatch:p}=K(),{fetchIsFinished:s,viewMode:e,sortValue:r,productsPerPage:a,pageNumber:y}=h,u=i().length,g=[];s?g=c():g=m??[];let S=n(),F=d(),f=Z(this),P=$=>{p({type:"changeViewMode",payload:$})},I=$=>{p({type:"changeProductsPerPage",payload:Number($.target.value)})},U=$=>{p({type:"changeSortValue",payload:$.target.value})},z=$=>{Number.isNaN(Number($))||p({type:"changePageNumber",payload:$})};return l`${L({title:t})}${ee({fetchIsFinished:s,productsSize:u,viewMode:e,productsPerPage:a,sortValue:r,handleViewModeIconClicked:P,handleProductsPerPageChanged:I,handleSortValueChanged:U})}${te({mainContentElement:f.current,productsOfCurrentPage:g,viewMode:e,emptyCollectionImage:o})}${O({fetchIsFinished:s,pageNumber:y,displayedPageNumbers:F,pageCount:S,handlePageLinkClicked:z})}`}var q={tagName:"product-type-main-content",renderer:oe,options:{observedAttributes:[],useShadowDOM:!1}};function ie({productType:t,allFilters:o,defaultSortBy:i,collectionTitle:c,collectionMetafield:n,emptyCollectionImage:d}){let m=JSON.parse(o).map(f=>{let{selected:P,...I}=f;return I}).filter(f=>f.stateKey),h=JSON.parse(o).reduce((f,P)=>(f[P.stateKey]=P.selected,f),{}),p=JSON.parse(n??"{}")?.images??[],{state:s,dispatch:e,queryAllProducts:r,queryFirstPageProducts:a,getFilteredSortedProducts:y,getFilteredSortedProductsOfCurrentPage:v,getPageCount:u,getDisplayedPageNumbers:g}=new(se((0,B.default)(t,{lower:!0})))({defaultSortBy:i,initialValueFilterKeyPairs:h}),[S,F]=le([]);return J(async()=>{let f=await a();F(f)},[]),J(async()=>{let f=await r();console.log("products from queryAllProducts",f),e({type:"setAllProducts",payload:f}),e({type:"setFetchIsFinished",payload:!0})},[]),l`${ce({children:l` <section class="section-b-space">
      <div class="collection-wrapper">
        <div class="container">
          <div class="row">
            <product-type-sidebar
              class="collection-filter col-sm-3"
            ></product-type-sidebar>
            <div class="collection-content col">
              <div class="page-main-content">
                <div class="container-fluid">
                  <div class="row">
                    <div class="col-sm-12">
                      <product-type-main-content></product-type-main-content>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>`,productType:t,productsOfFirstPage:S,collectionImages:p,collectionTitle:c,arrayOfFilters:m,emptyCollectionImage:d,getFilteredSortedProducts:y,getFilteredSortedProductsOfCurrentPage:v,getPageCount:u,getDisplayedPageNumbers:g,state:s,dispatch:e})}`}[E,q,ae,{tagName:"product-type-collection",renderer:ie,options:{observedAttributes:["product-type","all-filters","default-sort-by","collection-title","collection-metafield","empty-collection-image"],useShadowDOM:!1}}].forEach(t=>{customElements.define(t.tagName,re(t.renderer,t.options))});
//# sourceMappingURL=data:application/json;base64,
