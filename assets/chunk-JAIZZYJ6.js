var Km=Object.create,$o=Object.defineProperty,Qm=Object.getPrototypeOf,zm=Object.prototype.hasOwnProperty,$m=Object.getOwnPropertyNames,Gm=Object.getOwnPropertyDescriptor;var Wm=t=>$o(t,"__esModule",{value:!0});var ue=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports);var Ym=(t,e,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let i of $m(e))!zm.call(t,i)&&i!=="default"&&$o(t,i,{get:()=>e[i],enumerable:!(r=Gm(e,i))||r.enumerable});return t},dt=t=>Ym(Wm($o(t!=null?Km(Qm(t)):{},"default",t&&t.__esModule&&"default"in t?{get:()=>t.default,enumerable:!0}:{value:t,enumerable:!0})),t);var zu=ue((CE,en)=>{var Cu,Ou,Pu,ku,Au,Du,Nu,Iu,Mu,tn,hs,Ru,ju,Ut,Fu,Lu,Vu,Bu,qu,Uu,Hu,Ku,Qu;(function(t){var e=typeof global=="object"?global:typeof self=="object"?self:typeof this=="object"?this:{};typeof define=="function"&&define.amd?define("tslib",["exports"],function(i){t(r(e,r(i)))}):typeof en=="object"&&typeof en.exports=="object"?t(r(e,r(en.exports))):t(r(e));function r(i,n){return i!==e&&(typeof Object.create=="function"?Object.defineProperty(i,"__esModule",{value:!0}):i.__esModule=!0),function(o,s){return i[o]=n?n(o,s):s}}})(function(t){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(r,i){r.__proto__=i}||function(r,i){for(var n in i)i.hasOwnProperty(n)&&(r[n]=i[n])};Cu=function(r,i){e(r,i);function n(){this.constructor=r}r.prototype=i===null?Object.create(i):(n.prototype=i.prototype,new n)},Ou=Object.assign||function(r){for(var i,n=1,o=arguments.length;n<o;n++){i=arguments[n];for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(r[s]=i[s])}return r},Pu=function(r,i){var n={};for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&i.indexOf(o)<0&&(n[o]=r[o]);if(r!=null&&typeof Object.getOwnPropertySymbols=="function")for(var s=0,o=Object.getOwnPropertySymbols(r);s<o.length;s++)i.indexOf(o[s])<0&&Object.prototype.propertyIsEnumerable.call(r,o[s])&&(n[o[s]]=r[o[s]]);return n},ku=function(r,i,n,o){var s=arguments.length,a=s<3?i:o===null?o=Object.getOwnPropertyDescriptor(i,n):o,l;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")a=Reflect.decorate(r,i,n,o);else for(var u=r.length-1;u>=0;u--)(l=r[u])&&(a=(s<3?l(a):s>3?l(i,n,a):l(i,n))||a);return s>3&&a&&Object.defineProperty(i,n,a),a},Au=function(r,i){return function(n,o){i(n,o,r)}},Du=function(r,i){if(typeof Reflect=="object"&&typeof Reflect.metadata=="function")return Reflect.metadata(r,i)},Nu=function(r,i,n,o){function s(a){return a instanceof n?a:new n(function(l){l(a)})}return new(n||(n=Promise))(function(a,l){function u(f){try{p(o.next(f))}catch(h){l(h)}}function c(f){try{p(o.throw(f))}catch(h){l(h)}}function p(f){f.done?a(f.value):s(f.value).then(u,c)}p((o=o.apply(r,i||[])).next())})},Iu=function(r,i){var n={label:0,sent:function(){if(a[0]&1)throw a[1];return a[1]},trys:[],ops:[]},o,s,a,l;return l={next:u(0),throw:u(1),return:u(2)},typeof Symbol=="function"&&(l[Symbol.iterator]=function(){return this}),l;function u(p){return function(f){return c([p,f])}}function c(p){if(o)throw new TypeError("Generator is already executing.");for(;n;)try{if(o=1,s&&(a=p[0]&2?s.return:p[0]?s.throw||((a=s.return)&&a.call(s),0):s.next)&&!(a=a.call(s,p[1])).done)return a;switch(s=0,a&&(p=[p[0]&2,a.value]),p[0]){case 0:case 1:a=p;break;case 4:return n.label++,{value:p[1],done:!1};case 5:n.label++,s=p[1],p=[0];continue;case 7:p=n.ops.pop(),n.trys.pop();continue;default:if(a=n.trys,!(a=a.length>0&&a[a.length-1])&&(p[0]===6||p[0]===2)){n=0;continue}if(p[0]===3&&(!a||p[1]>a[0]&&p[1]<a[3])){n.label=p[1];break}if(p[0]===6&&n.label<a[1]){n.label=a[1],a=p;break}if(a&&n.label<a[2]){n.label=a[2],n.ops.push(p);break}a[2]&&n.ops.pop(),n.trys.pop();continue}p=i.call(r,n)}catch(f){p=[6,f],s=0}finally{o=a=0}if(p[0]&5)throw p[1];return{value:p[0]?p[1]:void 0,done:!0}}},Qu=function(r,i,n,o){o===void 0&&(o=n),r[o]=i[n]},Mu=function(r,i){for(var n in r)n!=="default"&&!i.hasOwnProperty(n)&&(i[n]=r[n])},tn=function(r){var i=typeof Symbol=="function"&&Symbol.iterator,n=i&&r[i],o=0;if(n)return n.call(r);if(r&&typeof r.length=="number")return{next:function(){return r&&o>=r.length&&(r=void 0),{value:r&&r[o++],done:!r}}};throw new TypeError(i?"Object is not iterable.":"Symbol.iterator is not defined.")},hs=function(r,i){var n=typeof Symbol=="function"&&r[Symbol.iterator];if(!n)return r;var o=n.call(r),s,a=[],l;try{for(;(i===void 0||i-- >0)&&!(s=o.next()).done;)a.push(s.value)}catch(u){l={error:u}}finally{try{s&&!s.done&&(n=o.return)&&n.call(o)}finally{if(l)throw l.error}}return a},Ru=function(){for(var r=[],i=0;i<arguments.length;i++)r=r.concat(hs(arguments[i]));return r},ju=function(){for(var r=0,i=0,n=arguments.length;i<n;i++)r+=arguments[i].length;for(var o=Array(r),s=0,i=0;i<n;i++)for(var a=arguments[i],l=0,u=a.length;l<u;l++,s++)o[s]=a[l];return o},Ut=function(r){return this instanceof Ut?(this.v=r,this):new Ut(r)},Fu=function(r,i,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var o=n.apply(r,i||[]),s,a=[];return s={},l("next"),l("throw"),l("return"),s[Symbol.asyncIterator]=function(){return this},s;function l(d){o[d]&&(s[d]=function(m){return new Promise(function(y,_){a.push([d,m,y,_])>1||u(d,m)})})}function u(d,m){try{c(o[d](m))}catch(y){h(a[0][3],y)}}function c(d){d.value instanceof Ut?Promise.resolve(d.value.v).then(p,f):h(a[0][2],d)}function p(d){u("next",d)}function f(d){u("throw",d)}function h(d,m){d(m),a.shift(),a.length&&u(a[0][0],a[0][1])}},Lu=function(r){var i,n;return i={},o("next"),o("throw",function(s){throw s}),o("return"),i[Symbol.iterator]=function(){return this},i;function o(s,a){i[s]=r[s]?function(l){return(n=!n)?{value:Ut(r[s](l)),done:s==="return"}:a?a(l):l}:a}},Vu=function(r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var i=r[Symbol.asyncIterator],n;return i?i.call(r):(r=typeof tn=="function"?tn(r):r[Symbol.iterator](),n={},o("next"),o("throw"),o("return"),n[Symbol.asyncIterator]=function(){return this},n);function o(a){n[a]=r[a]&&function(l){return new Promise(function(u,c){l=r[a](l),s(u,c,l.done,l.value)})}}function s(a,l,u,c){Promise.resolve(c).then(function(p){a({value:p,done:u})},l)}},Bu=function(r,i){return Object.defineProperty?Object.defineProperty(r,"raw",{value:i}):r.raw=i,r},qu=function(r){if(r&&r.__esModule)return r;var i={};if(r!=null)for(var n in r)Object.hasOwnProperty.call(r,n)&&(i[n]=r[n]);return i.default=r,i},Uu=function(r){return r&&r.__esModule?r:{default:r}},Hu=function(r,i){if(!i.has(r))throw new TypeError("attempted to get private field on non-instance");return i.get(r)},Ku=function(r,i,n){if(!i.has(r))throw new TypeError("attempted to set private field on non-instance");return i.set(r,n),n},t("__extends",Cu),t("__assign",Ou),t("__rest",Pu),t("__decorate",ku),t("__param",Au),t("__metadata",Du),t("__awaiter",Nu),t("__generator",Iu),t("__exportStar",Mu),t("__createBinding",Qu),t("__values",tn),t("__read",hs),t("__spread",Ru),t("__spreadArrays",ju),t("__await",Ut),t("__asyncGenerator",Fu),t("__asyncDelegator",Lu),t("__asyncValues",Vu),t("__makeTemplateObject",Bu),t("__importStar",qu),t("__importDefault",Uu),t("__classPrivateFieldGet",Hu),t("__classPrivateFieldSet",Ku)})});var hc=ue((QE,rn)=>{var Gu,Wu,Yu,Ju,Xu,Zu,ec,tc,rc,nn,ms,ic,nc,Ht,oc,sc,ac,lc,uc,cc,pc,fc,dc;(function(t){var e=typeof global=="object"?global:typeof self=="object"?self:typeof this=="object"?this:{};typeof define=="function"&&define.amd?define("tslib",["exports"],function(i){t(r(e,r(i)))}):typeof rn=="object"&&typeof rn.exports=="object"?t(r(e,r(rn.exports))):t(r(e));function r(i,n){return i!==e&&(typeof Object.create=="function"?Object.defineProperty(i,"__esModule",{value:!0}):i.__esModule=!0),function(o,s){return i[o]=n?n(o,s):s}}})(function(t){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(r,i){r.__proto__=i}||function(r,i){for(var n in i)i.hasOwnProperty(n)&&(r[n]=i[n])};Gu=function(r,i){e(r,i);function n(){this.constructor=r}r.prototype=i===null?Object.create(i):(n.prototype=i.prototype,new n)},Wu=Object.assign||function(r){for(var i,n=1,o=arguments.length;n<o;n++){i=arguments[n];for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(r[s]=i[s])}return r},Yu=function(r,i){var n={};for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&i.indexOf(o)<0&&(n[o]=r[o]);if(r!=null&&typeof Object.getOwnPropertySymbols=="function")for(var s=0,o=Object.getOwnPropertySymbols(r);s<o.length;s++)i.indexOf(o[s])<0&&Object.prototype.propertyIsEnumerable.call(r,o[s])&&(n[o[s]]=r[o[s]]);return n},Ju=function(r,i,n,o){var s=arguments.length,a=s<3?i:o===null?o=Object.getOwnPropertyDescriptor(i,n):o,l;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")a=Reflect.decorate(r,i,n,o);else for(var u=r.length-1;u>=0;u--)(l=r[u])&&(a=(s<3?l(a):s>3?l(i,n,a):l(i,n))||a);return s>3&&a&&Object.defineProperty(i,n,a),a},Xu=function(r,i){return function(n,o){i(n,o,r)}},Zu=function(r,i){if(typeof Reflect=="object"&&typeof Reflect.metadata=="function")return Reflect.metadata(r,i)},ec=function(r,i,n,o){function s(a){return a instanceof n?a:new n(function(l){l(a)})}return new(n||(n=Promise))(function(a,l){function u(f){try{p(o.next(f))}catch(h){l(h)}}function c(f){try{p(o.throw(f))}catch(h){l(h)}}function p(f){f.done?a(f.value):s(f.value).then(u,c)}p((o=o.apply(r,i||[])).next())})},tc=function(r,i){var n={label:0,sent:function(){if(a[0]&1)throw a[1];return a[1]},trys:[],ops:[]},o,s,a,l;return l={next:u(0),throw:u(1),return:u(2)},typeof Symbol=="function"&&(l[Symbol.iterator]=function(){return this}),l;function u(p){return function(f){return c([p,f])}}function c(p){if(o)throw new TypeError("Generator is already executing.");for(;n;)try{if(o=1,s&&(a=p[0]&2?s.return:p[0]?s.throw||((a=s.return)&&a.call(s),0):s.next)&&!(a=a.call(s,p[1])).done)return a;switch(s=0,a&&(p=[p[0]&2,a.value]),p[0]){case 0:case 1:a=p;break;case 4:return n.label++,{value:p[1],done:!1};case 5:n.label++,s=p[1],p=[0];continue;case 7:p=n.ops.pop(),n.trys.pop();continue;default:if(a=n.trys,!(a=a.length>0&&a[a.length-1])&&(p[0]===6||p[0]===2)){n=0;continue}if(p[0]===3&&(!a||p[1]>a[0]&&p[1]<a[3])){n.label=p[1];break}if(p[0]===6&&n.label<a[1]){n.label=a[1],a=p;break}if(a&&n.label<a[2]){n.label=a[2],n.ops.push(p);break}a[2]&&n.ops.pop(),n.trys.pop();continue}p=i.call(r,n)}catch(f){p=[6,f],s=0}finally{o=a=0}if(p[0]&5)throw p[1];return{value:p[0]?p[1]:void 0,done:!0}}},dc=function(r,i,n,o){o===void 0&&(o=n),r[o]=i[n]},rc=function(r,i){for(var n in r)n!=="default"&&!i.hasOwnProperty(n)&&(i[n]=r[n])},nn=function(r){var i=typeof Symbol=="function"&&Symbol.iterator,n=i&&r[i],o=0;if(n)return n.call(r);if(r&&typeof r.length=="number")return{next:function(){return r&&o>=r.length&&(r=void 0),{value:r&&r[o++],done:!r}}};throw new TypeError(i?"Object is not iterable.":"Symbol.iterator is not defined.")},ms=function(r,i){var n=typeof Symbol=="function"&&r[Symbol.iterator];if(!n)return r;var o=n.call(r),s,a=[],l;try{for(;(i===void 0||i-- >0)&&!(s=o.next()).done;)a.push(s.value)}catch(u){l={error:u}}finally{try{s&&!s.done&&(n=o.return)&&n.call(o)}finally{if(l)throw l.error}}return a},ic=function(){for(var r=[],i=0;i<arguments.length;i++)r=r.concat(ms(arguments[i]));return r},nc=function(){for(var r=0,i=0,n=arguments.length;i<n;i++)r+=arguments[i].length;for(var o=Array(r),s=0,i=0;i<n;i++)for(var a=arguments[i],l=0,u=a.length;l<u;l++,s++)o[s]=a[l];return o},Ht=function(r){return this instanceof Ht?(this.v=r,this):new Ht(r)},oc=function(r,i,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var o=n.apply(r,i||[]),s,a=[];return s={},l("next"),l("throw"),l("return"),s[Symbol.asyncIterator]=function(){return this},s;function l(d){o[d]&&(s[d]=function(m){return new Promise(function(y,_){a.push([d,m,y,_])>1||u(d,m)})})}function u(d,m){try{c(o[d](m))}catch(y){h(a[0][3],y)}}function c(d){d.value instanceof Ht?Promise.resolve(d.value.v).then(p,f):h(a[0][2],d)}function p(d){u("next",d)}function f(d){u("throw",d)}function h(d,m){d(m),a.shift(),a.length&&u(a[0][0],a[0][1])}},sc=function(r){var i,n;return i={},o("next"),o("throw",function(s){throw s}),o("return"),i[Symbol.iterator]=function(){return this},i;function o(s,a){i[s]=r[s]?function(l){return(n=!n)?{value:Ht(r[s](l)),done:s==="return"}:a?a(l):l}:a}},ac=function(r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var i=r[Symbol.asyncIterator],n;return i?i.call(r):(r=typeof nn=="function"?nn(r):r[Symbol.iterator](),n={},o("next"),o("throw"),o("return"),n[Symbol.asyncIterator]=function(){return this},n);function o(a){n[a]=r[a]&&function(l){return new Promise(function(u,c){l=r[a](l),s(u,c,l.done,l.value)})}}function s(a,l,u,c){Promise.resolve(c).then(function(p){a({value:p,done:u})},l)}},lc=function(r,i){return Object.defineProperty?Object.defineProperty(r,"raw",{value:i}):r.raw=i,r},uc=function(r){if(r&&r.__esModule)return r;var i={};if(r!=null)for(var n in r)Object.hasOwnProperty.call(r,n)&&(i[n]=r[n]);return i.default=r,i},cc=function(r){return r&&r.__esModule?r:{default:r}},pc=function(r,i){if(!i.has(r))throw new TypeError("attempted to get private field on non-instance");return i.get(r)},fc=function(r,i,n){if(!i.has(r))throw new TypeError("attempted to set private field on non-instance");return i.set(r,n),n},t("__extends",Gu),t("__assign",Wu),t("__rest",Yu),t("__decorate",Ju),t("__param",Xu),t("__metadata",Zu),t("__awaiter",ec),t("__generator",tc),t("__exportStar",rc),t("__createBinding",dc),t("__values",nn),t("__read",ms),t("__spread",ic),t("__spreadArrays",nc),t("__await",Ht),t("__asyncGenerator",oc),t("__asyncDelegator",sc),t("__asyncValues",ac),t("__makeTemplateObject",lc),t("__importStar",uc),t("__importDefault",cc),t("__classPrivateFieldGet",pc),t("__classPrivateFieldSet",fc)})});var Lc=ue((VC,Fc)=>{"use strict";Fc.exports=function(t,e){e||(e={}),typeof e=="function"&&(e={cmp:e});var r=typeof e.cycles=="boolean"?e.cycles:!1,i=e.cmp&&function(o){return function(s){return function(a,l){var u={key:a,value:s[a]},c={key:l,value:s[l]};return o(u,c)}}}(e.cmp),n=[];return function o(s){if(s&&s.toJSON&&typeof s.toJSON=="function"&&(s=s.toJSON()),s!==void 0){if(typeof s=="number")return isFinite(s)?""+s:"null";if(typeof s!="object")return JSON.stringify(s);var a,l;if(Array.isArray(s)){for(l="[",a=0;a<s.length;a++)a&&(l+=","),l+=o(s[a])||"null";return l+"]"}if(s===null)return"null";if(n.indexOf(s)!==-1){if(r)return JSON.stringify("__cycle__");throw new TypeError("Converting circular structure to JSON")}var u=n.push(s)-1,c=Object.keys(s).sort(i&&i(s));for(l="",a=0;a<c.length;a++){var p=c[a],f=o(s[p]);!f||(l&&(l+=","),l+=JSON.stringify(p)+":"+f)}return n.splice(u,1),"{"+l+"}"}}(t)}});var Yc=ue(En=>{"use strict";Object.defineProperty(En,"__esModule",{value:!0});En.Observable=void 0;function Us(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function zc(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function Hs(t,e,r){return e&&zc(t.prototype,e),r&&zc(t,r),t}var Ks=function(){return typeof Symbol=="function"},Qs=function(t){return Ks()&&Boolean(Symbol[t])},zs=function(t){return Qs(t)?Symbol[t]:"@@"+t};Ks()&&!Qs("observable")&&(Symbol.observable=Symbol("observable"));var lv=zs("iterator"),$s=zs("observable"),$c=zs("species");function Tn(t,e){var r=t[e];if(r!=null){if(typeof r!="function")throw new TypeError(r+" is not a function");return r}}function Zr(t){var e=t.constructor;return e!==void 0&&(e=e[$c],e===null&&(e=void 0)),e!==void 0?e:Cn}function uv(t){return t instanceof Cn}function Gt(t){Gt.log?Gt.log(t):setTimeout(function(){throw t})}function On(t){Promise.resolve().then(function(){try{t()}catch(e){Gt(e)}})}function Gc(t){var e=t._cleanup;if(e!==void 0&&(t._cleanup=void 0,!!e))try{if(typeof e=="function")e();else{var r=Tn(e,"unsubscribe");r&&r.call(e)}}catch(i){Gt(i)}}function Gs(t){t._observer=void 0,t._queue=void 0,t._state="closed"}function cv(t){var e=t._queue;if(!!e){t._queue=void 0,t._state="ready";for(var r=0;r<e.length&&(Wc(t,e[r].type,e[r].value),t._state!=="closed");++r);}}function Wc(t,e,r){t._state="running";var i=t._observer;try{var n=Tn(i,e);switch(e){case"next":n&&n.call(i,r);break;case"error":if(Gs(t),n)n.call(i,r);else throw r;break;case"complete":Gs(t),n&&n.call(i);break}}catch(o){Gt(o)}t._state==="closed"?Gc(t):t._state==="running"&&(t._state="ready")}function Ws(t,e,r){if(t._state!=="closed"){if(t._state==="buffering"){t._queue.push({type:e,value:r});return}if(t._state!=="ready"){t._state="buffering",t._queue=[{type:e,value:r}],On(function(){return cv(t)});return}Wc(t,e,r)}}var fv=function(){function t(e,r){Us(this,t),this._cleanup=void 0,this._observer=e,this._queue=void 0,this._state="initializing";var i=new pv(this);try{this._cleanup=r.call(void 0,i)}catch(n){i.error(n)}this._state==="initializing"&&(this._state="ready")}return Hs(t,[{key:"unsubscribe",value:function(){this._state!=="closed"&&(Gs(this),Gc(this))}},{key:"closed",get:function(){return this._state==="closed"}}]),t}(),pv=function(){function t(e){Us(this,t),this._subscription=e}return Hs(t,[{key:"next",value:function(r){Ws(this._subscription,"next",r)}},{key:"error",value:function(r){Ws(this._subscription,"error",r)}},{key:"complete",value:function(){Ws(this._subscription,"complete")}},{key:"closed",get:function(){return this._subscription._state==="closed"}}]),t}(),Cn=function(){function t(e){if(Us(this,t),!(this instanceof t))throw new TypeError("Observable cannot be called as a function");if(typeof e!="function")throw new TypeError("Observable initializer must be a function");this._subscriber=e}return Hs(t,[{key:"subscribe",value:function(r){return(typeof r!="object"||r===null)&&(r={next:r,error:arguments[1],complete:arguments[2]}),new fv(r,this._subscriber)}},{key:"forEach",value:function(r){var i=this;return new Promise(function(n,o){if(typeof r!="function"){o(new TypeError(r+" is not a function"));return}function s(){a.unsubscribe(),n()}var a=i.subscribe({next:function(l){try{r(l,s)}catch(u){o(u),a.unsubscribe()}},error:o,complete:n})})}},{key:"map",value:function(r){var i=this;if(typeof r!="function")throw new TypeError(r+" is not a function");var n=Zr(this);return new n(function(o){return i.subscribe({next:function(s){try{s=r(s)}catch(a){return o.error(a)}o.next(s)},error:function(s){o.error(s)},complete:function(){o.complete()}})})}},{key:"filter",value:function(r){var i=this;if(typeof r!="function")throw new TypeError(r+" is not a function");var n=Zr(this);return new n(function(o){return i.subscribe({next:function(s){try{if(!r(s))return}catch(a){return o.error(a)}o.next(s)},error:function(s){o.error(s)},complete:function(){o.complete()}})})}},{key:"reduce",value:function(r){var i=this;if(typeof r!="function")throw new TypeError(r+" is not a function");var n=Zr(this),o=arguments.length>1,s=!1,a=arguments[1],l=a;return new n(function(u){return i.subscribe({next:function(c){var p=!s;if(s=!0,!p||o)try{l=r(l,c)}catch(f){return u.error(f)}else l=c},error:function(c){u.error(c)},complete:function(){if(!s&&!o)return u.error(new TypeError("Cannot reduce an empty sequence"));u.next(l),u.complete()}})})}},{key:"concat",value:function(){for(var r=this,i=arguments.length,n=new Array(i),o=0;o<i;o++)n[o]=arguments[o];var s=Zr(this);return new s(function(a){var l,u=0;function c(p){l=p.subscribe({next:function(f){a.next(f)},error:function(f){a.error(f)},complete:function(){u===n.length?(l=void 0,a.complete()):c(s.from(n[u++]))}})}return c(r),function(){l&&(l.unsubscribe(),l=void 0)}})}},{key:"flatMap",value:function(r){var i=this;if(typeof r!="function")throw new TypeError(r+" is not a function");var n=Zr(this);return new n(function(o){var s=[],a=i.subscribe({next:function(u){if(r)try{u=r(u)}catch(p){return o.error(p)}var c=n.from(u).subscribe({next:function(p){o.next(p)},error:function(p){o.error(p)},complete:function(){var p=s.indexOf(c);p>=0&&s.splice(p,1),l()}});s.push(c)},error:function(u){o.error(u)},complete:function(){l()}});function l(){a.closed&&s.length===0&&o.complete()}return function(){s.forEach(function(u){return u.unsubscribe()}),a.unsubscribe()}})}},{key:$s,value:function(){return this}}],[{key:"from",value:function(r){var i=typeof this=="function"?this:t;if(r==null)throw new TypeError(r+" is not an object");var n=Tn(r,$s);if(n){var o=n.call(r);if(Object(o)!==o)throw new TypeError(o+" is not an object");return uv(o)&&o.constructor===i?o:new i(function(s){return o.subscribe(s)})}if(Qs("iterator")&&(n=Tn(r,lv),n))return new i(function(s){On(function(){if(!s.closed){var a=!0,l=!1,u=void 0;try{for(var c=n.call(r)[Symbol.iterator](),p;!(a=(p=c.next()).done);a=!0){var f=p.value;if(s.next(f),s.closed)return}}catch(h){l=!0,u=h}finally{try{!a&&c.return!=null&&c.return()}finally{if(l)throw u}}s.complete()}})});if(Array.isArray(r))return new i(function(s){On(function(){if(!s.closed){for(var a=0;a<r.length;++a)if(s.next(r[a]),s.closed)return;s.complete()}})});throw new TypeError(r+" is not observable")}},{key:"of",value:function(){for(var r=arguments.length,i=new Array(r),n=0;n<r;n++)i[n]=arguments[n];var o=typeof this=="function"?this:t;return new o(function(s){On(function(){if(!s.closed){for(var a=0;a<i.length;++a)if(s.next(i[a]),s.closed)return;s.complete()}})})}},{key:$c,get:function(){return this}}]),t}();En.Observable=Cn;Ks()&&Object.defineProperty(Cn,Symbol("extensions"),{value:{symbol:$s,hostReportError:Gt},configurable:!0})});var Xc=ue((uO,Jc)=>{Jc.exports=Yc().Observable});var ua=ue(An=>{"use strict";Object.defineProperty(An,"__esModule",{value:!0});An.default=void 0;var Sv=typeof Symbol=="function"&&typeof Symbol.for=="function"?Symbol.for("nodejs.util.inspect.custom"):void 0,Ev=Sv;An.default=Ev});var op=ue(ca=>{"use strict";Object.defineProperty(ca,"__esModule",{value:!0});ca.default=Tv;var Ov=Cv(ua());function Cv(t){return t&&t.__esModule?t:{default:t}}function Dn(t){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?Dn=function(r){return typeof r}:Dn=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},Dn(t)}var Pv=10,np=2;function Tv(t){return Nn(t,[])}function Nn(t,e){switch(Dn(t)){case"string":return JSON.stringify(t);case"function":return t.name?"[function ".concat(t.name,"]"):"[function]";case"object":return t===null?"null":kv(t,e);default:return String(t)}}function kv(t,e){if(e.indexOf(t)!==-1)return"[Circular]";var r=[].concat(e,[t]),i=Nv(t);if(i!==void 0){var n=i.call(t);if(n!==t)return typeof n=="string"?n:Nn(n,r)}else if(Array.isArray(t))return Dv(t,r);return Av(t,r)}function Av(t,e){var r=Object.keys(t);if(r.length===0)return"{}";if(e.length>np)return"["+Iv(t)+"]";var i=r.map(function(n){var o=Nn(t[n],e);return n+": "+o});return"{ "+i.join(", ")+" }"}function Dv(t,e){if(t.length===0)return"[]";if(e.length>np)return"[Array]";for(var r=Math.min(Pv,t.length),i=t.length-r,n=[],o=0;o<r;++o)n.push(Nn(t[o],e));return i===1?n.push("... 1 more item"):i>1&&n.push("... ".concat(i," more items")),"["+n.join(", ")+"]"}function Nv(t){var e=t[String(Ov.default)];if(typeof e=="function")return e;if(typeof t.inspect=="function")return t.inspect}function Iv(t){var e=Object.prototype.toString.call(t).replace(/^\[object /,"").replace(/]$/,"");if(e==="Object"&&typeof t.constructor=="function"){var r=t.constructor.name;if(typeof r=="string"&&r!=="")return r}return e}});var sp=ue(pa=>{"use strict";Object.defineProperty(pa,"__esModule",{value:!0});pa.default=Mv;function Mv(t,e){var r=Boolean(t);if(!r)throw new Error(e??"Unexpected invariant triggered.")}});var up=ue(fa=>{"use strict";Object.defineProperty(fa,"__esModule",{value:!0});fa.default=Rv;var jv=ap(sp()),lp=ap(ua());function ap(t){return t&&t.__esModule?t:{default:t}}function Rv(t){var e=t.prototype.toJSON;typeof e=="function"||(0,jv.default)(0),t.prototype.inspect=e,lp.default&&(t.prototype[lp.default]=e)}});var dp=ue(St=>{"use strict";Object.defineProperty(St,"__esModule",{value:!0});St.isNode=Fv;St.Token=St.Location=void 0;var cp=Lv(up());function Lv(t){return t&&t.__esModule?t:{default:t}}var pp=function(){function t(r,i,n){this.start=r.start,this.end=i.end,this.startToken=r,this.endToken=i,this.source=n}var e=t.prototype;return e.toJSON=function(){return{start:this.start,end:this.end}},t}();St.Location=pp;(0,cp.default)(pp);var fp=function(){function t(r,i,n,o,s,a,l){this.kind=r,this.start=i,this.end=n,this.line=o,this.column=s,this.value=l,this.prev=a,this.next=null}var e=t.prototype;return e.toJSON=function(){return{kind:this.kind,value:this.value,line:this.line,column:this.column}},t}();St.Token=fp;(0,cp.default)(fp);function Fv(t){return t!=null&&typeof t.kind=="string"}});var yp=ue(Be=>{"use strict";Object.defineProperty(Be,"__esModule",{value:!0});Be.visit=Vv;Be.visitInParallel=Bv;Be.getVisitFn=In;Be.BREAK=Be.QueryDocumentKeys=void 0;var Uv=qv(op()),hp=dp();function qv(t){return t&&t.__esModule?t:{default:t}}var mp={Name:[],Document:["definitions"],OperationDefinition:["name","variableDefinitions","directives","selectionSet"],VariableDefinition:["variable","type","defaultValue","directives"],Variable:["name"],SelectionSet:["selections"],Field:["alias","name","arguments","directives","selectionSet"],Argument:["name","value"],FragmentSpread:["name","directives"],InlineFragment:["typeCondition","directives","selectionSet"],FragmentDefinition:["name","variableDefinitions","typeCondition","directives","selectionSet"],IntValue:[],FloatValue:[],StringValue:[],BooleanValue:[],NullValue:[],EnumValue:[],ListValue:["values"],ObjectValue:["fields"],ObjectField:["name","value"],Directive:["name","arguments"],NamedType:["name"],ListType:["type"],NonNullType:["type"],SchemaDefinition:["description","directives","operationTypes"],OperationTypeDefinition:["type"],ScalarTypeDefinition:["description","name","directives"],ObjectTypeDefinition:["description","name","interfaces","directives","fields"],FieldDefinition:["description","name","arguments","type","directives"],InputValueDefinition:["description","name","type","defaultValue","directives"],InterfaceTypeDefinition:["description","name","interfaces","directives","fields"],UnionTypeDefinition:["description","name","directives","types"],EnumTypeDefinition:["description","name","directives","values"],EnumValueDefinition:["description","name","directives"],InputObjectTypeDefinition:["description","name","directives","fields"],DirectiveDefinition:["description","name","arguments","locations"],SchemaExtension:["directives","operationTypes"],ScalarTypeExtension:["name","directives"],ObjectTypeExtension:["name","interfaces","directives","fields"],InterfaceTypeExtension:["name","interfaces","directives","fields"],UnionTypeExtension:["name","directives","types"],EnumTypeExtension:["name","directives","values"],InputObjectTypeExtension:["name","directives","fields"]};Be.QueryDocumentKeys=mp;var tr=Object.freeze({});Be.BREAK=tr;function Vv(t,e){var r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:mp,i=void 0,n=Array.isArray(t),o=[t],s=-1,a=[],l=void 0,u=void 0,c=void 0,p=[],f=[],h=t;do{s++;var d=s===o.length,m=d&&a.length!==0;if(d){if(u=f.length===0?void 0:p[p.length-1],l=c,c=f.pop(),m){if(n)l=l.slice();else{for(var y={},_=0,w=Object.keys(l);_<w.length;_++){var S=w[_];y[S]=l[S]}l=y}for(var C=0,E=0;E<a.length;E++){var k=a[E][0],O=a[E][1];n&&(k-=C),n&&O===null?(l.splice(k,1),C++):l[k]=O}}s=i.index,o=i.keys,a=i.edits,n=i.inArray,i=i.prev}else{if(u=c?n?s:o[s]:void 0,l=c?c[u]:h,l==null)continue;c&&p.push(u)}var A=void 0;if(!Array.isArray(l)){if(!(0,hp.isNode)(l))throw new Error("Invalid AST Node: ".concat((0,Uv.default)(l),"."));var H=In(e,l.kind,d);if(H){if(A=H.call(e,l,u,c,p,f),A===tr)break;if(A===!1){if(!d){p.pop();continue}}else if(A!==void 0&&(a.push([u,A]),!d))if((0,hp.isNode)(A))l=A;else{p.pop();continue}}}if(A===void 0&&m&&a.push([u,l]),d)p.pop();else{var J;i={inArray:n,index:s,keys:o,edits:a,prev:i},n=Array.isArray(l),o=n?l:(J=r[l.kind])!==null&&J!==void 0?J:[],s=-1,a=[],c&&f.push(c),c=l}}while(i!==void 0);return a.length!==0&&(h=a[a.length-1][1]),h}function Bv(t){var e=new Array(t.length);return{enter:function(i){for(var n=0;n<t.length;n++)if(e[n]==null){var o=In(t[n],i.kind,!1);if(o){var s=o.apply(t[n],arguments);if(s===!1)e[n]=i;else if(s===tr)e[n]=tr;else if(s!==void 0)return s}}},leave:function(i){for(var n=0;n<t.length;n++)if(e[n]==null){var o=In(t[n],i.kind,!0);if(o){var s=o.apply(t[n],arguments);if(s===tr)e[n]=tr;else if(s!==void 0&&s!==!1)return s}}else e[n]===i&&(e[n]=null)}}}function In(t,e,r){var i=t[e];if(i){if(!r&&typeof i=="function")return i;var n=r?i.leave:i.enter;if(typeof n=="function")return n}else{var o=r?t.leave:t.enter;if(o){if(typeof o=="function")return o;var s=o[e];if(typeof s=="function")return s}}}});var wf=ue((tN,Qn)=>{var tf,rf,nf,of,sf,af,lf,uf,cf,zn,Da,pf,ff,cr,df,hf,mf,yf,vf,_f,gf,bf,xf;(function(t){var e=typeof global=="object"?global:typeof self=="object"?self:typeof this=="object"?this:{};typeof define=="function"&&define.amd?define("tslib",["exports"],function(i){t(r(e,r(i)))}):typeof Qn=="object"&&typeof Qn.exports=="object"?t(r(e,r(Qn.exports))):t(r(e));function r(i,n){return i!==e&&(typeof Object.create=="function"?Object.defineProperty(i,"__esModule",{value:!0}):i.__esModule=!0),function(o,s){return i[o]=n?n(o,s):s}}})(function(t){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(r,i){r.__proto__=i}||function(r,i){for(var n in i)i.hasOwnProperty(n)&&(r[n]=i[n])};tf=function(r,i){e(r,i);function n(){this.constructor=r}r.prototype=i===null?Object.create(i):(n.prototype=i.prototype,new n)},rf=Object.assign||function(r){for(var i,n=1,o=arguments.length;n<o;n++){i=arguments[n];for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(r[s]=i[s])}return r},nf=function(r,i){var n={};for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&i.indexOf(o)<0&&(n[o]=r[o]);if(r!=null&&typeof Object.getOwnPropertySymbols=="function")for(var s=0,o=Object.getOwnPropertySymbols(r);s<o.length;s++)i.indexOf(o[s])<0&&Object.prototype.propertyIsEnumerable.call(r,o[s])&&(n[o[s]]=r[o[s]]);return n},of=function(r,i,n,o){var s=arguments.length,a=s<3?i:o===null?o=Object.getOwnPropertyDescriptor(i,n):o,l;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")a=Reflect.decorate(r,i,n,o);else for(var u=r.length-1;u>=0;u--)(l=r[u])&&(a=(s<3?l(a):s>3?l(i,n,a):l(i,n))||a);return s>3&&a&&Object.defineProperty(i,n,a),a},sf=function(r,i){return function(n,o){i(n,o,r)}},af=function(r,i){if(typeof Reflect=="object"&&typeof Reflect.metadata=="function")return Reflect.metadata(r,i)},lf=function(r,i,n,o){function s(a){return a instanceof n?a:new n(function(l){l(a)})}return new(n||(n=Promise))(function(a,l){function u(f){try{p(o.next(f))}catch(h){l(h)}}function c(f){try{p(o.throw(f))}catch(h){l(h)}}function p(f){f.done?a(f.value):s(f.value).then(u,c)}p((o=o.apply(r,i||[])).next())})},uf=function(r,i){var n={label:0,sent:function(){if(a[0]&1)throw a[1];return a[1]},trys:[],ops:[]},o,s,a,l;return l={next:u(0),throw:u(1),return:u(2)},typeof Symbol=="function"&&(l[Symbol.iterator]=function(){return this}),l;function u(p){return function(f){return c([p,f])}}function c(p){if(o)throw new TypeError("Generator is already executing.");for(;n;)try{if(o=1,s&&(a=p[0]&2?s.return:p[0]?s.throw||((a=s.return)&&a.call(s),0):s.next)&&!(a=a.call(s,p[1])).done)return a;switch(s=0,a&&(p=[p[0]&2,a.value]),p[0]){case 0:case 1:a=p;break;case 4:return n.label++,{value:p[1],done:!1};case 5:n.label++,s=p[1],p=[0];continue;case 7:p=n.ops.pop(),n.trys.pop();continue;default:if(a=n.trys,!(a=a.length>0&&a[a.length-1])&&(p[0]===6||p[0]===2)){n=0;continue}if(p[0]===3&&(!a||p[1]>a[0]&&p[1]<a[3])){n.label=p[1];break}if(p[0]===6&&n.label<a[1]){n.label=a[1],a=p;break}if(a&&n.label<a[2]){n.label=a[2],n.ops.push(p);break}a[2]&&n.ops.pop(),n.trys.pop();continue}p=i.call(r,n)}catch(f){p=[6,f],s=0}finally{o=a=0}if(p[0]&5)throw p[1];return{value:p[0]?p[1]:void 0,done:!0}}},xf=function(r,i,n,o){o===void 0&&(o=n),r[o]=i[n]},cf=function(r,i){for(var n in r)n!=="default"&&!i.hasOwnProperty(n)&&(i[n]=r[n])},zn=function(r){var i=typeof Symbol=="function"&&Symbol.iterator,n=i&&r[i],o=0;if(n)return n.call(r);if(r&&typeof r.length=="number")return{next:function(){return r&&o>=r.length&&(r=void 0),{value:r&&r[o++],done:!r}}};throw new TypeError(i?"Object is not iterable.":"Symbol.iterator is not defined.")},Da=function(r,i){var n=typeof Symbol=="function"&&r[Symbol.iterator];if(!n)return r;var o=n.call(r),s,a=[],l;try{for(;(i===void 0||i-- >0)&&!(s=o.next()).done;)a.push(s.value)}catch(u){l={error:u}}finally{try{s&&!s.done&&(n=o.return)&&n.call(o)}finally{if(l)throw l.error}}return a},pf=function(){for(var r=[],i=0;i<arguments.length;i++)r=r.concat(Da(arguments[i]));return r},ff=function(){for(var r=0,i=0,n=arguments.length;i<n;i++)r+=arguments[i].length;for(var o=Array(r),s=0,i=0;i<n;i++)for(var a=arguments[i],l=0,u=a.length;l<u;l++,s++)o[s]=a[l];return o},cr=function(r){return this instanceof cr?(this.v=r,this):new cr(r)},df=function(r,i,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var o=n.apply(r,i||[]),s,a=[];return s={},l("next"),l("throw"),l("return"),s[Symbol.asyncIterator]=function(){return this},s;function l(d){o[d]&&(s[d]=function(m){return new Promise(function(y,_){a.push([d,m,y,_])>1||u(d,m)})})}function u(d,m){try{c(o[d](m))}catch(y){h(a[0][3],y)}}function c(d){d.value instanceof cr?Promise.resolve(d.value.v).then(p,f):h(a[0][2],d)}function p(d){u("next",d)}function f(d){u("throw",d)}function h(d,m){d(m),a.shift(),a.length&&u(a[0][0],a[0][1])}},hf=function(r){var i,n;return i={},o("next"),o("throw",function(s){throw s}),o("return"),i[Symbol.iterator]=function(){return this},i;function o(s,a){i[s]=r[s]?function(l){return(n=!n)?{value:cr(r[s](l)),done:s==="return"}:a?a(l):l}:a}},mf=function(r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var i=r[Symbol.asyncIterator],n;return i?i.call(r):(r=typeof zn=="function"?zn(r):r[Symbol.iterator](),n={},o("next"),o("throw"),o("return"),n[Symbol.asyncIterator]=function(){return this},n);function o(a){n[a]=r[a]&&function(l){return new Promise(function(u,c){l=r[a](l),s(u,c,l.done,l.value)})}}function s(a,l,u,c){Promise.resolve(c).then(function(p){a({value:p,done:u})},l)}},yf=function(r,i){return Object.defineProperty?Object.defineProperty(r,"raw",{value:i}):r.raw=i,r},vf=function(r){if(r&&r.__esModule)return r;var i={};if(r!=null)for(var n in r)Object.hasOwnProperty.call(r,n)&&(i[n]=r[n]);return i.default=r,i},_f=function(r){return r&&r.__esModule?r:{default:r}},gf=function(r,i){if(!i.has(r))throw new TypeError("attempted to get private field on non-instance");return i.get(r)},bf=function(r,i,n){if(!i.has(r))throw new TypeError("attempted to set private field on non-instance");return i.set(r,n),n},t("__extends",tf),t("__assign",rf),t("__rest",nf),t("__decorate",of),t("__param",sf),t("__metadata",af),t("__awaiter",lf),t("__generator",uf),t("__exportStar",cf),t("__createBinding",xf),t("__values",zn),t("__read",Da),t("__spread",pf),t("__spreadArrays",ff),t("__await",cr),t("__asyncGenerator",df),t("__asyncDelegator",hf),t("__asyncValues",mf),t("__makeTemplateObject",yf),t("__importStar",vf),t("__importDefault",_f),t("__classPrivateFieldGet",gf),t("__classPrivateFieldSet",bf)})});var Cd=ue((pi,dr)=>{var X_=200,Z_="Expected a function",za="__lodash_hash_undefined__",Zn=1,hr=2,Kf=1/0,Qf=9007199254740991,eo="[object Arguments]",$a="[object Array]",zf="[object Boolean]",$f="[object Date]",Gf="[object Error]",Wf="[object Function]",eg="[object GeneratorFunction]",to="[object Map]",Yf="[object Number]",mr="[object Object]",Jf="[object Promise]",Xf="[object RegExp]",ro="[object Set]",Zf="[object String]",ed="[object Symbol]",Ga="[object WeakMap]",td="[object ArrayBuffer]",io="[object DataView]",tg="[object Float32Array]",rg="[object Float64Array]",ig="[object Int8Array]",ng="[object Int16Array]",og="[object Int32Array]",sg="[object Uint8Array]",ag="[object Uint8ClampedArray]",lg="[object Uint16Array]",ug="[object Uint32Array]",cg=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,pg=/^\w*$/,fg=/^\./,dg=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,hg=/[\\^$.*+?()[\]{}|]/g,mg=/\\(\\)?/g,yg=/^\[object .+?Constructor\]$/,vg=/^(?:0|[1-9]\d*)$/,L={};L[tg]=L[rg]=L[ig]=L[ng]=L[og]=L[sg]=L[ag]=L[lg]=L[ug]=!0;L[eo]=L[$a]=L[td]=L[zf]=L[io]=L[$f]=L[Gf]=L[Wf]=L[to]=L[Yf]=L[mr]=L[Xf]=L[ro]=L[Zf]=L[Ga]=!1;var rd=typeof global=="object"&&global&&global.Object===Object&&global,_g=typeof self=="object"&&self&&self.Object===Object&&self,nt=rd||_g||Function("return this")(),id=typeof pi=="object"&&pi&&!pi.nodeType&&pi,nd=id&&typeof dr=="object"&&dr&&!dr.nodeType&&dr,gg=nd&&nd.exports===id,od=gg&&rd.process,sd=function(){try{return od&&od.binding("util")}catch(t){}}(),ad=sd&&sd.isTypedArray;function ld(t,e){for(var r=-1,i=e.length,n=t.length;++r<i;)t[n+r]=e[r];return t}function bg(t,e){for(var r=-1,i=t?t.length:0;++r<i;)if(e(t[r],r,t))return!0;return!1}function xg(t){return function(e){return e==null?void 0:e[t]}}function wg(t,e){for(var r=-1,i=Array(t);++r<t;)i[r]=e(r);return i}function Sg(t){return function(e){return t(e)}}function Eg(t,e){return t==null?void 0:t[e]}function Wa(t){var e=!1;if(t!=null&&typeof t.toString!="function")try{e=!!(t+"")}catch(r){}return e}function Tg(t){var e=-1,r=Array(t.size);return t.forEach(function(i,n){r[++e]=[n,i]}),r}function Ya(t,e){return function(r){return t(e(r))}}function Cg(t){var e=-1,r=Array(t.size);return t.forEach(function(i){r[++e]=i}),r}var Og=Array.prototype,Pg=Function.prototype,no=Object.prototype,Ja=nt["__core-js_shared__"],ud=function(){var t=/[^.]+$/.exec(Ja&&Ja.keys&&Ja.keys.IE_PROTO||"");return t?"Symbol(src)_1."+t:""}(),cd=Pg.toString,Ce=no.hasOwnProperty,yr=no.toString,kg=RegExp("^"+cd.call(Ce).replace(hg,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),pd=nt.Symbol,fd=nt.Uint8Array,Ag=Ya(Object.getPrototypeOf,Object),Dg=no.propertyIsEnumerable,Ng=Og.splice,Xa=Object.getOwnPropertySymbols,Ig=Ya(Object.keys,Object),Za=vr(nt,"DataView"),fi=vr(nt,"Map"),el=vr(nt,"Promise"),tl=vr(nt,"Set"),rl=vr(nt,"WeakMap"),di=vr(Object,"create"),Mg=Ot(Za),Rg=Ot(fi),jg=Ot(el),Fg=Ot(tl),Lg=Ot(rl),oo=pd?pd.prototype:void 0,il=oo?oo.valueOf:void 0,dd=oo?oo.toString:void 0;function Pt(t){var e=-1,r=t?t.length:0;for(this.clear();++e<r;){var i=t[e];this.set(i[0],i[1])}}function Vg(){this.__data__=di?di(null):{}}function Bg(t){return this.has(t)&&delete this.__data__[t]}function qg(t){var e=this.__data__;if(di){var r=e[t];return r===za?void 0:r}return Ce.call(e,t)?e[t]:void 0}function Ug(t){var e=this.__data__;return di?e[t]!==void 0:Ce.call(e,t)}function Hg(t,e){var r=this.__data__;return r[t]=di&&e===void 0?za:e,this}Pt.prototype.clear=Vg;Pt.prototype.delete=Bg;Pt.prototype.get=qg;Pt.prototype.has=Ug;Pt.prototype.set=Hg;function He(t){var e=-1,r=t?t.length:0;for(this.clear();++e<r;){var i=t[e];this.set(i[0],i[1])}}function Kg(){this.__data__=[]}function Qg(t){var e=this.__data__,r=so(e,t);if(r<0)return!1;var i=e.length-1;return r==i?e.pop():Ng.call(e,r,1),!0}function zg(t){var e=this.__data__,r=so(e,t);return r<0?void 0:e[r][1]}function $g(t){return so(this.__data__,t)>-1}function Gg(t,e){var r=this.__data__,i=so(r,t);return i<0?r.push([t,e]):r[i][1]=e,this}He.prototype.clear=Kg;He.prototype.delete=Qg;He.prototype.get=zg;He.prototype.has=$g;He.prototype.set=Gg;function Ke(t){var e=-1,r=t?t.length:0;for(this.clear();++e<r;){var i=t[e];this.set(i[0],i[1])}}function Wg(){this.__data__={hash:new Pt,map:new(fi||He),string:new Pt}}function Yg(t){return ao(this,t).delete(t)}function Jg(t){return ao(this,t).get(t)}function Xg(t){return ao(this,t).has(t)}function Zg(t,e){return ao(this,t).set(t,e),this}Ke.prototype.clear=Wg;Ke.prototype.delete=Yg;Ke.prototype.get=Jg;Ke.prototype.has=Xg;Ke.prototype.set=Zg;function lo(t){var e=-1,r=t?t.length:0;for(this.__data__=new Ke;++e<r;)this.add(t[e])}function eb(t){return this.__data__.set(t,za),this}function tb(t){return this.__data__.has(t)}lo.prototype.add=lo.prototype.push=eb;lo.prototype.has=tb;function Qe(t){this.__data__=new He(t)}function rb(){this.__data__=new He}function ib(t){return this.__data__.delete(t)}function nb(t){return this.__data__.get(t)}function ob(t){return this.__data__.has(t)}function sb(t,e){var r=this.__data__;if(r instanceof He){var i=r.__data__;if(!fi||i.length<X_-1)return i.push([t,e]),this;r=this.__data__=new Ke(i)}return r.set(t,e),this}Qe.prototype.clear=rb;Qe.prototype.delete=ib;Qe.prototype.get=nb;Qe.prototype.has=ob;Qe.prototype.set=sb;function yd(t,e){var r=ot(t)||md(t)?wg(t.length,String):[],i=r.length,n=!!i;for(var o in t)(e||Ce.call(t,o))&&!(n&&(o=="length"||hd(o,i)))&&r.push(o);return r}function so(t,e){for(var r=t.length;r--;)if(vd(t[r][0],e))return r;return-1}function gd(t,e){e=uo(e,t)?[e]:_d(e);for(var r=0,i=e.length;t!=null&&r<i;)t=t[co(e[r++])];return r&&r==i?t:void 0}function ab(t,e,r){var i=e(t);return ot(t)?i:ld(i,r(t))}function lb(t){return yr.call(t)}function ub(t,e){return t!=null&&e in Object(t)}function nl(t,e,r,i,n){return t===e?!0:t==null||e==null||!hi(t)&&!po(e)?t!==t&&e!==e:cb(t,e,nl,r,i,n)}function cb(t,e,r,i,n,o){var s=ot(t),a=ot(e),l=$a,u=$a;s||(l=st(t),l=l==eo?mr:l),a||(u=st(e),u=u==eo?mr:u);var c=l==mr&&!Wa(t),p=u==mr&&!Wa(e),f=l==u;if(f&&!c)return o||(o=new Qe),s||db(t)?bd(t,e,r,i,n,o):pb(t,e,l,r,i,n,o);if(!(n&hr)){var h=c&&Ce.call(t,"__wrapped__"),d=p&&Ce.call(e,"__wrapped__");if(h||d){var m=h?t.value():t,y=d?e.value():e;return o||(o=new Qe),r(m,y,i,n,o)}}return f?(o||(o=new Qe),fb(t,e,r,i,n,o)):!1}function hb(t,e,r,i){var n=r.length,o=n,s=!i;if(t==null)return!o;for(t=Object(t);n--;){var a=r[n];if(s&&a[2]?a[1]!==t[a[0]]:!(a[0]in t))return!1}for(;++n<o;){a=r[n];var l=a[0],u=t[l],c=a[1];if(s&&a[2]){if(u===void 0&&!(l in t))return!1}else{var p=new Qe;if(i)var f=i(u,c,l,t,e,p);if(!(f===void 0?nl(c,u,i,Zn|hr,p):f))return!1}}return!0}function yb(t){if(!hi(t)||mb(t))return!1;var e=xd(t)||Wa(t)?kg:yg;return e.test(Ot(t))}function vb(t){return po(t)&&ol(t.length)&&!!L[yr.call(t)]}function wb(t){return typeof t=="function"?t:t==null?bb:typeof t=="object"?ot(t)?gb(t[0],t[1]):_b(t):xb(t)}function Sb(t){if(!wd(t))return Ig(t);var e=[];for(var r in Object(t))Ce.call(t,r)&&r!="constructor"&&e.push(r);return e}function Tb(t){if(!hi(t))return Eb(t);var e=wd(t),r=[];for(var i in t)i=="constructor"&&(e||!Ce.call(t,i))||r.push(i);return r}function _b(t){var e=Cb(t);return e.length==1&&e[0][2]?Sd(e[0][0],e[0][1]):function(r){return r===t||hb(r,t,e)}}function gb(t,e){return uo(t)&&Ed(e)?Sd(co(t),e):function(r){var i=Ob(r,t);return i===void 0&&i===e?Pb(r,t):nl(e,i,void 0,Zn|hr)}}function kb(t,e,r){for(var i=-1,n=e.length,o={};++i<n;){var s=e[i],a=t[s];r(a,s)&&(o[s]=a)}return o}function Ab(t){return function(e){return gd(e,t)}}function Db(t){if(typeof t=="string")return t;if(sl(t))return dd?dd.call(t):"";var e=t+"";return e=="0"&&1/t==-Kf?"-0":e}function _d(t){return ot(t)?t:Nb(t)}function bd(t,e,r,i,n,o){var s=n&hr,a=t.length,l=e.length;if(a!=l&&!(s&&l>a))return!1;var u=o.get(t);if(u&&o.get(e))return u==e;var c=-1,p=!0,f=n&Zn?new lo:void 0;for(o.set(t,e),o.set(e,t);++c<a;){var h=t[c],d=e[c];if(i)var m=s?i(d,h,c,e,t,o):i(h,d,c,t,e,o);if(m!==void 0){if(m)continue;p=!1;break}if(f){if(!bg(e,function(y,_){if(!f.has(_)&&(h===y||r(h,y,i,n,o)))return f.add(_)})){p=!1;break}}else if(!(h===d||r(h,d,i,n,o))){p=!1;break}}return o.delete(t),o.delete(e),p}function pb(t,e,r,i,n,o,s){switch(r){case io:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case td:return!(t.byteLength!=e.byteLength||!i(new fd(t),new fd(e)));case zf:case $f:case Yf:return vd(+t,+e);case Gf:return t.name==e.name&&t.message==e.message;case Xf:case Zf:return t==e+"";case to:var a=Tg;case ro:var l=o&hr;if(a||(a=Cg),t.size!=e.size&&!l)return!1;var u=s.get(t);if(u)return u==e;o|=Zn,s.set(t,e);var c=bd(a(t),a(e),i,n,o,s);return s.delete(t),c;case ed:if(il)return il.call(t)==il.call(e)}return!1}function fb(t,e,r,i,n,o){var s=n&hr,a=al(t),l=a.length,u=al(e),c=u.length;if(l!=c&&!s)return!1;for(var p=l;p--;){var f=a[p];if(!(s?f in e:Ce.call(e,f)))return!1}var h=o.get(t);if(h&&o.get(e))return h==e;var d=!0;o.set(t,e),o.set(e,t);for(var m=s;++p<l;){f=a[p];var y=t[f],_=e[f];if(i)var w=s?i(_,y,f,e,t,o):i(y,_,f,t,e,o);if(!(w===void 0?y===_||r(y,_,i,n,o):w)){d=!1;break}m||(m=f=="constructor")}if(d&&!m){var S=t.constructor,C=e.constructor;S!=C&&"constructor"in t&&"constructor"in e&&!(typeof S=="function"&&S instanceof S&&typeof C=="function"&&C instanceof C)&&(d=!1)}return o.delete(t),o.delete(e),d}function Rb(t){return ab(t,Mb,Ib)}function ao(t,e){var r=t.__data__;return jb(e)?r[typeof e=="string"?"string":"hash"]:r.map}function Cb(t){for(var e=al(t),r=e.length;r--;){var i=e[r],n=t[i];e[r]=[i,n,Ed(n)]}return e}function vr(t,e){var r=Eg(t,e);return yb(r)?r:void 0}var Fb=Xa?Ya(Xa,Object):Td,Ib=Xa?function(t){for(var e=[];t;)ld(e,Fb(t)),t=Ag(t);return e}:Td,st=lb;(Za&&st(new Za(new ArrayBuffer(1)))!=io||fi&&st(new fi)!=to||el&&st(el.resolve())!=Jf||tl&&st(new tl)!=ro||rl&&st(new rl)!=Ga)&&(st=function(t){var e=yr.call(t),r=e==mr?t.constructor:void 0,i=r?Ot(r):void 0;if(i)switch(i){case Mg:return io;case Rg:return to;case jg:return Jf;case Fg:return ro;case Lg:return Ga}return e});function Lb(t,e,r){e=uo(e,t)?[e]:_d(e);for(var i,n=-1,o=e.length;++n<o;){var s=co(e[n]);if(!(i=t!=null&&r(t,s)))break;t=t[s]}if(i)return i;var o=t?t.length:0;return!!o&&ol(o)&&hd(s,o)&&(ot(t)||md(t))}function hd(t,e){return e=e??Qf,!!e&&(typeof t=="number"||vg.test(t))&&t>-1&&t%1==0&&t<e}function uo(t,e){if(ot(t))return!1;var r=typeof t;return r=="number"||r=="symbol"||r=="boolean"||t==null||sl(t)?!0:pg.test(t)||!cg.test(t)||e!=null&&t in Object(e)}function jb(t){var e=typeof t;return e=="string"||e=="number"||e=="symbol"||e=="boolean"?t!=="__proto__":t===null}function mb(t){return!!ud&&ud in t}function wd(t){var e=t&&t.constructor,r=typeof e=="function"&&e.prototype||no;return t===r}function Ed(t){return t===t&&!hi(t)}function Sd(t,e){return function(r){return r==null?!1:r[t]===e&&(e!==void 0||t in Object(r))}}function Eb(t){var e=[];if(t!=null)for(var r in Object(t))e.push(r);return e}var Nb=ll(function(t){t=Vb(t);var e=[];return fg.test(t)&&e.push(""),t.replace(dg,function(r,i,n,o){e.push(n?o.replace(mg,"$1"):i||r)}),e});function co(t){if(typeof t=="string"||sl(t))return t;var e=t+"";return e=="0"&&1/t==-Kf?"-0":e}function Ot(t){if(t!=null){try{return cd.call(t)}catch(e){}try{return t+""}catch(e){}}return""}function ll(t,e){if(typeof t!="function"||e&&typeof e!="function")throw new TypeError(Z_);var r=function(){var i=arguments,n=e?e.apply(this,i):i[0],o=r.cache;if(o.has(n))return o.get(n);var s=t.apply(this,i);return r.cache=o.set(n,s),s};return r.cache=new(ll.Cache||Ke),r}ll.Cache=Ke;function vd(t,e){return t===e||t!==t&&e!==e}function md(t){return Bb(t)&&Ce.call(t,"callee")&&(!Dg.call(t,"callee")||yr.call(t)==eo)}var ot=Array.isArray;function ul(t){return t!=null&&ol(t.length)&&!xd(t)}function Bb(t){return po(t)&&ul(t)}function xd(t){var e=hi(t)?yr.call(t):"";return e==Wf||e==eg}function ol(t){return typeof t=="number"&&t>-1&&t%1==0&&t<=Qf}function hi(t){var e=typeof t;return!!t&&(e=="object"||e=="function")}function po(t){return!!t&&typeof t=="object"}function sl(t){return typeof t=="symbol"||po(t)&&yr.call(t)==ed}var db=ad?Sg(ad):vb;function Vb(t){return t==null?"":Db(t)}function Ob(t,e,r){var i=t==null?void 0:gd(t,e);return i===void 0?r:i}function Pb(t,e){return t!=null&&Lb(t,e,ub)}function al(t){return ul(t)?yd(t):Sb(t)}function Mb(t){return ul(t)?yd(t,!0):Tb(t)}function qb(t,e){return t==null?{}:kb(t,Rb(t),wb(e))}function bb(t){return t}function xb(t){return uo(t)?xg(co(t)):Ab(t)}function Td(){return[]}dr.exports=qb});var du=new WeakMap,Go=t=>(...e)=>{let r=t(...e);return du.set(r,!0),r},ht=t=>typeof t=="function"&&du.has(t);var Wo=typeof window!="undefined"&&window.customElements!=null&&window.customElements.polyfillWrapFlushCallback!==void 0;var jr=(t,e,r=null)=>{for(;e!==r;){let i=e.nextSibling;t.removeChild(e),e=i}};var ce={},Bi={};var we=`{{lit-${String(Math.random()).slice(2)}}}`,Yo=`<!--${we}-->`,hu=new RegExp(`${we}|${Yo}`),Vt="$lit$",qi=class{constructor(e,r){this.parts=[],this.element=r;let i=[],n=[],o=document.createTreeWalker(r.content,133,null,!1),s=0,a=-1,l=0,{strings:u,values:{length:c}}=e;for(;l<c;){let p=o.nextNode();if(p===null){o.currentNode=n.pop();continue}if(a++,p.nodeType===1){if(p.hasAttributes()){let f=p.attributes,{length:h}=f,d=0;for(let m=0;m<h;m++)mu(f[m].name,Vt)&&d++;for(;d-- >0;){let m=u[l],y=Ui.exec(m)[2],_=y.toLowerCase()+Vt,w=p.getAttribute(_);p.removeAttribute(_);let S=w.split(hu);this.parts.push({type:"attribute",index:a,name:y,strings:S}),l+=S.length-1}}p.tagName==="TEMPLATE"&&(n.push(p),o.currentNode=p.content)}else if(p.nodeType===3){let f=p.data;if(f.indexOf(we)>=0){let h=p.parentNode,d=f.split(hu),m=d.length-1;for(let y=0;y<m;y++){let _,w=d[y];if(w==="")_=Se();else{let S=Ui.exec(w);S!==null&&mu(S[2],Vt)&&(w=w.slice(0,S.index)+S[1]+S[2].slice(0,-Vt.length)+S[3]),_=document.createTextNode(w)}h.insertBefore(_,p),this.parts.push({type:"node",index:++a})}d[m]===""?(h.insertBefore(Se(),p),i.push(p)):p.data=d[m],l+=m}}else if(p.nodeType===8)if(p.data===we){let f=p.parentNode;(p.previousSibling===null||a===s)&&(a++,f.insertBefore(Se(),p)),s=a,this.parts.push({type:"node",index:a}),p.nextSibling===null?p.data="":(i.push(p),a--),l++}else{let f=-1;for(;(f=p.data.indexOf(we,f+1))!==-1;)this.parts.push({type:"node",index:-1}),l++}}for(let p of i)p.parentNode.removeChild(p)}},mu=(t,e)=>{let r=t.length-e.length;return r>=0&&t.slice(r)===e},Jo=t=>t.index!==-1,Se=()=>document.createComment(""),Ui=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;var Fr=class{constructor(e,r,i){this.__parts=[],this.template=e,this.processor=r,this.options=i}update(e){let r=0;for(let i of this.__parts)i!==void 0&&i.setValue(e[r]),r++;for(let i of this.__parts)i!==void 0&&i.commit()}_clone(){let e=Wo?this.template.element.content.cloneNode(!0):document.importNode(this.template.element.content,!0),r=[],i=this.template.parts,n=document.createTreeWalker(e,133,null,!1),o=0,s=0,a,l=n.nextNode();for(;o<i.length;){if(a=i[o],!Jo(a)){this.__parts.push(void 0),o++;continue}for(;s<a.index;)s++,l.nodeName==="TEMPLATE"&&(r.push(l),n.currentNode=l.content),(l=n.nextNode())===null&&(n.currentNode=r.pop(),l=n.nextNode());if(a.type==="node"){let u=this.processor.handleTextExpression(this.options);u.insertAfterNode(l.previousSibling),this.__parts.push(u)}else this.__parts.push(...this.processor.handleAttributeExpressions(l,a.name,a.strings,this.options));o++}return Wo&&(document.adoptNode(e),customElements.upgrade(e)),e}};var yu=window.trustedTypes&&trustedTypes.createPolicy("lit-html",{createHTML:t=>t}),Xm=` ${we} `,Bt=class{constructor(e,r,i,n){this.strings=e,this.values=r,this.type=i,this.processor=n}getHTML(){let e=this.strings.length-1,r="",i=!1;for(let n=0;n<e;n++){let o=this.strings[n],s=o.lastIndexOf("<!--");i=(s>-1||i)&&o.indexOf("-->",s+1)===-1;let a=Ui.exec(o);a===null?r+=o+(i?Xm:Yo):r+=o.substr(0,a.index)+a[1]+a[2]+Vt+a[3]+we}return r+=this.strings[e],r}getTemplateElement(){let e=document.createElement("template"),r=this.getHTML();return yu!==void 0&&(r=yu.createHTML(r)),e.innerHTML=r,e}};var Hi=t=>t===null||!(typeof t=="object"||typeof t=="function"),Ki=t=>Array.isArray(t)||!!(t&&t[Symbol.iterator]),Lr=class{constructor(e,r,i){this.dirty=!0,this.element=e,this.name=r,this.strings=i,this.parts=[];for(let n=0;n<i.length-1;n++)this.parts[n]=this._createPart()}_createPart(){return new Qi(this)}_getValue(){let e=this.strings,r=e.length-1,i=this.parts;if(r===1&&e[0]===""&&e[1]===""){let o=i[0].value;if(typeof o=="symbol")return String(o);if(typeof o=="string"||!Ki(o))return o}let n="";for(let o=0;o<r;o++){n+=e[o];let s=i[o];if(s!==void 0){let a=s.value;if(Hi(a)||!Ki(a))n+=typeof a=="string"?a:String(a);else for(let l of a)n+=typeof l=="string"?l:String(l)}}return n+=e[r],n}commit(){this.dirty&&(this.dirty=!1,this.element.setAttribute(this.name,this._getValue()))}},Qi=class{constructor(e){this.value=void 0,this.committer=e}setValue(e){e!==ce&&(!Hi(e)||e!==this.value)&&(this.value=e,ht(e)||(this.committer.dirty=!0))}commit(){for(;ht(this.value);){let e=this.value;this.value=ce,e(this)}this.value!==ce&&this.committer.commit()}},Je=class{constructor(e){this.value=void 0,this.__pendingValue=void 0,this.options=e}appendInto(e){this.startNode=e.appendChild(Se()),this.endNode=e.appendChild(Se())}insertAfterNode(e){this.startNode=e,this.endNode=e.nextSibling}appendIntoPart(e){e.__insert(this.startNode=Se()),e.__insert(this.endNode=Se())}insertAfterPart(e){e.__insert(this.startNode=Se()),this.endNode=e.endNode,e.endNode=this.startNode}setValue(e){this.__pendingValue=e}commit(){if(this.startNode.parentNode===null)return;for(;ht(this.__pendingValue);){let r=this.__pendingValue;this.__pendingValue=ce,r(this)}let e=this.__pendingValue;e!==ce&&(Hi(e)?e!==this.value&&this.__commitText(e):e instanceof Bt?this.__commitTemplateResult(e):e instanceof Node?this.__commitNode(e):Ki(e)?this.__commitIterable(e):e===Bi?(this.value=Bi,this.clear()):this.__commitText(e))}__insert(e){this.endNode.parentNode.insertBefore(e,this.endNode)}__commitNode(e){this.value!==e&&(this.clear(),this.__insert(e),this.value=e)}__commitText(e){let r=this.startNode.nextSibling;e=e??"";let i=typeof e=="string"?e:String(e);r===this.endNode.previousSibling&&r.nodeType===3?r.data=i:this.__commitNode(document.createTextNode(i)),this.value=e}__commitTemplateResult(e){let r=this.options.templateFactory(e);if(this.value instanceof Fr&&this.value.template===r)this.value.update(e.values);else{let i=new Fr(r,e.processor,this.options),n=i._clone();i.update(e.values),this.__commitNode(n),this.value=i}}__commitIterable(e){Array.isArray(this.value)||(this.value=[],this.clear());let r=this.value,i=0,n;for(let o of e)n=r[i],n===void 0&&(n=new Je(this.options),r.push(n),i===0?n.appendIntoPart(this):n.insertAfterPart(r[i-1])),n.setValue(o),n.commit(),i++;i<r.length&&(r.length=i,this.clear(n&&n.endNode))}clear(e=this.startNode){jr(this.startNode.parentNode,e.nextSibling,this.endNode)}},zi=class{constructor(e,r,i){if(this.value=void 0,this.__pendingValue=void 0,i.length!==2||i[0]!==""||i[1]!=="")throw new Error("Boolean attributes can only contain a single expression");this.element=e,this.name=r,this.strings=i}setValue(e){this.__pendingValue=e}commit(){for(;ht(this.__pendingValue);){let r=this.__pendingValue;this.__pendingValue=ce,r(this)}if(this.__pendingValue===ce)return;let e=!!this.__pendingValue;this.value!==e&&(e?this.element.setAttribute(this.name,""):this.element.removeAttribute(this.name),this.value=e),this.__pendingValue=ce}},$i=class extends Lr{constructor(e,r,i){super(e,r,i);this.single=i.length===2&&i[0]===""&&i[1]===""}_createPart(){return new Xo(this)}_getValue(){return this.single?this.parts[0].value:super._getValue()}commit(){this.dirty&&(this.dirty=!1,this.element[this.name]=this._getValue())}},Xo=class extends Qi{},vu=!1;(()=>{try{let t={get capture(){return vu=!0,!1}};window.addEventListener("test",t,t),window.removeEventListener("test",t,t)}catch(t){}})();var Gi=class{constructor(e,r,i){this.value=void 0,this.__pendingValue=void 0,this.element=e,this.eventName=r,this.eventContext=i,this.__boundHandleEvent=n=>this.handleEvent(n)}setValue(e){this.__pendingValue=e}commit(){for(;ht(this.__pendingValue);){let o=this.__pendingValue;this.__pendingValue=ce,o(this)}if(this.__pendingValue===ce)return;let e=this.__pendingValue,r=this.value,i=e==null||r!=null&&(e.capture!==r.capture||e.once!==r.once||e.passive!==r.passive),n=e!=null&&(r==null||i);i&&this.element.removeEventListener(this.eventName,this.__boundHandleEvent,this.__options),n&&(this.__options=Zm(e),this.element.addEventListener(this.eventName,this.__boundHandleEvent,this.__options)),this.value=e,this.__pendingValue=ce}handleEvent(e){typeof this.value=="function"?this.value.call(this.eventContext||this.element,e):this.value.handleEvent(e)}},Zm=t=>t&&(vu?{capture:t.capture,passive:t.passive,once:t.once}:t.capture);var Zo=class{handleAttributeExpressions(e,r,i,n){let o=r[0];return o==="."?new $i(e,r.slice(1),i).parts:o==="@"?[new Gi(e,r.slice(1),n.eventContext)]:o==="?"?[new zi(e,r.slice(1),i)]:new Lr(e,r,i).parts}handleTextExpression(e){return new Je(e)}},es=new Zo;function rs(t){let e=ts.get(t.type);e===void 0&&(e={stringsArray:new WeakMap,keyString:new Map},ts.set(t.type,e));let r=e.stringsArray.get(t.strings);if(r!==void 0)return r;let i=t.strings.join(we);return r=e.keyString.get(i),r===void 0&&(r=new qi(t,t.getTemplateElement()),e.keyString.set(i,r)),e.stringsArray.set(t.strings,r),r}var ts=new Map;var is=new WeakMap,Wi=(t,e,r)=>{let i=is.get(e);i===void 0&&(jr(e,e.firstChild),is.set(e,i=new Je(Object.assign({templateFactory:rs},r))),i.appendInto(e)),i.setValue(t),i.commit()};typeof window!="undefined"&&(window.litHtmlVersions||(window.litHtmlVersions=[])).push("1.3.0");var pe=(t,...e)=>new Bt(t,e,"html",es);var Yi=Symbol("haunted.phase"),Vr=Symbol("haunted.hook"),ns=Symbol("haunted.update"),os=Symbol("haunted.commit"),Ae=Symbol("haunted.effects"),mt=Symbol("haunted.layoutEffects"),Br="haunted.context";var qr,_u=0;function ss(t){qr=t}function as(){qr=null,_u=0}function gu(){return _u++}var ne=class{constructor(e,r){this.id=e,this.state=r}};function ty(t,...e){let r=gu(),i=qr[Vr],n=i.get(r);return n||(n=new t(r,qr,...e),i.set(r,n)),n.update(...e)}function $(t){return ty.bind(null,t)}function Ji(t){return $(class extends ne{constructor(e,r,i,n){super(e,r);t(r,this)}update(e,r){this.callback=e,this.values=r}call(){(!this.values||this.hasChanged())&&this.run(),this.lastValues=this.values}run(){this.teardown(),this._teardown=this.callback.call(this.state)}teardown(){typeof this._teardown=="function"&&this._teardown()}hasChanged(){return!this.lastValues||this.values.some((e,r)=>this.lastValues[r]!==e)}})}function ls(t,e){t[Ae].push(e)}var ry=Ji(ls);var us=$(class extends ne{constructor(t,e,r){super(t,e);this.updater=this.updater.bind(this),typeof r=="function"&&(r=r()),this.makeArgs(r)}update(){return this.args}updater(t){if(typeof t=="function"){let e=t,[r]=this.args;t=e(r)}this.makeArgs(t),this.state.update()}makeArgs(t){this.args=Object.freeze([t,this.updater])}});var iy=$(class extends ne{constructor(t,e,r,i,n){super(t,e);this.dispatch=this.dispatch.bind(this),this.currentState=n!==void 0?n(i):i}update(t){return this.reducer=t,[this.currentState,this.dispatch]}dispatch(t){this.currentState=this.reducer(this.currentState,t),this.state.update()}});var Xi=class{constructor(e,r){this.update=e,this.host=r,this[Vr]=new Map,this[Ae]=[],this[mt]=[]}run(e){ss(this);let r=e();return as(),r}_runEffects(e){let r=this[e];ss(this);for(let i of r)i.call(this);as()}runEffects(){this._runEffects(Ae)}runLayoutEffects(){this._runEffects(mt)}teardown(){this[Vr].forEach(r=>{typeof r.teardown=="function"&&r.teardown()})}};var ny=Promise.resolve().then.bind(Promise.resolve());function bu(){let t=[],e;function r(){e=null;let i=t;t=[];for(var n=0,o=i.length;n<o;n++)i[n]()}return function(i){t.push(i),e==null&&(e=ny(r))}}var oy=bu(),xu=bu(),qt=class{constructor(e,r){this.renderer=e,this.host=r,this.state=new Xi(this.update.bind(this),r),this[Yi]=null,this._updateQueued=!1}update(){this._updateQueued||(oy(()=>{let e=this.handlePhase(ns);xu(()=>{this.handlePhase(os,e),xu(()=>{this.handlePhase(Ae)})}),this._updateQueued=!1}),this._updateQueued=!0)}handlePhase(e,r){switch(this[Yi]=e,e){case os:this.commit(r),this.runEffects(mt);return;case ns:return this.render();case Ae:return this.runEffects(Ae)}this[Yi]=null}render(){return this.state.run(()=>this.renderer.call(this.host,this.host))}runEffects(e){this.state._runEffects(e)}teardown(){this.state.teardown()}};var sy=(t="")=>t.replace(/-+([a-z])?/g,(e,r)=>r?r.toUpperCase():"");function wu(t){class e extends qt{constructor(n,o,s){super(n,s||o);this.frag=o}commit(n){t(n,this.frag)}}function r(i,n,o){let s=(o||n||{}).baseElement||HTMLElement,{observedAttributes:a=[],useShadowDOM:l=!0,shadowRootInit:u={}}=o||n||{};class c extends s{constructor(){super();l===!1?this._scheduler=new e(i,this):(this.attachShadow({mode:"open",...u}),this._scheduler=new e(i,this.shadowRoot,this))}static get observedAttributes(){return i.observedAttributes||a||[]}connectedCallback(){this._scheduler.update()}disconnectedCallback(){this._scheduler.teardown()}attributeChangedCallback(d,m,y){if(m===y)return;let _=y===""?!0:y;Reflect.set(this,sy(d),_)}}function p(h){let d=h;return Object.freeze({enumerable:!0,configurable:!0,get(){return d},set(m){d=m,this._scheduler.update()}})}let f=new Proxy(s.prototype,{getPrototypeOf(h){return h},set(h,d,m,y){let _;return d in h?(_=Object.getOwnPropertyDescriptor(h,d),_&&_.set?(_.set.call(y,m),!0):(Reflect.set(h,d,m,y),!0)):(typeof d=="symbol"||d[0]==="_"?_={enumerable:!0,configurable:!0,writable:!0,value:m}:_=p(m),Object.defineProperty(y,d,_),_.set&&_.set.call(y,m),!0)}});return Object.setPrototypeOf(c.prototype,f),c}return r}var cs=$(class extends ne{constructor(t,e,r){super(t,e);this._updater=this._updater.bind(this),this._ranEffect=!1,this._unsubscribe=null,ls(e,this)}update(t){if(this.state.virtual)throw new Error("can't be used with virtual components");return this.Context!==t&&(this._subscribe(t),this.Context=t),this.value}call(){this._ranEffect||(this._ranEffect=!0,this._unsubscribe&&this._unsubscribe(),this._subscribe(this.Context),this.state.update())}_updater(t){this.value=t,this.state.update()}_subscribe(t){let e={Context:t,callback:this._updater};this.state.host.dispatchEvent(new CustomEvent(Br,{detail:e,bubbles:!0,cancelable:!0,composed:!0}));let{unsubscribe:r,value:i}=e;this.value=r?i:t.defaultValue,this._unsubscribe=r}teardown(){this._unsubscribe&&this._unsubscribe()}});function Su(t){return e=>{let r={Provider:class extends HTMLElement{constructor(){super();this.listeners=new Set,this.addEventListener(Br,this)}disconnectedCallback(){this.removeEventListener(Br,this)}handleEvent(i){let{detail:n}=i;n.Context===r&&(n.value=this.value,n.unsubscribe=this.unsubscribe.bind(this,n.callback),this.listeners.add(n.callback),i.stopPropagation())}unsubscribe(i){this.listeners.delete(i)}set value(i){this._value=i;for(let n of this.listeners)n(i)}get value(){return this._value}},Consumer:t(function({render:i}){let n=cs(r);return i(n)}),defaultValue:e};return r}}var Zi=$(class extends ne{constructor(t,e,r,i){super(t,e);this.value=r(),this.values=i}update(t,e){return this.hasChanged(e)&&(this.values=e,this.value=t()),this.value}hasChanged(t=[]){return t.some((e,r)=>this.values[r]!==e)}});function ay(t,e){t[mt].push(e)}var ly=Ji(ay);var uy=t=>Zi(()=>({current:t}),[]);function ps({render:t}){let e=wu(t),r=Su(e);return{component:e,createContext:r}}var Eu=Array.prototype.includes;function Tu(){let t=new WeakMap,e=new WeakMap;class r extends qt{constructor(o,s){super(o,s);this.state.virtual=!0}render(){return this.state.run(()=>this.renderer.apply(this.host,this.args))}commit(o){this.host.setValue(o),this.host.commit()}teardown(){super.teardown();let o=e.get(this);t.delete(o)}}function i(n){function o(...s){return a=>{let l=t.get(a);l||(l=new r(n,a),t.set(a,l),e.set(l,a),fs(l,a)),l.args=s,l.update()}}return Go(o)}return i}function fs(t,e,r=e.startNode){let i=r.parentNode,n=new MutationObserver(o=>{for(let s of o)if(Eu.call(s.removedNodes,r)){n.disconnect(),r.parentNode instanceof ShadowRoot?fs(t,e):t.teardown();break}else if(Eu.call(s.addedNodes,r.nextSibling)){n.disconnect(),fs(t,e,r.nextSibling||void 0);break}});n.observe(i,{childList:!0})}var{component:cy,createContext:py}=ps({render:Wi}),ds=Tu();var $u=dt(zu()),{__extends:ee,__assign:g,__rest:De,__decorate:PE,__param:kE,__metadata:AE,__awaiter:Ne,__generator:Ie,__exportStar:DE,__createBinding:NE,__values:IE,__read:ME,__spread:RE,__spreadArrays:yt,__await:jE,__asyncGenerator:FE,__asyncDelegator:LE,__asyncValues:VE,__makeTemplateObject:BE,__importStar:qE,__importDefault:UE,__classPrivateFieldGet:HE,__classPrivateFieldSet:KE}=$u.default;var mc=dt(hc()),{__extends:yc,__assign:$E,__rest:GE,__decorate:WE,__param:YE,__metadata:JE,__awaiter:XE,__generator:ZE,__exportStar:eT,__createBinding:tT,__values:rT,__read:iT,__spread:nT,__spreadArrays:oT,__await:sT,__asyncGenerator:aT,__asyncDelegator:lT,__asyncValues:uT,__makeTemplateObject:cT,__importStar:pT,__importDefault:fT,__classPrivateFieldGet:dT,__classPrivateFieldSet:hT}=mc.default;(function(t){typeof globalThis!="object"&&(this?e():(t.defineProperty(t.prototype,"_T_",{configurable:!0,get:e}),_T_));function e(){var r=this||self;r.globalThis=r,delete t.prototype._T_}})(Object);var ys=globalThis;var vs=ys,vc=vs.console,_s="Invariant Violation",_c=Object.setPrototypeOf,fy=_c===void 0?function(t,e){return t.__proto__=e,t}:_c,F=function(t){yc(e,t);function e(r){r===void 0&&(r=_s);var i=t.call(this,typeof r=="number"?_s+": "+r+" (see https://github.com/apollographql/invariant-packages)":r)||this;return i.framesToPop=1,i.name=_s,fy(i,e.prototype),i}return e}(Error);function P(t,e){if(!t)throw new F(e)}var on=["log","warn","error","silent"],gs=on.indexOf("log");function bs(t){return function(){if(on.indexOf(t)>=gs)return vc[t].apply(vc,arguments)}}(function(t){t.log=bs("log"),t.warn=bs("warn"),t.error=bs("error")})(P||(P={}));function gc(t){var e=on[gs];return gs=Math.max(0,on.indexOf(t)),e}var dy=vs.process||{env:{}};if(!vs.process)try{Object.defineProperty(ys,"process",{value:dy})}catch(t){}function sn(t){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?sn=function(r){return typeof r}:sn=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},sn(t)}function xs(t){return sn(t)=="object"&&t!==null}var xT=typeof Symbol=="function"&&Symbol.iterator!=null?Symbol.iterator:"@@iterator",wT=typeof Symbol=="function"&&Symbol.asyncIterator!=null?Symbol.asyncIterator:"@@asyncIterator",an=typeof Symbol=="function"&&Symbol.toStringTag!=null?Symbol.toStringTag:"@@toStringTag";function Kt(t,e){for(var r=/\r\n|[\n\r]/g,i=1,n=e+1,o;(o=r.exec(t.body))&&o.index<e;)i+=1,n=e+1-(o.index+o[0].length);return{line:i,column:n}}function ws(t){return ln(t.source,Kt(t.source,t.start))}function ln(t,e){var r=t.locationOffset.column-1,i=un(r)+t.body,n=e.line-1,o=t.locationOffset.line-1,s=e.line+o,a=e.line===1?r:0,l=e.column+a,u="".concat(t.name,":").concat(s,":").concat(l,`
`),c=i.split(/\r\n|[\n\r]/g),p=c[n];if(p.length>120){for(var f=Math.floor(l/80),h=l%80,d=[],m=0;m<p.length;m+=80)d.push(p.slice(m,m+80));return u+bc([["".concat(s),d[0]]].concat(d.slice(1,f+1).map(function(y){return["",y]}),[[" ",un(h-1)+"^"],["",d[f+1]]]))}return u+bc([["".concat(s-1),c[n-1]],["".concat(s),p],["",un(l-1)+"^"],["".concat(s+1),c[n+1]]])}function bc(t){var e=t.filter(function(i){var n=i[0],o=i[1];return o!==void 0}),r=Math.max.apply(Math,e.map(function(i){var n=i[0];return n.length}));return e.map(function(i){var n=i[0],o=i[1];return hy(r,n)+(o?" | "+o:" |")}).join(`
`)}function un(t){return Array(t+1).join(" ")}function hy(t,e){return un(t-e.length)+e}function cn(t){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?cn=function(r){return typeof r}:cn=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},cn(t)}function my(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function xc(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function yy(t,e,r){return e&&xc(t.prototype,e),r&&xc(t,r),t}function vy(t,e){if(typeof e!="function"&&e!==null)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Ur(t,e)}function _y(t){var e=Sc();return function(){var i=Hr(t),n;if(e){var o=Hr(this).constructor;n=Reflect.construct(i,arguments,o)}else n=i.apply(this,arguments);return wc(this,n)}}function wc(t,e){return e&&(cn(e)==="object"||typeof e=="function")?e:Kr(t)}function Kr(t){if(t===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Ss(t){var e=typeof Map=="function"?new Map:void 0;return Ss=function(i){if(i===null||!gy(i))return i;if(typeof i!="function")throw new TypeError("Super expression must either be null or a function");if(typeof e!="undefined"){if(e.has(i))return e.get(i);e.set(i,n)}function n(){return pn(i,arguments,Hr(this).constructor)}return n.prototype=Object.create(i.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),Ur(n,i)},Ss(t)}function pn(t,e,r){return Sc()?pn=Reflect.construct:pn=function(n,o,s){var a=[null];a.push.apply(a,o);var l=Function.bind.apply(n,a),u=new l;return s&&Ur(u,s.prototype),u},pn.apply(null,arguments)}function Sc(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(t){return!1}}function gy(t){return Function.toString.call(t).indexOf("[native code]")!==-1}function Ur(t,e){return Ur=Object.setPrototypeOf||function(i,n){return i.__proto__=n,i},Ur(t,e)}function Hr(t){return Hr=Object.setPrototypeOf?Object.getPrototypeOf:function(r){return r.__proto__||Object.getPrototypeOf(r)},Hr(t)}var Ec=function(t){vy(r,t);var e=_y(r);function r(i,n,o,s,a,l,u){var c,p,f,h,d;my(this,r),d=e.call(this,i);var m=Array.isArray(n)?n.length!==0?n:void 0:n?[n]:void 0,y=o;if(!y&&m){var _;y=(_=m[0].loc)===null||_===void 0?void 0:_.source}var w=s;!w&&m&&(w=m.reduce(function(k,O){return O.loc&&k.push(O.loc.start),k},[])),w&&w.length===0&&(w=void 0);var S;s&&o?S=s.map(function(k){return Kt(o,k)}):m&&(S=m.reduce(function(k,O){return O.loc&&k.push(Kt(O.loc.source,O.loc.start)),k},[]));var C=u;if(C==null&&l!=null){var E=l.extensions;xs(E)&&(C=E)}return Object.defineProperties(Kr(d),{name:{value:"GraphQLError"},message:{value:i,enumerable:!0,writable:!0},locations:{value:(c=S)!==null&&c!==void 0?c:void 0,enumerable:S!=null},path:{value:a??void 0,enumerable:a!=null},nodes:{value:m??void 0},source:{value:(p=y)!==null&&p!==void 0?p:void 0},positions:{value:(f=w)!==null&&f!==void 0?f:void 0},originalError:{value:l},extensions:{value:(h=C)!==null&&h!==void 0?h:void 0,enumerable:C!=null}}),l!=null&&l.stack?(Object.defineProperty(Kr(d),"stack",{value:l.stack,writable:!0,configurable:!0}),wc(d)):(Error.captureStackTrace?Error.captureStackTrace(Kr(d),r):Object.defineProperty(Kr(d),"stack",{value:Error().stack,writable:!0,configurable:!0}),d)}return yy(r,[{key:"toString",value:function(){return by(this)}},{key:an,get:function(){return"Object"}}]),r}(Ss(Error));function by(t){var e=t.message;if(t.nodes)for(var r=0,i=t.nodes;r<i.length;r++){var n=i[r];n.loc&&(e+=`

`+ws(n.loc))}else if(t.source&&t.locations)for(var o=0,s=t.locations;o<s.length;o++){var a=s[o];e+=`

`+ln(t.source,a)}return e}function te(t,e,r){return new Ec("Syntax Error: ".concat(r),void 0,t,[e])}var T=Object.freeze({NAME:"Name",DOCUMENT:"Document",OPERATION_DEFINITION:"OperationDefinition",VARIABLE_DEFINITION:"VariableDefinition",SELECTION_SET:"SelectionSet",FIELD:"Field",ARGUMENT:"Argument",FRAGMENT_SPREAD:"FragmentSpread",INLINE_FRAGMENT:"InlineFragment",FRAGMENT_DEFINITION:"FragmentDefinition",VARIABLE:"Variable",INT:"IntValue",FLOAT:"FloatValue",STRING:"StringValue",BOOLEAN:"BooleanValue",NULL:"NullValue",ENUM:"EnumValue",LIST:"ListValue",OBJECT:"ObjectValue",OBJECT_FIELD:"ObjectField",DIRECTIVE:"Directive",NAMED_TYPE:"NamedType",LIST_TYPE:"ListType",NON_NULL_TYPE:"NonNullType",SCHEMA_DEFINITION:"SchemaDefinition",OPERATION_TYPE_DEFINITION:"OperationTypeDefinition",SCALAR_TYPE_DEFINITION:"ScalarTypeDefinition",OBJECT_TYPE_DEFINITION:"ObjectTypeDefinition",FIELD_DEFINITION:"FieldDefinition",INPUT_VALUE_DEFINITION:"InputValueDefinition",INTERFACE_TYPE_DEFINITION:"InterfaceTypeDefinition",UNION_TYPE_DEFINITION:"UnionTypeDefinition",ENUM_TYPE_DEFINITION:"EnumTypeDefinition",ENUM_VALUE_DEFINITION:"EnumValueDefinition",INPUT_OBJECT_TYPE_DEFINITION:"InputObjectTypeDefinition",DIRECTIVE_DEFINITION:"DirectiveDefinition",SCHEMA_EXTENSION:"SchemaExtension",SCALAR_TYPE_EXTENSION:"ScalarTypeExtension",OBJECT_TYPE_EXTENSION:"ObjectTypeExtension",INTERFACE_TYPE_EXTENSION:"InterfaceTypeExtension",UNION_TYPE_EXTENSION:"UnionTypeExtension",ENUM_TYPE_EXTENSION:"EnumTypeExtension",INPUT_OBJECT_TYPE_EXTENSION:"InputObjectTypeExtension"});function Es(t,e){var r=Boolean(t);if(!r)throw new Error(e??"Unexpected invariant triggered.")}var xy=typeof Symbol=="function"&&typeof Symbol.for=="function"?Symbol.for("nodejs.util.inspect.custom"):void 0,Qr=xy;function fn(t){var e=t.prototype.toJSON;typeof e=="function"||Es(0),t.prototype.inspect=e,Qr&&(t.prototype[Qr]=e)}var dn=function(){function t(r,i,n){this.start=r.start,this.end=i.end,this.startToken=r,this.endToken=i,this.source=n}var e=t.prototype;return e.toJSON=function(){return{start:this.start,end:this.end}},t}();fn(dn);var B=function(){function t(r,i,n,o,s,a,l){this.kind=r,this.start=i,this.end=n,this.line=o,this.column=s,this.value=l,this.prev=a,this.next=null}var e=t.prototype;return e.toJSON=function(){return{kind:this.kind,value:this.value,line:this.line,column:this.column}},t}();fn(B);function Ts(t){return t!=null&&typeof t.kind=="string"}var v=Object.freeze({SOF:"<SOF>",EOF:"<EOF>",BANG:"!",DOLLAR:"$",AMP:"&",PAREN_L:"(",PAREN_R:")",SPREAD:"...",COLON:":",EQUALS:"=",AT:"@",BRACKET_L:"[",BRACKET_R:"]",BRACE_L:"{",PIPE:"|",BRACE_R:"}",NAME:"Name",INT:"Int",FLOAT:"Float",STRING:"String",BLOCK_STRING:"BlockString",COMMENT:"Comment"});function hn(t){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?hn=function(r){return typeof r}:hn=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},hn(t)}var wy=10,Tc=2;function zr(t){return mn(t,[])}function mn(t,e){switch(hn(t)){case"string":return JSON.stringify(t);case"function":return t.name?"[function ".concat(t.name,"]"):"[function]";case"object":return t===null?"null":Sy(t,e);default:return String(t)}}function Sy(t,e){if(e.indexOf(t)!==-1)return"[Circular]";var r=[].concat(e,[t]),i=Cy(t);if(i!==void 0){var n=i.call(t);if(n!==t)return typeof n=="string"?n:mn(n,r)}else if(Array.isArray(t))return Ty(t,r);return Ey(t,r)}function Ey(t,e){var r=Object.keys(t);if(r.length===0)return"{}";if(e.length>Tc)return"["+Oy(t)+"]";var i=r.map(function(n){var o=mn(t[n],e);return n+": "+o});return"{ "+i.join(", ")+" }"}function Ty(t,e){if(t.length===0)return"[]";if(e.length>Tc)return"[Array]";for(var r=Math.min(wy,t.length),i=t.length-r,n=[],o=0;o<r;++o)n.push(mn(t[o],e));return i===1?n.push("... 1 more item"):i>1&&n.push("... ".concat(i," more items")),"["+n.join(", ")+"]"}function Cy(t){var e=t[String(Qr)];if(typeof e=="function")return e;if(typeof t.inspect=="function")return t.inspect}function Oy(t){var e=Object.prototype.toString.call(t).replace(/^\[object /,"").replace(/]$/,"");if(e==="Object"&&typeof t.constructor=="function"){var r=t.constructor.name;if(typeof r=="string"&&r!=="")return r}return e}function $r(t,e){var r=Boolean(t);if(!r)throw new Error(e)}var Cc=function(e,r){return e instanceof r};function Oc(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function Py(t,e,r){return e&&Oc(t.prototype,e),r&&Oc(t,r),t}var yn=function(){function t(e){var r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"GraphQL request",i=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{line:1,column:1};typeof e=="string"||$r(0,"Body must be a string. Received: ".concat(zr(e),".")),this.body=e,this.name=r,this.locationOffset=i,this.locationOffset.line>0||$r(0,"line in locationOffset is 1-indexed and must be positive."),this.locationOffset.column>0||$r(0,"column in locationOffset is 1-indexed and must be positive.")}return Py(t,[{key:an,get:function(){return"Source"}}]),t}();function Pc(t){return Cc(t,yn)}var Cs=Object.freeze({QUERY:"QUERY",MUTATION:"MUTATION",SUBSCRIPTION:"SUBSCRIPTION",FIELD:"FIELD",FRAGMENT_DEFINITION:"FRAGMENT_DEFINITION",FRAGMENT_SPREAD:"FRAGMENT_SPREAD",INLINE_FRAGMENT:"INLINE_FRAGMENT",VARIABLE_DEFINITION:"VARIABLE_DEFINITION",SCHEMA:"SCHEMA",SCALAR:"SCALAR",OBJECT:"OBJECT",FIELD_DEFINITION:"FIELD_DEFINITION",ARGUMENT_DEFINITION:"ARGUMENT_DEFINITION",INTERFACE:"INTERFACE",UNION:"UNION",ENUM:"ENUM",ENUM_VALUE:"ENUM_VALUE",INPUT_OBJECT:"INPUT_OBJECT",INPUT_FIELD_DEFINITION:"INPUT_FIELD_DEFINITION"});function Ac(t){var e=t.split(/\r\n|[\n\r]/g),r=ky(t);if(r!==0)for(var i=1;i<e.length;i++)e[i]=e[i].slice(r);for(var n=0;n<e.length&&kc(e[n]);)++n;for(var o=e.length;o>n&&kc(e[o-1]);)--o;return e.slice(n,o).join(`
`)}function kc(t){for(var e=0;e<t.length;++e)if(t[e]!==" "&&t[e]!=="	")return!1;return!0}function ky(t){for(var e,r=!0,i=!0,n=0,o=null,s=0;s<t.length;++s)switch(t.charCodeAt(s)){case 13:t.charCodeAt(s+1)===10&&++s;case 10:r=!1,i=!0,n=0;break;case 9:case 32:++n;break;default:i&&!r&&(o===null||n<o)&&(o=n),i=!1}return(e=o)!==null&&e!==void 0?e:0}function Dc(t){var e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"",r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!1,i=t.indexOf(`
`)===-1,n=t[0]===" "||t[0]==="	",o=t[t.length-1]==='"',s=t[t.length-1]==="\\",a=!i||o||s||r,l="";return a&&!(i&&n)&&(l+=`
`+e),l+=e?t.replace(/\n/g,`
`+e):t,a&&(l+=`
`),'"""'+l.replace(/"""/g,'\\"""')+'"""'}var Os=function(){function t(r){var i=new B(v.SOF,0,0,0,0,null);this.source=r,this.lastToken=i,this.token=i,this.line=1,this.lineStart=0}var e=t.prototype;return e.advance=function(){this.lastToken=this.token;var i=this.token=this.lookahead();return i},e.lookahead=function(){var i=this.token;if(i.kind!==v.EOF)do{var n;i=(n=i.next)!==null&&n!==void 0?n:i.next=Ay(this,i)}while(i.kind===v.COMMENT);return i},t}();function Nc(t){return t===v.BANG||t===v.DOLLAR||t===v.AMP||t===v.PAREN_L||t===v.PAREN_R||t===v.SPREAD||t===v.COLON||t===v.EQUALS||t===v.AT||t===v.BRACKET_L||t===v.BRACKET_R||t===v.BRACE_L||t===v.PIPE||t===v.BRACE_R}function vt(t){return isNaN(t)?v.EOF:t<127?JSON.stringify(String.fromCharCode(t)):'"\\u'.concat(("00"+t.toString(16).toUpperCase()).slice(-4),'"')}function Ay(t,e){for(var r=t.source,i=r.body,n=i.length,o=e.end;o<n;){var s=i.charCodeAt(o),a=t.line,l=1+o-t.lineStart;switch(s){case 65279:case 9:case 32:case 44:++o;continue;case 10:++o,++t.line,t.lineStart=o;continue;case 13:i.charCodeAt(o+1)===10?o+=2:++o,++t.line,t.lineStart=o;continue;case 33:return new B(v.BANG,o,o+1,a,l,e);case 35:return Ny(r,o,a,l,e);case 36:return new B(v.DOLLAR,o,o+1,a,l,e);case 38:return new B(v.AMP,o,o+1,a,l,e);case 40:return new B(v.PAREN_L,o,o+1,a,l,e);case 41:return new B(v.PAREN_R,o,o+1,a,l,e);case 46:if(i.charCodeAt(o+1)===46&&i.charCodeAt(o+2)===46)return new B(v.SPREAD,o,o+3,a,l,e);break;case 58:return new B(v.COLON,o,o+1,a,l,e);case 61:return new B(v.EQUALS,o,o+1,a,l,e);case 64:return new B(v.AT,o,o+1,a,l,e);case 91:return new B(v.BRACKET_L,o,o+1,a,l,e);case 93:return new B(v.BRACKET_R,o,o+1,a,l,e);case 123:return new B(v.BRACE_L,o,o+1,a,l,e);case 124:return new B(v.PIPE,o,o+1,a,l,e);case 125:return new B(v.BRACE_R,o,o+1,a,l,e);case 34:return i.charCodeAt(o+1)===34&&i.charCodeAt(o+2)===34?Ry(r,o,a,l,e,t):My(r,o,a,l,e);case 45:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return Iy(r,o,s,a,l,e);case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:return jy(r,o,a,l,e)}throw te(r,o,Dy(s))}var u=t.line,c=1+o-t.lineStart;return new B(v.EOF,n,n,u,c,e)}function Dy(t){return t<32&&t!==9&&t!==10&&t!==13?"Cannot contain the invalid character ".concat(vt(t),"."):t===39?`Unexpected single quote character ('), did you mean to use a double quote (")?`:"Cannot parse the unexpected character ".concat(vt(t),".")}function Ny(t,e,r,i,n){var o=t.body,s,a=e;do s=o.charCodeAt(++a);while(!isNaN(s)&&(s>31||s===9));return new B(v.COMMENT,e,a,r,i,n,o.slice(e+1,a))}function Iy(t,e,r,i,n,o){var s=t.body,a=r,l=e,u=!1;if(a===45&&(a=s.charCodeAt(++l)),a===48){if(a=s.charCodeAt(++l),a>=48&&a<=57)throw te(t,l,"Invalid number, unexpected digit after 0: ".concat(vt(a),"."))}else l=Ps(t,l,a),a=s.charCodeAt(l);if(a===46&&(u=!0,a=s.charCodeAt(++l),l=Ps(t,l,a),a=s.charCodeAt(l)),(a===69||a===101)&&(u=!0,a=s.charCodeAt(++l),(a===43||a===45)&&(a=s.charCodeAt(++l)),l=Ps(t,l,a),a=s.charCodeAt(l)),a===46||Fy(a))throw te(t,l,"Invalid number, expected digit but got: ".concat(vt(a),"."));return new B(u?v.FLOAT:v.INT,e,l,i,n,o,s.slice(e,l))}function Ps(t,e,r){var i=t.body,n=e,o=r;if(o>=48&&o<=57){do o=i.charCodeAt(++n);while(o>=48&&o<=57);return n}throw te(t,n,"Invalid number, expected digit but got: ".concat(vt(o),"."))}function My(t,e,r,i,n){for(var o=t.body,s=e+1,a=s,l=0,u="";s<o.length&&!isNaN(l=o.charCodeAt(s))&&l!==10&&l!==13;){if(l===34)return u+=o.slice(a,s),new B(v.STRING,e,s+1,r,i,n,u);if(l<32&&l!==9)throw te(t,s,"Invalid character within String: ".concat(vt(l),"."));if(++s,l===92){switch(u+=o.slice(a,s-1),l=o.charCodeAt(s),l){case 34:u+='"';break;case 47:u+="/";break;case 92:u+="\\";break;case 98:u+="\b";break;case 102:u+="\f";break;case 110:u+=`
`;break;case 114:u+="\r";break;case 116:u+="	";break;case 117:{var c=Ly(o.charCodeAt(s+1),o.charCodeAt(s+2),o.charCodeAt(s+3),o.charCodeAt(s+4));if(c<0){var p=o.slice(s+1,s+5);throw te(t,s,"Invalid character escape sequence: \\u".concat(p,"."))}u+=String.fromCharCode(c),s+=4;break}default:throw te(t,s,"Invalid character escape sequence: \\".concat(String.fromCharCode(l),"."))}++s,a=s}}throw te(t,s,"Unterminated string.")}function Ry(t,e,r,i,n,o){for(var s=t.body,a=e+3,l=a,u=0,c="";a<s.length&&!isNaN(u=s.charCodeAt(a));){if(u===34&&s.charCodeAt(a+1)===34&&s.charCodeAt(a+2)===34)return c+=s.slice(l,a),new B(v.BLOCK_STRING,e,a+3,r,i,n,Ac(c));if(u<32&&u!==9&&u!==10&&u!==13)throw te(t,a,"Invalid character within String: ".concat(vt(u),"."));u===10?(++a,++o.line,o.lineStart=a):u===13?(s.charCodeAt(a+1)===10?a+=2:++a,++o.line,o.lineStart=a):u===92&&s.charCodeAt(a+1)===34&&s.charCodeAt(a+2)===34&&s.charCodeAt(a+3)===34?(c+=s.slice(l,a)+'"""',a+=4,l=a):++a}throw te(t,a,"Unterminated string.")}function Ly(t,e,r,i){return vn(t)<<12|vn(e)<<8|vn(r)<<4|vn(i)}function vn(t){return t>=48&&t<=57?t-48:t>=65&&t<=70?t-55:t>=97&&t<=102?t-87:-1}function jy(t,e,r,i,n){for(var o=t.body,s=o.length,a=e+1,l=0;a!==s&&!isNaN(l=o.charCodeAt(a))&&(l===95||l>=48&&l<=57||l>=65&&l<=90||l>=97&&l<=122);)++a;return new B(v.NAME,e,a,r,i,n,o.slice(e,a))}function Fy(t){return t===95||t>=65&&t<=90||t>=97&&t<=122}function _n(t,e){var r=new Vy(t,e);return r.parseDocument()}var Vy=function(){function t(r,i){var n=Pc(r)?r:new yn(r);this._lexer=new Os(n),this._options=i}var e=t.prototype;return e.parseName=function(){var i=this.expectToken(v.NAME);return{kind:T.NAME,value:i.value,loc:this.loc(i)}},e.parseDocument=function(){var i=this._lexer.token;return{kind:T.DOCUMENT,definitions:this.many(v.SOF,this.parseDefinition,v.EOF),loc:this.loc(i)}},e.parseDefinition=function(){if(this.peek(v.NAME))switch(this._lexer.token.value){case"query":case"mutation":case"subscription":return this.parseOperationDefinition();case"fragment":return this.parseFragmentDefinition();case"schema":case"scalar":case"type":case"interface":case"union":case"enum":case"input":case"directive":return this.parseTypeSystemDefinition();case"extend":return this.parseTypeSystemExtension()}else{if(this.peek(v.BRACE_L))return this.parseOperationDefinition();if(this.peekDescription())return this.parseTypeSystemDefinition()}throw this.unexpected()},e.parseOperationDefinition=function(){var i=this._lexer.token;if(this.peek(v.BRACE_L))return{kind:T.OPERATION_DEFINITION,operation:"query",name:void 0,variableDefinitions:[],directives:[],selectionSet:this.parseSelectionSet(),loc:this.loc(i)};var n=this.parseOperationType(),o;return this.peek(v.NAME)&&(o=this.parseName()),{kind:T.OPERATION_DEFINITION,operation:n,name:o,variableDefinitions:this.parseVariableDefinitions(),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet(),loc:this.loc(i)}},e.parseOperationType=function(){var i=this.expectToken(v.NAME);switch(i.value){case"query":return"query";case"mutation":return"mutation";case"subscription":return"subscription"}throw this.unexpected(i)},e.parseVariableDefinitions=function(){return this.optionalMany(v.PAREN_L,this.parseVariableDefinition,v.PAREN_R)},e.parseVariableDefinition=function(){var i=this._lexer.token;return{kind:T.VARIABLE_DEFINITION,variable:this.parseVariable(),type:(this.expectToken(v.COLON),this.parseTypeReference()),defaultValue:this.expectOptionalToken(v.EQUALS)?this.parseValueLiteral(!0):void 0,directives:this.parseDirectives(!0),loc:this.loc(i)}},e.parseVariable=function(){var i=this._lexer.token;return this.expectToken(v.DOLLAR),{kind:T.VARIABLE,name:this.parseName(),loc:this.loc(i)}},e.parseSelectionSet=function(){var i=this._lexer.token;return{kind:T.SELECTION_SET,selections:this.many(v.BRACE_L,this.parseSelection,v.BRACE_R),loc:this.loc(i)}},e.parseSelection=function(){return this.peek(v.SPREAD)?this.parseFragment():this.parseField()},e.parseField=function(){var i=this._lexer.token,n=this.parseName(),o,s;return this.expectOptionalToken(v.COLON)?(o=n,s=this.parseName()):s=n,{kind:T.FIELD,alias:o,name:s,arguments:this.parseArguments(!1),directives:this.parseDirectives(!1),selectionSet:this.peek(v.BRACE_L)?this.parseSelectionSet():void 0,loc:this.loc(i)}},e.parseArguments=function(i){var n=i?this.parseConstArgument:this.parseArgument;return this.optionalMany(v.PAREN_L,n,v.PAREN_R)},e.parseArgument=function(){var i=this._lexer.token,n=this.parseName();return this.expectToken(v.COLON),{kind:T.ARGUMENT,name:n,value:this.parseValueLiteral(!1),loc:this.loc(i)}},e.parseConstArgument=function(){var i=this._lexer.token;return{kind:T.ARGUMENT,name:this.parseName(),value:(this.expectToken(v.COLON),this.parseValueLiteral(!0)),loc:this.loc(i)}},e.parseFragment=function(){var i=this._lexer.token;this.expectToken(v.SPREAD);var n=this.expectOptionalKeyword("on");return!n&&this.peek(v.NAME)?{kind:T.FRAGMENT_SPREAD,name:this.parseFragmentName(),directives:this.parseDirectives(!1),loc:this.loc(i)}:{kind:T.INLINE_FRAGMENT,typeCondition:n?this.parseNamedType():void 0,directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet(),loc:this.loc(i)}},e.parseFragmentDefinition=function(){var i,n=this._lexer.token;return this.expectKeyword("fragment"),((i=this._options)===null||i===void 0?void 0:i.experimentalFragmentVariables)===!0?{kind:T.FRAGMENT_DEFINITION,name:this.parseFragmentName(),variableDefinitions:this.parseVariableDefinitions(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet(),loc:this.loc(n)}:{kind:T.FRAGMENT_DEFINITION,name:this.parseFragmentName(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet(),loc:this.loc(n)}},e.parseFragmentName=function(){if(this._lexer.token.value==="on")throw this.unexpected();return this.parseName()},e.parseValueLiteral=function(i){var n=this._lexer.token;switch(n.kind){case v.BRACKET_L:return this.parseList(i);case v.BRACE_L:return this.parseObject(i);case v.INT:return this._lexer.advance(),{kind:T.INT,value:n.value,loc:this.loc(n)};case v.FLOAT:return this._lexer.advance(),{kind:T.FLOAT,value:n.value,loc:this.loc(n)};case v.STRING:case v.BLOCK_STRING:return this.parseStringLiteral();case v.NAME:switch(this._lexer.advance(),n.value){case"true":return{kind:T.BOOLEAN,value:!0,loc:this.loc(n)};case"false":return{kind:T.BOOLEAN,value:!1,loc:this.loc(n)};case"null":return{kind:T.NULL,loc:this.loc(n)};default:return{kind:T.ENUM,value:n.value,loc:this.loc(n)}}case v.DOLLAR:if(!i)return this.parseVariable();break}throw this.unexpected()},e.parseStringLiteral=function(){var i=this._lexer.token;return this._lexer.advance(),{kind:T.STRING,value:i.value,block:i.kind===v.BLOCK_STRING,loc:this.loc(i)}},e.parseList=function(i){var n=this,o=this._lexer.token,s=function(){return n.parseValueLiteral(i)};return{kind:T.LIST,values:this.any(v.BRACKET_L,s,v.BRACKET_R),loc:this.loc(o)}},e.parseObject=function(i){var n=this,o=this._lexer.token,s=function(){return n.parseObjectField(i)};return{kind:T.OBJECT,fields:this.any(v.BRACE_L,s,v.BRACE_R),loc:this.loc(o)}},e.parseObjectField=function(i){var n=this._lexer.token,o=this.parseName();return this.expectToken(v.COLON),{kind:T.OBJECT_FIELD,name:o,value:this.parseValueLiteral(i),loc:this.loc(n)}},e.parseDirectives=function(i){for(var n=[];this.peek(v.AT);)n.push(this.parseDirective(i));return n},e.parseDirective=function(i){var n=this._lexer.token;return this.expectToken(v.AT),{kind:T.DIRECTIVE,name:this.parseName(),arguments:this.parseArguments(i),loc:this.loc(n)}},e.parseTypeReference=function(){var i=this._lexer.token,n;return this.expectOptionalToken(v.BRACKET_L)?(n=this.parseTypeReference(),this.expectToken(v.BRACKET_R),n={kind:T.LIST_TYPE,type:n,loc:this.loc(i)}):n=this.parseNamedType(),this.expectOptionalToken(v.BANG)?{kind:T.NON_NULL_TYPE,type:n,loc:this.loc(i)}:n},e.parseNamedType=function(){var i=this._lexer.token;return{kind:T.NAMED_TYPE,name:this.parseName(),loc:this.loc(i)}},e.parseTypeSystemDefinition=function(){var i=this.peekDescription()?this._lexer.lookahead():this._lexer.token;if(i.kind===v.NAME)switch(i.value){case"schema":return this.parseSchemaDefinition();case"scalar":return this.parseScalarTypeDefinition();case"type":return this.parseObjectTypeDefinition();case"interface":return this.parseInterfaceTypeDefinition();case"union":return this.parseUnionTypeDefinition();case"enum":return this.parseEnumTypeDefinition();case"input":return this.parseInputObjectTypeDefinition();case"directive":return this.parseDirectiveDefinition()}throw this.unexpected(i)},e.peekDescription=function(){return this.peek(v.STRING)||this.peek(v.BLOCK_STRING)},e.parseDescription=function(){if(this.peekDescription())return this.parseStringLiteral()},e.parseSchemaDefinition=function(){var i=this._lexer.token,n=this.parseDescription();this.expectKeyword("schema");var o=this.parseDirectives(!0),s=this.many(v.BRACE_L,this.parseOperationTypeDefinition,v.BRACE_R);return{kind:T.SCHEMA_DEFINITION,description:n,directives:o,operationTypes:s,loc:this.loc(i)}},e.parseOperationTypeDefinition=function(){var i=this._lexer.token,n=this.parseOperationType();this.expectToken(v.COLON);var o=this.parseNamedType();return{kind:T.OPERATION_TYPE_DEFINITION,operation:n,type:o,loc:this.loc(i)}},e.parseScalarTypeDefinition=function(){var i=this._lexer.token,n=this.parseDescription();this.expectKeyword("scalar");var o=this.parseName(),s=this.parseDirectives(!0);return{kind:T.SCALAR_TYPE_DEFINITION,description:n,name:o,directives:s,loc:this.loc(i)}},e.parseObjectTypeDefinition=function(){var i=this._lexer.token,n=this.parseDescription();this.expectKeyword("type");var o=this.parseName(),s=this.parseImplementsInterfaces(),a=this.parseDirectives(!0),l=this.parseFieldsDefinition();return{kind:T.OBJECT_TYPE_DEFINITION,description:n,name:o,interfaces:s,directives:a,fields:l,loc:this.loc(i)}},e.parseImplementsInterfaces=function(){var i;if(!this.expectOptionalKeyword("implements"))return[];if(((i=this._options)===null||i===void 0?void 0:i.allowLegacySDLImplementsInterfaces)===!0){var n=[];this.expectOptionalToken(v.AMP);do n.push(this.parseNamedType());while(this.expectOptionalToken(v.AMP)||this.peek(v.NAME));return n}return this.delimitedMany(v.AMP,this.parseNamedType)},e.parseFieldsDefinition=function(){var i;return((i=this._options)===null||i===void 0?void 0:i.allowLegacySDLEmptyFields)===!0&&this.peek(v.BRACE_L)&&this._lexer.lookahead().kind===v.BRACE_R?(this._lexer.advance(),this._lexer.advance(),[]):this.optionalMany(v.BRACE_L,this.parseFieldDefinition,v.BRACE_R)},e.parseFieldDefinition=function(){var i=this._lexer.token,n=this.parseDescription(),o=this.parseName(),s=this.parseArgumentDefs();this.expectToken(v.COLON);var a=this.parseTypeReference(),l=this.parseDirectives(!0);return{kind:T.FIELD_DEFINITION,description:n,name:o,arguments:s,type:a,directives:l,loc:this.loc(i)}},e.parseArgumentDefs=function(){return this.optionalMany(v.PAREN_L,this.parseInputValueDef,v.PAREN_R)},e.parseInputValueDef=function(){var i=this._lexer.token,n=this.parseDescription(),o=this.parseName();this.expectToken(v.COLON);var s=this.parseTypeReference(),a;this.expectOptionalToken(v.EQUALS)&&(a=this.parseValueLiteral(!0));var l=this.parseDirectives(!0);return{kind:T.INPUT_VALUE_DEFINITION,description:n,name:o,type:s,defaultValue:a,directives:l,loc:this.loc(i)}},e.parseInterfaceTypeDefinition=function(){var i=this._lexer.token,n=this.parseDescription();this.expectKeyword("interface");var o=this.parseName(),s=this.parseImplementsInterfaces(),a=this.parseDirectives(!0),l=this.parseFieldsDefinition();return{kind:T.INTERFACE_TYPE_DEFINITION,description:n,name:o,interfaces:s,directives:a,fields:l,loc:this.loc(i)}},e.parseUnionTypeDefinition=function(){var i=this._lexer.token,n=this.parseDescription();this.expectKeyword("union");var o=this.parseName(),s=this.parseDirectives(!0),a=this.parseUnionMemberTypes();return{kind:T.UNION_TYPE_DEFINITION,description:n,name:o,directives:s,types:a,loc:this.loc(i)}},e.parseUnionMemberTypes=function(){return this.expectOptionalToken(v.EQUALS)?this.delimitedMany(v.PIPE,this.parseNamedType):[]},e.parseEnumTypeDefinition=function(){var i=this._lexer.token,n=this.parseDescription();this.expectKeyword("enum");var o=this.parseName(),s=this.parseDirectives(!0),a=this.parseEnumValuesDefinition();return{kind:T.ENUM_TYPE_DEFINITION,description:n,name:o,directives:s,values:a,loc:this.loc(i)}},e.parseEnumValuesDefinition=function(){return this.optionalMany(v.BRACE_L,this.parseEnumValueDefinition,v.BRACE_R)},e.parseEnumValueDefinition=function(){var i=this._lexer.token,n=this.parseDescription(),o=this.parseName(),s=this.parseDirectives(!0);return{kind:T.ENUM_VALUE_DEFINITION,description:n,name:o,directives:s,loc:this.loc(i)}},e.parseInputObjectTypeDefinition=function(){var i=this._lexer.token,n=this.parseDescription();this.expectKeyword("input");var o=this.parseName(),s=this.parseDirectives(!0),a=this.parseInputFieldsDefinition();return{kind:T.INPUT_OBJECT_TYPE_DEFINITION,description:n,name:o,directives:s,fields:a,loc:this.loc(i)}},e.parseInputFieldsDefinition=function(){return this.optionalMany(v.BRACE_L,this.parseInputValueDef,v.BRACE_R)},e.parseTypeSystemExtension=function(){var i=this._lexer.lookahead();if(i.kind===v.NAME)switch(i.value){case"schema":return this.parseSchemaExtension();case"scalar":return this.parseScalarTypeExtension();case"type":return this.parseObjectTypeExtension();case"interface":return this.parseInterfaceTypeExtension();case"union":return this.parseUnionTypeExtension();case"enum":return this.parseEnumTypeExtension();case"input":return this.parseInputObjectTypeExtension()}throw this.unexpected(i)},e.parseSchemaExtension=function(){var i=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("schema");var n=this.parseDirectives(!0),o=this.optionalMany(v.BRACE_L,this.parseOperationTypeDefinition,v.BRACE_R);if(n.length===0&&o.length===0)throw this.unexpected();return{kind:T.SCHEMA_EXTENSION,directives:n,operationTypes:o,loc:this.loc(i)}},e.parseScalarTypeExtension=function(){var i=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("scalar");var n=this.parseName(),o=this.parseDirectives(!0);if(o.length===0)throw this.unexpected();return{kind:T.SCALAR_TYPE_EXTENSION,name:n,directives:o,loc:this.loc(i)}},e.parseObjectTypeExtension=function(){var i=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("type");var n=this.parseName(),o=this.parseImplementsInterfaces(),s=this.parseDirectives(!0),a=this.parseFieldsDefinition();if(o.length===0&&s.length===0&&a.length===0)throw this.unexpected();return{kind:T.OBJECT_TYPE_EXTENSION,name:n,interfaces:o,directives:s,fields:a,loc:this.loc(i)}},e.parseInterfaceTypeExtension=function(){var i=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("interface");var n=this.parseName(),o=this.parseImplementsInterfaces(),s=this.parseDirectives(!0),a=this.parseFieldsDefinition();if(o.length===0&&s.length===0&&a.length===0)throw this.unexpected();return{kind:T.INTERFACE_TYPE_EXTENSION,name:n,interfaces:o,directives:s,fields:a,loc:this.loc(i)}},e.parseUnionTypeExtension=function(){var i=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("union");var n=this.parseName(),o=this.parseDirectives(!0),s=this.parseUnionMemberTypes();if(o.length===0&&s.length===0)throw this.unexpected();return{kind:T.UNION_TYPE_EXTENSION,name:n,directives:o,types:s,loc:this.loc(i)}},e.parseEnumTypeExtension=function(){var i=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("enum");var n=this.parseName(),o=this.parseDirectives(!0),s=this.parseEnumValuesDefinition();if(o.length===0&&s.length===0)throw this.unexpected();return{kind:T.ENUM_TYPE_EXTENSION,name:n,directives:o,values:s,loc:this.loc(i)}},e.parseInputObjectTypeExtension=function(){var i=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("input");var n=this.parseName(),o=this.parseDirectives(!0),s=this.parseInputFieldsDefinition();if(o.length===0&&s.length===0)throw this.unexpected();return{kind:T.INPUT_OBJECT_TYPE_EXTENSION,name:n,directives:o,fields:s,loc:this.loc(i)}},e.parseDirectiveDefinition=function(){var i=this._lexer.token,n=this.parseDescription();this.expectKeyword("directive"),this.expectToken(v.AT);var o=this.parseName(),s=this.parseArgumentDefs(),a=this.expectOptionalKeyword("repeatable");this.expectKeyword("on");var l=this.parseDirectiveLocations();return{kind:T.DIRECTIVE_DEFINITION,description:n,name:o,arguments:s,repeatable:a,locations:l,loc:this.loc(i)}},e.parseDirectiveLocations=function(){return this.delimitedMany(v.PIPE,this.parseDirectiveLocation)},e.parseDirectiveLocation=function(){var i=this._lexer.token,n=this.parseName();if(Cs[n.value]!==void 0)return n;throw this.unexpected(i)},e.loc=function(i){var n;if(((n=this._options)===null||n===void 0?void 0:n.noLocation)!==!0)return new dn(i,this._lexer.lastToken,this._lexer.source)},e.peek=function(i){return this._lexer.token.kind===i},e.expectToken=function(i){var n=this._lexer.token;if(n.kind===i)return this._lexer.advance(),n;throw te(this._lexer.source,n.start,"Expected ".concat(Ic(i),", found ").concat(ks(n),"."))},e.expectOptionalToken=function(i){var n=this._lexer.token;if(n.kind===i)return this._lexer.advance(),n},e.expectKeyword=function(i){var n=this._lexer.token;if(n.kind===v.NAME&&n.value===i)this._lexer.advance();else throw te(this._lexer.source,n.start,'Expected "'.concat(i,'", found ').concat(ks(n),"."))},e.expectOptionalKeyword=function(i){var n=this._lexer.token;return n.kind===v.NAME&&n.value===i?(this._lexer.advance(),!0):!1},e.unexpected=function(i){var n=i??this._lexer.token;return te(this._lexer.source,n.start,"Unexpected ".concat(ks(n),"."))},e.any=function(i,n,o){this.expectToken(i);for(var s=[];!this.expectOptionalToken(o);)s.push(n.call(this));return s},e.optionalMany=function(i,n,o){if(this.expectOptionalToken(i)){var s=[];do s.push(n.call(this));while(!this.expectOptionalToken(o));return s}return[]},e.many=function(i,n,o){this.expectToken(i);var s=[];do s.push(n.call(this));while(!this.expectOptionalToken(o));return s},e.delimitedMany=function(i,n){this.expectOptionalToken(i);var o=[];do o.push(n.call(this));while(this.expectOptionalToken(i));return o},t}();function ks(t){var e=t.value;return Ic(t.kind)+(e!=null?' "'.concat(e,'"'):"")}function Ic(t){return Nc(t)?'"'.concat(t,'"'):t}var By={Name:[],Document:["definitions"],OperationDefinition:["name","variableDefinitions","directives","selectionSet"],VariableDefinition:["variable","type","defaultValue","directives"],Variable:["name"],SelectionSet:["selections"],Field:["alias","name","arguments","directives","selectionSet"],Argument:["name","value"],FragmentSpread:["name","directives"],InlineFragment:["typeCondition","directives","selectionSet"],FragmentDefinition:["name","variableDefinitions","typeCondition","directives","selectionSet"],IntValue:[],FloatValue:[],StringValue:[],BooleanValue:[],NullValue:[],EnumValue:[],ListValue:["values"],ObjectValue:["fields"],ObjectField:["name","value"],Directive:["name","arguments"],NamedType:["name"],ListType:["type"],NonNullType:["type"],SchemaDefinition:["description","directives","operationTypes"],OperationTypeDefinition:["type"],ScalarTypeDefinition:["description","name","directives"],ObjectTypeDefinition:["description","name","interfaces","directives","fields"],FieldDefinition:["description","name","arguments","type","directives"],InputValueDefinition:["description","name","type","defaultValue","directives"],InterfaceTypeDefinition:["description","name","interfaces","directives","fields"],UnionTypeDefinition:["description","name","directives","types"],EnumTypeDefinition:["description","name","directives","values"],EnumValueDefinition:["description","name","directives"],InputObjectTypeDefinition:["description","name","directives","fields"],DirectiveDefinition:["description","name","arguments","locations"],SchemaExtension:["directives","operationTypes"],ScalarTypeExtension:["name","directives"],ObjectTypeExtension:["name","interfaces","directives","fields"],InterfaceTypeExtension:["name","interfaces","directives","fields"],UnionTypeExtension:["name","directives","types"],EnumTypeExtension:["name","directives","values"],InputObjectTypeExtension:["name","directives","fields"]},Gr=Object.freeze({});function re(t,e){var r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:By,i=void 0,n=Array.isArray(t),o=[t],s=-1,a=[],l=void 0,u=void 0,c=void 0,p=[],f=[],h=t;do{s++;var d=s===o.length,m=d&&a.length!==0;if(d){if(u=f.length===0?void 0:p[p.length-1],l=c,c=f.pop(),m){if(n)l=l.slice();else{for(var y={},_=0,w=Object.keys(l);_<w.length;_++){var S=w[_];y[S]=l[S]}l=y}for(var C=0,E=0;E<a.length;E++){var k=a[E][0],O=a[E][1];n&&(k-=C),n&&O===null?(l.splice(k,1),C++):l[k]=O}}s=i.index,o=i.keys,a=i.edits,n=i.inArray,i=i.prev}else{if(u=c?n?s:o[s]:void 0,l=c?c[u]:h,l==null)continue;c&&p.push(u)}var A=void 0;if(!Array.isArray(l)){if(!Ts(l))throw new Error("Invalid AST Node: ".concat(zr(l),"."));var H=As(e,l.kind,d);if(H){if(A=H.call(e,l,u,c,p,f),A===Gr)break;if(A===!1){if(!d){p.pop();continue}}else if(A!==void 0&&(a.push([u,A]),!d))if(Ts(A))l=A;else{p.pop();continue}}}if(A===void 0&&m&&a.push([u,l]),d)p.pop();else{var J;i={inArray:n,index:s,keys:o,edits:a,prev:i},n=Array.isArray(l),o=n?l:(J=r[l.kind])!==null&&J!==void 0?J:[],s=-1,a=[],c&&f.push(c),c=l}}while(i!==void 0);return a.length!==0&&(h=a[a.length-1][1]),h}function As(t,e,r){var i=t[e];if(i){if(!r&&typeof i=="function")return i;var n=r?i.leave:i.enter;if(typeof n=="function")return n}else{var o=r?t.leave:t.enter;if(o){if(typeof o=="function")return o;var s=o[e];if(typeof s=="function")return s}}}function gn(t){return re(t,{leave:qy})}var Uy=80,qy={Name:function(e){return e.value},Variable:function(e){return"$"+e.name},Document:function(e){return x(e.definitions,`

`)+`
`},OperationDefinition:function(e){var r=e.operation,i=e.name,n=U("(",x(e.variableDefinitions,", "),")"),o=x(e.directives," "),s=e.selectionSet;return!i&&!o&&!n&&r==="query"?s:x([r,x([i,n]),o,s]," ")},VariableDefinition:function(e){var r=e.variable,i=e.type,n=e.defaultValue,o=e.directives;return r+": "+i+U(" = ",n)+U(" ",x(o," "))},SelectionSet:function(e){var r=e.selections;return ve(r)},Field:function(e){var r=e.alias,i=e.name,n=e.arguments,o=e.directives,s=e.selectionSet,a=U("",r,": ")+i,l=a+U("(",x(n,", "),")");return l.length>Uy&&(l=a+U(`(
`,bn(x(n,`
`)),`
)`)),x([l,x(o," "),s]," ")},Argument:function(e){var r=e.name,i=e.value;return r+": "+i},FragmentSpread:function(e){var r=e.name,i=e.directives;return"..."+r+U(" ",x(i," "))},InlineFragment:function(e){var r=e.typeCondition,i=e.directives,n=e.selectionSet;return x(["...",U("on ",r),x(i," "),n]," ")},FragmentDefinition:function(e){var r=e.name,i=e.typeCondition,n=e.variableDefinitions,o=e.directives,s=e.selectionSet;return"fragment ".concat(r).concat(U("(",x(n,", "),")")," ")+"on ".concat(i," ").concat(U("",x(o," ")," "))+s},IntValue:function(e){var r=e.value;return r},FloatValue:function(e){var r=e.value;return r},StringValue:function(e,r){var i=e.value,n=e.block;return n?Dc(i,r==="description"?"":"  "):JSON.stringify(i)},BooleanValue:function(e){var r=e.value;return r?"true":"false"},NullValue:function(){return"null"},EnumValue:function(e){var r=e.value;return r},ListValue:function(e){var r=e.values;return"["+x(r,", ")+"]"},ObjectValue:function(e){var r=e.fields;return"{"+x(r,", ")+"}"},ObjectField:function(e){var r=e.name,i=e.value;return r+": "+i},Directive:function(e){var r=e.name,i=e.arguments;return"@"+r+U("(",x(i,", "),")")},NamedType:function(e){var r=e.name;return r},ListType:function(e){var r=e.type;return"["+r+"]"},NonNullType:function(e){var r=e.type;return r+"!"},SchemaDefinition:ye(function(t){var e=t.directives,r=t.operationTypes;return x(["schema",x(e," "),ve(r)]," ")}),OperationTypeDefinition:function(e){var r=e.operation,i=e.type;return r+": "+i},ScalarTypeDefinition:ye(function(t){var e=t.name,r=t.directives;return x(["scalar",e,x(r," ")]," ")}),ObjectTypeDefinition:ye(function(t){var e=t.name,r=t.interfaces,i=t.directives,n=t.fields;return x(["type",e,U("implements ",x(r," & ")),x(i," "),ve(n)]," ")}),FieldDefinition:ye(function(t){var e=t.name,r=t.arguments,i=t.type,n=t.directives;return e+(Mc(r)?U(`(
`,bn(x(r,`
`)),`
)`):U("(",x(r,", "),")"))+": "+i+U(" ",x(n," "))}),InputValueDefinition:ye(function(t){var e=t.name,r=t.type,i=t.defaultValue,n=t.directives;return x([e+": "+r,U("= ",i),x(n," ")]," ")}),InterfaceTypeDefinition:ye(function(t){var e=t.name,r=t.interfaces,i=t.directives,n=t.fields;return x(["interface",e,U("implements ",x(r," & ")),x(i," "),ve(n)]," ")}),UnionTypeDefinition:ye(function(t){var e=t.name,r=t.directives,i=t.types;return x(["union",e,x(r," "),i&&i.length!==0?"= "+x(i," | "):""]," ")}),EnumTypeDefinition:ye(function(t){var e=t.name,r=t.directives,i=t.values;return x(["enum",e,x(r," "),ve(i)]," ")}),EnumValueDefinition:ye(function(t){var e=t.name,r=t.directives;return x([e,x(r," ")]," ")}),InputObjectTypeDefinition:ye(function(t){var e=t.name,r=t.directives,i=t.fields;return x(["input",e,x(r," "),ve(i)]," ")}),DirectiveDefinition:ye(function(t){var e=t.name,r=t.arguments,i=t.repeatable,n=t.locations;return"directive @"+e+(Mc(r)?U(`(
`,bn(x(r,`
`)),`
)`):U("(",x(r,", "),")"))+(i?" repeatable":"")+" on "+x(n," | ")}),SchemaExtension:function(e){var r=e.directives,i=e.operationTypes;return x(["extend schema",x(r," "),ve(i)]," ")},ScalarTypeExtension:function(e){var r=e.name,i=e.directives;return x(["extend scalar",r,x(i," ")]," ")},ObjectTypeExtension:function(e){var r=e.name,i=e.interfaces,n=e.directives,o=e.fields;return x(["extend type",r,U("implements ",x(i," & ")),x(n," "),ve(o)]," ")},InterfaceTypeExtension:function(e){var r=e.name,i=e.interfaces,n=e.directives,o=e.fields;return x(["extend interface",r,U("implements ",x(i," & ")),x(n," "),ve(o)]," ")},UnionTypeExtension:function(e){var r=e.name,i=e.directives,n=e.types;return x(["extend union",r,x(i," "),n&&n.length!==0?"= "+x(n," | "):""]," ")},EnumTypeExtension:function(e){var r=e.name,i=e.directives,n=e.values;return x(["extend enum",r,x(i," "),ve(n)]," ")},InputObjectTypeExtension:function(e){var r=e.name,i=e.directives,n=e.fields;return x(["extend input",r,x(i," "),ve(n)]," ")}};function ye(t){return function(e){return x([e.description,t(e)],`
`)}}function x(t){var e,r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"";return(e=t==null?void 0:t.filter(function(i){return i}).join(r))!==null&&e!==void 0?e:""}function ve(t){return U(`{
`,bn(x(t,`
`)),`
}`)}function U(t,e){var r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:"";return e!=null&&e!==""?t+e+r:""}function bn(t){return U("  ",t.replace(/\n/g,`
  `))}function Hy(t){return t.indexOf(`
`)!==-1}function Mc(t){return t!=null&&t.some(Hy)}function Me(t,e){var r=t.directives;return!r||!r.length?!0:Rc(r).every(function(i){var n=i.directive,o=i.ifArgument,s=!1;return o.value.kind==="Variable"?(s=e&&e[o.value.name.value],P(s!==void 0,38)):s=o.value.value,n.name.value==="skip"?!s:s})}function jc(t){var e=[];return re(t,{Directive:function(r){e.push(r.name.value)}}),e}function _t(t,e){return jc(e).some(function(r){return t.indexOf(r)>-1})}function Ds(t){return t&&_t(["client"],t)&&_t(["export"],t)}function $y(t){var e=t.name.value;return e==="skip"||e==="include"}function Rc(t){var e=[];return t&&t.length&&t.forEach(function(r){if(!!$y(r)){var i=r.arguments,n=r.name.value;P(i&&i.length===1,39);var o=i[0];P(o.name&&o.name.value==="if",40);var s=o.value;P(s&&(s.kind==="Variable"||s.kind==="BooleanValue"),41),e.push({directive:r,ifArgument:o})}}),e}function Ns(t,e){var r=e,i=[];t.definitions.forEach(function(o){if(o.kind==="OperationDefinition")throw new F(42);o.kind==="FragmentDefinition"&&i.push(o)}),typeof r=="undefined"&&(P(i.length===1,43),r=i[0].name.value);var n=g(g({},t),{definitions:yt([{kind:"OperationDefinition",operation:"query",selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:r}}]}}],t.definitions)});return n}function Re(t){t===void 0&&(t=[]);var e={};return t.forEach(function(r){e[r.name.value]=r}),e}function je(t,e){switch(t.kind){case"InlineFragment":return t;case"FragmentSpread":{var r=e&&e[t.name.value];return P(r,44),r}default:return null}}var Vc=dt(Lc());function de(t){return{__ref:String(t)}}function q(t){return Boolean(t&&typeof t=="object"&&typeof t.__ref=="string")}function Gy(t){return t.kind==="StringValue"}function Wy(t){return t.kind==="BooleanValue"}function Yy(t){return t.kind==="IntValue"}function Jy(t){return t.kind==="FloatValue"}function Xy(t){return t.kind==="Variable"}function Zy(t){return t.kind==="ObjectValue"}function ev(t){return t.kind==="ListValue"}function tv(t){return t.kind==="EnumValue"}function rv(t){return t.kind==="NullValue"}function Xe(t,e,r,i){if(Yy(r)||Jy(r))t[e.value]=Number(r.value);else if(Wy(r)||Gy(r))t[e.value]=r.value;else if(Zy(r)){var n={};r.fields.map(function(s){return Xe(n,s.name,s.value,i)}),t[e.value]=n}else if(Xy(r)){var o=(i||{})[r.name.value];t[e.value]=o}else if(ev(r))t[e.value]=r.values.map(function(s){var a={};return Xe(a,e,s,i),a[e.value]});else if(tv(r))t[e.value]=r.value;else if(rv(r))t[e.value]=null;else throw new F(53)}function Is(t,e){var r=null;t.directives&&(r={},t.directives.forEach(function(n){r[n.name.value]={},n.arguments&&n.arguments.forEach(function(o){var s=o.name,a=o.value;return Xe(r[n.name.value],s,a,e)})}));var i=null;return t.arguments&&t.arguments.length&&(i={},t.arguments.forEach(function(n){var o=n.name,s=n.value;return Xe(i,o,s,e)})),xn(t.name.value,i,r)}var iv=["connection","include","skip","client","rest","export"];function xn(t,e,r){if(e&&r&&r.connection&&r.connection.key)if(r.connection.filter&&r.connection.filter.length>0){var i=r.connection.filter?r.connection.filter:[];i.sort();var n={};return i.forEach(function(a){n[a]=e[a]}),r.connection.key+"("+JSON.stringify(n)+")"}else return r.connection.key;var o=t;if(e){var s=(0,Vc.default)(e);o+="("+s+")"}return r&&Object.keys(r).forEach(function(a){iv.indexOf(a)===-1&&(r[a]&&Object.keys(r[a]).length?o+="@"+a+"("+JSON.stringify(r[a])+")":o+="@"+a)}),o}function Wr(t,e){if(t.arguments&&t.arguments.length){var r={};return t.arguments.forEach(function(i){var n=i.name,o=i.value;return Xe(r,n,o,e)}),r}return null}function _e(t){return t.alias?t.alias.value:t.name.value}function Qt(t,e,r){if(typeof t.__typename=="string")return t.__typename;for(var i=0,n=e.selections;i<n.length;i++){var o=n[i];if(G(o)){if(o.name.value==="__typename")return t[_e(o)]}else{var s=Qt(t,je(o,r).selectionSet,r);if(typeof s=="string")return s}}}function G(t){return t.kind==="Field"}function Yr(t){return t.kind==="InlineFragment"}function gt(t){P(t&&t.kind==="Document",45);var e=t.definitions.filter(function(r){return r.kind!=="FragmentDefinition"}).map(function(r){if(r.kind!=="OperationDefinition")throw new F(46);return r});return P(e.length<=1,47),t}function Ee(t){return gt(t),t.definitions.filter(function(e){return e.kind==="OperationDefinition"})[0]}function zt(t){return t.definitions.filter(function(e){return e.kind==="OperationDefinition"&&e.name}).map(function(e){return e.name.value})[0]||null}function Fe(t){return t.definitions.filter(function(e){return e.kind==="FragmentDefinition"})}function Ms(t){var e=Ee(t);return P(e&&e.operation==="query",48),e}function Rs(t){P(t.kind==="Document",49),P(t.definitions.length<=1,50);var e=t.definitions[0];return P(e.kind==="FragmentDefinition",51),e}function bt(t){gt(t);for(var e,r=0,i=t.definitions;r<i.length;r++){var n=i[r];if(n.kind==="OperationDefinition"){var o=n.operation;if(o==="query"||o==="mutation"||o==="subscription")return n}n.kind==="FragmentDefinition"&&!e&&(e=n)}if(e)return e;throw new F(52)}function xt(t){var e=Object.create(null),r=t&&t.variableDefinitions;return r&&r.length&&r.forEach(function(i){i.defaultValue&&Xe(e,i.variable.name,i.defaultValue)}),e}function js(t,e,r){var i=0;return t.forEach(function(n,o){e.call(this,n,o,t)&&(t[i++]=n)},r),t.length=i,t}var Bc={kind:"Field",name:{kind:"Name",value:"__typename"}};function qc(t,e){return t.selectionSet.selections.every(function(r){return r.kind==="FragmentSpread"&&qc(e[r.name.value],e)})}function Fs(t){return qc(Ee(t)||Rs(t),Re(Fe(t)))?null:t}function Uc(t){return function(r){return t.some(function(i){return i.name&&i.name===r.name.value||i.test&&i.test(r)})}}function Ls(t,e){var r=Object.create(null),i=[],n=Object.create(null),o=[],s=Fs(re(e,{Variable:{enter:function(a,l,u){u.kind!=="VariableDefinition"&&(r[a.name.value]=!0)}},Field:{enter:function(a){if(t&&a.directives){var l=t.some(function(u){return u.remove});if(l&&a.directives&&a.directives.some(Uc(t)))return a.arguments&&a.arguments.forEach(function(u){u.value.kind==="Variable"&&i.push({name:u.value.name.value})}),a.selectionSet&&Qc(a.selectionSet).forEach(function(u){o.push({name:u.name.value})}),null}}},FragmentSpread:{enter:function(a){n[a.name.value]=!0}},Directive:{enter:function(a){if(Uc(t)(a))return null}}}));return s&&js(i,function(a){return!!a.name&&!r[a.name]}).length&&(s=Hc(i,s)),s&&js(o,function(a){return!!a.name&&!n[a.name]}).length&&(s=Kc(o,s)),s}function $t(t){return re(gt(t),{SelectionSet:{enter:function(e,r,i){if(!(i&&i.kind==="OperationDefinition")){var n=e.selections;if(!!n){var o=n.some(function(a){return G(a)&&(a.name.value==="__typename"||a.name.value.lastIndexOf("__",0)===0)});if(!o){var s=i;if(!(G(s)&&s.directives&&s.directives.some(function(a){return a.name.value==="export"})))return g(g({},e),{selections:yt(n,[Bc])})}}}}}})}$t.added=function(t){return t===Bc};var nv={test:function(t){var e=t.name.value==="connection";return e&&(!t.arguments||!t.arguments.some(function(r){return r.name.value==="key"})),e}};function Vs(t){return Ls([nv],gt(t))}function ov(t){return function(r){return t.some(function(i){return r.value&&r.value.kind==="Variable"&&r.value.name&&(i.name===r.value.name.value||i.test&&i.test(r))})}}function Hc(t,e){var r=ov(t);return Fs(re(e,{OperationDefinition:{enter:function(i){return g(g({},i),{variableDefinitions:i.variableDefinitions?i.variableDefinitions.filter(function(n){return!t.some(function(o){return o.name===n.variable.name.value})}):[]})}},Field:{enter:function(i){var n=t.some(function(s){return s.remove});if(n){var o=0;if(i.arguments&&i.arguments.forEach(function(s){r(s)&&(o+=1)}),o===1)return null}}},Argument:{enter:function(i){if(r(i))return null}}}))}function Kc(t,e){function r(i){if(t.some(function(n){return n.name===i.name.value}))return null}return Fs(re(e,{FragmentSpread:{enter:r},FragmentDefinition:{enter:r}}))}function Qc(t){var e=[];return t.selections.forEach(function(r){(G(r)||Yr(r))&&r.selectionSet?Qc(r.selectionSet).forEach(function(i){return e.push(i)}):r.kind==="FragmentSpread"&&e.push(r)}),e}function Bs(t){var e=bt(t),r=e.operation;if(r==="query")return t;var i=re(t,{OperationDefinition:{enter:function(n){return g(g({},n),{operation:"query"})}}});return i}function qs(t){gt(t);var e=Ls([{test:function(r){return r.name.value==="client"},remove:!0}],t);return e&&(e=re(e,{FragmentDefinition:{enter:function(r){if(r.selectionSet){var i=r.selectionSet.selections.every(function(n){return G(n)&&n.name.value==="__typename"});if(i)return null}}}})),e}var sv=Object.prototype.hasOwnProperty;function wn(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return Jr(t)}function Jr(t){var e=t[0]||{},r=t.length;if(r>1)for(var i=new Xr,n=1;n<r;++n)e=i.merge(e,t[n]);return e}function Sn(t){return t!==null&&typeof t=="object"}var av=function(t,e,r){return this.merge(t[r],e[r])},Xr=function(){function t(e){e===void 0&&(e=av),this.reconciler=e,this.isObject=Sn,this.pastCopies=new Set}return t.prototype.merge=function(e,r){for(var i=this,n=[],o=2;o<arguments.length;o++)n[o-2]=arguments[o];return Sn(r)&&Sn(e)?(Object.keys(r).forEach(function(s){if(sv.call(e,s)){var a=e[s];if(r[s]!==a){var l=i.reconciler.apply(i,yt([e,r,s],n));l!==a&&(e=i.shallowCopyForMerge(e),e[s]=l)}}else e=i.shallowCopyForMerge(e),e[s]=r[s]}),e):r},t.prototype.shallowCopyForMerge=function(e){return Sn(e)&&!this.pastCopies.has(e)&&(Array.isArray(e)?e=e.slice(0):e=g({__proto__:Object.getPrototypeOf(e)},e),this.pastCopies.add(e)),e},t}();var D=dt(Xc());function Ys(t){var e,r=t.Symbol;if(typeof r=="function")if(r.observable)e=r.observable;else{e=r.for("https://github.com/benlesh/symbol-observable");try{r.observable=e}catch(i){}}else e="@@observable";return e}var Wt;typeof self!="undefined"?Wt=self:typeof window!="undefined"?Wt=window:typeof global!="undefined"?Wt=global:typeof module!="undefined"?Wt=module:Wt=Function("return this")();var dO=Ys(Wt);D.default.prototype["@@observable"]=function(){return this};var dv=Object.prototype.toString;function Zc(t){return Js(t)}function Js(t,e){switch(dv.call(t)){case"[object Array]":{if(e=e||new Map,e.has(t))return e.get(t);var r=t.slice(0);return e.set(t,r),r.forEach(function(n,o){r[o]=Js(n,e)}),r}case"[object Object]":{if(e=e||new Map,e.has(t))return e.get(t);var i=Object.create(Object.getPrototypeOf(t));return e.set(t,i),Object.keys(t).forEach(function(n){i[n]=Js(t[n],e)}),i}default:return t}}function Xs(t){return t}function wt(t,e,r){var i=[];t.forEach(function(n){return n[e]&&i.push(n)}),i.forEach(function(n){return n[e](r)})}function Zs(t,e,r){return new D.default(function(i){var n=i.next,o=i.error,s=i.complete,a=0,l=!1;function u(f,h){return f?function(d){++a,new Promise(function(m){return m(f(d))}).then(function(m){--a,n&&n.call(i,m),l&&c.complete()},function(m){--a,o&&o.call(i,m)})}:function(d){return h&&h.call(i,d)}}var c={next:u(e,n),error:u(r,o),complete:function(){l=!0,a||s&&s.call(i)}},p=t.subscribe(c);return function(){return p.unsubscribe()}})}function Pn(t){function e(r){Object.defineProperty(t,r,{value:D.default})}return typeof Symbol=="function"&&Symbol.species&&e(Symbol.species),e("@@species"),t}function ep(t){return t&&typeof t.then=="function"}var Yt=function(t){ee(e,t);function e(r){var i=t.call(this,function(n){return i.addObserver(n),function(){return i.removeObserver(n)}})||this;return i.observers=new Set,i.addCount=0,i.promise=new Promise(function(n,o){i.resolve=n,i.reject=o}),i.handlers={next:function(n){i.sub!==null&&(i.latest=["next",n],wt(i.observers,"next",n))},error:function(n){var o=i.sub;o!==null&&(o&&Promise.resolve().then(function(){return o.unsubscribe()}),i.sub=null,i.latest=["error",n],i.reject(n),wt(i.observers,"error",n))},complete:function(){if(i.sub!==null){var n=i.sources.shift();n?ep(n)?n.then(function(o){return i.sub=o.subscribe(i.handlers)}):i.sub=n.subscribe(i.handlers):(i.sub=null,i.latest&&i.latest[0]==="next"?i.resolve(i.latest[1]):i.resolve(),wt(i.observers,"complete"))}}},i.cancel=function(n){i.reject(n),i.sources=[],i.handlers.complete()},i.promise.catch(function(n){}),typeof r=="function"&&(r=[new D.default(r)]),ep(r)?r.then(function(n){return i.start(n)},i.handlers.error):i.start(r),i}return e.prototype.start=function(r){this.sub===void 0&&(this.sources=Array.from(r),this.handlers.complete())},e.prototype.deliverLastMessage=function(r){if(this.latest){var i=this.latest[0],n=r[i];n&&n.call(r,this.latest[1]),this.sub===null&&i==="next"&&r.complete&&r.complete()}},e.prototype.addObserver=function(r){this.observers.has(r)||(this.deliverLastMessage(r),this.observers.add(r),++this.addCount)},e.prototype.removeObserver=function(r,i){this.observers.delete(r)&&--this.addCount<1&&!i&&this.handlers.error(new Error("Observable cancelled prematurely"))},e.prototype.cleanup=function(r){var i=this,n=!1,o=function(){n||(n=!0,i.observers.delete(s),r())},s={next:o,error:o,complete:o},a=this.addCount;this.addObserver(s),this.addCount=a},e}(D.default);Pn(Yt);function Le(t){return Array.isArray(t)&&t.length>0}function Jt(t){return t.errors&&t.errors.length>0||!1}var Ve=typeof WeakMap=="function"&&!(typeof navigator=="object"&&navigator.product==="ReactNative");function Xt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=Object.create(null);return t.forEach(function(i){!i||Object.keys(i).forEach(function(n){var o=i[n];o!==void 0&&(r[n]=o)})}),r}function ei(t){return new D.default(function(e){e.error(t)})}var ti=function(t,e,r){var i=new Error(r);throw i.name="ServerError",i.response=t,i.statusCode=t.status,i.result=e,i};function ea(t){for(var e=["query","operationName","variables","extensions","context"],r=0,i=Object.keys(t);r<i.length;r++){var n=i[r];if(e.indexOf(n)<0)throw new F(26)}return t}function ta(t,e){var r=g({},t),i=function(o){typeof o=="function"?r=g(g({},r),o(r)):r=g(g({},r),o)},n=function(){return g({},r)};return Object.defineProperty(e,"setContext",{enumerable:!1,value:i}),Object.defineProperty(e,"getContext",{enumerable:!1,value:n}),e}function ra(t){var e={variables:t.variables||{},extensions:t.extensions||{},operationName:t.operationName,query:t.query};return e.operationName||(e.operationName=typeof e.query!="string"?zt(e.query)||void 0:""),e}function tp(t,e){return e?e(t):D.default.of()}function ri(t){return typeof t=="function"?new z(t):t}function kn(t){return t.request.length<=1}var NP=function(t){ee(e,t);function e(r,i){var n=t.call(this,r)||this;return n.link=i,n}return e}(Error),z=function(){function t(e){e&&(this.request=e)}return t.empty=function(){return new t(function(){return D.default.of()})},t.from=function(e){return e.length===0?t.empty():e.map(ri).reduce(function(r,i){return r.concat(i)})},t.split=function(e,r,i){var n=ri(r),o=ri(i||new t(tp));return kn(n)&&kn(o)?new t(function(s){return e(s)?n.request(s)||D.default.of():o.request(s)||D.default.of()}):new t(function(s,a){return e(s)?n.request(s,a)||D.default.of():o.request(s,a)||D.default.of()})},t.execute=function(e,r){return e.request(ta(r.context,ra(ea(r))))||D.default.of()},t.concat=function(e,r){var i=ri(e);if(kn(i))return i;var n=ri(r);return kn(n)?new t(function(o){return i.request(o,function(s){return n.request(s)||D.default.of()})||D.default.of()}):new t(function(o,s){return i.request(o,function(a){return n.request(a,s)||D.default.of()})||D.default.of()})},t.prototype.split=function(e,r,i){return this.concat(t.split(e,r,i||new t(tp)))},t.prototype.concat=function(e){return t.concat(this,e)},t.prototype.request=function(e,r){throw new F(21)},t.prototype.onError=function(e,r){if(r&&r.error)return r.error(e),!1;throw e},t.prototype.setOnError=function(e){return this.onError=e,this},t}();var yv=z.empty;var vv=z.from;var _v=z.split;var gv=z.concat;var Zt=z.execute;var rp="3.3.11";var ip=Object.prototype.hasOwnProperty;function ia(t){return function(e){return e.text().then(function(r){try{return JSON.parse(r)}catch(n){var i=n;throw i.name="ServerParseError",i.response=e,i.statusCode=e.status,i.bodyText=r,i}}).then(function(r){return e.status>=300&&ti(e,r,"Response not successful: Received status code "+e.status),!Array.isArray(r)&&!ip.call(r,"data")&&!ip.call(r,"errors")&&ti(e,r,"Server response was missing for query '"+(Array.isArray(t)?t.map(function(i){return i.operationName}):t.operationName)+"'."),r})}}var er=function(t,e){var r;try{r=JSON.stringify(t)}catch(n){var i=new F(23);throw i.parseError=n,i}return r};var bv={includeQuery:!0,includeExtensions:!1},xv={accept:"*/*","content-type":"application/json"},wv={method:"POST"},na={http:bv,headers:xv,options:wv},oa=function(t,e){for(var r=[],i=2;i<arguments.length;i++)r[i-2]=arguments[i];var n=g(g({},e.options),{headers:e.headers,credentials:e.credentials}),o=e.http||{};r.forEach(function(p){n=g(g(g({},n),p.options),{headers:g(g({},n.headers),p.headers)}),p.credentials&&(n.credentials=p.credentials),o=g(g({},o),p.http)});var s=t.operationName,a=t.extensions,l=t.variables,u=t.query,c={operationName:s,variables:l};return o.includeExtensions&&(c.extensions=a),o.includeQuery&&(c.query=gn(u)),{options:n,body:c}};var sa=function(t){if(!t&&typeof fetch=="undefined")throw new F(22)};var aa=function(){if(typeof AbortController=="undefined")return{controller:!1,signal:!1};var t=new AbortController,e=t.signal;return{controller:t,signal:e}};var la=function(t,e){var r=t.getContext(),i=r.uri;return i||(typeof e=="function"?e(t):e||"/graphql")};var vp=dt(yp());function da(t,e){var r=[],i=function(p,f){r.push(p+"="+encodeURIComponent(f))};if("query"in e&&i("query",e.query),e.operationName&&i("operationName",e.operationName),e.variables){var n=void 0;try{n=er(e.variables,"Variables map")}catch(p){return{parseError:p}}i("variables",n)}if(e.extensions){var o=void 0;try{o=er(e.extensions,"Extensions map")}catch(p){return{parseError:p}}i("extensions",o)}var s="",a=t,l=t.indexOf("#");l!==-1&&(s=t.substr(l),a=t.substr(0,l));var u=a.indexOf("?")===-1?"?":"&",c=a+u+r.join("&")+s;return{newURI:c}}var ha=function(t){t===void 0&&(t={});var e=t.uri,r=e===void 0?"/graphql":e,i=t.fetch,n=t.includeExtensions,o=t.useGETForQueries,s=t.includeUnusedVariables,a=s===void 0?!1:s,l=De(t,["uri","fetch","includeExtensions","useGETForQueries","includeUnusedVariables"]);sa(i),i||(i=fetch);var u={http:{includeExtensions:n},options:l.fetchOptions,credentials:l.credentials,headers:l.headers};return new z(function(c){var p=la(c,r),f=c.getContext(),h={};if(f.clientAwareness){var d=f.clientAwareness,m=d.name,y=d.version;m&&(h["apollographql-client-name"]=m),y&&(h["apollographql-client-version"]=y)}var _=g(g({},h),f.headers),w={http:f.http,options:f.fetchOptions,credentials:f.credentials,headers:_},S=oa(c,na,u,w),C=S.options,E=S.body;if(E.variables&&!a){var k=new Set(Object.keys(E.variables));(0,vp.visit)(c.query,{Variable:function(ae,le,fu){fu&&fu.kind!=="VariableDefinition"&&k.delete(ae.name.value)}}),k.size&&(E.variables=g({},E.variables),k.forEach(function(ae){delete E.variables[ae]}))}var O;if(!C.signal){var A=aa(),H=A.controller,J=A.signal;O=H,O&&(C.signal=J)}var Ft=function(ae){return ae.kind==="OperationDefinition"&&ae.operation==="mutation"};if(o&&!c.query.definitions.some(Ft)&&(C.method="GET"),C.method==="GET"){var Ye=da(p,E),Vi=Ye.newURI,Lt=Ye.parseError;if(Lt)return ei(Lt);p=Vi}else try{C.body=er(E,"Payload")}catch(ae){return ei(ae)}return new D.default(function(ae){return i(p,C).then(function(le){return c.setContext({response:le}),le}).then(ia(c)).then(function(le){return ae.next(le),ae.complete(),le}).catch(function(le){le.name!=="AbortError"&&(le.result&&le.result.errors&&le.result.data&&ae.next(le.result),ae.error(le))}),function(){O&&O.abort()}})})};var ma=function(t){ee(e,t);function e(r){r===void 0&&(r={});var i=t.call(this,ha(r).request)||this;return i.options=r,i}return e}(z);var{toString:_p,hasOwnProperty:Hv}=Object.prototype,gp=Function.prototype.toString,ya=new Map;function oe(t,e){try{return va(t,e)}finally{ya.clear()}}function va(t,e){if(t===e)return!0;let r=_p.call(t),i=_p.call(e);if(r!==i)return!1;switch(r){case"[object Array]":if(t.length!==e.length)return!1;case"[object Object]":{if(xp(t,e))return!0;let n=bp(t),o=bp(e),s=n.length;if(s!==o.length)return!1;for(let a=0;a<s;++a)if(!Hv.call(e,n[a]))return!1;for(let a=0;a<s;++a){let l=n[a];if(!va(t[l],e[l]))return!1}return!0}case"[object Error]":return t.name===e.name&&t.message===e.message;case"[object Number]":if(t!==t)return e!==e;case"[object Boolean]":case"[object Date]":return+t==+e;case"[object RegExp]":case"[object String]":return t==`${e}`;case"[object Map]":case"[object Set]":{if(t.size!==e.size)return!1;if(xp(t,e))return!0;let n=t.entries(),o=r==="[object Map]";for(;;){let s=n.next();if(s.done)break;let[a,l]=s.value;if(!e.has(a)||o&&!va(l,e.get(a)))return!1}return!0}case"[object AsyncFunction]":case"[object GeneratorFunction]":case"[object AsyncGeneratorFunction]":case"[object Function]":{let n=gp.call(t);return n!==gp.call(e)?!1:!Qv(n,Kv)}}return!1}function bp(t){return Object.keys(t).filter(zv,t)}function zv(t){return this[t]!==void 0}var Kv="{ [native code] }";function Qv(t,e){let r=t.length-e.length;return r>=0&&t.indexOf(e,r)===r}function xp(t,e){let r=ya.get(t);if(r){if(r.has(e))return!0}else ya.set(t,r=new Set);return r.add(e),!1}function _a(t){return t.hasOwnProperty("graphQLErrors")}var $v=function(t){var e="";return Le(t.graphQLErrors)&&t.graphQLErrors.forEach(function(r){var i=r?r.message:"Error message not found.";e+=i+`
`}),t.networkError&&(e+=t.networkError.message+`
`),e=e.replace(/\n$/,""),e},Ze=function(t){ee(e,t);function e(r){var i=r.graphQLErrors,n=r.networkError,o=r.errorMessage,s=r.extraInfo,a=t.call(this,o)||this;return a.graphQLErrors=i||[],a.networkError=n||null,a.message=o||$v(a),a.extraInfo=s,a.__proto__=e.prototype,a}return e}(Error);var M;(function(t){t[t.loading=1]="loading",t[t.setVariables=2]="setVariables",t[t.fetchMore=3]="fetchMore",t[t.refetch=4]="refetch",t[t.poll=6]="poll",t[t.ready=7]="ready",t[t.error=8]="error"})(M||(M={}));function et(t){return t?t<7:!1}var wp=function(){function t(e,r,i,n){this.observer=e,this.options=r,this.fetch=i,this.shouldFetch=n}return t.prototype.reobserve=function(e,r){e?this.updateOptions(e):this.updatePolling();var i=this.fetch(this.options,r);return this.concast&&this.concast.removeObserver(this.observer,!0),i.addObserver(this.observer),(this.concast=i).promise},t.prototype.updateOptions=function(e){return Object.assign(this.options,Xt(e)),this.updatePolling(),this},t.prototype.stop=function(){this.concast&&(this.concast.removeObserver(this.observer),delete this.concast),this.pollingInfo&&(clearTimeout(this.pollingInfo.timeout),this.options.pollInterval=0,this.updatePolling())},t.prototype.updatePolling=function(){var e=this,r=this,i=r.pollingInfo,n=r.options.pollInterval;if(!n){i&&(clearTimeout(i.timeout),delete this.pollingInfo);return}if(!(i&&i.interval===n)&&(P(n,20),this.shouldFetch!==!1)){var o=i||(this.pollingInfo={});o.interval=n;var s=function(){e.pollingInfo&&(e.shouldFetch&&e.shouldFetch()?e.reobserve({fetchPolicy:"network-only",nextFetchPolicy:e.options.fetchPolicy||"cache-first"},M.poll).then(a,a):a())},a=function(){var l=e.pollingInfo;l&&(clearTimeout(l.timeout),l.timeout=setTimeout(s,l.interval))};a()}},t}();var Mn=function(t){ee(e,t);function e(r){var i=r.queryManager,n=r.queryInfo,o=r.options,s=t.call(this,function(l){return s.onSubscribe(l)})||this;s.observers=new Set,s.subscriptions=new Set,s.observer={next:function(l){(s.lastError||s.isDifferentFromLastResult(l))&&(s.updateLastResult(l),wt(s.observers,"next",l))},error:function(l){s.updateLastResult(g(g({},s.lastResult),{error:l,errors:l.graphQLErrors,networkStatus:M.error,loading:!1})),wt(s.observers,"error",s.lastError=l)}},s.isTornDown=!1,s.options=o,s.queryId=i.generateQueryId();var a=Ee(o.query);return s.queryName=a&&a.name&&a.name.value,s.queryManager=i,s.queryInfo=n,s}return Object.defineProperty(e.prototype,"variables",{get:function(){return this.options.variables},enumerable:!1,configurable:!0}),e.prototype.result=function(){var r=this;return new Promise(function(i,n){var o={next:function(a){i(a),r.observers.delete(o),r.observers.size||r.queryManager.removeQuery(r.queryId),setTimeout(function(){s.unsubscribe()},0)},error:n},s=r.subscribe(o)})},e.prototype.getCurrentResult=function(r){r===void 0&&(r=!0);var i=this.lastResult,n=this.queryInfo.networkStatus||i&&i.networkStatus||M.ready,o=g(g({},i),{loading:et(n),networkStatus:n});if(this.isTornDown)return o;var s=this.options.fetchPolicy,a=s===void 0?"cache-first":s;if(a==="no-cache"||a==="network-only")delete o.partial;else if(!o.data||!this.queryManager.transform(this.options.query).hasForcedResolvers){var l=this.queryInfo.getDiff();o.data=l.complete||this.options.returnPartialData?l.result:void 0,l.complete?(o.networkStatus===M.loading&&(a==="cache-first"||a==="cache-only")&&(o.networkStatus=M.ready,o.loading=!1),delete o.partial):o.partial=!0}return r&&this.updateLastResult(o),o},e.prototype.isDifferentFromLastResult=function(r){return!oe(this.lastResultSnapshot,r)},e.prototype.getLastResult=function(){return this.lastResult},e.prototype.getLastError=function(){return this.lastError},e.prototype.resetLastResults=function(){delete this.lastResult,delete this.lastResultSnapshot,delete this.lastError,this.isTornDown=!1},e.prototype.resetQueryStoreErrors=function(){this.queryManager.resetErrors(this.queryId)},e.prototype.refetch=function(r){var i={pollInterval:0},n=this.options.fetchPolicy;return n!=="no-cache"&&n!=="cache-and-network"&&(i.fetchPolicy="network-only",i.nextFetchPolicy=n||"cache-first"),r&&!oe(this.options.variables,r)&&(i.variables=this.options.variables=g(g({},this.options.variables),r)),this.newReobserver(!1).reobserve(i,M.refetch)},e.prototype.fetchMore=function(r){var i=this,n=g(g({},r.query?r:g(g(g({},this.options),r),{variables:g(g({},this.options.variables),r.variables)})),{fetchPolicy:"no-cache"}),o=this.queryManager.generateQueryId();return n.notifyOnNetworkStatusChange&&(this.queryInfo.networkStatus=M.fetchMore,this.observe()),this.queryManager.fetchQuery(o,n,M.fetchMore).then(function(s){var a=s.data,l=r.updateQuery;return l?i.updateQuery(function(u){return l(u,{fetchMoreResult:a,variables:n.variables})}):i.queryManager.cache.writeQuery({query:n.query,variables:n.variables,data:a}),s}).finally(function(){i.queryManager.stopQuery(o),i.reobserve()})},e.prototype.subscribeToMore=function(r){var i=this,n=this.queryManager.startGraphQLSubscription({query:r.document,variables:r.variables,context:r.context}).subscribe({next:function(o){var s=r.updateQuery;s&&i.updateQuery(function(a,l){var u=l.variables;return s(a,{subscriptionData:o,variables:u})})},error:function(o){if(r.onError){r.onError(o);return}}});return this.subscriptions.add(n),function(){i.subscriptions.delete(n)&&n.unsubscribe()}},e.prototype.setOptions=function(r){return this.reobserve(r)},e.prototype.setVariables=function(r){if(oe(this.variables,r))return this.observers.size?this.result():Promise.resolve();if(this.options.variables=r,!this.observers.size)return Promise.resolve();var i=this.options.fetchPolicy,n=i===void 0?"cache-first":i,o={fetchPolicy:n,variables:r};return n!=="cache-first"&&n!=="no-cache"&&n!=="network-only"&&(o.fetchPolicy="cache-and-network",o.nextFetchPolicy=n),this.reobserve(o,M.setVariables)},e.prototype.updateQuery=function(r){var i,n=this.queryManager,o=n.cache.diff({query:this.options.query,variables:this.variables,previousResult:(i=this.lastResult)===null||i===void 0?void 0:i.data,returnPartialData:!0,optimistic:!1}).result,s=r(o,{variables:this.variables});s&&(n.cache.writeQuery({query:this.options.query,data:s,variables:this.variables}),n.broadcastQueries())},e.prototype.startPolling=function(r){this.getReobserver().updateOptions({pollInterval:r})},e.prototype.stopPolling=function(){this.reobserver&&this.reobserver.updateOptions({pollInterval:0})},e.prototype.updateLastResult=function(r){var i=this.lastResult;return this.lastResult=r,this.lastResultSnapshot=this.queryManager.assumeImmutableResults?r:Zc(r),Le(r.errors)||delete this.lastError,i},e.prototype.onSubscribe=function(r){var i=this;if(r===this.observer)return function(){};try{var n=r._subscription._observer;n&&!n.error&&(n.error=Gv)}catch(s){}var o=!this.observers.size;return this.observers.add(r),this.lastError?r.error&&r.error(this.lastError):this.lastResult&&r.next&&r.next(this.lastResult),o&&this.reobserve().catch(function(s){}),function(){i.observers.delete(r)&&!i.observers.size&&i.tearDownQuery()}},e.prototype.getReobserver=function(){return this.reobserver||(this.reobserver=this.newReobserver(!0))},e.prototype.newReobserver=function(r){var i=this,n=this,o=n.queryManager,s=n.queryId;return o.setObservableQuery(this),new wp(this.observer,r?this.options:g({},this.options),function(a,l){return o.setObservableQuery(i),o.fetchQueryObservable(s,a,l)},!o.ssrMode&&function(){return!et(i.queryInfo.networkStatus)})},e.prototype.reobserve=function(r,i){return this.isTornDown=!1,this.getReobserver().reobserve(r,i)},e.prototype.observe=function(){this.observer.next(this.getCurrentResult(!1))},e.prototype.hasObservers=function(){return this.observers.size>0},e.prototype.tearDownQuery=function(){this.isTornDown||(this.reobserver&&(this.reobserver.stop(),delete this.reobserver),this.subscriptions.forEach(function(r){return r.unsubscribe()}),this.subscriptions.clear(),this.queryManager.stopQuery(this.queryId),this.observers.clear(),this.isTornDown=!0)},e}(D.default);Pn(Mn);function Gv(t){}var Wv=function(){return Object.create(null)},Sp=Array.prototype,Yv=Sp.forEach,Jv=Sp.slice,tt=function(){function t(e,r){e===void 0&&(e=!0),r===void 0&&(r=Wv),this.weakness=e,this.makeData=r}return t.prototype.lookup=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return this.lookupArray(e)},t.prototype.lookupArray=function(e){var r=this;return Yv.call(e,function(i){return r=r.getChildTrie(i)}),r.data||(r.data=this.makeData(Jv.call(e)))},t.prototype.getChildTrie=function(e){var r=this.weakness&&Xv(e)?this.weak||(this.weak=new WeakMap):this.strong||(this.strong=new Map),i=r.get(e);return i||r.set(e,i=new t(this.weakness,this.makeData)),i},t}();function Xv(t){switch(typeof t){case"object":if(t===null)break;case"function":return!0}return!1}var W=null,Ep={},Zv=1,e_=function(){return function(){function t(){this.id=["slot",Zv++,Date.now(),Math.random().toString(36).slice(2)].join(":")}return t.prototype.hasValue=function(){for(var e=W;e;e=e.parent)if(this.id in e.slots){var r=e.slots[this.id];if(r===Ep)break;return e!==W&&(W.slots[this.id]=r),!0}return W&&(W.slots[this.id]=Ep),!1},t.prototype.getValue=function(){if(this.hasValue())return W.slots[this.id]},t.prototype.withValue=function(e,r,i,n){var o,s=(o={__proto__:null},o[this.id]=e,o),a=W;W={parent:a,slots:s};try{return r.apply(n,i)}finally{W=a}},t.bind=function(e){var r=W;return function(){var i=W;try{return W=r,e.apply(this,arguments)}finally{W=i}}},t.noContext=function(e,r,i){if(W){var n=W;try{return W=null,e.apply(i,r)}finally{W=n}}else return e.apply(i,r)},t}()},ga="@wry/context:Slot",ba=Array,rr=ba[ga]||function(){var t=e_();try{Object.defineProperty(ba,ga,{value:ba[ga]=t,enumerable:!1,writable:!1,configurable:!1})}finally{return t}}(),t_=rr.bind,r_=rr.noContext;function i_(){}var n_=function(){function t(e,r){e===void 0&&(e=Infinity),r===void 0&&(r=i_),this.max=e,this.dispose=r,this.map=new Map,this.newest=null,this.oldest=null}return t.prototype.has=function(e){return this.map.has(e)},t.prototype.get=function(e){var r=this.getEntry(e);return r&&r.value},t.prototype.getEntry=function(e){var r=this.map.get(e);if(r&&r!==this.newest){var i=r.older,n=r.newer;n&&(n.older=i),i&&(i.newer=n),r.older=this.newest,r.older.newer=r,r.newer=null,this.newest=r,r===this.oldest&&(this.oldest=n)}return r},t.prototype.set=function(e,r){var i=this.getEntry(e);return i?i.value=r:(i={key:e,value:r,newer:null,older:this.newest},this.newest&&(this.newest.newer=i),this.newest=i,this.oldest=this.oldest||i,this.map.set(e,i),i.value)},t.prototype.clean=function(){for(;this.oldest&&this.map.size>this.max;)this.delete(this.oldest.key)},t.prototype.delete=function(e){var r=this.map.get(e);return r?(r===this.newest&&(this.newest=r.older),r===this.oldest&&(this.oldest=r.newer),r.newer&&(r.newer.older=r.older),r.older&&(r.older.newer=r.newer),this.map.delete(e),this.dispose(r.value,e),!0):!1},t}(),Rn=new rr;function ii(t){var e=t.unsubscribe;typeof e=="function"&&(t.unsubscribe=void 0,e())}var ni=[],o_=100;function ir(t,e){if(!t)throw new Error(e||"assertion failure")}function s_(t,e){var r=t.length;return r>0&&r===e.length&&t[r-1]===e[r-1]}function Tp(t){switch(t.length){case 0:throw new Error("unknown value");case 1:return t[0];case 2:throw t[1]}}function a_(t){return t.slice(0)}var c_=function(){function t(e){this.fn=e,this.parents=new Set,this.childValues=new Map,this.dirtyChildren=null,this.dirty=!0,this.recomputing=!1,this.value=[],this.deps=null,++t.count}return t.prototype.peek=function(){if(this.value.length===1&&!Et(this))return this.value[0]},t.prototype.recompute=function(e){return ir(!this.recomputing,"already recomputing"),l_(this),Et(this)?u_(this,e):Tp(this.value)},t.prototype.setDirty=function(){this.dirty||(this.dirty=!0,this.value.length=0,Cp(this),xa(this),ii(this))},t.prototype.dispose=function(){var e=this;xa(this),ii(this),this.parents.forEach(function(r){r.setDirty(),Op(r,e)})},t.prototype.dependOn=function(e){e.add(this),this.deps||(this.deps=ni.pop()||new Set),this.deps.add(e)},t.prototype.forgetDeps=function(){var e=this;this.deps&&(this.deps.forEach(function(r){return r.delete(e)}),this.deps.clear(),ni.push(this.deps),this.deps=null)},t.count=0,t}();function l_(t){var e=Rn.getValue();if(e)return t.parents.add(e),e.childValues.has(t)||e.childValues.set(t,[]),Et(t)?Pp(e,t):kp(e,t),e}function u_(t,e){return xa(t),Rn.withValue(t,p_,[t,e]),d_(t,e)&&f_(t),Tp(t.value)}function p_(t,e){t.recomputing=!0,t.value.length=0;try{t.value[0]=t.fn.apply(null,e)}catch(r){t.value[1]=r}t.recomputing=!1}function Et(t){return t.dirty||!!(t.dirtyChildren&&t.dirtyChildren.size)}function f_(t){t.dirty=!1,!Et(t)&&Ap(t)}function Cp(t){t.parents.forEach(function(e){return Pp(e,t)})}function Ap(t){t.parents.forEach(function(e){return kp(e,t)})}function Pp(t,e){if(ir(t.childValues.has(e)),ir(Et(e)),!t.dirtyChildren)t.dirtyChildren=ni.pop()||new Set;else if(t.dirtyChildren.has(e))return;t.dirtyChildren.add(e),Cp(t)}function kp(t,e){ir(t.childValues.has(e)),ir(!Et(e));var r=t.childValues.get(e);r.length===0?t.childValues.set(e,a_(e.value)):s_(r,e.value)||t.setDirty(),Dp(t,e),!Et(t)&&Ap(t)}function Dp(t,e){var r=t.dirtyChildren;r&&(r.delete(e),r.size===0&&(ni.length<o_&&ni.push(r),t.dirtyChildren=null))}function xa(t){t.childValues.size>0&&t.childValues.forEach(function(e,r){Op(t,r)}),t.forgetDeps(),ir(t.dirtyChildren===null)}function Op(t,e){e.parents.delete(t),t.childValues.delete(e),Dp(t,e)}function d_(t,e){if(typeof t.subscribe=="function")try{ii(t),t.unsubscribe=t.subscribe.apply(null,e)}catch(r){return t.setDirty(),!1}return!0}function nr(t){var e=new Map,r=t&&t.subscribe;function i(n){var o=Rn.getValue();if(o){var s=e.get(n);s||e.set(n,s=new Set),o.dependOn(s),typeof r=="function"&&(ii(s),s.unsubscribe=r(n))}}return i.dirty=function(o){var s=e.get(o);s&&(s.forEach(function(a){return a.setDirty()}),e.delete(o),ii(s))},i}var h_=new tt(typeof WeakMap=="function");function m_(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return h_.lookupArray(t)}var wa=new Set;function Tt(t,e){e===void 0&&(e=Object.create(null));var r=new n_(e.max||Math.pow(2,16),function(a){return a.dispose()}),i=e.keyArgs||function(){for(var a=[],l=0;l<arguments.length;l++)a[l]=arguments[l];return a},n=e.makeCacheKey||m_;function o(){var a=n.apply(null,i.apply(null,arguments));if(a===void 0)return t.apply(null,arguments);var l=r.get(a);l||(r.set(a,l=new c_(t)),l.subscribe=e.subscribe);var u=l.recompute(Array.prototype.slice.call(arguments));return r.set(a,l),wa.add(r),Rn.hasValue()||(wa.forEach(function(c){return c.clean()}),wa.clear()),u}function s(){var a=n.apply(null,arguments);if(a!==void 0)return r.get(a)}return o.dirty=function(){var a=s.apply(null,arguments);a&&a.setDirty()},o.peek=function(){var a=s.apply(null,arguments);if(a)return a.peek()},o.forget=function(){var a=n.apply(null,arguments);return a!==void 0&&r.delete(a)},o}var jn=function(){function t(){this.getFragmentDoc=Tt(Ns)}return t.prototype.recordOptimisticTransaction=function(e,r){this.performTransaction(e,r)},t.prototype.transformDocument=function(e){return e},t.prototype.identify=function(e){},t.prototype.gc=function(){return[]},t.prototype.modify=function(e){return!1},t.prototype.transformForLink=function(e){return e},t.prototype.readQuery=function(e,r){return r===void 0&&(r=!!e.optimistic),this.read({rootId:e.id||"ROOT_QUERY",query:e.query,variables:e.variables,returnPartialData:e.returnPartialData,optimistic:r})},t.prototype.readFragment=function(e,r){return r===void 0&&(r=!!e.optimistic),this.read({query:this.getFragmentDoc(e.fragment,e.fragmentName),variables:e.variables,rootId:e.id,returnPartialData:e.returnPartialData,optimistic:r})},t.prototype.writeQuery=function(e){return this.write({dataId:e.id||"ROOT_QUERY",result:e.data,query:e.query,variables:e.variables,broadcast:e.broadcast})},t.prototype.writeFragment=function(e){return this.write({dataId:e.id,result:e.data,variables:e.variables,query:this.getFragmentDoc(e.fragment,e.fragmentName),broadcast:e.broadcast})},t}();var Fn;(function(t){})(Fn||(Fn={}));var or=function(){function t(e,r,i,n,o){this.message=e,this.path=r,this.query=i,this.clientOnly=n,this.variables=o}return t}();var Q=Object.prototype.hasOwnProperty;var Sa=/^[_a-z][_0-9a-z]*/i;function qe(t){var e=t.match(Sa);return e?e[0]:t}function Ln(t,e,r){return e&&typeof e=="object"?Array.isArray(e)?e.every(function(i){return Ln(t,i,r)}):t.selections.every(function(i){if(G(i)&&Me(i,r)){var n=_e(i);return Q.call(e,n)&&(!i.selectionSet||Ln(i.selectionSet,e[n],r))}return!0}):!1}function oi(t){return t!==null&&typeof t=="object"&&!q(t)&&!Array.isArray(t)}function Np(){return new Xr}var Vn=Object.create(null),Ea=function(){return Vn},Ip=Object.create(null),sr=function(){function t(e,r){var i=this;this.policies=e,this.group=r,this.data=Object.create(null),this.rootIds=Object.create(null),this.refs=Object.create(null),this.getFieldValue=function(n,o){return Xs(q(n)?i.get(n.__ref,o):n&&n[o])},this.canRead=function(n){return q(n)?i.has(n.__ref):typeof n=="object"},this.toReference=function(n,o){if(typeof n=="string")return de(n);if(q(n))return n;var s=i.policies.identify(n)[0];if(s){var a=de(s);return o&&i.merge(s,n),a}}}return t.prototype.toObject=function(){return g({},this.data)},t.prototype.has=function(e){return this.lookup(e,!0)!==void 0},t.prototype.get=function(e,r){if(this.group.depend(e,r),Q.call(this.data,e)){var i=this.data[e];if(i&&Q.call(i,r))return i[r]}if(r==="__typename"&&Q.call(this.policies.rootTypenamesById,e))return this.policies.rootTypenamesById[e];if(this instanceof rt)return this.parent.get(e,r)},t.prototype.lookup=function(e,r){if(r&&this.group.depend(e,"__exists"),Q.call(this.data,e))return this.data[e];if(this instanceof rt)return this.parent.lookup(e,r);if(this.policies.rootTypenamesById[e])return Object.create(null)},t.prototype.merge=function(e,r){var i=this,n=this.lookup(e),o=new Xr(y_).merge(n,r);if(this.data[e]=o,o!==n&&(delete this.refs[e],this.group.caching)){var s=Object.create(null);n||(s.__exists=1),Object.keys(r).forEach(function(a){if(!n||n[a]!==o[a]){s[a]=1;var l=qe(a);l!==a&&!i.policies.hasKeyArgs(o.__typename,l)&&(s[l]=1),o[a]===void 0&&!(i instanceof rt)&&delete o[a]}}),Object.keys(s).forEach(function(a){return i.group.dirty(e,a)})}},t.prototype.modify=function(e,r){var i=this,n=this.lookup(e);if(n){var o=Object.create(null),s=!1,a=!0,l={DELETE:Vn,INVALIDATE:Ip,isReference:q,toReference:this.toReference,canRead:this.canRead,readField:function(u,c){return i.policies.readField(typeof u=="string"?{fieldName:u,from:c||de(e)}:u,{store:i})}};if(Object.keys(n).forEach(function(u){var c=qe(u),p=n[u];if(p!==void 0){var f=typeof r=="function"?r:r[u]||r[c];if(f){var h=f===Ea?Vn:f(Xs(p),g(g({},l),{fieldName:c,storeFieldName:u,storage:i.getStorage(e,u)}));h===Ip?i.group.dirty(e,u):(h===Vn&&(h=void 0),h!==p&&(o[u]=h,s=!0,p=h))}p!==void 0&&(a=!1)}}),s)return this.merge(e,o),a&&(this instanceof rt?this.data[e]=void 0:delete this.data[e],this.group.dirty(e,"__exists")),!0}return!1},t.prototype.delete=function(e,r,i){var n,o=this.lookup(e);if(o){var s=this.getFieldValue(o,"__typename"),a=r&&i?this.policies.getStoreFieldName({typename:s,fieldName:r,args:i}):r;return this.modify(e,a?(n={},n[a]=Ea,n):Ea)}return!1},t.prototype.evict=function(e){var r=!1;return e.id&&(Q.call(this.data,e.id)&&(r=this.delete(e.id,e.fieldName,e.args)),this instanceof rt&&(r=this.parent.evict(e)||r),(e.fieldName||r)&&this.group.dirty(e.id,e.fieldName||"__exists")),r},t.prototype.clear=function(){this.replace(null)},t.prototype.extract=function(){var e=this,r=this.toObject(),i=[];return this.getRootIdSet().forEach(function(n){Q.call(e.policies.rootTypenamesById,n)||i.push(n)}),i.length&&(r.__META={extraRootIds:i.sort()}),r},t.prototype.replace=function(e){var r=this;if(Object.keys(this.data).forEach(function(o){e&&Q.call(e,o)||r.delete(o)}),e){var i=e.__META,n=De(e,["__META"]);Object.keys(n).forEach(function(o){r.merge(o,n[o])}),i&&i.extraRootIds.forEach(this.retain,this)}},t.prototype.retain=function(e){return this.rootIds[e]=(this.rootIds[e]||0)+1},t.prototype.release=function(e){if(this.rootIds[e]>0){var r=--this.rootIds[e];return r||delete this.rootIds[e],r}return 0},t.prototype.getRootIdSet=function(e){return e===void 0&&(e=new Set),Object.keys(this.rootIds).forEach(e.add,e),this instanceof rt?this.parent.getRootIdSet(e):Object.keys(this.policies.rootTypenamesById).forEach(e.add,e),e},t.prototype.gc=function(){var e=this,r=this.getRootIdSet(),i=this.toObject();r.forEach(function(s){Q.call(i,s)&&(Object.keys(e.findChildRefIds(s)).forEach(r.add,r),delete i[s])});var n=Object.keys(i);if(n.length){for(var o=this;o instanceof rt;)o=o.parent;n.forEach(function(s){return o.delete(s)})}return n},t.prototype.findChildRefIds=function(e){if(!Q.call(this.refs,e)){var r=this.refs[e]=Object.create(null),i=new Set([this.data[e]]),n=function(o){return o!==null&&typeof o=="object"};i.forEach(function(o){q(o)?r[o.__ref]=!0:n(o)&&Object.values(o).filter(n).forEach(i.add,i)})}return this.refs[e]},t.prototype.makeCacheKey=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return this.group.keyMaker.lookupArray(e)},t}();var Mp=function(){function t(e){this.caching=e,this.d=null,this.keyMaker=new tt(Ve),this.d=e?nr():null}return t.prototype.depend=function(e,r){if(this.d){this.d(Ta(e,r));var i=qe(r);i!==r&&this.d(Ta(e,i))}},t.prototype.dirty=function(e,r){this.d&&this.d.dirty(Ta(e,r))},t}();function Ta(t,e){return e+"#"+t}(function(t){var e=function(r){ee(i,r);function i(n){var o=n.policies,s=n.resultCaching,a=s===void 0?!0:s,l=n.seed,u=r.call(this,o,new Mp(a))||this;return u.storageTrie=new tt(Ve),u.sharedLayerGroup=new Mp(a),l&&u.replace(l),u}return i.prototype.addLayer=function(n,o){return new rt(n,this,o,this.sharedLayerGroup)},i.prototype.removeLayer=function(){return this},i.prototype.getStorage=function(){return this.storageTrie.lookupArray(arguments)},i}(t);t.Root=e})(sr||(sr={}));var rt=function(t){ee(e,t);function e(r,i,n,o){var s=t.call(this,i.policies,o)||this;return s.id=r,s.parent=i,s.replay=n,s.group=o,n(s),s}return e.prototype.addLayer=function(r,i){return new e(r,this,i,this.group)},e.prototype.removeLayer=function(r){var i=this,n=this.parent.removeLayer(r);return r===this.id?(this.group.caching&&Object.keys(this.data).forEach(function(o){i.data[o]!==n.lookup(o)&&i.delete(o)}),n):n===this.parent?this:n.addLayer(this.id,this.replay)},e.prototype.toObject=function(){return g(g({},this.parent.toObject()),this.data)},e.prototype.findChildRefIds=function(r){var i=this.parent.findChildRefIds(r);return Q.call(this.data,r)?g(g({},i),t.prototype.findChildRefIds.call(this,r)):i},e.prototype.getStorage=function(){for(var r=this.parent;r.parent;)r=r.parent;return r.getStorage.apply(r,arguments)},e}(sr);function y_(t,e,r){var i=t[r],n=e[r];return oe(i,n)?i:n}function ar(t){return!!(t instanceof sr&&t.group.caching)}function Rp(t,e){return new or(t.message,e.path.slice(),e.query,e.clientOnly,e.variables)}var jp=function(){function t(e){var r=this;this.config=e,this.executeSelectionSet=Tt(function(i){return r.execSelectionSetImpl(i)},{keyArgs:function(i){return[i.selectionSet,i.objectOrReference,i.context]},makeCacheKey:function(i,n,o){if(ar(o.store))return o.store.makeCacheKey(i,q(n)?n.__ref:n,o.varString)}}),this.knownResults=new WeakMap,this.executeSubSelectedArray=Tt(function(i){return r.execSubSelectedArrayImpl(i)},{makeCacheKey:function(i){var n=i.field,o=i.array,s=i.context;if(ar(s.store))return s.store.makeCacheKey(n,o,s.varString)}}),this.config=g({addTypename:!0},e)}return t.prototype.diffQueryAgainstStore=function(e){var r=e.store,i=e.query,n=e.rootId,o=n===void 0?"ROOT_QUERY":n,s=e.variables,a=e.returnPartialData,l=a===void 0?!0:a,u=this.config.cache.policies;s=g(g({},xt(Ms(i))),s);var c=this.executeSelectionSet({selectionSet:bt(i).selectionSet,objectOrReference:de(o),context:{store:r,query:i,policies:u,variables:s,varString:JSON.stringify(s),fragmentMap:Re(Fe(i)),path:[],clientOnly:!1}}),p=c.missing&&c.missing.length>0;if(p&&!l)throw c.missing[0];return{result:c.result,missing:c.missing,complete:!p}},t.prototype.isFresh=function(e,r,i,n){if(ar(n.store)&&this.knownResults.get(e)===i){var o=this.executeSelectionSet.peek(i,r,n);if(o&&e===o.result)return!0}return!1},t.prototype.execSelectionSetImpl=function(e){var r=this,i=e.selectionSet,n=e.objectOrReference,o=e.context;if(q(n)&&!o.policies.rootTypenamesById[n.__ref]&&!o.store.has(n.__ref))return{result:{},missing:[Rp(new F(4),o)]};var s=o.variables,a=o.policies,l=o.store,u=[],c={result:null},p=l.getFieldValue(n,"__typename");this.config.addTypename&&typeof p=="string"&&!a.rootIdsByTypename[p]&&u.push({__typename:p});function f(){return c.missing||(c.missing=[])}function h(m){var y;return m.missing&&(y=f()).push.apply(y,m.missing),m.result}var d=new Set(i.selections);return d.forEach(function(m){var y;if(!!Me(m,s))if(G(m)){var _=a.readField({fieldName:m.name.value,field:m,variables:o.variables,from:n},o),w=_e(m);o.path.push(w);var S=o.clientOnly;o.clientOnly=S||!!(m.directives&&m.directives.some(function(E){return E.name.value==="client"})),_===void 0?$t.added(m)||f().push(Rp(new F(5),o)):Array.isArray(_)?_=h(r.executeSubSelectedArray({field:m,array:_,context:o})):m.selectionSet&&_!=null&&(_=h(r.executeSelectionSet({selectionSet:m.selectionSet,objectOrReference:_,context:o}))),_!==void 0&&u.push((y={},y[w]=_,y)),o.clientOnly=S,P(o.path.pop()===w)}else{var C=je(m,o.fragmentMap);C&&a.fragmentMatches(C,p)&&C.selectionSet.selections.forEach(d.add,d)}}),c.result=Jr(u),this.knownResults.set(c.result,i),c},t.prototype.execSubSelectedArrayImpl=function(e){var r=this,i=e.field,n=e.array,o=e.context,s;function a(l,u){return l.missing&&(s=s||[],s.push.apply(s,l.missing)),P(o.path.pop()===u),l.result}return i.selectionSet&&(n=n.filter(o.store.canRead)),n=n.map(function(l,u){return l===null?null:(o.path.push(u),Array.isArray(l)?a(r.executeSubSelectedArray({field:i,array:l,context:o}),u):i.selectionSet?a(r.executeSelectionSet({selectionSet:i.selectionSet,objectOrReference:l,context:o}),u):(P(o.path.pop()===u),l))}),{result:n,missing:s}},t}();var Vp=function(){function t(e,r){this.cache=e,this.reader=r}return t.prototype.writeToStore=function(e){var r=e.query,i=e.result,n=e.dataId,o=e.store,s=e.variables,a=Ee(r),l=Np();s=g(g({},xt(a)),s);var u=this.processSelectionSet({result:i||Object.create(null),dataId:n,selectionSet:a.selectionSet,mergeTree:{map:new Map},context:{store:o,written:Object.create(null),merge:function(c,p){return l.merge(c,p)},variables:s,varString:JSON.stringify(s),fragmentMap:Re(Fe(r))}});if(!q(u))throw new F(7);return o.retain(u.__ref),u},t.prototype.processSelectionSet=function(e){var r=this,i=e.dataId,n=e.result,o=e.selectionSet,s=e.context,a=e.mergeTree,l=this.cache.policies,u=l.identify(n,o,s.fragmentMap),c=u[0],p=u[1];if(i=i||c,typeof i=="string"){var f=s.written[i]||(s.written[i]=[]),h=de(i);if(f.indexOf(o)>=0||(f.push(o),this.reader&&this.reader.isFresh(n,h,o,s)))return h}var d=Object.create(null);p&&(d=s.merge(d,p));var m=i&&l.rootTypenamesById[i]||Qt(n,o,s.fragmentMap)||i&&s.store.get(i,"__typename");typeof m=="string"&&(d.__typename=m);var y=new Set(o.selections);if(y.forEach(function(E){var k;if(!!Me(E,s.variables))if(G(E)){var O=_e(E),A=n[O];if(typeof A!="undefined"){var H=l.getStoreFieldName({typename:m,fieldName:E.name.value,field:E,variables:s.variables}),J=Fp(a,H),Ft=r.processFieldValue(A,E,s,J),Ye=E.selectionSet&&s.store.getFieldValue(Ft,"__typename")||void 0,Vi=l.getMergeFunction(m,E.name.value,Ye);Vi?J.info={field:E,typename:m,merge:Vi}:Lp(a,H),d=s.merge(d,(k={},k[H]=Ft,k))}else if(l.usingPossibleTypes&&!_t(["defer","client"],E))throw new F(8)}else{var Lt=je(E,s.fragmentMap);Lt&&l.fragmentMatches(Lt,m,n,s.variables)&&Lt.selectionSet.selections.forEach(y.add,y)}}),typeof i=="string"){var _=de(i);if(a.map.size&&(d=this.applyMerges(a,_,d,s)),!1)var w,S,C;return s.store.merge(i,d),_}return d},t.prototype.processFieldValue=function(e,r,i,n){var o=this;return!r.selectionSet||e===null?e:Array.isArray(e)?e.map(function(s,a){var l=o.processFieldValue(s,r,i,Fp(n,a));return Lp(n,a),l}):this.processSelectionSet({result:e,selectionSet:r.selectionSet,context:i,mergeTree:n})},t.prototype.applyMerges=function(e,r,i,n,o){var s,a=this;if(e.map.size&&!q(i)){var l=!Array.isArray(i)&&(q(r)||oi(r))?r:void 0,u=i;l&&!o&&(o=[q(l)?l.__ref:l]);var c,p=function(f,h){return Array.isArray(f)?typeof h=="number"?f[h]:void 0:n.store.getFieldValue(f,String(h))};e.map.forEach(function(f,h){o&&o.push(h);var d=p(l,h),m=p(u,h),y=a.applyMerges(f,d,m,n,o);y!==m&&(c=c||new Map,c.set(h,y)),o&&P(o.pop()===h)}),c&&(i=Array.isArray(u)?u.slice(0):g({},u),c.forEach(function(f,h){i[h]=f}))}return e.info?this.cache.policies.runMergeFunction(r,i,e.info,n,o&&(s=n.store).getStorage.apply(s,o)):i},t}();var Bp=[];function Fp(t,e){var r=t.map;return r.has(e)||r.set(e,Bp.pop()||{map:new Map}),r.get(e)}function Lp(t,e){var r=t.map,i=r.get(e);i&&!i.info&&!i.map.size&&(Bp.push(i),r.delete(e))}var QA=new Set;var lr=new rr;function v_(t,e){if(t.size){var r=[];t.forEach(function(i){return r.push(i)}),t.clear(),r.forEach(e)}}var qp=new WeakMap;function si(t){var e=qp.get(t);return e||qp.set(t,e={vars:new Set,dep:nr()}),e}function Up(t){si(t).vars.forEach(function(e){return e.forgetCache(t)})}function Hp(t){si(t).vars.forEach(function(e){return e.attachCache(t)})}function Bn(t){var e=new Set,r=new Set,i=function(o){if(arguments.length>0)t!==o&&(t=o,e.forEach(function(a){si(a).dep.dirty(i),__(a)}),v_(r,function(a){return a(t)}));else{var s=lr.getValue();s&&(n(s),si(s).dep(i))}return t};i.onNextChange=function(o){return r.add(o),function(){r.delete(o)}};var n=i.attachCache=function(o){return e.add(o),si(o).vars.add(i),i};return i.forgetCache=function(o){return e.delete(o)},i}function __(t){t.broadcastWatches&&t.broadcastWatches()}function Ca(t){return t.args!==void 0?t.args:t.field?Wr(t.field,t.variables):null}var ai=function(t,e){var r=t.__typename,i=t.id,n=t._id;if(typeof r=="string"&&(e&&(e.keyObject=i!==void 0?{id:i}:n!==void 0?{_id:n}:void 0),i===void 0&&(i=n),i!==void 0))return r+":"+(typeof i=="number"||typeof i=="string"?i:JSON.stringify(i))},g_=function(){},Kp=function(t,e){return e.fieldName},Qp=function(t,e,r){var i=r.mergeObjects;return i(t,e)},zp=function(t,e){return e},Jp=function(){function t(e){this.config=e,this.typePolicies=Object.create(null),this.toBeAdded=Object.create(null),this.supertypeMap=new Map,this.fuzzySubtypes=new Map,this.rootIdsByTypename=Object.create(null),this.rootTypenamesById=Object.create(null),this.usingPossibleTypes=!1,this.config=g({dataIdFromObject:ai},e),this.cache=this.config.cache,this.setRootTypename("Query"),this.setRootTypename("Mutation"),this.setRootTypename("Subscription"),e.possibleTypes&&this.addPossibleTypes(e.possibleTypes),e.typePolicies&&this.addTypePolicies(e.typePolicies)}return t.prototype.identify=function(e,r,i){var n=r&&i?Qt(e,r,i):e.__typename;if(n===this.rootTypenamesById.ROOT_QUERY)return["ROOT_QUERY"];for(var o={typename:n,selectionSet:r,fragmentMap:i},s,a=n&&this.getTypePolicy(n),l=a&&a.keyFn||this.config.dataIdFromObject;l;){var u=l(e,o);if(Array.isArray(u))l=Yp(u);else{s=u;break}}return s=s&&String(s),o.keyObject?[s,o.keyObject]:[s]},t.prototype.addTypePolicies=function(e){var r=this;Object.keys(e).forEach(function(i){var n=e[i],o=n.queryType,s=n.mutationType,a=n.subscriptionType,l=De(n,["queryType","mutationType","subscriptionType"]);o&&r.setRootTypename("Query",i),s&&r.setRootTypename("Mutation",i),a&&r.setRootTypename("Subscription",i),Q.call(r.toBeAdded,i)?r.toBeAdded[i].push(l):r.toBeAdded[i]=[l]})},t.prototype.updateTypePolicy=function(e,r){var i=this,n=this.getTypePolicy(e),o=r.keyFields,s=r.fields;function a(l,u){l.merge=typeof u=="function"?u:u===!0?Qp:u===!1?zp:l.merge}a(n,r.merge),n.keyFn=o===!1?g_:Array.isArray(o)?Yp(o):typeof o=="function"?o:n.keyFn,s&&Object.keys(s).forEach(function(l){var u=i.getFieldPolicy(e,l,!0),c=s[l];if(typeof c=="function")u.read=c;else{var p=c.keyArgs,f=c.read,h=c.merge;u.keyFn=p===!1?Kp:Array.isArray(p)?Wp(p):typeof p=="function"?p:u.keyFn,typeof f=="function"&&(u.read=f),a(u,h)}u.read&&u.merge&&(u.keyFn=u.keyFn||Kp)})},t.prototype.setRootTypename=function(e,r){r===void 0&&(r=e);var i="ROOT_"+e.toUpperCase(),n=this.rootTypenamesById[i];r!==n&&(P(!n||n===e,1),n&&delete this.rootIdsByTypename[n],this.rootIdsByTypename[r]=i,this.rootTypenamesById[i]=r)},t.prototype.addPossibleTypes=function(e){var r=this;this.usingPossibleTypes=!0,Object.keys(e).forEach(function(i){r.getSupertypeSet(i,!0),e[i].forEach(function(n){r.getSupertypeSet(n,!0).add(i);var o=n.match(Sa);(!o||o[0]!==n)&&r.fuzzySubtypes.set(n,new RegExp(n))})})},t.prototype.getTypePolicy=function(e){var r=this;if(!Q.call(this.typePolicies,e)){var i=this.typePolicies[e]=Object.create(null);i.fields=Object.create(null);var n=this.supertypeMap.get(e);n&&n.size&&n.forEach(function(s){var a=r.getTypePolicy(s),l=a.fields,u=De(a,["fields"]);Object.assign(i,u),Object.assign(i.fields,l)})}var o=this.toBeAdded[e];return o&&o.length&&this.updateTypePolicy(e,Xt.apply(void 0,o.splice(0))),this.typePolicies[e]},t.prototype.getFieldPolicy=function(e,r,i){if(e){var n=this.getTypePolicy(e).fields;return n[r]||i&&(n[r]=Object.create(null))}},t.prototype.getSupertypeSet=function(e,r){var i=this.supertypeMap.get(e);return!i&&r&&this.supertypeMap.set(e,i=new Set),i},t.prototype.fragmentMatches=function(e,r,i,n){var o=this;if(!e.typeCondition)return!0;if(!r)return!1;var s=e.typeCondition.name.value;if(r===s)return!0;if(this.usingPossibleTypes&&this.supertypeMap.has(s))for(var a=this.getSupertypeSet(r,!0),l=[a],u=function(d){var m=o.getSupertypeSet(d,!1);m&&m.size&&l.indexOf(m)<0&&l.push(m)},c=!!(i&&this.fuzzySubtypes.size),p=!1,f=0;f<l.length;++f){var h=l[f];if(h.has(s))return a.has(s)||a.add(s),!0;h.forEach(u),c&&f===l.length-1&&Ln(e.selectionSet,i,n)&&(c=!1,p=!0,this.fuzzySubtypes.forEach(function(d,m){var y=r.match(d);y&&y[0]===r&&u(m)}))}return!1},t.prototype.hasKeyArgs=function(e,r){var i=this.getFieldPolicy(e,r,!1);return!!(i&&i.keyFn)},t.prototype.getStoreFieldName=function(e){var r=e.typename,i=e.fieldName,n=this.getFieldPolicy(r,i,!1),o,s=n&&n.keyFn;if(s&&r)for(var a={typename:r,fieldName:i,field:e.field||null,variables:e.variables},l=Ca(e);s;){var u=s(l,a);if(Array.isArray(u))s=Wp(u);else{o=u||i;break}}return o===void 0&&(o=e.field?Is(e.field,e.variables):xn(i,Ca(e))),i===qe(o)?o:i+":"+o},t.prototype.readField=function(e,r){var i=e.from;if(!!i){var n=e.field||e.fieldName;if(!!n){if(e.typename===void 0){var o=r.store.getFieldValue(i,"__typename");o&&(e.typename=o)}var s=this.getStoreFieldName(e),a=qe(s),l=r.store.getFieldValue(i,s),u=this.getFieldPolicy(e.typename,a,!1),c=u&&u.read;if(c){var p=$p(this,i,e,r,r.store.getStorage(q(i)?i.__ref:i,s));return lr.withValue(this.cache,c,[l,p])}return l}}},t.prototype.getMergeFunction=function(e,r,i){var n=this.getFieldPolicy(e,r,!1),o=n&&n.merge;return!o&&i&&(n=this.getTypePolicy(i),o=n&&n.merge),o},t.prototype.runMergeFunction=function(e,r,i,n,o){var s=i.field,a=i.typename,l=i.merge;return l===Qp?Gp(n.store.getFieldValue)(e,r):l===zp?r:l(e,r,$p(this,void 0,{typename:a,fieldName:s.name.value,field:s,variables:n.variables},n,o||Object.create(null)))},t}();function $p(t,e,r,i,n){var o=t.getStoreFieldName(r),s=qe(o),a=r.variables||i.variables,l=i.store,u=l.getFieldValue,c=l.toReference,p=l.canRead;return{args:Ca(r),field:r.field||null,fieldName:s,storeFieldName:o,variables:a,isReference:q,toReference:c,storage:n,cache:t.cache,canRead:p,readField:function(f,h){var d=typeof f=="string"?{fieldName:f,from:h}:g({},f);return d.from===void 0&&(d.from=e),d.variables===void 0&&(d.variables=a),t.readField(d,i)},mergeObjects:Gp(u)}}function Gp(t){return function(r,i){if(Array.isArray(r)||Array.isArray(i))throw new F(2);if(r&&typeof r=="object"&&i&&typeof i=="object"){var n=t(r,"__typename"),o=t(i,"__typename"),s=n&&o&&n!==o;return s||!oi(r)||!oi(i)?i:g(g({},r),i)}return i}}function Wp(t){return function(e,r){return e?r.fieldName+":"+JSON.stringify(Oa(e,t,!1)):r.fieldName}}function Yp(t){var e=new tt(Ve);return function(r,i){var n;if(i.selectionSet&&i.fragmentMap){var o=e.lookupArray([i.selectionSet,i.fragmentMap]);n=o.aliasMap||(o.aliasMap=Xp(i.selectionSet,i.fragmentMap))}var s=i.keyObject=Oa(r,t,!0,n);return i.typename+":"+JSON.stringify(s)}}function Xp(t,e){var r=Object.create(null),i=new Set([t]);return i.forEach(function(n){n.selections.forEach(function(o){if(G(o)){if(o.alias){var s=o.alias.value,a=o.name.value;if(a!==s){var l=r.aliases||(r.aliases=Object.create(null));l[a]=s}}if(o.selectionSet){var u=r.subsets||(r.subsets=Object.create(null));u[o.name.value]=Xp(o.selectionSet,e)}}else{var c=je(o,e);c&&i.add(c.selectionSet)}})}),r}function Oa(t,e,r,i){var n=Object.create(null),o;return e.forEach(function(s){if(Array.isArray(s)){if(typeof o=="string"){var a=i&&i.subsets,l=a&&a[o];n[o]=Oa(t[o],s,r,l)}}else{var u=i&&i.aliases,c=u&&u[s]||s;Q.call(t,c)?n[o=s]=t[c]:(P(!r,3),o=void 0)}}),n}var b_={dataIdFromObject:ai,addTypename:!0,resultCaching:!0,typePolicies:{}},qn=function(t){ee(e,t);function e(r){r===void 0&&(r={});var i=t.call(this)||this;return i.watches=new Set,i.typenameDocumentCache=new Map,i.makeVar=Bn,i.txCount=0,i.maybeBroadcastWatch=Tt(function(n,o){return i.broadcastWatch.call(i,n,!!o)},{makeCacheKey:function(n){var o=n.optimistic?i.optimisticData:i.data;if(ar(o)){var s=n.optimistic,a=n.rootId,l=n.variables;return o.makeCacheKey(n.query,n.callback,JSON.stringify({optimistic:s,rootId:a,variables:l}))}}}),i.watchDep=nr(),i.config=g(g({},b_),r),i.addTypename=!!i.config.addTypename,i.policies=new Jp({cache:i,dataIdFromObject:i.config.dataIdFromObject,possibleTypes:i.config.possibleTypes,typePolicies:i.config.typePolicies}),i.data=new sr.Root({policies:i.policies,resultCaching:i.config.resultCaching}),i.optimisticData=i.data,i.storeWriter=new Vp(i,i.storeReader=new jp({cache:i,addTypename:i.addTypename})),i}return e.prototype.restore=function(r){return r&&this.data.replace(r),this},e.prototype.extract=function(r){return r===void 0&&(r=!1),(r?this.optimisticData:this.data).extract()},e.prototype.read=function(r){var i=r.returnPartialData,n=i===void 0?!1:i;try{return this.storeReader.diffQueryAgainstStore({store:r.optimistic?this.optimisticData:this.data,query:r.query,variables:r.variables,rootId:r.rootId,config:this.config,returnPartialData:n}).result||null}catch(o){if(o instanceof or)return null;throw o}},e.prototype.write=function(r){try{return++this.txCount,this.storeWriter.writeToStore({store:this.data,query:r.query,result:r.result,dataId:r.dataId,variables:r.variables})}finally{!--this.txCount&&r.broadcast!==!1&&this.broadcastWatches()}},e.prototype.modify=function(r){if(Q.call(r,"id")&&!r.id)return!1;var i=r.optimistic?this.optimisticData:this.data;try{return++this.txCount,i.modify(r.id||"ROOT_QUERY",r.fields)}finally{!--this.txCount&&r.broadcast!==!1&&this.broadcastWatches()}},e.prototype.diff=function(r){return this.storeReader.diffQueryAgainstStore({store:r.optimistic?this.optimisticData:this.data,rootId:r.id||"ROOT_QUERY",query:r.query,variables:r.variables,returnPartialData:r.returnPartialData,config:this.config})},e.prototype.watch=function(r){var i=this;return this.watches.size||Hp(this),this.watches.add(r),r.immediate&&this.maybeBroadcastWatch(r),function(){i.watches.delete(r)&&!i.watches.size&&Up(i),i.watchDep.dirty(r),i.maybeBroadcastWatch.forget(r)}},e.prototype.gc=function(){return this.optimisticData.gc()},e.prototype.retain=function(r,i){return(i?this.optimisticData:this.data).retain(r)},e.prototype.release=function(r,i){return(i?this.optimisticData:this.data).release(r)},e.prototype.identify=function(r){return q(r)?r.__ref:this.policies.identify(r)[0]},e.prototype.evict=function(r){if(!r.id){if(Q.call(r,"id"))return!1;r=g(g({},r),{id:"ROOT_QUERY"})}try{return++this.txCount,this.optimisticData.evict(r)}finally{!--this.txCount&&r.broadcast!==!1&&this.broadcastWatches()}},e.prototype.reset=function(){return this.data.clear(),this.optimisticData=this.data,this.broadcastWatches(),Promise.resolve()},e.prototype.removeOptimistic=function(r){var i=this.optimisticData.removeLayer(r);i!==this.optimisticData&&(this.optimisticData=i,this.broadcastWatches())},e.prototype.performTransaction=function(r,i){var n=this,o=function(a){var l=n,u=l.data,c=l.optimisticData;++n.txCount,a&&(n.data=n.optimisticData=a);try{r(n)}finally{--n.txCount,n.data=u,n.optimisticData=c}},s=!1;typeof i=="string"?(this.optimisticData=this.optimisticData.addLayer(i,o),s=!0):i===null?o(this.data):o(),this.broadcastWatches(s)},e.prototype.transformDocument=function(r){if(this.addTypename){var i=this.typenameDocumentCache.get(r);return i||(i=$t(r),this.typenameDocumentCache.set(r,i),this.typenameDocumentCache.set(i,i)),i}return r},e.prototype.broadcastWatches=function(r){var i=this;this.txCount||this.watches.forEach(function(n){return i.maybeBroadcastWatch(n,r)})},e.prototype.broadcastWatch=function(r,i){this.watchDep.dirty(r),this.watchDep(r);var n=this.diff({query:r.query,variables:r.variables,optimistic:r.optimistic});r.optimistic&&i&&(n.fromOptimisticTransaction=!0),r.callback(n)},e}(jn);var Un=function(){function t(e){var r=e.cache,i=e.client,n=e.resolvers,o=e.fragmentMatcher;this.cache=r,i&&(this.client=i),n&&this.addResolvers(n),o&&this.setFragmentMatcher(o)}return t.prototype.addResolvers=function(e){var r=this;this.resolvers=this.resolvers||{},Array.isArray(e)?e.forEach(function(i){r.resolvers=wn(r.resolvers,i)}):this.resolvers=wn(this.resolvers,e)},t.prototype.setResolvers=function(e){this.resolvers={},this.addResolvers(e)},t.prototype.getResolvers=function(){return this.resolvers||{}},t.prototype.runResolvers=function(e){var r=e.document,i=e.remoteResult,n=e.context,o=e.variables,s=e.onlyRunForcedResolvers,a=s===void 0?!1:s;return Ne(this,void 0,void 0,function(){return Ie(this,function(l){return r?[2,this.resolveDocument(r,i.data,n,o,this.fragmentMatcher,a).then(function(u){return g(g({},i),{data:u.result})})]:[2,i]})})},t.prototype.setFragmentMatcher=function(e){this.fragmentMatcher=e},t.prototype.getFragmentMatcher=function(){return this.fragmentMatcher},t.prototype.clientQuery=function(e){return _t(["client"],e)&&this.resolvers?e:null},t.prototype.serverQuery=function(e){return qs(e)},t.prototype.prepareContext=function(e){var r=this.cache;return g(g({},e),{cache:r,getCacheKey:function(i){return r.identify(i)}})},t.prototype.addExportedVariables=function(e,r,i){return r===void 0&&(r={}),i===void 0&&(i={}),Ne(this,void 0,void 0,function(){return Ie(this,function(n){return e?[2,this.resolveDocument(e,this.buildRootValueFromCache(e,r)||{},this.prepareContext(i),r).then(function(o){return g(g({},r),o.exportedVariables)})]:[2,g({},r)]})})},t.prototype.shouldForceResolvers=function(e){var r=!1;return re(e,{Directive:{enter:function(i){if(i.name.value==="client"&&i.arguments&&(r=i.arguments.some(function(n){return n.name.value==="always"&&n.value.kind==="BooleanValue"&&n.value.value===!0}),r))return Gr}}}),r},t.prototype.buildRootValueFromCache=function(e,r){return this.cache.diff({query:Bs(e),variables:r,returnPartialData:!0,optimistic:!1}).result},t.prototype.resolveDocument=function(e,r,i,n,o,s){return i===void 0&&(i={}),n===void 0&&(n={}),o===void 0&&(o=function(){return!0}),s===void 0&&(s=!1),Ne(this,void 0,void 0,function(){var a,l,u,c,p,f,h,d,m;return Ie(this,function(y){return a=bt(e),l=Fe(e),u=Re(l),c=a.operation,p=c?c.charAt(0).toUpperCase()+c.slice(1):"Query",f=this,h=f.cache,d=f.client,m={fragmentMap:u,context:g(g({},i),{cache:h,client:d}),variables:n,fragmentMatcher:o,defaultOperationType:p,exportedVariables:{},onlyRunForcedResolvers:s},[2,this.resolveSelectionSet(a.selectionSet,r,m).then(function(_){return{result:_,exportedVariables:m.exportedVariables}})]})})},t.prototype.resolveSelectionSet=function(e,r,i){return Ne(this,void 0,void 0,function(){var n,o,s,a,l,u=this;return Ie(this,function(c){return n=i.fragmentMap,o=i.context,s=i.variables,a=[r],l=function(p){return Ne(u,void 0,void 0,function(){var f,h;return Ie(this,function(d){return Me(p,s)?G(p)?[2,this.resolveField(p,r,i).then(function(m){var y;typeof m!="undefined"&&a.push((y={},y[_e(p)]=m,y))})]:(Yr(p)?f=p:(f=n[p.name.value],P(f,11)),f&&f.typeCondition&&(h=f.typeCondition.name.value,i.fragmentMatcher(r,h,o))?[2,this.resolveSelectionSet(f.selectionSet,r,i).then(function(m){a.push(m)})]:[2]):[2]})})},[2,Promise.all(e.selections.map(l)).then(function(){return Jr(a)})]})})},t.prototype.resolveField=function(e,r,i){return Ne(this,void 0,void 0,function(){var n,o,s,a,l,u,c,p,f,h=this;return Ie(this,function(d){return n=i.variables,o=e.name.value,s=_e(e),a=o!==s,l=r[s]||r[o],u=Promise.resolve(l),(!i.onlyRunForcedResolvers||this.shouldForceResolvers(e))&&(c=r.__typename||i.defaultOperationType,p=this.resolvers&&this.resolvers[c],p&&(f=p[a?o:s],f&&(u=Promise.resolve(lr.withValue(this.cache,f,[r,Wr(e,n),i.context,{field:e,fragmentMap:i.fragmentMap}]))))),[2,u.then(function(m){if(m===void 0&&(m=l),e.directives&&e.directives.forEach(function(y){y.name.value==="export"&&y.arguments&&y.arguments.forEach(function(_){_.name.value==="as"&&_.value.kind==="StringValue"&&(i.exportedVariables[_.value.value]=m)})}),!e.selectionSet||m==null)return m;if(Array.isArray(m))return h.resolveSubSelectedArray(e,m,i);if(e.selectionSet)return h.resolveSelectionSet(e.selectionSet,m,i)})]})})},t.prototype.resolveSubSelectedArray=function(e,r,i){var n=this;return Promise.all(r.map(function(o){if(o===null)return null;if(Array.isArray(o))return n.resolveSubSelectedArray(e,o,i);if(e.selectionSet)return n.resolveSelectionSet(e.selectionSet,o,i)}))},t}();var ur=new(Ve?WeakMap:Map);function Pa(t,e){var r=t[e];typeof r=="function"&&(t[e]=function(){return ur.set(t,(ur.get(t)+1)%1e15),r.apply(this,arguments)})}function Zp(t){t.notifyTimeout&&(clearTimeout(t.notifyTimeout),t.notifyTimeout=void 0)}var ka=function(){function t(e){this.cache=e,this.listeners=new Set,this.document=null,this.lastRequestId=1,this.subscriptions=new Set,this.stopped=!1,this.dirty=!1,this.diff=null,this.observableQuery=null,ur.has(e)||(ur.set(e,0),Pa(e,"evict"),Pa(e,"modify"),Pa(e,"reset"))}return t.prototype.init=function(e){var r=e.networkStatus||M.loading;return this.variables&&this.networkStatus!==M.loading&&!oe(this.variables,e.variables)&&(r=M.setVariables),oe(e.variables,this.variables)||(this.diff=null),Object.assign(this,{document:e.document,variables:e.variables,networkError:null,graphQLErrors:this.graphQLErrors||[],networkStatus:r}),e.observableQuery&&this.setObservableQuery(e.observableQuery),e.lastRequestId&&(this.lastRequestId=e.lastRequestId),this},t.prototype.reset=function(){Zp(this),this.diff=null,this.dirty=!1},t.prototype.getDiff=function(e){return e===void 0&&(e=this.variables),this.diff&&oe(e,this.variables)?this.diff:(this.updateWatch(this.variables=e),this.diff=this.cache.diff({query:this.document,variables:e,returnPartialData:!0,optimistic:!0}))},t.prototype.setDiff=function(e){var r=this,i=this.diff;this.diff=e,!this.dirty&&(e&&e.result)!==(i&&i.result)&&(this.dirty=!0,this.notifyTimeout||(this.notifyTimeout=setTimeout(function(){return r.notify()},0)))},t.prototype.setObservableQuery=function(e){var r=this;e!==this.observableQuery&&(this.oqListener&&this.listeners.delete(this.oqListener),this.observableQuery=e,e?(e.queryInfo=this,this.listeners.add(this.oqListener=function(){r.getDiff().fromOptimisticTransaction?e.observe():e.reobserve()})):delete this.oqListener)},t.prototype.notify=function(){var e=this;Zp(this),this.shouldNotify()&&this.listeners.forEach(function(r){return r(e)}),this.dirty=!1},t.prototype.shouldNotify=function(){if(!this.dirty||!this.listeners.size)return!1;if(et(this.networkStatus)&&this.observableQuery){var e=this.observableQuery.options.fetchPolicy;if(e!=="cache-only"&&e!=="cache-and-network")return!1}return!0},t.prototype.stop=function(){if(!this.stopped){this.stopped=!0,this.cancel(),delete this.cancel,this.subscriptions.forEach(function(r){return r.unsubscribe()});var e=this.observableQuery;e&&e.stopPolling()}},t.prototype.cancel=function(){},t.prototype.updateWatch=function(e){var r=this;e===void 0&&(e=this.variables);var i=this.observableQuery;i&&i.options.fetchPolicy==="no-cache"||(!this.lastWatch||this.lastWatch.query!==this.document||!oe(e,this.lastWatch.variables))&&(this.cancel(),this.cancel=this.cache.watch(this.lastWatch={query:this.document,variables:e,optimistic:!0,callback:function(n){return r.setDiff(n)}}))},t.prototype.shouldWrite=function(e,r){var i=this.lastWrite;return!(i&&i.dmCount===ur.get(this.cache)&&oe(r,i.variables)&&oe(e.data,i.result.data))},t.prototype.markResult=function(e,r,i){var n=this;this.graphQLErrors=Le(e.errors)?e.errors:[],this.reset(),r.fetchPolicy==="no-cache"?this.diff={result:e.data,complete:!0}:!this.stopped&&i&&(Hn(e,r.errorPolicy)?this.cache.performTransaction(function(o){if(n.shouldWrite(e,r.variables))o.writeQuery({query:n.document,data:e.data,variables:r.variables}),n.lastWrite={result:e,variables:r.variables,dmCount:ur.get(n.cache)};else if(n.diff&&n.diff.complete){e.data=n.diff.result;return}var s=o.diff({query:n.document,variables:r.variables,returnPartialData:!0,optimistic:!0});n.stopped||n.updateWatch(r.variables),n.diff=s,s.complete&&(e.data=s.result)}):this.lastWrite=void 0)},t.prototype.markReady=function(){return this.networkError=null,this.networkStatus=M.ready},t.prototype.markError=function(e){return this.networkStatus=M.error,this.lastWrite=void 0,this.reset(),e.graphQLErrors&&(this.graphQLErrors=e.graphQLErrors),e.networkError&&(this.networkError=e.networkError),e},t}();function Hn(t,e){e===void 0&&(e="none");var r=e==="ignore"||e==="all",i=!Jt(t);return!i&&r&&t.data&&(i=!0),i}var x_=Object.prototype.hasOwnProperty,ef=function(){function t(e){var r=e.cache,i=e.link,n=e.queryDeduplication,o=n===void 0?!1:n,s=e.onBroadcast,a=e.ssrMode,l=a===void 0?!1:a,u=e.clientAwareness,c=u===void 0?{}:u,p=e.localState,f=e.assumeImmutableResults;this.clientAwareness={},this.queries=new Map,this.fetchCancelFns=new Map,this.transformCache=new(Ve?WeakMap:Map),this.queryIdCounter=1,this.requestIdCounter=1,this.mutationIdCounter=1,this.inFlightLinkObservables=new Map,this.cache=r,this.link=i,this.queryDeduplication=o,this.clientAwareness=c,this.localState=p||new Un({cache:r}),this.ssrMode=l,this.assumeImmutableResults=!!f,(this.onBroadcast=s)&&(this.mutationStore=Object.create(null))}return t.prototype.stop=function(){var e=this;this.queries.forEach(function(r,i){e.stopQueryNoBroadcast(i)}),this.cancelPendingFetches(new F(12))},t.prototype.cancelPendingFetches=function(e){this.fetchCancelFns.forEach(function(r){return r(e)}),this.fetchCancelFns.clear()},t.prototype.mutate=function(e){var r=e.mutation,i=e.variables,n=e.optimisticResponse,o=e.updateQueries,s=e.refetchQueries,a=s===void 0?[]:s,l=e.awaitRefetchQueries,u=l===void 0?!1:l,c=e.update,p=e.errorPolicy,f=p===void 0?"none":p,h=e.fetchPolicy,d=e.context,m=d===void 0?{}:d;return Ne(this,void 0,void 0,function(){var y,_,w;return Ie(this,function(S){switch(S.label){case 0:return P(r,13),P(!h||h==="no-cache",14),y=this.generateMutationId(),r=this.transform(r).document,i=this.getVariables(r,i),this.transform(r).hasClientExports?[4,this.localState.addExportedVariables(r,i,m)]:[3,2];case 1:i=S.sent(),S.label=2;case 2:return _=this.mutationStore&&(this.mutationStore[y]={mutation:r,variables:i,loading:!0,error:null}),n&&this.markMutationOptimistic(n,{mutationId:y,document:r,variables:i,errorPolicy:f,updateQueries:o,update:c}),this.broadcastQueries(),w=this,[2,new Promise(function(C,E){var k,O;w.getObservableFromLink(r,g(g({},m),{optimisticResponse:n}),i,!1).subscribe({next:function(A){if(Jt(A)&&f==="none"){O=new Ze({graphQLErrors:A.errors});return}if(_&&(_.loading=!1,_.error=null),h!=="no-cache")try{w.markMutationResult({mutationId:y,result:A,document:r,variables:i,errorPolicy:f,updateQueries:o,update:c})}catch(H){O=new Ze({networkError:H});return}k=A},error:function(A){_&&(_.loading=!1,_.error=A),n&&w.cache.removeOptimistic(y),w.broadcastQueries(),E(new Ze({networkError:A}))},complete:function(){if(O&&_&&(_.loading=!1,_.error=O),n&&w.cache.removeOptimistic(y),w.broadcastQueries(),O){E(O);return}typeof a=="function"&&(a=a(k));var A=[];Le(a)&&a.forEach(function(H){if(typeof H=="string")w.queries.forEach(function(Ft){var Ye=Ft.observableQuery;Ye&&Ye.queryName===H&&A.push(Ye.refetch())});else{var J={query:H.query,variables:H.variables,fetchPolicy:"network-only"};H.context&&(J.context=H.context),A.push(w.query(J))}}),Promise.all(u?A:[]).then(function(){f==="ignore"&&k&&Jt(k)&&delete k.errors,C(k)},E)}})})]}})})},t.prototype.markMutationResult=function(e,r){var i=this;if(r===void 0&&(r=this.cache),Hn(e.result,e.errorPolicy)){var n=[{result:e.result.data,dataId:"ROOT_MUTATION",query:e.document,variables:e.variables}],o=e.updateQueries;o&&this.queries.forEach(function(s,a){var l=s.observableQuery,u=l&&l.queryName;if(!(!u||!x_.call(o,u))){var c=o[u],p=i.queries.get(a),f=p.document,h=p.variables,d=r.diff({query:f,variables:h,returnPartialData:!0,optimistic:!1}),m=d.result,y=d.complete;if(y&&m){var _=c(m,{mutationResult:e.result,queryName:f&&zt(f)||void 0,queryVariables:h});_&&n.push({result:_,dataId:"ROOT_QUERY",query:f,variables:h})}}}),r.performTransaction(function(s){n.forEach(function(l){return s.write(l)});var a=e.update;a&&a(s,e.result)},null)}},t.prototype.markMutationOptimistic=function(e,r){var i=this,n=typeof e=="function"?e(r.variables):e;return this.cache.recordOptimisticTransaction(function(o){try{i.markMutationResult(g(g({},r),{result:{data:n}}),o)}catch(s){}},r.mutationId)},t.prototype.fetchQuery=function(e,r,i){return this.fetchQueryObservable(e,r,i).promise},t.prototype.getQueryStore=function(){var e=Object.create(null);return this.queries.forEach(function(r,i){e[i]={variables:r.variables,networkStatus:r.networkStatus,networkError:r.networkError,graphQLErrors:r.graphQLErrors}}),e},t.prototype.resetErrors=function(e){var r=this.queries.get(e);r&&(r.networkError=void 0,r.graphQLErrors=[])},t.prototype.transform=function(e){var r=this.transformCache;if(!r.has(e)){var i=this.cache.transformDocument(e),n=Vs(this.cache.transformForLink(i)),o=this.localState.clientQuery(i),s=n&&this.localState.serverQuery(n),a={document:i,hasClientExports:Ds(i),hasForcedResolvers:this.localState.shouldForceResolvers(i),clientQuery:o,serverQuery:s,defaultVars:xt(Ee(i))},l=function(u){u&&!r.has(u)&&r.set(u,a)};l(e),l(i),l(o),l(s)}return r.get(e)},t.prototype.getVariables=function(e,r){return g(g({},this.transform(e).defaultVars),r)},t.prototype.watchQuery=function(e){e=g(g({},e),{variables:this.getVariables(e.query,e.variables)}),typeof e.notifyOnNetworkStatusChange=="undefined"&&(e.notifyOnNetworkStatusChange=!1);var r=new ka(this.cache),i=new Mn({queryManager:this,queryInfo:r,options:e});return this.queries.set(i.queryId,r),r.init({document:e.query,observableQuery:i,variables:e.variables}),i},t.prototype.query=function(e){var r=this;P(e.query,15),P(e.query.kind==="Document",16),P(!e.returnPartialData,17),P(!e.pollInterval,18);var i=this.generateQueryId();return this.fetchQuery(i,e).finally(function(){return r.stopQuery(i)})},t.prototype.generateQueryId=function(){return String(this.queryIdCounter++)},t.prototype.generateRequestId=function(){return this.requestIdCounter++},t.prototype.generateMutationId=function(){return String(this.mutationIdCounter++)},t.prototype.stopQueryInStore=function(e){this.stopQueryInStoreNoBroadcast(e),this.broadcastQueries()},t.prototype.stopQueryInStoreNoBroadcast=function(e){var r=this.queries.get(e);r&&r.stop()},t.prototype.clearStore=function(){return this.cancelPendingFetches(new F(19)),this.queries.forEach(function(e){e.observableQuery?e.networkStatus=M.loading:e.stop()}),this.mutationStore&&(this.mutationStore=Object.create(null)),this.cache.reset()},t.prototype.resetStore=function(){var e=this;return this.clearStore().then(function(){return e.reFetchObservableQueries()})},t.prototype.reFetchObservableQueries=function(e){var r=this;e===void 0&&(e=!1);var i=[];return this.queries.forEach(function(n,o){var s=n.observableQuery;if(s&&s.hasObservers()){var a=s.options.fetchPolicy;s.resetLastResults(),a!=="cache-only"&&(e||a!=="standby")&&i.push(s.refetch()),r.getQuery(o).setDiff(null)}}),this.broadcastQueries(),Promise.all(i)},t.prototype.setObservableQuery=function(e){this.getQuery(e.queryId).setObservableQuery(e)},t.prototype.startGraphQLSubscription=function(e){var r=this,i=e.query,n=e.fetchPolicy,o=e.errorPolicy,s=e.variables,a=e.context,l=a===void 0?{}:a;i=this.transform(i).document,s=this.getVariables(i,s);var u=function(p){return r.getObservableFromLink(i,l,p,!1).map(function(f){if(n!=="no-cache"&&(Hn(f,o)&&r.cache.write({query:i,result:f.data,dataId:"ROOT_SUBSCRIPTION",variables:p}),r.broadcastQueries()),Jt(f))throw new Ze({graphQLErrors:f.errors});return f})};if(this.transform(i).hasClientExports){var c=this.localState.addExportedVariables(i,s,l).then(u);return new D.default(function(p){var f=null;return c.then(function(h){return f=h.subscribe(p)},p.error),function(){return f&&f.unsubscribe()}})}return u(s)},t.prototype.stopQuery=function(e){this.stopQueryNoBroadcast(e),this.broadcastQueries()},t.prototype.stopQueryNoBroadcast=function(e){this.stopQueryInStoreNoBroadcast(e),this.removeQuery(e)},t.prototype.removeQuery=function(e){this.fetchCancelFns.delete(e),this.getQuery(e).stop(),this.queries.delete(e)},t.prototype.broadcastQueries=function(){this.onBroadcast&&this.onBroadcast(),this.queries.forEach(function(e){return e.notify()})},t.prototype.getLocalState=function(){return this.localState},t.prototype.getObservableFromLink=function(e,r,i,n){var o=this,s;n===void 0&&(n=(s=r==null?void 0:r.queryDeduplication)!==null&&s!==void 0?s:this.queryDeduplication);var a,l=this.transform(e).serverQuery;if(l){var u=this,c=u.inFlightLinkObservables,p=u.link,f={query:l,variables:i,operationName:zt(l)||void 0,context:this.prepareContext(g(g({},r),{forceFetch:!n}))};if(r=f.context,n){var h=c.get(l)||new Map;c.set(l,h);var d=JSON.stringify(i);if(a=h.get(d),!a){var m=new Yt([Zt(p,f)]);h.set(d,a=m),m.cleanup(function(){h.delete(d)&&h.size<1&&c.delete(l)})}}else a=new Yt([Zt(p,f)])}else a=new Yt([D.default.of({data:{}})]),r=this.prepareContext(r);var y=this.transform(e).clientQuery;return y&&(a=Zs(a,function(_){return o.localState.runResolvers({document:y,remoteResult:_,context:r,variables:i})})),a},t.prototype.getResultsFromLink=function(e,r,i){var n=e.lastRequestId;return Zs(this.getObservableFromLink(e.document,i.context,i.variables),function(o){var s=Le(o.errors);if(n>=e.lastRequestId){if(s&&i.errorPolicy==="none")throw e.markError(new Ze({graphQLErrors:o.errors}));e.markResult(o,i,r),e.markReady()}var a={data:o.data,loading:!1,networkStatus:e.networkStatus||M.ready};return s&&i.errorPolicy!=="ignore"&&(a.errors=o.errors),a},function(o){var s=_a(o)?o:new Ze({networkError:o});throw n>=e.lastRequestId&&e.markError(s),s})},t.prototype.fetchQueryObservable=function(e,r,i){var n=this;i===void 0&&(i=M.loading);var o=this.transform(r.query).document,s=this.getVariables(o,r.variables),a=this.getQuery(e),l=a.networkStatus,u=r.fetchPolicy,c=u===void 0?"cache-first":u,p=r.errorPolicy,f=p===void 0?"none":p,h=r.returnPartialData,d=h===void 0?!1:h,m=r.notifyOnNetworkStatusChange,y=m===void 0?!1:m,_=r.context,w=_===void 0?{}:_,S=c==="cache-first"||c==="cache-and-network"||c==="network-only"||c==="no-cache";S&&y&&typeof l=="number"&&l!==i&&et(i)&&(c!=="cache-first"&&(c="cache-and-network"),d=!0);var C=Object.assign({},r,{query:o,variables:s,fetchPolicy:c,errorPolicy:f,returnPartialData:d,notifyOnNetworkStatusChange:y,context:w}),E=function(O){return C.variables=O,n.fetchQueryByPolicy(a,C,i)};this.fetchCancelFns.set(e,function(O){Promise.resolve().then(function(){return k.cancel(O)})});var k=new Yt(this.transform(C.query).hasClientExports?this.localState.addExportedVariables(C.query,C.variables,C.context).then(E):E(C.variables));return k.cleanup(function(){n.fetchCancelFns.delete(e);var O=r.nextFetchPolicy;O&&(r.nextFetchPolicy=void 0,r.fetchPolicy=typeof O=="function"?O.call(r,r.fetchPolicy||"cache-first"):O)}),k},t.prototype.fetchQueryByPolicy=function(e,r,i){var n=this,o=r.query,s=r.variables,a=r.fetchPolicy,l=r.errorPolicy,u=r.returnPartialData,c=r.context;e.init({document:o,variables:s,lastRequestId:this.generateRequestId(),networkStatus:i});var p=function(){return e.getDiff(s)},f=function(m,y){y===void 0&&(y=e.networkStatus||M.loading);var _=m.result,w=function(S){return D.default.of(g({data:S,loading:et(y),networkStatus:y},m.complete?null:{partial:!0}))};return n.transform(o).hasForcedResolvers?n.localState.runResolvers({document:o,remoteResult:{data:_},context:c,variables:s,onlyRunForcedResolvers:!0}).then(function(S){return w(S.data)}):w(_)},h=function(m){return n.getResultsFromLink(e,m,{variables:s,context:c,fetchPolicy:a,errorPolicy:l})};switch(a){default:case"cache-first":{var d=p();return d.complete?[f(d,e.markReady())]:u?[f(d),h(!0)]:[h(!0)]}case"cache-and-network":{var d=p();return d.complete||u?[f(d),h(!0)]:[h(!0)]}case"cache-only":return[f(p(),e.markReady())];case"network-only":return[h(!0)];case"no-cache":return[h(!1)];case"standby":return[]}},t.prototype.getQuery=function(e){return e&&!this.queries.has(e)&&this.queries.set(e,new ka(this.cache)),this.queries.get(e)},t.prototype.prepareContext=function(e){e===void 0&&(e={});var r=this.localState.prepareContext(e);return g(g({},r),{clientAwareness:this.clientAwareness})},t}();var w_=!1;function Kn(t,e){return Xt(t,e,e.variables&&{variables:g(g({},t.variables),e.variables)})}var Aa=function(){function t(e){var r=this;this.defaultOptions={},this.resetStoreCallbacks=[],this.clearStoreCallbacks=[];var i=e.uri,n=e.credentials,o=e.headers,s=e.cache,a=e.ssrMode,l=a===void 0?!1:a,u=e.ssrForceFetchDelay,c=u===void 0?0:u,p=e.connectToDevTools,f=p===void 0?typeof window=="object"&&!window.__APOLLO_CLIENT__&&!1:p,h=e.queryDeduplication,d=h===void 0?!0:h,m=e.defaultOptions,y=e.assumeImmutableResults,_=y===void 0?!1:y,w=e.resolvers,S=e.typeDefs,C=e.fragmentMatcher,E=e.name,k=e.version,O=e.link;if(O||(O=i?new ma({uri:i,credentials:n,headers:o}):z.empty()),!s)throw new F(9);if(this.link=O,this.cache=s,this.disableNetworkFetches=l||c>0,this.queryDeduplication=d,this.defaultOptions=m||{},this.typeDefs=S,c&&setTimeout(function(){return r.disableNetworkFetches=!1},c),this.watchQuery=this.watchQuery.bind(this),this.query=this.query.bind(this),this.mutate=this.mutate.bind(this),this.resetStore=this.resetStore.bind(this),this.reFetchObservableQueries=this.reFetchObservableQueries.bind(this),f&&typeof window=="object"&&(window.__APOLLO_CLIENT__=this),!w_&&!1&&typeof window!="undefined"&&window.document&&window.top===window.self&&!window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__)var A,H,J;this.version=rp,this.localState=new Un({cache:s,client:this,resolvers:w,fragmentMatcher:C}),this.queryManager=new ef({cache:this.cache,link:this.link,queryDeduplication:d,ssrMode:l,clientAwareness:{name:E,version:k},localState:this.localState,assumeImmutableResults:_,onBroadcast:f?function(){r.devToolsHookCb&&r.devToolsHookCb({action:{},state:{queries:r.queryManager.getQueryStore(),mutations:r.queryManager.mutationStore||{}},dataWithOptimisticResults:r.cache.extract(!0)})}:void 0})}return t.prototype.stop=function(){this.queryManager.stop()},t.prototype.watchQuery=function(e){return this.defaultOptions.watchQuery&&(e=Kn(this.defaultOptions.watchQuery,e)),this.disableNetworkFetches&&(e.fetchPolicy==="network-only"||e.fetchPolicy==="cache-and-network")&&(e=g(g({},e),{fetchPolicy:"cache-first"})),this.queryManager.watchQuery(e)},t.prototype.query=function(e){return this.defaultOptions.query&&(e=Kn(this.defaultOptions.query,e)),P(e.fetchPolicy!=="cache-and-network",10),this.disableNetworkFetches&&e.fetchPolicy==="network-only"&&(e=g(g({},e),{fetchPolicy:"cache-first"})),this.queryManager.query(e)},t.prototype.mutate=function(e){return this.defaultOptions.mutate&&(e=Kn(this.defaultOptions.mutate,e)),this.queryManager.mutate(e)},t.prototype.subscribe=function(e){return this.queryManager.startGraphQLSubscription(e)},t.prototype.readQuery=function(e,r){return r===void 0&&(r=!1),this.cache.readQuery(e,r)},t.prototype.readFragment=function(e,r){return r===void 0&&(r=!1),this.cache.readFragment(e,r)},t.prototype.writeQuery=function(e){this.cache.writeQuery(e),this.queryManager.broadcastQueries()},t.prototype.writeFragment=function(e){this.cache.writeFragment(e),this.queryManager.broadcastQueries()},t.prototype.__actionHookForDevTools=function(e){this.devToolsHookCb=e},t.prototype.__requestRaw=function(e){return Zt(this.link,e)},t.prototype.resetStore=function(){var e=this;return Promise.resolve().then(function(){return e.queryManager.clearStore()}).then(function(){return Promise.all(e.resetStoreCallbacks.map(function(r){return r()}))}).then(function(){return e.reFetchObservableQueries()})},t.prototype.clearStore=function(){var e=this;return Promise.resolve().then(function(){return e.queryManager.clearStore()}).then(function(){return Promise.all(e.clearStoreCallbacks.map(function(r){return r()}))})},t.prototype.onResetStore=function(e){var r=this;return this.resetStoreCallbacks.push(e),function(){r.resetStoreCallbacks=r.resetStoreCallbacks.filter(function(i){return i!==e})}},t.prototype.onClearStore=function(e){var r=this;return this.clearStoreCallbacks.push(e),function(){r.clearStoreCallbacks=r.clearStoreCallbacks.filter(function(i){return i!==e})}},t.prototype.reFetchObservableQueries=function(e){return this.queryManager.reFetchObservableQueries(e)},t.prototype.extract=function(e){return this.cache.extract(e)},t.prototype.restore=function(e){return this.cache.restore(e)},t.prototype.addResolvers=function(e){this.localState.addResolvers(e)},t.prototype.setResolvers=function(e){this.localState.setResolvers(e)},t.prototype.getResolvers=function(){return this.localState.getResolvers()},t.prototype.setLocalStateFragmentMatcher=function(e){this.localState.setFragmentMatcher(e)},t.prototype.setLink=function(e){this.link=this.queryManager.link=e},t}();var Sf=dt(wf()),{__extends:iN,__assign:Na,__rest:nN,__decorate:oN,__param:sN,__metadata:aN,__awaiter:lN,__generator:uN,__exportStar:cN,__createBinding:pN,__values:fN,__read:dN,__spread:hN,__spreadArrays:mN,__await:yN,__asyncGenerator:vN,__asyncDelegator:_N,__asyncValues:gN,__makeTemplateObject:bN,__importStar:xN,__importDefault:wN,__classPrivateFieldGet:SN,__classPrivateFieldSet:EN}=Sf.default;var $n=new Map,Ia=new Map,Ef=!0,Ma=!1;function Tf(t){return t.replace(/[\s,]+/g," ").trim()}function S_(t){return Tf(t.source.body.substring(t.start,t.end))}function E_(t){var e=new Set,r=[];return t.definitions.forEach(function(i){if(i.kind==="FragmentDefinition"){var n=i.name.value,o=S_(i.loc),s=Ia.get(n);s&&!s.has(o)?Ef&&console.warn("Warning: fragment with name "+n+` already exists.
graphql-tag enforces all fragment names across your application to be unique; read more about
this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names`):s||Ia.set(n,s=new Set),s.add(o),e.has(o)||(e.add(o),r.push(i))}else r.push(i)}),Na(Na({},t),{definitions:r})}function T_(t){var e=new Set(t.definitions);e.forEach(function(i){i.loc&&delete i.loc,Object.keys(i).forEach(function(n){var o=i[n];o&&typeof o=="object"&&e.add(o)})});var r=t.loc;return r&&(delete r.startToken,delete r.endToken),t}function C_(t){var e=Tf(t);if(!$n.has(e)){var r=_n(t,{experimentalFragmentVariables:Ma});if(!r||r.kind!=="Document")throw new Error("Not a valid GraphQL document.");$n.set(e,T_(E_(r)))}return $n.get(e)}function Ra(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];typeof t=="string"&&(t=[t]);var i=t[0];return e.forEach(function(n,o){n&&n.kind==="Document"?i+=n.loc.source.body:i+=n,i+=t[o+1]}),C_(i)}function O_(){$n.clear(),Ia.clear()}function P_(){Ef=!1}function k_(){Ma=!0}function A_(){Ma=!1}var Te=Object.assign(Ra,{gql:Ra,default:Ra,resetCaches:O_,disableFragmentWarnings:P_,enableExperimentalFragmentVariables:k_,disableExperimentalFragmentVariables:A_});gc("log");var UN=Te.resetCaches,HN=Te.disableFragmentWarnings,KN=Te.enableExperimentalFragmentVariables,QN=Te.disableExperimentalFragmentVariables;var Cf=new WeakMap;function D_(t,e){let r=e;for(;r;){if(Cf.get(r)===t)return!0;r=Object.getPrototypeOf(r)}return!1}function Ue(t){return e=>{if(D_(t,e))return e;let r=t(e);return Cf.set(r,t),r}}function Of(t){return!!(t&&typeof t=="object"&&"kind"in t&&"definitions"in t)}function Gn(t){return{configurable:!0,enumerable:!0,get(){return this.hasAttribute(t)},set(e){e?this.setAttribute(t,""):this.removeAttribute(t)}}}function Wn(t){let{name:e,init:r,onSet:i}=t,n=`_${e}`;return{configurable:!0,enumerable:!0,get(){var o;return(o=this[n])!==null&&o!==void 0?o:r},set(o){this[n]=o,i.call(this,o)}}}function pr(){return{configurable:!0,enumerable:!0,get(){return this.document},set(t){this.document=t}}}function ge(t){return{configurable:!0,enumerable:!0,writable:!0,value:t}}function Pf(t){var e;return(e=t.replace)===null||e===void 0?void 0:e.call(t,/<!---->/g,"")}var kf='script[type="application/graphql"]';function N_(t){return`${t.substr(0,1).toUpperCase()}${t.substr(1)}`}var Yn=class extends CustomEvent{constructor(e,r){super(e,{bubbles:!0,composed:!0,detail:r})}};function I_(t){class e extends t{constructor(...i){var n;super(...i);this.client=(n=window.__APOLLO_CLIENT__)!==null&&n!==void 0?n:null,this._document=null,this._documentSetByJS=!1,this._variables=null,this._variablesSetByJS=!1}get document(){var i;return(i=this._document)!==null&&i!==void 0?i:this.getDOMGraphQLDocument()}set document(i){var n,o;if(this._documentSetByJS=!1,!i)this._document=null;else if(Of(i))this._document=i,this._documentSetByJS=!0,this.mo&&((o=this.documentChanged)===null||o===void 0||o.call(this,i));else throw new TypeError(`${N_((n=this.constructor.documentType)!==null&&n!==void 0?n:"document")} must be a gql-parsed DocumentNode`)}connectedCallback(){var i,n,o;(i=super.connectedCallback)===null||i===void 0||i.call(this),this.mo=new MutationObserver(this.onDOMMutation.bind(this)),this.mo.observe(this,{characterData:!0,childList:!0,subtree:!0}),this._document=(n=this._document)!==null&&n!==void 0?n:this.getDOMGraphQLDocument(),this._variables=(o=this._variables)!==null&&o!==void 0?o:this.getDOMVariables(),this.dispatchEvent(new Yn("apollo-element-connected",this))}disconnectedCallback(){var i,n;this.dispatchEvent(new Yn("apollo-element-disconnected",this)),window.dispatchEvent(new Yn("apollo-element-disconnected",this)),(i=this.mo)===null||i===void 0||i.disconnect(),(n=super.disconnectedCallback)===null||n===void 0||n.call(this)}onDOMMutation(i){var n;let o=s=>[...s==null?void 0:s.addedNodes].some(a=>a===this.querySelector(kf));this._documentSetByJS||(this._document=this.getDOMGraphQLDocument(),i.some(o)&&((n=this.documentChanged)===null||n===void 0||n.call(this,this.document))),this._variablesSetByJS||(this._variables=this.getDOMVariables())}getDOMGraphQLDocument(){let i=this.querySelector(kf),n=i==null?void 0:i.innerText;if(n)try{return Te(Pf(n))}catch(o){return this.error=o,null}else return null}getDOMVariables(){let i=this.querySelector('script[type="application/json"]');if(!i)return null;try{return JSON.parse(i.innerText)}catch{return null}}}return e.documentType="document",Object.defineProperties(e.prototype,{data:ge(null),error:ge(null),errors:ge(null),loading:ge(!1),variables:Wn({name:"variables",init:null,onSet(r){var i;this.mo&&((i=this.variablesChanged)===null||i===void 0||i.call(this,r))}})}),e}var it=Ue(I_);function M_(t){class e extends it(t){constructor(...i){super(...i);this.errorPolicy="none",this.__options=null,this.__networkStatus=M.ready}static get observedAttributes(){var i;return[...new Set([...(i=super.observedAttributes)!==null&&i!==void 0?i:[],"fetch-policy","next-fetch-policy"])]}get canAutoSubscribe(){return!!this.client&&!this.noAutoSubscribe&&this.shouldSubscribe()}attributeChangedCallback(i,n,o){var s,a,l,u;if((s=super.attributeChangedCallback)===null||s===void 0||s.call(this,i,n,o),!((u=(l=(a=super.constructor)===null||a===void 0?void 0:a.observedAttributes)===null||l===void 0?void 0:l.includes)===null||u===void 0?void 0:u.call(l,i)))switch(i){case"fetch-policy":this.fetchPolicy=o;break;case"next-fetch-policy":this.nextFetchPolicy=o;break}}connectedCallback(){super.connectedCallback(),this.documentChanged(this.query)}documentChanged(i){!i||this.canSubscribe({query:i})&&this.shouldSubscribe({query:i})&&this.subscribe({query:i})}variablesChanged(i){if(this.observableQuery)this.refetch(i);else if(this.canSubscribe({variables:i})&&this.shouldSubscribe({variables:i}))this.subscribe({variables:i});else return}async refetch(i){if(!this.observableQuery)throw new Error("Cannot refetch without an ObservableQuery");return this.observableQuery.refetch(i)}canSubscribe(i){var n;return!this.noAutoSubscribe&&!!this.client&&!!((n=i==null?void 0:i.query)!==null&&n!==void 0?n:this.document)}shouldSubscribe(i){return!0}subscribe(i){var n,o,s,a,l,u;let c={query:(n=i==null?void 0:i.query)!==null&&n!==void 0?n:this.query,context:(o=i==null?void 0:i.context)!==null&&o!==void 0?o:this.context,fetchPolicy:(s=i==null?void 0:i.fetchPolicy)!==null&&s!==void 0?s:this.fetchPolicy,variables:(l=(a=i==null?void 0:i.variables)!==null&&a!==void 0?a:this.variables)!==null&&l!==void 0?l:void 0};return this.observableQuery&&this.observableQuery.stopPolling(),this.observableQuery=this.watchQuery(c),this.loading=!0,(u=this.observableQuery)===null||u===void 0?void 0:u.subscribe({next:this.nextData.bind(this),error:this.nextError.bind(this)})}subscribeToMore(i){var n;return(n=this.observableQuery)===null||n===void 0?void 0:n.subscribeToMore(i)}async executeQuery(i){var n,o,s;if(!this.client)throw new TypeError("No Apollo client. See https://apolloelements.dev/guides/getting-started/apollo-client/");let{context:a,errorPolicy:l,fetchPolicy:u}=this,c={context:a,errorPolicy:l,fetchPolicy:u,...i,query:(n=i==null?void 0:i.query)!==null&&n!==void 0?n:this.query,variables:(s=(o=i==null?void 0:i.variables)!==null&&o!==void 0?o:this.variables)!==null&&s!==void 0?s:void 0};this.loading=!0;try{let p=await this.client.query(c);return this.nextData(p),p}catch(p){throw this.nextError(p),p}}fetchMore(i){var n,o,s,a,l,u;let c={query:(n=i==null?void 0:i.query)!==null&&n!==void 0?n:this.query,updateQuery:i==null?void 0:i.updateQuery,variables:(s=(o=i==null?void 0:i.variables)!==null&&o!==void 0?o:this.variables)!==null&&s!==void 0?s:void 0,context:(a=i==null?void 0:i.context)!==null&&a!==void 0?a:this.context};return this.loading=!0,(l=this.observableQuery)!==null&&l!==void 0||(this.observableQuery=this.watchQuery(c)),(u=this.observableQuery)===null||u===void 0?void 0:u.fetchMore(c).then(p=>(this.loading=!1,p))}watchQuery(i){var n,o,s;if(!this.client)throw new TypeError("No Apollo client. See https://apolloelements.dev/guides/getting-started/apollo-client/");let a={context:this.context,errorPolicy:this.errorPolicy,fetchPolicy:this.fetchPolicy,notifyOnNetworkStatusChange:this.notifyOnNetworkStatusChange,partialRefetch:this.partialRefetch,pollInterval:this.pollInterval,returnPartialData:this.returnPartialData,nextFetchPolicy:this.nextFetchPolicy,...i,query:(n=i==null?void 0:i.query)!==null&&n!==void 0?n:this.query,variables:(s=(o=i==null?void 0:i.variables)!==null&&o!==void 0?o:this.variables)!==null&&s!==void 0?s:void 0};return this.client.watchQuery(a)}nextData(i){var n,o,s;this.dispatchEvent(new CustomEvent("apollo-query-result",{detail:i})),this.data=i.data,this.error=(n=i.error)!==null&&n!==void 0?n:null,this.errors=(o=i.errors)!==null&&o!==void 0?o:null,this.loading=i.loading,this.networkStatus=i.networkStatus,this.partial=i.partial,(s=this.onData)===null||s===void 0||s.call(this,i)}nextError(i){var n;this.dispatchEvent(new CustomEvent("apollo-error",{detail:i})),this.error=i,this.loading=!1,(n=this.onError)===null||n===void 0||n.call(this,i)}}return e.documentType="query",Object.defineProperties(e.prototype,{query:pr(),networkStatus:ge(M.ready),noAutoSubscribe:Gn("no-auto-subscribe"),options:Wn({name:"options",init:null,onSet(r){var i;!r||(i=this.observableQuery)===null||i===void 0||i.setOptions(r)}})}),e}var Af=Ue(M_);var ja=class extends Af(HTMLElement){};var li=class extends it(HTMLElement){};function Fa(t,e){let r=`000000000${t}`;return r.substr(r.length-e)}var R_=Object.keys(window).length,j_=navigator.mimeTypes?navigator.mimeTypes.length:0,F_=Fa((j_+navigator.userAgent.length).toString(36)+R_.toString(36),4);function Jn(){return F_}var La;if(window.crypto){let t=Math.pow(2,32)-1;La=function(){return Math.abs(crypto.getRandomValues(new Uint32Array(1))[0]/t)}}else La=Math.random;var ui=0,Va=4,Xn=36,Df=Math.pow(Xn,Va);function Ba(){return Fa((La()*Df<<0).toString(Xn),Va)}function Nf(){return ui=ui<Df?ui:0,ui++,ui-1}function fr(){let t="c",e=new Date().getTime().toString(Xn),r=Fa(Nf().toString(Xn),Va),i=Jn(),n=Ba()+Ba();return t+e+r+i+n}fr.slug=function(){let e=new Date().getTime().toString(36),r=Nf().toString(36).slice(-4),i=Jn().slice(0,1)+Jn().slice(-1),n=Ba().slice(-2);return e.slice(-2)+r+i+n};fr.isCuid=function(e){return typeof e!="string"?!1:!!e.startsWith("c")};fr.isSlug=function(e){if(typeof e!="string")return!1;let r=e.length;return r>=7&&r<=10};fr.fingerprint=Jn;var L_=()=>{},qa=new WeakMap,If=new WeakMap,Ua=new WeakMap;function V_(t){return Ua.has(t)}function B_(t){return Ua.get(t)}function Mf(t){return If.get(t)}function q_(t){let e=["client","data","error","errors","loading","networkStatus"];qa.get(t)||(customElements.define(`apollo-elements-intermediate-element-${fr()}`,t),qa.set(t,new t));let{constructor:r,...i}={...Object.getOwnPropertyDescriptors(qa.get(t)),...Object.getOwnPropertyDescriptors(Object.getPrototypeOf(t.prototype))};return e.forEach(n=>delete i[n]),i}function Rf(t,e){let r=q_(e),i=Object.fromEntries(Object.entries(r).map(([n,o])=>typeof(o==null?void 0:o.value)=="function"?[n,{...o,value:o.value.bind(t)}]:[n,o]));return Object.defineProperties(t,i),i}function U_(t,e,r){t.constructor.documentType=r==="client"?"document":r,If.set(t,{...B_(t),...Rf(t,e)})}function H_(t,e){e(t),Ua.set(t,Rf(t,li))}function jf(t,e,r,i=L_){return(!V_(t)||e===li)&&H_(t,i),(!Mf(t)||e!==li)&&U_(t,e,r),Mf(t)}var ci={},K_={data:null,error:null,errors:null,loading:!1},Ct=class extends ne{constructor(e,r,i,n={}){super(e,r);this.id=e,this.state=r,this.document=i,this.options=n,this.reactiveProps=[],this.disconnected=!0}init(){this.defaults={...K_,...this.defaults},this.initListeners(),this.initHost(),this.initReactiveProps(),this.initMethods(),this.connect()}initListeners(){let e=()=>this.update(this.document,this.options);this.state.host.addEventListener(`apollo-${this.type}-result`,e),this.state.host.addEventListener("apollo-error",e)}initHost(){var e,r;jf(this.state.host,this.componentClass,this.type),Object.assign(this.state.host,{...this.defaults,...this.optionsToProperties(),client:(r=(e=this.options.client)!==null&&e!==void 0?e:window.__APOLLO_CLIENT__)!==null&&r!==void 0?r:null})}initMethods(){let e=!0,r=!1;Object.entries(this.optionsToOptionalMethods()).forEach(([i,n])=>{typeof n=="function"&&Object.defineProperty(this.state.host,i,{configurable:e,enumerable:r,value:n})})}initReactiveProps(){let{state:{host:e}}=this;["loading",...this.reactiveProps].forEach(i=>{var n,o;(n=ci[o=i])!==null&&n!==void 0||(ci[o]=new WeakMap),ci[i].set(e,this.defaults[i]),Object.defineProperty(e,i,{configurable:!0,enumerable:!0,get(){return ci[i].get(e)},set(s){ci[i].set(e,s),e._scheduler.update()}})})}connect(){var e,r;let{connectedCallback:i,disconnectedCallback:n}=this.componentClass.prototype;Object.assign(this.state.host,{connectedCallback:i,disconnectedCallback:n}),(r=(e=this.state.host).connectedCallback)===null||r===void 0||r.call(e),this.disconnected=!1}teardown(){var e,r;(r=(e=this.state.host).disconnectedCallback)===null||r===void 0||r.call(e),this.disconnected=!0}};var Ff=class extends Ct{constructor(e,r,i,n){super(e,r,i,n);this.type="query",this.componentClass=ja,this.defaults={networkStatus:M.ready},this.init()}optionsToProperties(){var e,r,i;let{onError:n,onCompleted:o,...s}=this.options,a=(e=this.document)!==null&&e!==void 0?e:s.query,l=(r=s.noAutoSubscribe)!==null&&r!==void 0?r:this.state.host.hasAttribute("no-auto-subscribe"),u=(i=s.errorPolicy)!==null&&i!==void 0?i:"none";return{...this.defaults,...s,noAutoSubscribe:l,errorPolicy:u,query:a}}optionsToOptionalMethods(){let{onCompleted:e,onError:r}=this.options;return{onCompleted:e,onError:r}}update(e=this.document,{variables:r=null}=this.options){this.disconnected&&this.connect();let{client:i,data:n,error:o,loading:s,networkStatus:a}=this.state.host,l=this.state.host.refetch.bind(this.state.host),u=this.state.host.fetchMore.bind(this.state.host),c=this.state.host.subscribeToMore.bind(this.state.host);return{called:!0,client:i,data:n,error:o,loading:s,networkStatus:a,variables:r,fetchMore:u,refetch:l,startPolling:d=>void(this.pollingInterval=window.setInterval(l,d)),stopPolling:()=>clearInterval(this.pollingInterval),subscribeToMore:c}}teardown(){this.pollingInterval!=null&&clearInterval(this.pollingInterval),super.teardown()}},TI=$(Ff);function Q_(t){class e extends it(t){constructor(...i){var n,o;super(...i);this.ignoreResults=!1,this.mostRecentMutationId=0,(n=this.variables)!==null&&n!==void 0||(this.variables=null),(o=this.loading)!==null&&o!==void 0||(this.loading=!1)}static get observedAttributes(){var i;return[...new Set([...(i=super.observedAttributes)!==null&&i!==void 0?i:[],"await-refetch-queries","fetch-policy","refetch-queries"])]}connectedCallback(){var i;(i=super.connectedCallback)===null||i===void 0||i.call(this)}attributeChangedCallback(i,n,o){var s,a,l,u;if((s=super.attributeChangedCallback)===null||s===void 0||s.call(this,i,n,o),!((u=(l=(a=super.constructor)===null||a===void 0?void 0:a.observedAttributes)===null||l===void 0?void 0:l.includes)===null||u===void 0?void 0:u.call(l,i)))switch(i){case"await-refetch-queries":this.awaitRefetchQueries=this.hasAttribute("await-refetch-queries");break;case"refetch-queries":this.refetchQueries=o?o.split(",").map(c=>c.trim()):null;break;case"fetch-policy":this.fetchPolicy=o;break}}async mutate(i){var n,o,s,a,l,u,c,p,f,h,d;if(!this.client)throw new TypeError("No Apollo client. See https://apolloelements.dev/guides/getting-started/apollo-client/");let m={mutation:(n=i==null?void 0:i.mutation)!==null&&n!==void 0?n:this.mutation,awaitRefetchQueries:(o=i==null?void 0:i.awaitRefetchQueries)!==null&&o!==void 0?o:this.awaitRefetchQueries,context:(s=i==null?void 0:i.context)!==null&&s!==void 0?s:this.context,errorPolicy:(a=i==null?void 0:i.errorPolicy)!==null&&a!==void 0?a:this.errorPolicy,fetchPolicy:(l=i==null?void 0:i.fetchPolicy)!==null&&l!==void 0?l:this.fetchPolicy,optimisticResponse:(u=i==null?void 0:i.optimisticResponse)!==null&&u!==void 0?u:this.optimisticResponse,refetchQueries:(p=(c=i==null?void 0:i.refetchQueries)!==null&&c!==void 0?c:this.refetchQueries)!==null&&p!==void 0?p:void 0,update:(f=i==null?void 0:i.update)!==null&&f!==void 0?f:this.updater,variables:(d=(h=i==null?void 0:i.variables)!==null&&h!==void 0?h:this.variables)!==null&&d!==void 0?d:void 0},y=this.generateMutationId();return this.loading=!0,this.error=null,this.data=null,this.called=!0,this.client.mutate(m).then(this.onCompletedMutation.bind(this,y)).catch(this.onMutationError.bind(this,y))}generateMutationId(){return this.mostRecentMutationId+=1,this.mostRecentMutationId}isMostRecentMutation(i){return this.mostRecentMutationId===i}onCompletedMutation(i,n){var o,s;let{data:a}=n;return this.dispatchEvent(new CustomEvent("apollo-mutation-result",{detail:n})),this.isMostRecentMutation(i)&&!this.ignoreResults&&(this.loading=!1,this.error=null,this.data=a??null,this.errors=(o=n.errors)!==null&&o!==void 0?o:null,a&&((s=this.onCompleted)===null||s===void 0||s.call(this,a))),n}onMutationError(i,n){var o;throw this.dispatchEvent(new CustomEvent("apollo-error",{detail:n})),this.isMostRecentMutation(i)&&(this.loading=!1,this.data=null,this.error=n),(o=this.onError)===null||o===void 0||o.call(this,n),n}}return e.documentType="mutation",Object.defineProperties(e.prototype,{called:ge(!1),mutation:pr(),optimisticResponse:ge(),refetchQueries:ge(null)}),e}var Lf=Ue(Q_);var Ha=class extends Lf(HTMLElement){};var Vf=class extends Ct{constructor(e,r,i,n){super(e,r,i,n);this.componentClass=Ha,this.type="mutation",this.reactiveProps=["called"],this.defaults={called:!1},this.init(),this.update()}optionsToProperties(){var e;let{onCompleted:r,onError:i,update:n,ignoreResults:o=!1,variables:s=null,refetchQueries:a=null,...l}=this.options;return{mutation:(e=this.document)!==null&&e!==void 0?e:l.mutation,ignoreResults:o,variables:s,refetchQueries:a,...l}}optionsToOptionalMethods(){let{options:{onCompleted:e,onError:r,update:i}}=this;return{onCompleted:e,onError:r,updater:i}}update(e=this.document,{variables:r}=this.options){this.disconnected&&this.connect();let{host:i}=this.state;i.variables=r??null;let{called:n,client:o,data:s,error:a,loading:l}=this.state.host;return[i.mutate.bind(i),{called:n,client:o,data:s,error:a,loading:l}]}},jI=$(Vf);function z_(t){class e extends it(t){constructor(...i){super(...i);this.notifyOnNetworkStatusChange=!1,this.shouldResubscribe=!1,this.skip=!1}get canAutoSubscribe(){return!!this.client&&!this.noAutoSubscribe&&this.shouldSubscribe()}connectedCallback(){var i;(i=super.connectedCallback)===null||i===void 0||i.call(this),!(!this.canSubscribe()||!this.shouldSubscribe())&&(this.initObservable(),this.subscribe())}disconnectedCallback(){var i;(i=super.disconnectedCallback)===null||i===void 0||i.call(this),this.cancel()}documentChanged(i){this.cancel();let n=i;this.canSubscribe({query:n})&&this.shouldSubscribe({query:n})&&this.subscribe()}variablesChanged(i){this.cancel(),this.canSubscribe({variables:i})&&this.shouldSubscribe({variables:i})&&this.subscribe()}subscribe(i){var n,o;this.initObservable(i),!(this.observableSubscription&&!((n=i==null?void 0:i.shouldResubscribe)!==null&&n!==void 0?n:this.shouldResubscribe))&&(this.loading=!0,this.observableSubscription=(o=this.observable)===null||o===void 0?void 0:o.subscribe({next:this.nextData.bind(this),error:this.nextError.bind(this),complete:this.onComplete.bind(this)}))}cancel(){this.endSubscription(),this.observableSubscription=void 0,this.observable=void 0}canSubscribe(i){var n;return!this.noAutoSubscribe&&!!this.client&&!!((n=i==null?void 0:i.query)!==null&&n!==void 0?n:this.document)}shouldSubscribe(i){return!0}initObservable(i){var n,o,s,a,l,u,c;let p=(n=i==null?void 0:i.shouldResubscribe)!==null&&n!==void 0?n:this.shouldResubscribe,f=(o=i==null?void 0:i.client)!==null&&o!==void 0?o:this.client,h=(s=i==null?void 0:i.skip)!==null&&s!==void 0?s:this.skip,d=(a=i==null?void 0:i.subscription)!==null&&a!==void 0?a:this.subscription,m=(u=(l=i==null?void 0:i.variables)!==null&&l!==void 0?l:this.variables)!==null&&u!==void 0?u:void 0,y=(c=i==null?void 0:i.fetchPolicy)!==null&&c!==void 0?c:this.fetchPolicy;if(!f)throw new TypeError("No Apollo client. See https://apolloelements.dev/guides/getting-started/apollo-client/");this.observable&&!p||h||(this.observable=f.subscribe({query:d,variables:m,fetchPolicy:y}))}nextData(i){var n,o;let s=(n=i.data)!==null&&n!==void 0?n:null,a=this.client,l=!1,u=null,p={client:a,subscriptionData:{data:s,loading:l,error:u}};this.dispatchEvent(new CustomEvent("apollo-subscription-result",{detail:p})),this.data=s,this.loading=l,this.error=u,(o=this.onSubscriptionData)===null||o===void 0||o.call(this,p)}nextError(i){var n;this.dispatchEvent(new CustomEvent("apollo-error",{detail:i})),this.error=i,this.loading=!1,(n=this.onError)===null||n===void 0||n.call(this,i)}onComplete(){var i;(i=this.onSubscriptionComplete)===null||i===void 0||i.call(this),this.endSubscription()}endSubscription(){this.observableSubscription&&(this.observableSubscription.unsubscribe(),this.observableSubscription=void 0)}}return e.documentType="subscription",Object.defineProperties(e.prototype,{subscription:pr(),noAutoSubscribe:Gn("no-auto-subscribe")}),e}var Bf=Ue(z_);var Ka=class extends Bf(HTMLElement){};var qf=class extends Ct{constructor(e,r,i,n){super(e,r,i,n);this.type="subscription",this.componentClass=Ka,this.defaults={notifyOnNetworkStatusChange:!1,shouldResubscribe:!1,skip:!1},this.init()}optionsToProperties(){var e,r;let{onSubscriptionComplete:i,onSubscriptionData:n,shouldSubscribe:o,...s}=this.options;return{...this.defaults,noAutoSubscribe:(e=s.noAutoSubscribe)!==null&&e!==void 0?e:this.state.host.hasAttribute("no-auto-subscribe"),skip:(r=s.skip)!==null&&r!==void 0?r:!1,subscription:this.document,variables:s.variables}}optionsToOptionalMethods(){let{onSubscriptionData:e,shouldSubscribe:r}=this.options;return{onSubscriptionData:e,shouldSubscribe:r}}update(){this.disconnected&&this.connect();let{data:e,error:r,loading:i}=this.state.host;return{data:e,error:r,loading:i}}},$I=$(qf);var tM=[1,3e4],rM=[1,20],iM=Te`
  query getProductByHandle($handle: String!) {
    productByHandle(handle: $handle) {
      id
      onlineStoreUrl
      availableForSale
      handle
      title
      totalInventory
      tags
      vendor
      productType
      variants(first: 2) {
        edges {
          node {
            id
            image {
              altText
              originalSrc
              transformedSrc(crop: CENTER, maxWidth: 600, maxHeight: 600)
            }
            priceV2 {
              amount
              currencyCode
            }
            quantityAvailable
            availableForSale
          }
        }
      }
    }
  }
`,$_=Te`
  query getProducts(
    $first: Int
    $after: String
    $query: String
    $reverse: Boolean
    $sortKey: ProductSortKeys
  ) {
    products(
      first: $first
      after: $after
      query: $query
      reverse: $reverse
      sortKey: $sortKey
    ) {
      edges {
        cursor
        node {
          id
          onlineStoreUrl
          handle
          title
          availableForSale
          productType
          vendor
          totalInventory
          images(first: 2) {
            edges {
              node {
                altText
                originalSrc
                transformedSrc(crop: CENTER, maxWidth: 340, maxHeight: 340)
              }
            }
          }
          priceRange {
            maxVariantPrice {
              amount
              currencyCode
            }
            minVariantPrice {
              amount
              currencyCode
            }
          }
          tags
          description
        }
      }
    }
  }
`,G_=({availableForSale:t,totalInventory:e,onlineStoreUrl:r,description:i,handle:n,images:o,priceRange:s,tags:a,title:l,vendor:u,productType:c})=>({availableForSale:t,inStock:e>0,totalInventory:e,title:l,handle:n,images:o?.edges?.map(({node:p})=>({imageAltText:p?.altText??null,imageOriginalSrc:p?.originalSrc??null,imageTransformedSrc:p?.transformedSrc??null}))??[],maxVariantPrice:Number(s?.maxVariantPrice?.amount),minVariantPrice:Number(s?.minVariantPrice?.amount),tags:a,description:i,vendor:u,productType:c,onlineStoreUrl:r}),nM=t=>document.createRange().createContextualFragment(t),Uf=t=>t.replace(/(<([^>]+)>)/gi,""),Qa=t=>`${t}`.replace(/([\\"'])/g,"\\$1").replace(/\0/g,"\\0"),oM=t=>t.split(/\s+/).length>1?`"${t}"`:t;var W_=({searchString:t="",productTypes:e=[]}={})=>{let r="",i=t.trim()===""?"*":t.trim().split(" ").length>1?`"${Qa(t.trim().split(" ").slice(0,-1).join(" "))}*"`:`${Qa(t.trim())}*`;t.trim()!==""&&(r=` AND (title:${i} OR description:${i} OR tags:${i})`);let n=`${e.map(o=>`product_type:"${Qa(o)}"`).join(" OR ")}`;return n!==""&&(n=` AND (${n})`),`available_for_sale:true${r}${n}`},Y_=({searchString:t="",productTypes:e=[]}={})=>{let r=[],i=n=>window.__APOLLO_CLIENT__.query({query:$_,variables:{first:250,query:`${W_({searchString:t,productTypes:e})}`,after:n?.data?.products?.edges?.slice(-1)?.[0]?.cursor??null,sortKey:"BEST_SELLING"}}).then(o=>(r=[...r,...o?.data?.products?.edges?.map(({node:s})=>s)??[]],(o?.data?.products?.edges?.length??0)<250?Promise.resolve(r):i(o)));return i},sM=async(t="")=>(await Y_({searchString:t})()).map(G_),aM=(t=[],e=[])=>{let[r,i]=t,[n,o]=e,s=Math.max(r,n);return Math.min(i,o)>=s};var lM=t=>(e,r)=>{switch(t.sortValue){case"TITLE_ASC":return e?.title?.localeCompare(r?.title,void 0,{base:!0});case"TITLE_DESC":return r?.title?.localeCompare(e?.title,void 0,{base:!0});case"PRICE_ASC":return e.minVariantPrice-r.maxVariantPrice;case"PRICE_DESC":return r.minVariantPrice-e.maxVariantPrice;default:return 0}},uM=t=>{switch(t){case"best-selling":return"BEST_SELLING_ASC";case"title-ascending":return"TITLE_ASC";case"title-descending":return"TITLE_DESC";case"price-ascending":return"PRICE_ASC";case"price-descending":return"PRICE_DESC";default:return"BEST_SELLING_ASC"}},cM=(t,e)=>[1,t,e-2,e-1,e,e+1,e+2].filter((i,n,o)=>o.indexOf(i)===n&&i>=1&&i<=t).sort((i,n)=>i-n).reduce((i,n,o)=>{let s=[...i];return o===0?s=[n]:n-i[i.length-1]>1?s=[...i,"...",n]:s=[...i,n],s},[]);var J_=ds(({classList:t=["collection-banner","d-flex","justify-content-between","align-items-center"],title:e})=>pe`<div class=${t.join(" ")}>
    <h2 class="banner-name dtm-banner-name">${e}</h2>
    <div class="parallelograms-group dtm-parallelograms-group">
      <span class="parallelograms parallelogram-lt dtm-parallelograms"> </span>
      <span class="parallelograms parallelogram-rt dtm-parallelograms"> </span>
      <span class="parallelograms parallelogram-br dtm-parallelograms"> </span>
    </div>
  </div>`),Hf=J_;var Od=dt(Cd());function Ub(){let t=({available:a,title:l,featured_image:u,vendor:c,description:p,tags:f,price:h,handle:d,first_available_variant_id:m})=>({availability:a?"INSTOCK":"OUTOFSTOCK",name:l,image:u,brand:c,description:Uf(p),handle:d,variantId:m,price:`$${(h/1e3).toFixed(2)}`,"cook-type":f?.filter(y=>y.includes("dtm_cook-type_"))?.map(y=>y?.replace("dtm_cook-type_",""))??[],"total-btu":f?.find(y=>y.includes("dtm_total-btu"))?.replace("dtm_total-btu_","")??"","cooking-temperature-range":f?.find(y=>y.includes("dtm_cooking-temperature-range"))?.replace("dtm_cooking-temperature-range_","")??"","total-grill-size":f?.find(y=>y.includes("dtm_total-grill-size"))?.replace("dtm_total-grill-size_","")??"","primary-cooking-space":f?.find(y=>y.includes("dtm_primary-cooking-space"))?.replace("dtm_primary-cooking-space_","")??"","number-of-racks":f?.find(y=>y.includes("dtm_number-of-racks"))?.replace("dtm_number-of-racks_","")??"","rear-rotisserie-burner":!!f?.includes("dtm_rear-rotisserie-burner"),"side-burner":!!f?.includes("dtm_side-burner"),"sear-functionality":!!f?.includes("dtm_sear-functionality")}),e=JSON.parse(localStorage.getItem("compare")??"{}"),[r,i]=us(window?.productsToCompare.map(a=>t(a))??[]),n=[{label:"Product Name & Image",key:"name_image"},{label:"Product Description",key:"description"},{label:"Brand",key:"brand"},{label:"Availability",key:"availability"},{label:"Cook Type",key:"cook-type"},{label:"Total BTU",key:"total-btu"},{label:"Cooking Temperature Range",key:"cooking-temperature-range"},{label:"Total Grill Size",key:"total-grill-size"},{label:"Primary Cooking Space",key:"primary-cooking-space"},{label:"Number of racks ",key:"number-of-racks"},{label:"Rear Rotisserie Burner",key:"rear-rotisserie-burner"},{label:"Side Burner ",key:"side-burner"},{label:"Sear Functionality",key:"sear-functionality"},{label:"Action",key:"action"}],o=a=>{let l=(0,Od.default)(e,u=>u!==a.handle);console.log("newCompareProducts",l),localStorage.setItem("compare",JSON.stringify(l)),i(u=>u.filter(c=>c.handle!==a.handle))},s=(a,l)=>{switch(a.key){case"name_image":return pe`<div
          class="name-image-price-wrapper w-100"
          style="position: relative;"
        >
          <img
            class="w-100"
            src=${l.image}
            style="max-width: 300px;display: block;margin:0 auto;"
          />
          <h3>${l.name}</h3>
          <h4>${l.price}</h4>
          <i
            class="fa fa-close"
            style="position: absolute; right: 0; top: 0; cursor: pointer;"
            @click=${()=>o(l)}
          ></i>
        </div>`;case"action":return pe`${l.variantId?pe`<a
              href=${`/cart/add?id=${l.variantId}&quantity=1`}
              class="btn btn-solid"
            >
              Add to cart >>
            </a>`:null}`;default:return l?.[a.key]??""}};return pe` <div class="modal-header">
      ${Hf({title:"Compare Products",classList:["d-flex","justify-content-between","align-items-center","w-100"]})}
    </div>
    ${r&&(r?.length??0)>0?pe`<div class="modal-body">
          <div class="table-wrapper">
            <table class="table table-responsive">
              <tbody id="table-compare">
                ${n.map(a=>pe`
                    <tr>
                      <th width="10%" class=${a.key}>${a.label}</th>
                      ${r.map(l=>pe`
                          <td
                            width="${90/r.length}%"
                            class=${`${l.handle}-${a.key}`}
                          >
                            ${s(a,l)}
                          </td>
                        `)}
                    </tr>
                  `)}
              </tbody>
            </table>
          </div>
        </div>`:pe`<div class="modal-body">
          <div class="table-wrapper">
            <table class="table table-responsive">
              <tbody id="table-compare">
                <div class="row cart-buttons compare-grid--empty-list">
                  <div class="col-12">
                    <div class="text-center">
                      <img
                        class=""
                        src="https://picsum.photos/200/300"
                        alt="Compare list loading"
                      />
                      <h5 class="title-font mb-3 empty-list--text ">
                        Your compare list is currently empty.
                      </h5>
                      <a href="/collections/Barbeques" class="btn btn-solid">
                        Start Shopping
                      </a>
                    </div>
                  </div>
                </div>
              </tbody>
            </table>
          </div>
        </div>`}
    <div class="modal-footer">
      <a
        href="javascript:void(0)"
        class="close-modal"
        @click=${()=>{window?.$(".compare_modal")?.hide()}}
      >
        <i class="fa fa-close"></i>
      </a>
    </div>`}var Hb={tagName:"compare-table",renderer:Ub,options:{observedAttributes:["empty-image"],useShadowDOM:!1}};window.JSCompiler_renameProperty=function(t,e){return t};var Kb=/(url\()([^)]*)(\))/g,Qb=/(^\/[^\/])|(^#)|(^[\w-\d]*:)/,fo,fe;function kt(t,e){if(t&&Qb.test(t)||t==="//")return t;if(fo===void 0){fo=!1;try{let r=new URL("b","http://a");r.pathname="c%20d",fo=r.href==="http://a/c%20d"}catch(r){}}if(e||(e=document.baseURI||window.location.href),fo)try{return new URL(t,e).href}catch(r){return t}return fe||(fe=document.implementation.createHTMLDocument("temp"),fe.base=fe.createElement("base"),fe.head.appendChild(fe.base),fe.anchor=fe.createElement("a"),fe.body.appendChild(fe.anchor)),fe.base.href=e,fe.anchor.href=t,fe.anchor.href||t}function mi(t,e){return t.replace(Kb,function(r,i,n,o){return i+"'"+kt(n.replace(/["']/g,""),e)+"'"+o})}function _r(t){return t.substring(0,t.lastIndexOf("/")+1)}var cl=!window.ShadyDOM||!window.ShadyDOM.inUse,wM=Boolean(!window.ShadyCSS||window.ShadyCSS.nativeCss),SM=!window.customElements.polyfillWrapFlushCallback,Pd=cl&&"adoptedStyleSheets"in Document.prototype&&"replaceSync"in CSSStyleSheet.prototype&&(()=>{try{let t=new CSSStyleSheet;t.replaceSync("");let e=document.createElement("div");return e.attachShadow({mode:"open"}),e.shadowRoot.adoptedStyleSheets=[t],e.shadowRoot.adoptedStyleSheets[0]===t}catch(t){return!1}})(),kd=window.Polymer&&window.Polymer.rootPath||_r(document.baseURI||window.location.href);var yi=window.Polymer&&window.Polymer.sanitizeDOMValue||void 0;var Ad=window.Polymer&&window.Polymer.setPassiveTouchGestures||!1;var be=window.Polymer&&window.Polymer.strictTemplatePolicy||!1;var Dd=window.Polymer&&window.Polymer.allowTemplateFromDomModule||!1;var ze=window.Polymer&&window.Polymer.legacyOptimizations||!1;var ho=window.Polymer&&window.Polymer.legacyWarnings||!1;var Nd=window.Polymer&&window.Polymer.syncInitialRender||!1;var mo=window.Polymer&&window.Polymer.legacyUndefined||!1;var Id=window.Polymer&&window.Polymer.orderedComputed||!1;var pl=!0;var fl=window.Polymer&&window.Polymer.removeNestedTemplates||!1;var yo=window.Polymer&&window.Polymer.fastDomIf||!1;var vi=window.Polymer&&window.Polymer.suppressTemplateNotifications||!1;var _i=window.Polymer&&window.Polymer.legacyNoObservedAttributes||!1;var Md=window.Polymer&&window.Polymer.useAdoptedStyleSheetsWithBuiltCSS||!1;var zb=0;function Rd(){}Rd.prototype.__mixinApplications;Rd.prototype.__mixinSet;var V=function(t){let e=t.__mixinApplications;e||(e=new WeakMap,t.__mixinApplications=e);let r=zb++;function i(n){let o=n.__mixinSet;if(o&&o[r])return n;let s=e,a=s.get(n);if(!a){a=t(n),s.set(n,a);let l=Object.create(a.__mixinSet||o||null);l[r]=!0,a.__mixinSet=l}return a}return i};var dl={},jd={};function Fd(t,e){dl[t]=jd[t.toLowerCase()]=e}function Ld(t){return dl[t]||jd[t.toLowerCase()]}function $b(t){t.querySelector("style")&&console.warn("dom-module %s has style outside template",t.id)}var at=class extends HTMLElement{static get observedAttributes(){return["id"]}static import(e,r){if(e){let i=Ld(e);return i&&r?i.querySelector(r):i}return null}attributeChangedCallback(e,r,i,n){r!==i&&this.register()}get assetpath(){if(!this.__assetpath){let e=window.HTMLImports&&HTMLImports.importForElement?HTMLImports.importForElement(this)||document:this.ownerDocument,r=kt(this.getAttribute("assetpath")||"",e.baseURI);this.__assetpath=_r(r)}return this.__assetpath}register(e){if(e=e||this.id,e){if(be&&Ld(e)!==void 0)throw Fd(e,null),new Error(`strictTemplatePolicy: dom-module ${e} re-registered`);this.id=e,Fd(e,this),$b(this)}}};at.prototype.modules=dl;customElements.define("dom-module",at);var Gb="link[rel=import][type~=css]",Wb="include",Vd="shady-unscoped";function hl(t){return at.import(t)}function Bd(t){let e=t.body?t.body:t,r=mi(e.textContent,t.baseURI),i=document.createElement("style");return i.textContent=r,i}function Jb(t){let e=t.trim().split(/\s+/),r=[];for(let i=0;i<e.length;i++)r.push(...Yb(e[i]));return r}function Yb(t){let e=hl(t);if(!e)return console.warn("Could not find style data in module named",t),[];if(e._styles===void 0){let r=[];r.push(...ml(e));let i=e.querySelector("template");i&&r.push(...vo(i,e.assetpath)),e._styles=r}return e._styles}function vo(t,e){if(!t._styles){let r=[],i=t.content.querySelectorAll("style");for(let n=0;n<i.length;n++){let o=i[n],s=o.getAttribute(Wb);s&&r.push(...Jb(s).filter(function(a,l,u){return u.indexOf(a)===l})),e&&(o.textContent=mi(o.textContent,e)),r.push(o)}t._styles=r}return t._styles}function qd(t){let e=hl(t);return e?ml(e):[]}function ml(t){let e=[],r=t.querySelectorAll(Gb);for(let i=0;i<r.length;i++){let n=r[i];if(n.import){let o=n.import,s=n.hasAttribute(Vd);if(s&&!o._unscopedStyle){let a=Bd(o);a.setAttribute(Vd,""),o._unscopedStyle=a}else o._style||(o._style=Bd(o));e.push(s?o._unscopedStyle:o._style)}}return e}function Ud(t){let e=t.trim().split(/\s+/),r="";for(let i=0;i<e.length;i++)r+=Xb(e[i]);return r}function Xb(t){let e=hl(t);if(e&&e._cssText===void 0){let r=e0(e),i=e.querySelector("template");i&&(r+=Zb(i,e.assetpath)),e._cssText=r||null}return e||console.warn("Could not find style data in module named",t),e&&e._cssText||""}function Zb(t,e){let r="",i=vo(t,e);for(let n=0;n<i.length;n++){let o=i[n];o.parentNode&&o.parentNode.removeChild(o),r+=o.textContent}return r}function e0(t){let e="",r=ml(t);for(let i=0;i<r.length;i++)e+=r[i].textContent;return e}var b=window.ShadyDOM&&window.ShadyDOM.noPatch&&window.ShadyDOM.wrap?window.ShadyDOM.wrap:window.ShadyDOM?t=>ShadyDOM.patch(t):t=>t;function _o(t){return t.indexOf(".")>=0}function xe(t){let e=t.indexOf(".");return e===-1?t:t.slice(0,e)}function yl(t,e){return t.indexOf(e+".")===0}function gr(t,e){return e.indexOf(t+".")===0}function At(t,e,r){return e+r.slice(t.length)}function Hd(t,e){return t===e||yl(t,e)||gr(t,e)}function br(t){if(Array.isArray(t)){let e=[];for(let r=0;r<t.length;r++){let i=t[r].toString().split(".");for(let n=0;n<i.length;n++)e.push(i[n])}return e.join(".")}else return t}function Kd(t){return Array.isArray(t)?br(t).split("."):t.toString().split(".")}function Y(t,e,r){let i=t,n=Kd(e);for(let o=0;o<n.length;o++){if(!i)return;let s=n[o];i=i[s]}return r&&(r.path=n.join(".")),i}function vl(t,e,r){let i=t,n=Kd(e),o=n[n.length-1];if(n.length>1){for(let s=0;s<n.length-1;s++){let a=n[s];if(i=i[a],!i)return}i[o]=r}else i[e]=r;return n.join(".")}var go={},t0=/-[a-z]/g,r0=/([A-Z])/g;function xr(t){return go[t]||(go[t]=t.indexOf("-")<0?t:t.replace(t0,e=>e[1].toUpperCase()))}function wr(t){return go[t]||(go[t]=t.replace(r0,"-$1").toLowerCase())}var i0=0,Qd=0,Sr=[],n0=0,_l=!1,zd=document.createTextNode("");new window.MutationObserver(o0).observe(zd,{characterData:!0});function o0(){_l=!1;let t=Sr.length;for(let e=0;e<t;e++){let r=Sr[e];if(r)try{r()}catch(i){setTimeout(()=>{throw i})}}Sr.splice(0,t),Qd+=t}var lt={after(t){return{run(e){return window.setTimeout(e,t)},cancel(e){window.clearTimeout(e)}}},run(t,e){return window.setTimeout(t,e)},cancel(t){window.clearTimeout(t)}};var se={run(t){return _l||(_l=!0,zd.textContent=n0++),Sr.push(t),i0++},cancel(t){let e=t-Qd;if(e>=0){if(!Sr[e])throw new Error("invalid async handle: "+t);Sr[e]=null}}};var s0=se,bo=V(t=>{class e extends t{static createProperties(i){let n=this.prototype;for(let o in i)o in n||n._createPropertyAccessor(o)}static attributeNameForProperty(i){return i.toLowerCase()}static typeForProperty(i){}_createPropertyAccessor(i,n){this._addPropertyToAttributeMap(i),this.hasOwnProperty(JSCompiler_renameProperty("__dataHasAccessor",this))||(this.__dataHasAccessor=Object.assign({},this.__dataHasAccessor)),this.__dataHasAccessor[i]||(this.__dataHasAccessor[i]=!0,this._definePropertyAccessor(i,n))}_addPropertyToAttributeMap(i){this.hasOwnProperty(JSCompiler_renameProperty("__dataAttributes",this))||(this.__dataAttributes=Object.assign({},this.__dataAttributes));let n=this.__dataAttributes[i];return n||(n=this.constructor.attributeNameForProperty(i),this.__dataAttributes[n]=i),n}_definePropertyAccessor(i,n){Object.defineProperty(this,i,{get(){return this.__data[i]},set:n?function(){}:function(o){this._setPendingProperty(i,o,!0)&&this._invalidateProperties()}})}constructor(){super();this.__dataEnabled=!1,this.__dataReady=!1,this.__dataInvalid=!1,this.__data={},this.__dataPending=null,this.__dataOld=null,this.__dataInstanceProps=null,this.__dataCounter=0,this.__serializing=!1,this._initializeProperties()}ready(){this.__dataReady=!0,this._flushProperties()}_initializeProperties(){for(let i in this.__dataHasAccessor)this.hasOwnProperty(i)&&(this.__dataInstanceProps=this.__dataInstanceProps||{},this.__dataInstanceProps[i]=this[i],delete this[i])}_initializeInstanceProperties(i){Object.assign(this,i)}_setProperty(i,n){this._setPendingProperty(i,n)&&this._invalidateProperties()}_getProperty(i){return this.__data[i]}_setPendingProperty(i,n,o){let s=this.__data[i],a=this._shouldPropertyChange(i,n,s);return a&&(this.__dataPending||(this.__dataPending={},this.__dataOld={}),this.__dataOld&&!(i in this.__dataOld)&&(this.__dataOld[i]=s),this.__data[i]=n,this.__dataPending[i]=n),a}_isPropertyPending(i){return!!(this.__dataPending&&this.__dataPending.hasOwnProperty(i))}_invalidateProperties(){!this.__dataInvalid&&this.__dataReady&&(this.__dataInvalid=!0,s0.run(()=>{this.__dataInvalid&&(this.__dataInvalid=!1,this._flushProperties())}))}_enableProperties(){this.__dataEnabled||(this.__dataEnabled=!0,this.__dataInstanceProps&&(this._initializeInstanceProperties(this.__dataInstanceProps),this.__dataInstanceProps=null),this.ready())}_flushProperties(){this.__dataCounter++;let i=this.__data,n=this.__dataPending,o=this.__dataOld;this._shouldPropertiesChange(i,n,o)&&(this.__dataPending=null,this.__dataOld=null,this._propertiesChanged(i,n,o)),this.__dataCounter--}_shouldPropertiesChange(i,n,o){return Boolean(n)}_propertiesChanged(i,n,o){}_shouldPropertyChange(i,n,o){return o!==n&&(o===o||n===n)}attributeChangedCallback(i,n,o,s){n!==o&&this._attributeToProperty(i,o),super.attributeChangedCallback&&super.attributeChangedCallback(i,n,o,s)}_attributeToProperty(i,n,o){if(!this.__serializing){let s=this.__dataAttributes,a=s&&s[i]||i;this[a]=this._deserializeValue(n,o||this.constructor.typeForProperty(a))}}_propertyToAttribute(i,n,o){this.__serializing=!0,o=arguments.length<3?this[i]:o,this._valueToNodeAttribute(this,o,n||this.constructor.attributeNameForProperty(i)),this.__serializing=!1}_valueToNodeAttribute(i,n,o){let s=this._serializeValue(n);(o==="class"||o==="name"||o==="slot")&&(i=b(i)),s===void 0?i.removeAttribute(o):i.setAttribute(o,s)}_serializeValue(i){switch(typeof i){case"boolean":return i?"":void 0;default:return i!=null?i.toString():void 0}}_deserializeValue(i,n){switch(n){case Boolean:return i!==null;case Number:return Number(i);default:return i}}}return e});var $d={},xo=HTMLElement.prototype;for(;xo;){let t=Object.getOwnPropertyNames(xo);for(let e=0;e<t.length;e++)$d[t[e]]=!0;xo=Object.getPrototypeOf(xo)}function a0(t,e){if(!$d[e]){let r=t[e];r!==void 0&&(t.__data?t._setPendingProperty(e,r):(t.__dataProto?t.hasOwnProperty(JSCompiler_renameProperty("__dataProto",t))||(t.__dataProto=Object.create(t.__dataProto)):t.__dataProto={},t.__dataProto[e]=r))}}var wo=V(t=>{let e=bo(t);class r extends e{static createPropertiesForAttributes(){let n=this.observedAttributes;for(let o=0;o<n.length;o++)this.prototype._createPropertyAccessor(xr(n[o]))}static attributeNameForProperty(n){return wr(n)}_initializeProperties(){this.__dataProto&&(this._initializeProtoProperties(this.__dataProto),this.__dataProto=null),super._initializeProperties()}_initializeProtoProperties(n){for(let o in n)this._setProperty(o,n[o])}_ensureAttribute(n,o){let s=this;s.hasAttribute(n)||this._valueToNodeAttribute(s,o,n)}_serializeValue(n){switch(typeof n){case"object":if(n instanceof Date)return n.toString();if(n)try{return JSON.stringify(n)}catch(o){return""}default:return super._serializeValue(n)}}_deserializeValue(n,o){let s;switch(o){case Object:try{s=JSON.parse(n)}catch(a){s=n}break;case Array:try{s=JSON.parse(n)}catch(a){s=null,console.warn(`Polymer::Attributes: couldn't decode Array as JSON: ${n}`)}break;case Date:s=isNaN(n)?String(n):Number(n),s=new Date(s);break;default:s=super._deserializeValue(n,o);break}return s}_definePropertyAccessor(n,o){a0(this,n),super._definePropertyAccessor(n,o)}_hasAccessor(n){return this.__dataHasAccessor&&this.__dataHasAccessor[n]}_isPropertyPending(n){return Boolean(this.__dataPending&&n in this.__dataPending)}}return r});var l0={"dom-if":!0,"dom-repeat":!0},Gd=!1,Wd=!1;function u0(){if(!Gd){Gd=!0;let t=document.createElement("textarea");t.placeholder="a",Wd=t.placeholder===t.textContent}return Wd}function c0(t){u0()&&t.localName==="textarea"&&t.placeholder&&t.placeholder===t.textContent&&(t.textContent=null)}function p0(t){let e=t.getAttribute("is");if(e&&l0[e]){let r=t;for(r.removeAttribute("is"),t=r.ownerDocument.createElement(e),r.parentNode.replaceChild(t,r),t.appendChild(r);r.attributes.length;)t.setAttribute(r.attributes[0].name,r.attributes[0].value),r.removeAttribute(r.attributes[0].name)}return t}function Yd(t,e){let r=e.parentInfo&&Yd(t,e.parentInfo);if(r){for(let i=r.firstChild,n=0;i;i=i.nextSibling)if(e.parentIndex===n++)return i}else return t}function f0(t,e,r,i){i.id&&(e[i.id]=r)}function d0(t,e,r){if(r.events&&r.events.length)for(let i=0,n=r.events,o;i<n.length&&(o=n[i]);i++)t._addMethodEventListenerToNode(e,o.name,o.value,t)}function h0(t,e,r,i){r.templateInfo&&(e._templateInfo=r.templateInfo,e._parentTemplateInfo=i)}function m0(t,e,r){return t=t._methodHost||t,function(n){t[r]?t[r](n,n.detail):console.warn("listener method `"+r+"` not defined")}}var Jd=V(t=>{class e extends t{static _parseTemplate(i,n){if(!i._templateInfo){let o=i._templateInfo={};o.nodeInfoList=[],o.nestedTemplate=Boolean(n),o.stripWhiteSpace=n&&n.stripWhiteSpace||i.hasAttribute("strip-whitespace"),this._parseTemplateContent(i,o,{parent:null})}return i._templateInfo}static _parseTemplateContent(i,n,o){return this._parseTemplateNode(i.content,n,o)}static _parseTemplateNode(i,n,o){let s=!1,a=i;return a.localName=="template"&&!a.hasAttribute("preserve-content")?s=this._parseTemplateNestedTemplate(a,n,o)||s:a.localName==="slot"&&(n.hasInsertionPoint=!0),c0(a),a.firstChild&&this._parseTemplateChildNodes(a,n,o),a.hasAttributes&&a.hasAttributes()&&(s=this._parseTemplateNodeAttributes(a,n,o)||s),s||o.noted}static _parseTemplateChildNodes(i,n,o){if(!(i.localName==="script"||i.localName==="style"))for(let s=i.firstChild,a=0,l;s;s=l){if(s.localName=="template"&&(s=p0(s)),l=s.nextSibling,s.nodeType===Node.TEXT_NODE){let c=l;for(;c&&c.nodeType===Node.TEXT_NODE;)s.textContent+=c.textContent,l=c.nextSibling,i.removeChild(c),c=l;if(n.stripWhiteSpace&&!s.textContent.trim()){i.removeChild(s);continue}}let u={parentIndex:a,parentInfo:o};this._parseTemplateNode(s,n,u)&&(u.infoIndex=n.nodeInfoList.push(u)-1),s.parentNode&&a++}}static _parseTemplateNestedTemplate(i,n,o){let s=i,a=this._parseTemplate(s,n);return(a.content=s.content.ownerDocument.createDocumentFragment()).appendChild(s.content),o.templateInfo=a,!0}static _parseTemplateNodeAttributes(i,n,o){let s=!1,a=Array.from(i.attributes);for(let l=a.length-1,u;u=a[l];l--)s=this._parseTemplateNodeAttribute(i,n,o,u.name,u.value)||s;return s}static _parseTemplateNodeAttribute(i,n,o,s,a){return s.slice(0,3)==="on-"?(i.removeAttribute(s),o.events=o.events||[],o.events.push({name:s.slice(3),value:a}),!0):s==="id"?(o.id=a,!0):!1}static _contentForTemplate(i){let n=i._templateInfo;return n&&n.content||i.content}_stampTemplate(i,n){i&&!i.content&&window.HTMLTemplateElement&&HTMLTemplateElement.decorate&&HTMLTemplateElement.decorate(i),n=n||this.constructor._parseTemplate(i);let o=n.nodeInfoList,s=n.content||i.content,a=document.importNode(s,!0);a.__noInsertionPoint=!n.hasInsertionPoint;let l=a.nodeList=new Array(o.length);a.$={};for(let u=0,c=o.length,p;u<c&&(p=o[u]);u++){let f=l[u]=Yd(a,p);f0(this,a.$,f,p),h0(this,f,p,n),d0(this,f,p)}return a=a,a}_addMethodEventListenerToNode(i,n,o,s){s=s||i;let a=m0(s,n,o);return this._addEventListenerToNode(i,n,a),a}_addEventListenerToNode(i,n,o){i.addEventListener(n,o)}_removeEventListenerFromNode(i,n,o){i.removeEventListener(n,o)}}return e});var gi=0,bi=[],N={COMPUTE:"__computeEffects",REFLECT:"__reflectEffects",NOTIFY:"__notifyEffects",PROPAGATE:"__propagateEffects",OBSERVE:"__observeEffects",READ_ONLY:"__readOnly"},Xd="__computeInfo",y0=/[A-Z]/;function gl(t,e,r){let i=t[e];if(!i)i=t[e]={};else if(!t.hasOwnProperty(e)&&(i=t[e]=Object.create(t[e]),r))for(let n in i){let o=i[n],s=i[n]=Array(o.length);for(let a=0;a<o.length;a++)s[a]=o[a]}return i}function xi(t,e,r,i,n,o){if(e){let s=!1,a=gi++;for(let l in r){let u=n?xe(l):l,c=e[u];if(c)for(let p=0,f=c.length,h;p<f&&(h=c[p]);p++)(!h.info||h.info.lastRun!==a)&&(!n||bl(l,h.trigger))&&(h.info&&(h.info.lastRun=a),h.fn(t,l,r,i,h.info,n,o),s=!0)}return s}return!1}function v0(t,e,r,i,n,o,s,a){let l=!1,u=s?xe(i):i,c=e[u];if(c)for(let p=0,f=c.length,h;p<f&&(h=c[p]);p++)(!h.info||h.info.lastRun!==r)&&(!s||bl(i,h.trigger))&&(h.info&&(h.info.lastRun=r),h.fn(t,i,n,o,h.info,s,a),l=!0);return l}function bl(t,e){if(e){let r=e.name;return r==t||!!(e.structured&&yl(r,t))||!!(e.wildcard&&gr(r,t))}else return!0}function Zd(t,e,r,i,n){let o=typeof n.method=="string"?t[n.method]:n.method,s=n.property;o?o.call(t,t.__data[s],i[s]):n.dynamicFn||console.warn("observer method `"+n.method+"` not defined")}function g0(t,e,r,i,n){let o=t[N.NOTIFY],s,a=gi++;for(let u in e)e[u]&&(o&&v0(t,o,a,u,r,i,n)||n&&_0(t,u,r))&&(s=!0);let l;s&&(l=t.__dataHost)&&l._invalidateProperties&&l._invalidateProperties()}function _0(t,e,r){let i=xe(e);if(i!==e){let n=wr(i)+"-changed";return eh(t,n,r[e],e),!0}return!1}function eh(t,e,r,i){let n={value:r,queueProperty:!0};i&&(n.path=i),b(t).dispatchEvent(new CustomEvent(e,{detail:n}))}function b0(t,e,r,i,n,o){let a=(o?xe(e):e)!=e?e:null,l=a?Y(t,a):t.__data[e];a&&l===void 0&&(l=r[e]),eh(t,n.eventName,l,a)}function x0(t,e,r,i,n){let o,s=t.detail,a=s&&s.path;a?(i=At(r,i,a),o=s&&s.value):o=t.currentTarget[r],o=n?!o:o,(!e[N.READ_ONLY]||!e[N.READ_ONLY][i])&&e._setPendingPropertyOrPath(i,o,!0,Boolean(a))&&(!s||!s.queueProperty)&&e._invalidateProperties()}function w0(t,e,r,i,n){let o=t.__data[e];yi&&(o=yi(o,n.attrName,"attribute",t)),t._propertyToAttribute(e,n.attrName,o)}function E0(t,e,r,i){let n=t[N.COMPUTE];if(n)if(Id){gi++;let o=S0(t),s=[];for(let l in e)th(l,n,s,o,i);let a;for(;a=s.shift();)rh(t,"",e,r,a)&&th(a.methodInfo,n,s,o,i);Object.assign(r,t.__dataOld),Object.assign(e,t.__dataPending),t.__dataPending=null}else{let o=e;for(;xi(t,n,o,r,i);)Object.assign(r,t.__dataOld),Object.assign(e,t.__dataPending),o=t.__dataPending,t.__dataPending=null}}var T0=(t,e,r)=>{let i=0,n=e.length-1,o=-1;for(;i<=n;){let s=i+n>>1,a=r.get(e[s].methodInfo)-r.get(t.methodInfo);if(a<0)i=s+1;else if(a>0)n=s-1;else{o=s;break}}o<0&&(o=n+1),e.splice(o,0,t)},th=(t,e,r,i,n)=>{let o=n?xe(t):t,s=e[o];if(s)for(let a=0;a<s.length;a++){let l=s[a];l.info.lastRun!==gi&&(!n||bl(t,l.trigger))&&(l.info.lastRun=gi,T0(l.info,r,i))}};function S0(t){let e=t.constructor.__orderedComputedDeps;if(!e){e=new Map;let r=t[N.COMPUTE],{counts:i,ready:n,total:o}=C0(t),s;for(;s=n.shift();){e.set(s,e.size);let a=r[s];a&&a.forEach(l=>{let u=l.info.methodInfo;--o,--i[u]==0&&n.push(u)})}o!==0&&console.warn(`Computed graph for ${t.localName} incomplete; circular?`),t.constructor.__orderedComputedDeps=e}return e}function C0(t){let e=t[Xd],r={},i=t[N.COMPUTE],n=[],o=0;for(let s in e){let a=e[s];o+=r[s]=a.args.filter(l=>!l.literal).length+(a.dynamicFn?1:0)}for(let s in i)e[s]||n.push(s);return{counts:r,ready:n,total:o}}function rh(t,e,r,i,n){let o=xl(t,e,r,i,n);if(o===bi)return!1;let s=n.methodInfo;return t.__dataHasAccessor&&t.__dataHasAccessor[s]?t._setPendingProperty(s,o,!0):(t[s]=o,!1)}function O0(t,e,r){let i=t.__dataLinkedPaths;if(i){let n;for(let o in i){let s=i[o];gr(o,e)?(n=At(o,s,e),t._setPendingPropertyOrPath(n,r,!0,!0)):gr(s,e)&&(n=At(s,o,e),t._setPendingPropertyOrPath(n,r,!0,!0))}}}function wl(t,e,r,i,n,o,s){r.bindings=r.bindings||[];let a={kind:i,target:n,parts:o,literal:s,isCompound:o.length!==1};if(r.bindings.push(a),k0(a)){let{event:u,negate:c}=a.parts[0];a.listenerEvent=u||wr(n)+"-changed",a.listenerNegate=c}let l=e.nodeInfoList.length;for(let u=0;u<a.parts.length;u++){let c=a.parts[u];c.compoundIndex=u,P0(t,e,a,c,l)}}function P0(t,e,r,i,n){if(!i.literal)if(r.kind==="attribute"&&r.target[0]==="-")console.warn("Cannot set attribute "+r.target+' because "-" is not a valid attribute starting character');else{let o=i.dependencies,s={index:n,binding:r,part:i,evaluator:t};for(let a=0;a<o.length;a++){let l=o[a];typeof l=="string"&&(l=ih(l),l.wildcard=!0),t._addTemplatePropertyEffect(e,l.rootProperty,{fn:A0,info:s,trigger:l})}}}function A0(t,e,r,i,n,o,s){let a=s[n.index],l=n.binding,u=n.part;if(o&&u.source&&e.length>u.source.length&&l.kind=="property"&&!l.isCompound&&a.__isPropertyEffectsClient&&a.__dataHasAccessor&&a.__dataHasAccessor[l.target]){let c=r[e];e=At(u.source,l.target,e),a._setPendingPropertyOrPath(e,c,!1,!0)&&t._enqueueClient(a)}else{let c=n.evaluator._evaluateBinding(t,u,e,r,i,o);c!==bi&&D0(t,a,l,u,c)}}function D0(t,e,r,i,n){if(n=N0(e,n,r,i),yi&&(n=yi(n,r.target,r.kind,e)),r.kind=="attribute")t._valueToNodeAttribute(e,n,r.target);else{let o=r.target;e.__isPropertyEffectsClient&&e.__dataHasAccessor&&e.__dataHasAccessor[o]?(!e[N.READ_ONLY]||!e[N.READ_ONLY][o])&&e._setPendingProperty(o,n)&&t._enqueueClient(e):t._setUnmanagedPropertyToNode(e,o,n)}}function N0(t,e,r,i){if(r.isCompound){let n=t.__dataCompoundStorage[r.target];n[i.compoundIndex]=e,e=n.join("")}return r.kind!=="attribute"&&(r.target==="textContent"||r.target==="value"&&(t.localName==="input"||t.localName==="textarea"))&&(e=e??""),e}function k0(t){return Boolean(t.target)&&t.kind!="attribute"&&t.kind!="text"&&!t.isCompound&&t.parts[0].mode==="{"}function R0(t,e){let{nodeList:r,nodeInfoList:i}=e;if(i.length)for(let n=0;n<i.length;n++){let o=i[n],s=r[n],a=o.bindings;if(a)for(let l=0;l<a.length;l++){let u=a[l];I0(s,u),M0(s,t,u)}s.__dataHost=t}}function I0(t,e){if(e.isCompound){let r=t.__dataCompoundStorage||(t.__dataCompoundStorage={}),i=e.parts,n=new Array(i.length);for(let s=0;s<i.length;s++)n[s]=i[s].literal;let o=e.target;r[o]=n,e.literal&&e.kind=="property"&&(o==="className"&&(t=b(t)),t[o]=e.literal)}}function M0(t,e,r){if(r.listenerEvent){let i=r.parts[0];t.addEventListener(r.listenerEvent,function(n){x0(n,e,r.target,i.source,i.negate)})}}function nh(t,e,r,i,n,o){o=e.static||o&&(typeof o!="object"||o[e.methodName]);let s={methodName:e.methodName,args:e.args,methodInfo:n,dynamicFn:o};for(let a=0,l;a<e.args.length&&(l=e.args[a]);a++)l.literal||t._addPropertyEffect(l.rootProperty,r,{fn:i,info:s,trigger:l});return o&&t._addPropertyEffect(e.methodName,r,{fn:i,info:s}),s}function xl(t,e,r,i,n){let o=t._methodHost||t,s=o[n.methodName];if(s){let a=t._marshalArgs(n.args,e,r);return a===bi?bi:s.apply(o,a)}else n.dynamicFn||console.warn("method `"+n.methodName+"` not defined")}var j0=[],oh="(?:[a-zA-Z_$][\\w.:$\\-*]*)",F0="(?:[-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)",L0="(?:'(?:[^'\\\\]|\\\\.)*')",V0='(?:"(?:[^"\\\\]|\\\\.)*")',B0="(?:"+L0+"|"+V0+")",sh="(?:("+oh+"|"+F0+"|"+B0+")\\s*)",q0="(?:"+sh+"(?:,\\s*"+sh+")*)",U0="(?:\\(\\s*(?:"+q0+"?)\\)\\s*)",H0="("+oh+"\\s*"+U0+"?)",K0="(\\[\\[|{{)\\s*",Q0="(?:]]|}})",z0="(?:(!)\\s*)?",$0=K0+z0+H0+Q0,ah=new RegExp($0,"g");function lh(t){let e="";for(let r=0;r<t.length;r++)e+=t[r].literal||"";return e}function Sl(t){let e=t.match(/([^\s]+?)\(([\s\S]*)\)/);if(e){let i={methodName:e[1],static:!0,args:j0};if(e[2].trim()){let n=e[2].replace(/\\,/g,"&comma;").split(",");return G0(n,i)}else return i}return null}function G0(t,e){return e.args=t.map(function(r){let i=ih(r);return i.literal||(e.static=!1),i},this),e}function ih(t){let e=t.trim().replace(/&comma;/g,",").replace(/\\(.)/g,"$1"),r={name:e,value:"",literal:!1},i=e[0];switch(i==="-"&&(i=e[1]),i>="0"&&i<="9"&&(i="#"),i){case"'":case'"':r.value=e.slice(1,-1),r.literal=!0;break;case"#":r.value=Number(e),r.literal=!0;break}return r.literal||(r.rootProperty=xe(e),r.structured=_o(e),r.structured&&(r.wildcard=e.slice(-2)==".*",r.wildcard&&(r.name=e.slice(0,-2)))),r}function uh(t,e,r){let i=Y(t,r);return i===void 0&&(i=e[r]),i}function ch(t,e,r,i){let n={indexSplices:i};mo&&!t._overrideLegacyUndefined&&(e.splices=n),t.notifyPath(r+".splices",n),t.notifyPath(r+".length",e.length),mo&&!t._overrideLegacyUndefined&&(n.indexSplices=[])}function wi(t,e,r,i,n,o){ch(t,e,r,[{index:i,addedCount:n,removed:o,object:e,type:"splice"}])}function W0(t){return t[0].toUpperCase()+t.substring(1)}var Dt=V(t=>{let e=Jd(wo(t));class r extends e{constructor(){super();this.__isPropertyEffectsClient=!0,this.__dataClientsReady,this.__dataPendingClients,this.__dataToNotify,this.__dataLinkedPaths,this.__dataHasPaths,this.__dataCompoundStorage,this.__dataHost,this.__dataTemp,this.__dataClientsInitialized,this.__data,this.__dataPending,this.__dataOld,this.__computeEffects,this.__computeInfo,this.__reflectEffects,this.__notifyEffects,this.__propagateEffects,this.__observeEffects,this.__readOnly,this.__templateInfo,this._overrideLegacyUndefined}get PROPERTY_EFFECT_TYPES(){return N}_initializeProperties(){super._initializeProperties(),this._registerHost(),this.__dataClientsReady=!1,this.__dataPendingClients=null,this.__dataToNotify=null,this.__dataLinkedPaths=null,this.__dataHasPaths=!1,this.__dataCompoundStorage=this.__dataCompoundStorage||null,this.__dataHost=this.__dataHost||null,this.__dataTemp={},this.__dataClientsInitialized=!1}_registerHost(){if(Si.length){let n=Si[Si.length-1];n._enqueueClient(this),this.__dataHost=n}}_initializeProtoProperties(n){this.__data=Object.create(n),this.__dataPending=Object.create(n),this.__dataOld={}}_initializeInstanceProperties(n){let o=this[N.READ_ONLY];for(let s in n)(!o||!o[s])&&(this.__dataPending=this.__dataPending||{},this.__dataOld=this.__dataOld||{},this.__data[s]=this.__dataPending[s]=n[s])}_addPropertyEffect(n,o,s){this._createPropertyAccessor(n,o==N.READ_ONLY);let a=gl(this,o,!0)[n];a||(a=this[o][n]=[]),a.push(s)}_removePropertyEffect(n,o,s){let a=gl(this,o,!0)[n],l=a.indexOf(s);l>=0&&a.splice(l,1)}_hasPropertyEffect(n,o){let s=this[o];return Boolean(s&&s[n])}_hasReadOnlyEffect(n){return this._hasPropertyEffect(n,N.READ_ONLY)}_hasNotifyEffect(n){return this._hasPropertyEffect(n,N.NOTIFY)}_hasReflectEffect(n){return this._hasPropertyEffect(n,N.REFLECT)}_hasComputedEffect(n){return this._hasPropertyEffect(n,N.COMPUTE)}_setPendingPropertyOrPath(n,o,s,a){if(a||xe(Array.isArray(n)?n[0]:n)!==n){if(!a){let l=Y(this,n);if(n=vl(this,n,o),!n||!super._shouldPropertyChange(n,o,l))return!1}if(this.__dataHasPaths=!0,this._setPendingProperty(n,o,s))return O0(this,n,o),!0}else{if(this.__dataHasAccessor&&this.__dataHasAccessor[n])return this._setPendingProperty(n,o,s);this[n]=o}return!1}_setUnmanagedPropertyToNode(n,o,s){(s!==n[o]||typeof s=="object")&&(o==="className"&&(n=b(n)),n[o]=s)}_setPendingProperty(n,o,s){let a=this.__dataHasPaths&&_o(n),l=a?this.__dataTemp:this.__data;return this._shouldPropertyChange(n,o,l[n])?(this.__dataPending||(this.__dataPending={},this.__dataOld={}),n in this.__dataOld||(this.__dataOld[n]=this.__data[n]),a?this.__dataTemp[n]=o:this.__data[n]=o,this.__dataPending[n]=o,(a||this[N.NOTIFY]&&this[N.NOTIFY][n])&&(this.__dataToNotify=this.__dataToNotify||{},this.__dataToNotify[n]=s),!0):!1}_setProperty(n,o){this._setPendingProperty(n,o,!0)&&this._invalidateProperties()}_invalidateProperties(){this.__dataReady&&this._flushProperties()}_enqueueClient(n){this.__dataPendingClients=this.__dataPendingClients||[],n!==this&&this.__dataPendingClients.push(n)}_flushClients(){this.__dataClientsReady?this.__enableOrFlushClients():(this.__dataClientsReady=!0,this._readyClients(),this.__dataReady=!0)}__enableOrFlushClients(){let n=this.__dataPendingClients;if(n){this.__dataPendingClients=null;for(let o=0;o<n.length;o++){let s=n[o];s.__dataEnabled?s.__dataPending&&s._flushProperties():s._enableProperties()}}}_readyClients(){this.__enableOrFlushClients()}setProperties(n,o){for(let s in n)(o||!this[N.READ_ONLY]||!this[N.READ_ONLY][s])&&this._setPendingPropertyOrPath(s,n[s],!0);this._invalidateProperties()}ready(){this._flushProperties(),this.__dataClientsReady||this._flushClients(),this.__dataPending&&this._flushProperties()}_propertiesChanged(n,o,s){let a=this.__dataHasPaths;this.__dataHasPaths=!1;let l;E0(this,o,s,a),l=this.__dataToNotify,this.__dataToNotify=null,this._propagatePropertyChanges(o,s,a),this._flushClients(),xi(this,this[N.REFLECT],o,s,a),xi(this,this[N.OBSERVE],o,s,a),l&&g0(this,l,o,s,a),this.__dataCounter==1&&(this.__dataTemp={})}_propagatePropertyChanges(n,o,s){this[N.PROPAGATE]&&xi(this,this[N.PROPAGATE],n,o,s),this.__templateInfo&&this._runEffectsForTemplate(this.__templateInfo,n,o,s)}_runEffectsForTemplate(n,o,s,a){let l=(u,c)=>{xi(this,n.propertyEffects,u,s,c,n.nodeList);for(let p=n.firstChild;p;p=p.nextSibling)this._runEffectsForTemplate(p,u,s,c)};n.runEffects?n.runEffects(l,o,a):l(o,a)}linkPaths(n,o){n=br(n),o=br(o),this.__dataLinkedPaths=this.__dataLinkedPaths||{},this.__dataLinkedPaths[n]=o}unlinkPaths(n){n=br(n),this.__dataLinkedPaths&&delete this.__dataLinkedPaths[n]}notifySplices(n,o){let s={path:""},a=Y(this,n,s);ch(this,a,s.path,o)}get(n,o){return Y(o||this,n)}set(n,o,s){s?vl(s,n,o):(!this[N.READ_ONLY]||!this[N.READ_ONLY][n])&&this._setPendingPropertyOrPath(n,o,!0)&&this._invalidateProperties()}push(n,...o){let s={path:""},a=Y(this,n,s),l=a.length,u=a.push(...o);return o.length&&wi(this,a,s.path,l,o.length,[]),u}pop(n){let o={path:""},s=Y(this,n,o),a=Boolean(s.length),l=s.pop();return a&&wi(this,s,o.path,s.length,0,[l]),l}splice(n,o,s,...a){let l={path:""},u=Y(this,n,l);o<0?o=u.length-Math.floor(-o):o&&(o=Math.floor(o));let c;return arguments.length===2?c=u.splice(o):c=u.splice(o,s,...a),(a.length||c.length)&&wi(this,u,l.path,o,a.length,c),c}shift(n){let o={path:""},s=Y(this,n,o),a=Boolean(s.length),l=s.shift();return a&&wi(this,s,o.path,0,0,[l]),l}unshift(n,...o){let s={path:""},a=Y(this,n,s),l=a.unshift(...o);return o.length&&wi(this,a,s.path,0,o.length,[]),l}notifyPath(n,o){let s;if(arguments.length==1){let a={path:""};o=Y(this,n,a),s=a.path}else Array.isArray(n)?s=br(n):s=n;this._setPendingPropertyOrPath(s,o,!0,!0)&&this._invalidateProperties()}_createReadOnlyProperty(n,o){this._addPropertyEffect(n,N.READ_ONLY),o&&(this["_set"+W0(n)]=function(s){this._setProperty(n,s)})}_createPropertyObserver(n,o,s){let a={property:n,method:o,dynamicFn:Boolean(s)};this._addPropertyEffect(n,N.OBSERVE,{fn:Zd,info:a,trigger:{name:n}}),s&&this._addPropertyEffect(o,N.OBSERVE,{fn:Zd,info:a,trigger:{name:o}})}_createMethodObserver(n,o){let s=Sl(n);if(!s)throw new Error("Malformed observer expression '"+n+"'");nh(this,s,N.OBSERVE,xl,null,o)}_createNotifyingProperty(n){this._addPropertyEffect(n,N.NOTIFY,{fn:b0,info:{eventName:wr(n)+"-changed",property:n}})}_createReflectedProperty(n){let o=this.constructor.attributeNameForProperty(n);o[0]==="-"?console.warn("Property "+n+" cannot be reflected to attribute "+o+' because "-" is not a valid starting attribute name. Use a lowercase first letter for the property instead.'):this._addPropertyEffect(n,N.REFLECT,{fn:w0,info:{attrName:o}})}_createComputedProperty(n,o,s){let a=Sl(o);if(!a)throw new Error("Malformed computed expression '"+o+"'");let l=nh(this,a,N.COMPUTE,rh,n,s);gl(this,Xd)[n]=l}_marshalArgs(n,o,s){let a=this.__data,l=[];for(let u=0,c=n.length;u<c;u++){let{name:p,structured:f,wildcard:h,value:d,literal:m}=n[u];if(!m)if(h){let y=gr(p,o),_=uh(a,s,y?o:p);d={path:y?o:p,value:_,base:y?Y(a,p):_}}else d=f?uh(a,s,p):a[p];if(mo&&!this._overrideLegacyUndefined&&d===void 0&&n.length>1)return bi;l[u]=d}return l}static addPropertyEffect(n,o,s){this.prototype._addPropertyEffect(n,o,s)}static createPropertyObserver(n,o,s){this.prototype._createPropertyObserver(n,o,s)}static createMethodObserver(n,o){this.prototype._createMethodObserver(n,o)}static createNotifyingProperty(n){this.prototype._createNotifyingProperty(n)}static createReadOnlyProperty(n,o){this.prototype._createReadOnlyProperty(n,o)}static createReflectedProperty(n){this.prototype._createReflectedProperty(n)}static createComputedProperty(n,o,s){this.prototype._createComputedProperty(n,o,s)}static bindTemplate(n){return this.prototype._bindTemplate(n)}_bindTemplate(n,o){let s=this.constructor._parseTemplate(n),a=this.__preBoundTemplateInfo==s;if(!a)for(let l in s.propertyEffects)this._createPropertyAccessor(l);if(o)if(s=Object.create(s),s.wasPreBound=a,!this.__templateInfo)this.__templateInfo=s;else{let l=n._parentTemplateInfo||this.__templateInfo,u=l.lastChild;s.parent=l,l.lastChild=s,s.previousSibling=u,u?u.nextSibling=s:l.firstChild=s}else this.__preBoundTemplateInfo=s;return s}static _addTemplatePropertyEffect(n,o,s){let a=n.hostProps=n.hostProps||{};a[o]=!0;let l=n.propertyEffects=n.propertyEffects||{};(l[o]=l[o]||[]).push(s)}_stampTemplate(n,o){o=o||this._bindTemplate(n,!0),Si.push(this);let s=super._stampTemplate(n,o);if(Si.pop(),o.nodeList=s.nodeList,!o.wasPreBound){let a=o.childNodes=[];for(let l=s.firstChild;l;l=l.nextSibling)a.push(l)}return s.templateInfo=o,R0(this,o),this.__dataClientsReady&&(this._runEffectsForTemplate(o,this.__data,null,!1),this._flushClients()),s}_removeBoundDom(n){let o=n.templateInfo,{previousSibling:s,nextSibling:a,parent:l}=o;s?s.nextSibling=a:l&&(l.firstChild=a),a?a.previousSibling=s:l&&(l.lastChild=s),o.nextSibling=o.previousSibling=null;let u=o.childNodes;for(let c=0;c<u.length;c++){let p=u[c];b(b(p).parentNode).removeChild(p)}}static _parseTemplateNode(n,o,s){let a=e._parseTemplateNode.call(this,n,o,s);if(n.nodeType===Node.TEXT_NODE){let l=this._parseBindings(n.textContent,o);l&&(n.textContent=lh(l)||" ",wl(this,o,s,"text","textContent",l),a=!0)}return a}static _parseTemplateNodeAttribute(n,o,s,a,l){let u=this._parseBindings(l,o);if(u){let c=a,p="property";y0.test(a)?p="attribute":a[a.length-1]=="$"&&(a=a.slice(0,-1),p="attribute");let f=lh(u);return f&&p=="attribute"&&(a=="class"&&n.hasAttribute("class")&&(f+=" "+n.getAttribute(a)),n.setAttribute(a,f)),p=="attribute"&&c=="disable-upgrade$"&&n.setAttribute(a,""),n.localName==="input"&&c==="value"&&n.setAttribute(c,""),n.removeAttribute(c),p==="property"&&(a=xr(a)),wl(this,o,s,p,a,u,f),!0}else return e._parseTemplateNodeAttribute.call(this,n,o,s,a,l)}static _parseTemplateNestedTemplate(n,o,s){let a=e._parseTemplateNestedTemplate.call(this,n,o,s),l=n.parentNode,u=s.templateInfo,c=l.localName==="dom-if",p=l.localName==="dom-repeat";fl&&(c||p)&&(l.removeChild(n),s=s.parentInfo,s.templateInfo=u,s.noted=!0,a=!1);let f=u.hostProps;if(yo&&c)f&&(o.hostProps=Object.assign(o.hostProps||{},f),fl||(s.parentInfo.noted=!0));else{let h="{";for(let d in f){let m=[{mode:h,source:d,dependencies:[d],hostProp:!0}];wl(this,o,s,"property","_host_"+d,m)}}return a}static _parseBindings(n,o){let s=[],a=0,l;for(;(l=ah.exec(n))!==null;){l.index>a&&s.push({literal:n.slice(a,l.index)});let u=l[1][0],c=Boolean(l[2]),p=l[3].trim(),f=!1,h="",d=-1;u=="{"&&(d=p.indexOf("::"))>0&&(h=p.substring(d+2),p=p.substring(0,d),f=!0);let m=Sl(p),y=[];if(m){let{args:_,methodName:w}=m;for(let C=0;C<_.length;C++){let E=_[C];E.literal||y.push(E)}let S=o.dynamicFns;(S&&S[w]||m.static)&&(y.push(w),m.dynamicFn=!0)}else y.push(p);s.push({source:p,mode:u,negate:c,customEvent:f,signature:m,dependencies:y,event:h}),a=ah.lastIndex}if(a&&a<n.length){let u=n.substring(a);u&&s.push({literal:u})}return s.length?s:null}static _evaluateBinding(n,o,s,a,l,u){let c;return o.signature?c=xl(n,s,a,l,o.signature):s!=o.source?c=Y(n,o.source):u&&_o(s)?c=Y(n,s):c=n.__data[s],o.negate&&(c=!c),c}}return r}),Si=[];var Y0=0;function ph(){Y0++}var J0=[];function So(t){J0.push(t)}function X0(t){let e={};for(let r in t){let i=t[r];e[r]=typeof i=="function"?{type:i}:i}return e}var fh=V(t=>{let e=bo(t);function r(o){let s=Object.getPrototypeOf(o);return s.prototype instanceof n?s:null}function i(o){if(!o.hasOwnProperty(JSCompiler_renameProperty("__ownProperties",o))){let s=null;if(o.hasOwnProperty(JSCompiler_renameProperty("properties",o))){let a=o.properties;a&&(s=X0(a))}o.__ownProperties=s}return o.__ownProperties}class n extends e{static get observedAttributes(){if(!this.hasOwnProperty(JSCompiler_renameProperty("__observedAttributes",this))){So(this.prototype);let s=this._properties;this.__observedAttributes=s?Object.keys(s).map(a=>this.prototype._addPropertyToAttributeMap(a)):[]}return this.__observedAttributes}static finalize(){if(!this.hasOwnProperty(JSCompiler_renameProperty("__finalized",this))){let s=r(this);s&&s.finalize(),this.__finalized=!0,this._finalizeClass()}}static _finalizeClass(){let s=i(this);s&&this.createProperties(s)}static get _properties(){if(!this.hasOwnProperty(JSCompiler_renameProperty("__properties",this))){let s=r(this);this.__properties=Object.assign({},s&&s._properties,i(this))}return this.__properties}static typeForProperty(s){let a=this._properties[s];return a&&a.type}_initializeProperties(){ph(),this.constructor.finalize(),super._initializeProperties()}connectedCallback(){super.connectedCallback&&super.connectedCallback(),this._enableProperties()}disconnectedCallback(){super.disconnectedCallback&&super.disconnectedCallback()}}return n});var dh="3.4.1",Eo=window.ShadyCSS&&window.ShadyCSS.cssBuild,ut=V(t=>{let e=fh(Dt(t));function r(l){if(!l.hasOwnProperty(JSCompiler_renameProperty("__propertyDefaults",l))){l.__propertyDefaults=null;let u=l._properties;for(let c in u){let p=u[c];"value"in p&&(l.__propertyDefaults=l.__propertyDefaults||{},l.__propertyDefaults[c]=p)}}return l.__propertyDefaults}function i(l){return l.hasOwnProperty(JSCompiler_renameProperty("__ownObservers",l))||(l.__ownObservers=l.hasOwnProperty(JSCompiler_renameProperty("observers",l))?l.observers:null),l.__ownObservers}function n(l,u,c,p){c.computed&&(c.readOnly=!0),c.computed&&(l._hasReadOnlyEffect(u)?console.warn(`Cannot redefine computed property '${u}'.`):l._createComputedProperty(u,c.computed,p)),c.readOnly&&!l._hasReadOnlyEffect(u)?l._createReadOnlyProperty(u,!c.computed):c.readOnly===!1&&l._hasReadOnlyEffect(u)&&console.warn(`Cannot make readOnly property '${u}' non-readOnly.`),c.reflectToAttribute&&!l._hasReflectEffect(u)?l._createReflectedProperty(u):c.reflectToAttribute===!1&&l._hasReflectEffect(u)&&console.warn(`Cannot make reflected property '${u}' non-reflected.`),c.notify&&!l._hasNotifyEffect(u)?l._createNotifyingProperty(u):c.notify===!1&&l._hasNotifyEffect(u)&&console.warn(`Cannot make notify property '${u}' non-notify.`),c.observer&&l._createPropertyObserver(u,c.observer,p[c.observer]),l._addPropertyToAttributeMap(u)}function o(l,u,c,p){if(!Eo){let f=u.content.querySelectorAll("style"),h=vo(u),d=qd(c),m=u.content.firstElementChild;for(let _=0;_<d.length;_++){let w=d[_];w.textContent=l._processStyleText(w.textContent,p),u.content.insertBefore(w,m)}let y=0;for(let _=0;_<h.length;_++){let w=h[_],S=f[y];S!==w?(w=w.cloneNode(!0),S.parentNode.insertBefore(w,S)):y++,w.textContent=l._processStyleText(w.textContent,p)}}if(window.ShadyCSS&&window.ShadyCSS.prepareTemplate(u,c),Md&&Eo&&Pd){let f=u.content.querySelectorAll("style");if(f){let h="";Array.from(f).forEach(d=>{h+=d.textContent,d.parentNode.removeChild(d)}),l._styleSheet=new CSSStyleSheet,l._styleSheet.replaceSync(h)}}}function s(l){let u=null;if(l&&(!be||Dd)&&(u=at.import(l,"template"),be&&!u))throw new Error(`strictTemplatePolicy: expecting dom-module or null template for ${l}`);return u}class a extends e{static get polymerElementVersion(){return dh}static _finalizeClass(){e._finalizeClass.call(this);let u=i(this);u&&this.createObservers(u,this._properties),this._prepareTemplate()}static _prepareTemplate(){let u=this.template;u&&(typeof u=="string"?(console.error("template getter must return HTMLTemplateElement"),u=null):ze||(u=u.cloneNode(!0))),this.prototype._template=u}static createProperties(u){for(let c in u)n(this.prototype,c,u[c],u)}static createObservers(u,c){let p=this.prototype;for(let f=0;f<u.length;f++)p._createMethodObserver(u[f],c)}static get template(){if(!this.hasOwnProperty(JSCompiler_renameProperty("_template",this))){let u=this.prototype.hasOwnProperty(JSCompiler_renameProperty("_template",this.prototype))?this.prototype._template:void 0;this._template=u!==void 0?u:this.hasOwnProperty(JSCompiler_renameProperty("is",this))&&s(this.is)||Object.getPrototypeOf(this.prototype).constructor.template}return this._template}static set template(u){this._template=u}static get importPath(){if(!this.hasOwnProperty(JSCompiler_renameProperty("_importPath",this))){let u=this.importMeta;if(u)this._importPath=_r(u.url);else{let c=at.import(this.is);this._importPath=c&&c.assetpath||Object.getPrototypeOf(this.prototype).constructor.importPath}}return this._importPath}constructor(){super();this._template,this._importPath,this.rootPath,this.importPath,this.root,this.$}_initializeProperties(){this.constructor.finalize(),this.constructor._finalizeTemplate(this.localName),super._initializeProperties(),this.rootPath=kd,this.importPath=this.constructor.importPath;let u=r(this.constructor);if(!!u)for(let c in u){let p=u[c];if(this._canApplyPropertyDefault(c)){let f=typeof p.value=="function"?p.value.call(this):p.value;this._hasAccessor(c)?this._setPendingProperty(c,f,!0):this[c]=f}}}_canApplyPropertyDefault(u){return!this.hasOwnProperty(u)}static _processStyleText(u,c){return mi(u,c)}static _finalizeTemplate(u){let c=this.prototype._template;if(c&&!c.__polymerFinalized){c.__polymerFinalized=!0;let p=this.importPath,f=p?kt(p):"";o(this,c,u,f),this.prototype._bindTemplate(c)}}connectedCallback(){window.ShadyCSS&&this._template&&window.ShadyCSS.styleElement(this),super.connectedCallback()}ready(){this._template&&(this.root=this._stampTemplate(this._template),this.$=this.root.$),super.ready()}_readyClients(){this._template&&(this.root=this._attachDom(this.root)),super._readyClients()}_attachDom(u){let c=b(this);if(c.attachShadow)return u?(c.shadowRoot||(c.attachShadow({mode:"open",shadyUpgradeFragment:u}),c.shadowRoot.appendChild(u),this.constructor._styleSheet&&(c.shadowRoot.adoptedStyleSheets=[this.constructor._styleSheet])),Nd&&window.ShadyDOM&&window.ShadyDOM.flushInitial(c.shadowRoot),c.shadowRoot):null;throw new Error("ShadowDOM not available. PolymerElement can create dom as children instead of in ShadowDOM by setting `this.root = this;` before `ready`.")}updateStyles(u){window.ShadyCSS&&window.ShadyCSS.styleSubtree(this,u)}resolveUrl(u,c){return!c&&this.importPath&&(c=kt(this.importPath)),kt(u,c)}static _parseTemplateContent(u,c,p){return c.dynamicFns=c.dynamicFns||this._properties,e._parseTemplateContent.call(this,u,c,p)}static _addTemplatePropertyEffect(u,c,p){return ho&&!(c in this._properties)&&!(p.info.part.signature&&p.info.part.signature.static)&&!p.info.part.hostProp&&!u.nestedTemplate&&console.warn(`Property '${c}' used in template but not declared in 'properties'; attribute will not be observed.`),e._addTemplatePropertyEffect.call(this,u,c,p)}}return a});var El=class{constructor(e){this.value=e.toString()}toString(){return this.value}};function Z0(t){if(t instanceof El)return t.value;throw new Error(`non-literal value passed to Polymer's htmlLiteral function: ${t}`)}function ex(t){if(t instanceof HTMLTemplateElement)return t.innerHTML;if(t instanceof El)return Z0(t);throw new Error(`non-template value passed to Polymer's html function: ${t}`)}var I=function(e,...r){let i=document.createElement("template");return i.innerHTML=r.reduce((n,o,s)=>n+ex(o)+e[s+1],e[0]),i};var he=ut(HTMLElement);var me=class{constructor(){this._asyncModule=null,this._callback=null,this._timer=null}setConfig(e,r){this._asyncModule=e,this._callback=r,this._timer=this._asyncModule.run(()=>{this._timer=null,Ei.delete(this),this._callback()})}cancel(){this.isActive()&&(this._cancelAsync(),Ei.delete(this))}_cancelAsync(){this.isActive()&&(this._asyncModule.cancel(this._timer),this._timer=null)}flush(){this.isActive()&&(this.cancel(),this._callback())}isActive(){return this._timer!=null}static debounce(e,r,i){return e instanceof me?e._cancelAsync():e=new me,e.setConfig(r,i),e}},Ei=new Set,Er=function(t){Ei.add(t)},hh=function(){let t=Boolean(Ei.size);return Ei.forEach(e=>{try{e.flush()}catch(r){setTimeout(()=>{throw r})}}),t};var Tl=typeof document.head.style.touchAction=="string",To="__polymerGestures",Co="__polymerGesturesHandled",Cl="__polymerGesturesTouchAction",mh=25,yh=5,tx=2,rx=2500,vh=["mousedown","mousemove","mouseup","click"],ix=[0,1,4,2],nx=function(){try{return new MouseEvent("test",{buttons:1}).buttons===1}catch(t){return!1}}();function Ol(t){return vh.indexOf(t)>-1}var Pl=!1;(function(){try{let t=Object.defineProperty({},"passive",{get(){Pl=!0}});window.addEventListener("test",null,t),window.removeEventListener("test",null,t)}catch(t){}})();function _h(t){if(!(Ol(t)||t==="touchend")&&Tl&&Pl&&Ad)return{passive:!0}}var gh=navigator.userAgent.match(/iP(?:[oa]d|hone)|Android/),kl=[],ox={button:!0,input:!0,keygen:!0,meter:!0,output:!0,textarea:!0,progress:!0,select:!0},sx={button:!0,command:!0,fieldset:!0,input:!0,keygen:!0,optgroup:!0,option:!0,select:!0,textarea:!0};function ax(t){return ox[t.localName]||!1}function lx(t){let e=Array.prototype.slice.call(t.labels||[]);if(!e.length){e=[];let r=t.getRootNode();if(t.id){let i=r.querySelectorAll(`label[for = ${t.id}]`);for(let n=0;n<i.length;n++)e.push(i[n])}}return e}var bh=function(t){let e=t.sourceCapabilities;if(!(e&&!e.firesTouchEvents)&&(t[Co]={skip:!0},t.type==="click")){let r=!1,i=Oo(t);for(let n=0;n<i.length;n++){if(i[n].nodeType===Node.ELEMENT_NODE){if(i[n].localName==="label")kl.push(i[n]);else if(ax(i[n])){let o=lx(i[n]);for(let s=0;s<o.length;s++)r=r||kl.indexOf(o[s])>-1}}if(i[n]===X.mouse.target)return}if(r)return;t.preventDefault(),t.stopPropagation()}};function xh(t){let e=gh?["click"]:vh;for(let r=0,i;r<e.length;r++)i=e[r],t?(kl.length=0,document.addEventListener(i,bh,!0)):document.removeEventListener(i,bh,!0)}function ux(t){if(!pl)return;X.mouse.mouseIgnoreJob||xh(!0);let e=function(){xh(),X.mouse.target=null,X.mouse.mouseIgnoreJob=null};X.mouse.target=Oo(t)[0],X.mouse.mouseIgnoreJob=me.debounce(X.mouse.mouseIgnoreJob,lt.after(rx),e)}function Nt(t){let e=t.type;if(!Ol(e))return!1;if(e==="mousemove"){let r=t.buttons===void 0?1:t.buttons;return t instanceof window.MouseEvent&&!nx&&(r=ix[t.which]||0),Boolean(r&1)}else return(t.button===void 0?0:t.button)===0}function cx(t){if(t.type==="click"){if(t.detail===0)return!0;let e=ct(t);if(!e.nodeType||e.nodeType!==Node.ELEMENT_NODE)return!0;let r=e.getBoundingClientRect(),i=t.pageX,n=t.pageY;return!(i>=r.left&&i<=r.right&&n>=r.top&&n<=r.bottom)}return!1}var X={mouse:{target:null,mouseIgnoreJob:null},touch:{x:0,y:0,id:-1,scrollDecided:!1}};function px(t){let e="auto",r=Oo(t);for(let i=0,n;i<r.length;i++)if(n=r[i],n[Cl]){e=n[Cl];break}return e}function wh(t,e,r){t.movefn=e,t.upfn=r,document.addEventListener("mousemove",e),document.addEventListener("mouseup",r)}function Tr(t){document.removeEventListener("mousemove",t.movefn),document.removeEventListener("mouseup",t.upfn),t.movefn=null,t.upfn=null}pl&&document.addEventListener("touchend",ux,Pl?{passive:!0}:!1);var Oo=window.ShadyDOM&&window.ShadyDOM.noPatch?window.ShadyDOM.composedPath:t=>t.composedPath&&t.composedPath()||[],Ti={},It=[];function fx(t,e){let r=document.elementFromPoint(t,e),i=r;for(;i&&i.shadowRoot&&!window.ShadyDOM;){let n=i;if(i=i.shadowRoot.elementFromPoint(t,e),n===i)break;i&&(r=i)}return r}function ct(t){let e=Oo(t);return e.length>0?e[0]:t.target}function Sh(t){let e,r=t.type,n=t.currentTarget[To];if(!n)return;let o=n[r];if(!!o){if(!t[Co]&&(t[Co]={},r.slice(0,5)==="touch")){t=t;let s=t.changedTouches[0];if(r==="touchstart"&&t.touches.length===1&&(X.touch.id=s.identifier),X.touch.id!==s.identifier)return;Tl||(r==="touchstart"||r==="touchmove")&&dx(t)}if(e=t[Co],!e.skip){for(let s=0,a;s<It.length;s++)a=It[s],o[a.name]&&!e[a.name]&&a.flow&&a.flow.start.indexOf(t.type)>-1&&a.reset&&a.reset();for(let s=0,a;s<It.length;s++)a=It[s],o[a.name]&&!e[a.name]&&(e[a.name]=!0,a[r](t))}}}function dx(t){let e=t.changedTouches[0],r=t.type;if(r==="touchstart")X.touch.x=e.clientX,X.touch.y=e.clientY,X.touch.scrollDecided=!1;else if(r==="touchmove"){if(X.touch.scrollDecided)return;X.touch.scrollDecided=!0;let i=px(t),n=!1,o=Math.abs(X.touch.x-e.clientX),s=Math.abs(X.touch.y-e.clientY);t.cancelable&&(i==="none"?n=!0:i==="pan-x"?n=s>o:i==="pan-y"&&(n=o>s)),n?t.preventDefault():Po("track")}}function Eh(t,e,r){return Ti[e]?(hx(t,e,r),!0):!1}function Th(t,e,r){return Ti[e]?(mx(t,e,r),!0):!1}function hx(t,e,r){let i=Ti[e],n=i.deps,o=i.name,s=t[To];s||(t[To]=s={});for(let a=0,l,u;a<n.length;a++)l=n[a],!(gh&&Ol(l)&&l!=="click")&&(u=s[l],u||(s[l]=u={_count:0}),u._count===0&&t.addEventListener(l,Sh,_h(l)),u[o]=(u[o]||0)+1,u._count=(u._count||0)+1);t.addEventListener(e,r),i.touchAction&&Al(t,i.touchAction)}function mx(t,e,r){let i=Ti[e],n=i.deps,o=i.name,s=t[To];if(s)for(let a=0,l,u;a<n.length;a++)l=n[a],u=s[l],u&&u[o]&&(u[o]=(u[o]||1)-1,u._count=(u._count||1)-1,u._count===0&&t.removeEventListener(l,Sh,_h(l)));t.removeEventListener(e,r)}function Dl(t){It.push(t);for(let e=0;e<t.emits.length;e++)Ti[t.emits[e]]=t}function yx(t){for(let e=0,r;e<It.length;e++){r=It[e];for(let i=0,n;i<r.emits.length;i++)if(n=r.emits[i],n===t)return r}return null}function Al(t,e){Tl&&t instanceof HTMLElement&&se.run(()=>{t.style.touchAction=e}),t[Cl]=e}function Nl(t,e,r){let i=new Event(e,{bubbles:!0,cancelable:!0,composed:!0});if(i.detail=r,b(t).dispatchEvent(i),i.defaultPrevented){let n=r.preventer||r.sourceEvent;n&&n.preventDefault&&n.preventDefault()}}function Po(t){let e=yx(t);e.info&&(e.info.prevent=!0)}Dl({name:"downup",deps:["mousedown","touchstart","touchend"],flow:{start:["mousedown","touchstart"],end:["mouseup","touchend"]},emits:["down","up"],info:{movefn:null,upfn:null},reset:function(){Tr(this.info)},mousedown:function(t){if(!Nt(t))return;let e=ct(t),r=this,i=function(s){Nt(s)||(Ci("up",e,s),Tr(r.info))},n=function(s){Nt(s)&&Ci("up",e,s),Tr(r.info)};wh(this.info,i,n),Ci("down",e,t)},touchstart:function(t){Ci("down",ct(t),t.changedTouches[0],t)},touchend:function(t){Ci("up",ct(t),t.changedTouches[0],t)}});function Ci(t,e,r,i){!e||Nl(e,t,{x:r.clientX,y:r.clientY,sourceEvent:r,preventer:i,prevent:function(n){return Po(n)}})}Dl({name:"track",touchAction:"none",deps:["mousedown","touchstart","touchmove","touchend"],flow:{start:["mousedown","touchstart"],end:["mouseup","touchend"]},emits:["track"],info:{x:0,y:0,state:"start",started:!1,moves:[],addMove:function(t){this.moves.length>tx&&this.moves.shift(),this.moves.push(t)},movefn:null,upfn:null,prevent:!1},reset:function(){this.info.state="start",this.info.started=!1,this.info.moves=[],this.info.x=0,this.info.y=0,this.info.prevent=!1,Tr(this.info)},mousedown:function(t){if(!Nt(t))return;let e=ct(t),r=this,i=function(s){let a=s.clientX,l=s.clientY;Ch(r.info,a,l)&&(r.info.state=r.info.started?s.type==="mouseup"?"end":"track":"start",r.info.state==="start"&&Po("tap"),r.info.addMove({x:a,y:l}),Nt(s)||(r.info.state="end",Tr(r.info)),e&&Il(r.info,e,s),r.info.started=!0)},n=function(s){r.info.started&&i(s),Tr(r.info)};wh(this.info,i,n),this.info.x=t.clientX,this.info.y=t.clientY},touchstart:function(t){let e=t.changedTouches[0];this.info.x=e.clientX,this.info.y=e.clientY},touchmove:function(t){let e=ct(t),r=t.changedTouches[0],i=r.clientX,n=r.clientY;Ch(this.info,i,n)&&(this.info.state==="start"&&Po("tap"),this.info.addMove({x:i,y:n}),Il(this.info,e,r),this.info.state="track",this.info.started=!0)},touchend:function(t){let e=ct(t),r=t.changedTouches[0];this.info.started&&(this.info.state="end",this.info.addMove({x:r.clientX,y:r.clientY}),Il(this.info,e,r))}});function Ch(t,e,r){if(t.prevent)return!1;if(t.started)return!0;let i=Math.abs(t.x-e),n=Math.abs(t.y-r);return i>=yh||n>=yh}function Il(t,e,r){if(!e)return;let i=t.moves[t.moves.length-2],n=t.moves[t.moves.length-1],o=n.x-t.x,s=n.y-t.y,a,l=0;i&&(a=n.x-i.x,l=n.y-i.y),Nl(e,"track",{state:t.state,x:r.clientX,y:r.clientY,dx:o,dy:s,ddx:a,ddy:l,sourceEvent:r,hover:function(){return fx(r.clientX,r.clientY)}})}Dl({name:"tap",deps:["mousedown","click","touchstart","touchend"],flow:{start:["mousedown","touchstart"],end:["click","touchend"]},emits:["tap"],info:{x:NaN,y:NaN,prevent:!1},reset:function(){this.info.x=NaN,this.info.y=NaN,this.info.prevent=!1},mousedown:function(t){Nt(t)&&(this.info.x=t.clientX,this.info.y=t.clientY)},click:function(t){Nt(t)&&Oh(this.info,t)},touchstart:function(t){let e=t.changedTouches[0];this.info.x=e.clientX,this.info.y=e.clientY},touchend:function(t){Oh(this.info,t.changedTouches[0],t)}});function Oh(t,e,r){let i=Math.abs(e.clientX-t.x),n=Math.abs(e.clientY-t.y),o=ct(r||e);!o||sx[o.localName]&&o.hasAttribute("disabled")||(isNaN(i)||isNaN(n)||i<=mh&&n<=mh||cx(e))&&(t.prevent||Nl(o,"tap",{x:e.clientX,y:e.clientY,sourceEvent:e,preventer:r}))}var Cr=V(t=>{class e extends t{_addEventListenerToNode(i,n,o){Eh(i,n,o)||super._addEventListenerToNode(i,n,o)}_removeEventListenerFromNode(i,n,o){Th(i,n,o)||super._removeEventListenerFromNode(i,n,o)}}return e});"use strict";var Mt=!(window.ShadyDOM&&window.ShadyDOM.inUse),ko;function Ph(t){t&&t.shimcssproperties?ko=!1:ko=Mt||Boolean(!navigator.userAgent.match(/AppleWebKit\/601|Edge\/15/)&&window.CSS&&CSS.supports&&CSS.supports("box-shadow","0 0 0 var(--foo)"))}var pt;window.ShadyCSS&&window.ShadyCSS.cssBuild!==void 0&&(pt=window.ShadyCSS.cssBuild);var Ao=Boolean(window.ShadyCSS&&window.ShadyCSS.disableRuntime);window.ShadyCSS&&window.ShadyCSS.nativeCss!==void 0?ko=window.ShadyCSS.nativeCss:window.ShadyCSS?(Ph(window.ShadyCSS),window.ShadyCSS=void 0):Ph(window.WebComponents&&window.WebComponents.flags);var Or=ko;"use strict";var Ml=class{constructor(){this.start=0,this.end=0,this.previous=null,this.parent=null,this.rules=null,this.parsedCssText="",this.cssText="",this.atRule=!1,this.type=0,this.keyframesName="",this.selector="",this.parsedSelector=""}};function Rl(t){return t=vx(t),kh(_x(t),t)}function vx(t){return t.replace($e.comments,"").replace($e.port,"")}function _x(t){let e=new Ml;e.start=0,e.end=t.length;let r=e;for(let i=0,n=t.length;i<n;i++)if(t[i]===Ah){r.rules||(r.rules=[]);let o=r,s=o.rules[o.rules.length-1]||null;r=new Ml,r.start=i+1,r.parent=o,r.previous=s,o.rules.push(r)}else t[i]===Dh&&(r.end=i+1,r=r.parent||e);return e}function kh(t,e){let r=e.substring(t.start,t.end-1);if(t.parsedCssText=t.cssText=r.trim(),t.parent){let n=t.previous?t.previous.end:t.parent.start;r=e.substring(n,t.start-1),r=gx(r),r=r.replace($e.multipleSpaces," "),r=r.substring(r.lastIndexOf(";")+1);let o=t.parsedSelector=t.selector=r.trim();t.atRule=o.indexOf(xx)===0,t.atRule?o.indexOf(bx)===0?t.type=Ge.MEDIA_RULE:o.match($e.keyframesRule)&&(t.type=Ge.KEYFRAMES_RULE,t.keyframesName=t.selector.split($e.multipleSpaces).pop()):o.indexOf(Nh)===0?t.type=Ge.MIXIN_RULE:t.type=Ge.STYLE_RULE}let i=t.rules;if(i)for(let n=0,o=i.length,s;n<o&&(s=i[n]);n++)kh(s,e);return t}function gx(t){return t.replace(/\\([0-9a-f]{1,6})\s/gi,function(){let e=arguments[1],r=6-e.length;for(;r--;)e="0"+e;return"\\"+e})}function jl(t,e,r=""){let i="";if(t.cssText||t.rules){let n=t.rules;if(n&&!wx(n))for(let o=0,s=n.length,a;o<s&&(a=n[o]);o++)i=jl(a,e,i);else i=e?t.cssText:Sx(t.cssText),i=i.trim(),i&&(i="  "+i+`
`)}return i&&(t.selector&&(r+=t.selector+" "+Ah+`
`),r+=i,t.selector&&(r+=Dh+`

`)),r}function wx(t){let e=t[0];return Boolean(e)&&Boolean(e.selector)&&e.selector.indexOf(Nh)===0}function Sx(t){return t=Ex(t),Tx(t)}function Ex(t){return t.replace($e.customProp,"").replace($e.mixinProp,"")}function Tx(t){return t.replace($e.mixinApply,"").replace($e.varApply,"")}var Ge={STYLE_RULE:1,KEYFRAMES_RULE:7,MEDIA_RULE:4,MIXIN_RULE:1e3},Ah="{",Dh="}",$e={comments:/\/\*[^*]*\*+([^/*][^*]*\*+)*\//gim,port:/@import[^;]*;/gim,customProp:/(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\n]|$)/gim,mixinProp:/(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\n]|$)?/gim,mixinApply:/@apply\s*\(?[^);]*\)?\s*(?:[;\n]|$)?/gim,varApply:/[^;:]*?:[^;]*?var\([^;]*\)(?:[;\n]|$)?/gim,keyframesRule:/^@[^\s]*keyframes/,multipleSpaces:/\s+/g},Nh="--",bx="@media",xx="@";var Oi=/(?:^|[;\s{]\s*)(--[\w-]*?)\s*:\s*(?:((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};{])+)|\{([^}]*)\}(?:(?=[;\s}])|$))/gi,Pr=/(?:^|\W+)@apply\s*\(?([^);\n]*)\)?/gi;var Ih=/@media\s(.*)/;"use strict";var Mh=new Set,Cx="shady-unscoped";function Rh(t){let e=t.textContent;if(!Mh.has(e)){Mh.add(e);let r=document.createElement("style");r.setAttribute("shady-unscoped",""),r.textContent=e,document.head.appendChild(r)}}function jh(t){return t.hasAttribute(Cx)}"use strict";function Pi(t,e){return t?(typeof t=="string"&&(t=Rl(t)),e&&kr(t,e),jl(t,Or)):""}function Fl(t){return!t.__cssRules&&t.textContent&&(t.__cssRules=Rl(t.textContent)),t.__cssRules||null}function kr(t,e,r,i){if(!t)return;let n=!1,o=t.type;if(i&&o===Ge.MEDIA_RULE){let a=t.selector.match(Ih);a&&(window.matchMedia(a[1]).matches||(n=!0))}o===Ge.STYLE_RULE?e(t):r&&o===Ge.KEYFRAMES_RULE?r(t):o===Ge.MIXIN_RULE&&(n=!0);let s=t.rules;if(s&&!n)for(let a=0,l=s.length,u;a<l&&(u=s[a]);a++)kr(u,e,r,i)}function Ox(t,e){let r=0;for(let i=e,n=t.length;i<n;i++)if(t[i]==="(")r++;else if(t[i]===")"&&--r==0)return i;return-1}function Ll(t,e){let r=t.indexOf("var(");if(r===-1)return e(t,"","","");let i=Ox(t,r+3),n=t.substring(r+4,i),o=t.substring(0,r),s=Ll(t.substring(i+1),e),a=n.indexOf(",");if(a===-1)return e(o,n.trim(),"",s);let l=n.substring(0,a).trim(),u=n.substring(a+1).trim();return e(o,l,u,s)}var ZR=window.ShadyDOM&&window.ShadyDOM.wrap||(t=>t);function Fh(t){let e=t.localName,r="",i="";return e?e.indexOf("-")>-1?r=e:(i=e,r=t.getAttribute&&t.getAttribute("is")||""):(r=t.is,i=t.extends),{is:r,typeExtension:i}}function Lh(t){let e=[],r=t.querySelectorAll("style");for(let i=0;i<r.length;i++){let n=r[i];jh(n)?Mt||(Rh(n),n.parentNode.removeChild(n)):(e.push(n.textContent),n.parentNode.removeChild(n))}return e.join("").trim()}var Vh="css-build";function Ax(t){if(pt!==void 0)return pt;if(t.__cssBuild===void 0){let e=t.getAttribute(Vh);if(e)t.__cssBuild=e;else{let r=Px(t);r!==""&&kx(t),t.__cssBuild=r}}return t.__cssBuild||""}function Vl(t){return Ax(t)!==""}function Px(t){let e=t.localName==="template"?t.content.firstChild:t.firstChild;if(e instanceof Comment){let r=e.textContent.trim().split(":");if(r[0]===Vh)return r[1]}return""}function kx(t){let e=t.localName==="template"?t.content.firstChild:t.firstChild;e.parentNode.removeChild(e)}"use strict";function ki(t,e){for(let r in e)r===null?t.style.removeProperty(r):t.style.setProperty(r,e[r])}function Do(t,e){let r=window.getComputedStyle(t).getPropertyValue(e);return r?r.trim():""}function Bh(t){let e=Pr.test(t)||Oi.test(t);return Pr.lastIndex=0,Oi.lastIndex=0,e}"use strict";var Dx=/;\s*/m,Nx=/^\s*(initial)|(inherit)\s*$/,qh=/\s*!important/,Bl="_-_";var Uh=class{constructor(){this._map={}}set(e,r){e=e.trim(),this._map[e]={properties:r,dependants:{}}}get(e){return e=e.trim(),this._map[e]||null}},No=null,Z=class{constructor(){this._currentElement=null,this._measureElement=null,this._map=new Uh}detectMixin(e){return Bh(e)}gatherStyles(e){let r=Lh(e.content);if(r){let i=document.createElement("style");return i.textContent=r,e.content.insertBefore(i,e.content.firstChild),i}return null}transformTemplate(e,r){e._gatheredStyle===void 0&&(e._gatheredStyle=this.gatherStyles(e));let i=e._gatheredStyle;return i?this.transformStyle(i,r):null}transformStyle(e,r=""){let i=Fl(e);return this.transformRules(i,r),e.textContent=Pi(i),i}transformCustomStyle(e){let r=Fl(e);return kr(r,i=>{i.selector===":root"&&(i.selector="html"),this.transformRule(i)}),e.textContent=Pi(r),r}transformRules(e,r){this._currentElement=r,kr(e,i=>{this.transformRule(i)}),this._currentElement=null}transformRule(e){e.cssText=this.transformCssText(e.parsedCssText,e),e.selector===":root"&&(e.selector=":host > *")}transformCssText(e,r){return e=e.replace(Oi,(i,n,o,s)=>this._produceCssProperties(i,n,o,s,r)),this._consumeCssProperties(e,r)}_getInitialValueForProperty(e){return this._measureElement||(this._measureElement=document.createElement("meta"),this._measureElement.setAttribute("apply-shim-measure",""),this._measureElement.style.all="initial",document.head.appendChild(this._measureElement)),window.getComputedStyle(this._measureElement).getPropertyValue(e)}_fallbacksFromPreviousRules(e){let r=e;for(;r.parent;)r=r.parent;let i={},n=!1;return kr(r,o=>{n=n||o===e,!n&&o.selector===e.selector&&Object.assign(i,this._cssTextToMap(o.parsedCssText))}),i}_consumeCssProperties(e,r){let i=null;for(;i=Pr.exec(e);){let n=i[0],o=i[1],s=i.index,a=s+n.indexOf("@apply"),l=s+n.length,u=e.slice(0,a),c=e.slice(l),p=r?this._fallbacksFromPreviousRules(r):{};Object.assign(p,this._cssTextToMap(u));let f=this._atApplyToCssProperties(o,p);e=`${u}${f}${c}`,Pr.lastIndex=s+f.length}return e}_atApplyToCssProperties(e,r){e=e.replace(Dx,"");let i=[],n=this._map.get(e);if(n||(this._map.set(e,{}),n=this._map.get(e)),n){this._currentElement&&(n.dependants[this._currentElement]=!0);let o,s,a,l=n.properties;for(o in l)a=r&&r[o],s=[o,": var(",e,Bl,o],a&&s.push(",",a.replace(qh,"")),s.push(")"),qh.test(l[o])&&s.push(" !important"),i.push(s.join(""))}return i.join("; ")}_replaceInitialOrInherit(e,r){let i=Nx.exec(r);return i&&(i[1]?r=this._getInitialValueForProperty(e):r="apply-shim-inherit"),r}_cssTextToMap(e,r=!1){let i=e.split(";"),n,o,s={};for(let a=0,l,u;a<i.length;a++)l=i[a],l&&(u=l.split(":"),u.length>1&&(n=u[0].trim(),o=u.slice(1).join(":"),r&&(o=this._replaceInitialOrInherit(n,o)),s[n]=o));return s}_invalidateMixinEntry(e){if(!!No)for(let r in e.dependants)r!==this._currentElement&&No(r)}_produceCssProperties(e,r,i,n,o){if(i&&Ll(i,(y,_)=>{_&&this._map.get(_)&&(n=`@apply ${_};`)}),!n)return e;let s=this._consumeCssProperties(""+n,o),a=e.slice(0,e.indexOf("--")),l=this._cssTextToMap(s,!0),u=l,c=this._map.get(r),p=c&&c.properties;p?u=Object.assign(Object.create(p),l):this._map.set(r,u);let f=[],h,d,m=!1;for(h in u)d=l[h],d===void 0&&(d="initial"),p&&!(h in p)&&(m=!0),f.push(`${r}${Bl}${h}: ${d}`);return m&&this._invalidateMixinEntry(c),c&&(c.properties=u),i&&(a=`${e};${a}`),`${a}${f.join("; ")};`}};Z.prototype.detectMixin=Z.prototype.detectMixin;Z.prototype.transformStyle=Z.prototype.transformStyle;Z.prototype.transformCustomStyle=Z.prototype.transformCustomStyle;Z.prototype.transformRules=Z.prototype.transformRules;Z.prototype.transformRule=Z.prototype.transformRule;Z.prototype.transformTemplate=Z.prototype.transformTemplate;Z.prototype._separator=Bl;Object.defineProperty(Z.prototype,"invalidCallback",{get(){return No},set(t){No=t}});var Hh=Z;"use strict";var Ix={},Ai=Ix;"use strict";var Io="_applyShimCurrentVersion",Ar="_applyShimNextVersion",Mo="_applyShimValidatingVersion",Mx=Promise.resolve();function Kh(t){let e=Ai[t];e&&Rx(e)}function Rx(t){t[Io]=t[Io]||0,t[Mo]=t[Mo]||0,t[Ar]=(t[Ar]||0)+1}function ql(t){return t[Io]===t[Ar]}function Qh(t){return!ql(t)&&t[Mo]===t[Ar]}function zh(t){t[Mo]=t[Ar],t._validating||(t._validating=!0,Mx.then(function(){t[Io]=t[Ar],t._validating=!1}))}"use strict";var Ul=null,$h=window.HTMLImports&&window.HTMLImports.whenReady||null,Hl;function Ro(t){requestAnimationFrame(function(){$h?$h(t):(Ul||(Ul=new Promise(e=>{Hl=e}),document.readyState==="complete"?Hl():document.addEventListener("readystatechange",()=>{document.readyState==="complete"&&Hl()})),Ul.then(function(){t&&t()}))})}"use strict";var Gh="__seenByShadyCSS",jo="__shadyCSSCachedStyle",Fo=null,Di=null,Oe=class{constructor(){this.customStyles=[],this.enqueued=!1,Ro(()=>{window.ShadyCSS.flushCustomStyles&&window.ShadyCSS.flushCustomStyles()})}enqueueDocumentValidation(){this.enqueued||!Di||(this.enqueued=!0,Ro(Di))}addCustomStyle(e){e[Gh]||(e[Gh]=!0,this.customStyles.push(e),this.enqueueDocumentValidation())}getStyleForCustomStyle(e){if(e[jo])return e[jo];let r;return e.getStyle?r=e.getStyle():r=e,r}processStyles(){let e=this.customStyles;for(let r=0;r<e.length;r++){let i=e[r];if(i[jo])continue;let n=this.getStyleForCustomStyle(i);if(n){let o=n.__appliedElement||n;Fo&&Fo(o),i[jo]=o}}return e}},Wh=Oe;Oe.prototype.addCustomStyle=Oe.prototype.addCustomStyle;Oe.prototype.getStyleForCustomStyle=Oe.prototype.getStyleForCustomStyle;Oe.prototype.processStyles=Oe.prototype.processStyles;Object.defineProperties(Oe.prototype,{transformCallback:{get(){return Fo},set(t){Fo=t}},validateCallback:{get(){return Di},set(t){let e=!1;Di||(e=!0),Di=t,e&&this.enqueueDocumentValidation()}}});"use strict";var Ni=new Hh,Yh=class{constructor(){this.customStyleInterface=null,Ni.invalidCallback=Kh}ensure(){this.customStyleInterface||window.ShadyCSS.CustomStyleInterface&&(this.customStyleInterface=window.ShadyCSS.CustomStyleInterface,this.customStyleInterface.transformCallback=e=>{Ni.transformCustomStyle(e)},this.customStyleInterface.validateCallback=()=>{requestAnimationFrame(()=>{this.customStyleInterface.enqueued&&this.flushCustomStyles()})})}prepareTemplate(e,r){if(this.ensure(),Vl(e))return;Ai[r]=e;let i=Ni.transformTemplate(e,r);e._styleAst=i}flushCustomStyles(){if(this.ensure(),!this.customStyleInterface)return;let e=this.customStyleInterface.processStyles();if(!!this.customStyleInterface.enqueued){for(let r=0;r<e.length;r++){let i=e[r],n=this.customStyleInterface.getStyleForCustomStyle(i);n&&Ni.transformCustomStyle(n)}this.customStyleInterface.enqueued=!1}}styleSubtree(e,r){if(this.ensure(),r&&ki(e,r),e.shadowRoot){this.styleElement(e);let i=e.shadowRoot.children||e.shadowRoot.childNodes;for(let n=0;n<i.length;n++)this.styleSubtree(i[n])}else{let i=e.children||e.childNodes;for(let n=0;n<i.length;n++)this.styleSubtree(i[n])}}styleElement(e){this.ensure();let{is:r}=Fh(e),i=Ai[r];if(!(i&&Vl(i))&&i&&!ql(i)){Qh(i)||(this.prepareTemplate(i,r),zh(i));let n=e.shadowRoot;if(n){let o=n.querySelector("style");o&&(o.__cssRules=i._styleAst,o.textContent=Pi(i._styleAst))}}}styleDocument(e){this.ensure(),this.styleSubtree(document.body,e)}};if(!window.ShadyCSS||!window.ShadyCSS.ScopingShim){let t=new Yh,e=window.ShadyCSS&&window.ShadyCSS.CustomStyleInterface;window.ShadyCSS={prepareTemplate(r,i,n){t.flushCustomStyles(),t.prepareTemplate(r,i)},prepareTemplateStyles(r,i,n){window.ShadyCSS.prepareTemplate(r,i,n)},prepareTemplateDom(r,i){},styleSubtree(r,i){t.flushCustomStyles(),t.styleSubtree(r,i)},styleElement(r){t.flushCustomStyles(),t.styleElement(r)},styleDocument(r){t.flushCustomStyles(),t.styleDocument(r)},getComputedStyleValue(r,i){return Do(r,i)},flushCustomStyles(){t.flushCustomStyles()},nativeCss:Or,nativeShadow:Mt,cssBuild:pt,disableRuntime:Ao},e&&(window.ShadyCSS.CustomStyleInterface=e)}window.ShadyCSS.ApplyShim=Ni;var jx=/:host\(:dir\((ltr|rtl)\)\)/g,Fx=':host([dir="$1"])',Lx=/([\s\w-#\.\[\]\*]*):dir\((ltr|rtl)\)/g,Vx=':host([dir="$2"]) $1',Bx=/:dir\((?:ltr|rtl)\)/,Jh=Boolean(window.ShadyDOM&&window.ShadyDOM.inUse),Ii=[],Mi=null,Kl="";function Xh(){Kl=document.documentElement.getAttribute("dir")}function Zh(t){t.__autoDirOptOut||t.setAttribute("dir",Kl)}function em(){Xh(),Kl=document.documentElement.getAttribute("dir");for(let t=0;t<Ii.length;t++)Zh(Ii[t])}function qx(){Mi&&Mi.takeRecords().length&&em()}var tm=V(t=>{Jh||Mi||(Xh(),Mi=new MutationObserver(em),Mi.observe(document.documentElement,{attributes:!0,attributeFilter:["dir"]}));let e=wo(t);class r extends e{static _processStyleText(n,o){return n=e._processStyleText.call(this,n,o),!Jh&&Bx.test(n)&&(n=this._replaceDirInCssText(n),this.__activateDir=!0),n}static _replaceDirInCssText(n){let o=n;return o=o.replace(jx,Fx),o=o.replace(Lx,Vx),o}constructor(){super();this.__autoDirOptOut=!1}ready(){super.ready(),this.__autoDirOptOut=this.hasAttribute("dir")}connectedCallback(){e.prototype.connectedCallback&&super.connectedCallback(),this.constructor.__activateDir&&(qx(),Ii.push(this),Zh(this))}disconnectedCallback(){if(e.prototype.disconnectedCallback&&super.disconnectedCallback(),this.constructor.__activateDir){let n=Ii.indexOf(this);n>-1&&Ii.splice(n,1)}}}return r.__activateDir=!1,r});function rm(){document.body.removeAttribute("unresolved")}document.readyState==="interactive"||document.readyState==="complete"?rm():window.addEventListener("DOMContentLoaded",rm);function Ri(t,e,r){return{index:t,removed:e,addedCount:r}}var im=0,nm=1,Ql=2,zl=3;function Ux(t,e,r,i,n,o){let s=o-n+1,a=r-e+1,l=new Array(s);for(let u=0;u<s;u++)l[u]=new Array(a),l[u][0]=u;for(let u=0;u<a;u++)l[0][u]=u;for(let u=1;u<s;u++)for(let c=1;c<a;c++)if($l(t[e+c-1],i[n+u-1]))l[u][c]=l[u-1][c-1];else{let p=l[u-1][c]+1,f=l[u][c-1]+1;l[u][c]=p<f?p:f}return l}function Hx(t){let e=t.length-1,r=t[0].length-1,i=t[e][r],n=[];for(;e>0||r>0;){if(e==0){n.push(Ql),r--;continue}if(r==0){n.push(zl),e--;continue}let o=t[e-1][r-1],s=t[e-1][r],a=t[e][r-1],l;s<a?l=s<o?s:o:l=a<o?a:o,l==o?(o==i?n.push(im):(n.push(nm),i=o),e--,r--):l==s?(n.push(zl),e--,i=s):(n.push(Ql),r--,i=a)}return n.reverse(),n}function zx(t,e,r,i,n,o){let s=0,a=0,l,u=Math.min(r-e,o-n);if(e==0&&n==0&&(s=Kx(t,i,u)),r==t.length&&o==i.length&&(a=Qx(t,i,u-s)),e+=s,n+=s,r-=a,o-=a,r-e==0&&o-n==0)return[];if(e==r){for(l=Ri(e,[],0);n<o;)l.removed.push(i[n++]);return[l]}else if(n==o)return[Ri(e,[],r-e)];let c=Hx(Ux(t,e,r,i,n,o));l=void 0;let p=[],f=e,h=n;for(let d=0;d<c.length;d++)switch(c[d]){case im:l&&(p.push(l),l=void 0),f++,h++;break;case nm:l||(l=Ri(f,[],0)),l.addedCount++,f++,l.removed.push(i[h]),h++;break;case Ql:l||(l=Ri(f,[],0)),l.addedCount++,f++;break;case zl:l||(l=Ri(f,[],0)),l.removed.push(i[h]),h++;break}return l&&p.push(l),p}function Kx(t,e,r){for(let i=0;i<r;i++)if(!$l(t[i],e[i]))return i;return r}function Qx(t,e,r){let i=t.length,n=e.length,o=0;for(;o<r&&$l(t[--i],e[--n]);)o++;return o}function Lo(t,e){return zx(t,0,t.length,e,0,e.length)}function $l(t,e){return t===e}function Dr(t){return t.localName==="slot"}var Gl=class{static getFlattenedNodes(t){let e=b(t);return Dr(t)?(t=t,e.assignedNodes({flatten:!0})):Array.from(e.childNodes).map(r=>Dr(r)?(r=r,b(r).assignedNodes({flatten:!0})):[r]).reduce((r,i)=>r.concat(i),[])}constructor(t,e){this._shadyChildrenObserver=null,this._nativeChildrenObserver=null,this._connected=!1,this._target=t,this.callback=e,this._effectiveNodes=[],this._observer=null,this._scheduled=!1,this._boundSchedule=()=>{this._schedule()},this.connect(),this._schedule()}connect(){Dr(this._target)?this._listenSlots([this._target]):b(this._target).children&&(this._listenSlots(b(this._target).children),window.ShadyDOM?this._shadyChildrenObserver=window.ShadyDOM.observeChildren(this._target,t=>{this._processMutations(t)}):(this._nativeChildrenObserver=new MutationObserver(t=>{this._processMutations(t)}),this._nativeChildrenObserver.observe(this._target,{childList:!0}))),this._connected=!0}disconnect(){Dr(this._target)?this._unlistenSlots([this._target]):b(this._target).children&&(this._unlistenSlots(b(this._target).children),window.ShadyDOM&&this._shadyChildrenObserver?(window.ShadyDOM.unobserveChildren(this._shadyChildrenObserver),this._shadyChildrenObserver=null):this._nativeChildrenObserver&&(this._nativeChildrenObserver.disconnect(),this._nativeChildrenObserver=null)),this._connected=!1}_schedule(){this._scheduled||(this._scheduled=!0,se.run(()=>this.flush()))}_processMutations(t){this._processSlotMutations(t),this.flush()}_processSlotMutations(t){if(t)for(let e=0;e<t.length;e++){let r=t[e];r.addedNodes&&this._listenSlots(r.addedNodes),r.removedNodes&&this._unlistenSlots(r.removedNodes)}}flush(){if(!this._connected)return!1;window.ShadyDOM&&ShadyDOM.flush(),this._nativeChildrenObserver?this._processSlotMutations(this._nativeChildrenObserver.takeRecords()):this._shadyChildrenObserver&&this._processSlotMutations(this._shadyChildrenObserver.takeRecords()),this._scheduled=!1;let t={target:this._target,addedNodes:[],removedNodes:[]},e=this.constructor.getFlattenedNodes(this._target),r=Lo(e,this._effectiveNodes);for(let n=0,o;n<r.length&&(o=r[n]);n++)for(let s=0,a;s<o.removed.length&&(a=o.removed[s]);s++)t.removedNodes.push(a);for(let n=0,o;n<r.length&&(o=r[n]);n++)for(let s=o.index;s<o.index+o.addedCount;s++)t.addedNodes.push(e[s]);this._effectiveNodes=e;let i=!1;return(t.addedNodes.length||t.removedNodes.length)&&(i=!0,this.callback.call(this._target,t)),i}_listenSlots(t){for(let e=0;e<t.length;e++){let r=t[e];Dr(r)&&r.addEventListener("slotchange",this._boundSchedule)}}_unlistenSlots(t){for(let e=0;e<t.length;e++){let r=t[e];Dr(r)&&r.removeEventListener("slotchange",this._boundSchedule)}}};var ji=function(){let t,e;do t=window.ShadyDOM&&ShadyDOM.flush(),window.ShadyCSS&&window.ShadyCSS.ScopingShim&&window.ShadyCSS.ScopingShim.flush(),e=hh();while(t||e)};var Nr=Element.prototype,$x=Nr.matches||Nr.matchesSelector||Nr.mozMatchesSelector||Nr.msMatchesSelector||Nr.oMatchesSelector||Nr.webkitMatchesSelector,Wl=function(t,e){return $x.call(t,e)},R=class{constructor(e){window.ShadyDOM&&window.ShadyDOM.inUse&&window.ShadyDOM.patch(e),this.node=e}observeNodes(e){return new Gl(this.node,e)}unobserveNodes(e){e.disconnect()}notifyObserver(){}deepContains(e){if(b(this.node).contains(e))return!0;let r=e,i=e.ownerDocument;for(;r&&r!==i&&r!==this.node;)r=b(r).parentNode||b(r).host;return r===this.node}getOwnerRoot(){return b(this.node).getRootNode()}getDistributedNodes(){return this.node.localName==="slot"?b(this.node).assignedNodes({flatten:!0}):[]}getDestinationInsertionPoints(){let e=[],r=b(this.node).assignedSlot;for(;r;)e.push(r),r=b(r).assignedSlot;return e}importNode(e,r){let i=this.node instanceof Document?this.node:this.node.ownerDocument;return b(i).importNode(e,r)}getEffectiveChildNodes(){return Gl.getFlattenedNodes(this.node)}queryDistributedElements(e){let r=this.getEffectiveChildNodes(),i=[];for(let n=0,o=r.length,s;n<o&&(s=r[n]);n++)s.nodeType===Node.ELEMENT_NODE&&Wl(s,e)&&i.push(s);return i}get activeElement(){let e=this.node;return e._activeElement!==void 0?e._activeElement:e.activeElement}};function Gx(t,e){for(let r=0;r<e.length;r++){let i=e[r];t[i]=function(){return this.node[i].apply(this.node,arguments)}}}function om(t,e){for(let r=0;r<e.length;r++){let i=e[r];Object.defineProperty(t,i,{get:function(){return this.node[i]},configurable:!0})}}function Wx(t,e){for(let r=0;r<e.length;r++){let i=e[r];Object.defineProperty(t,i,{get:function(){return this.node[i]},set:function(n){this.node[i]=n},configurable:!0})}}var Vo=class{constructor(e){this.event=e}get rootTarget(){return this.path[0]}get localTarget(){return this.event.target}get path(){return this.event.composedPath()}};R.prototype.cloneNode;R.prototype.appendChild;R.prototype.insertBefore;R.prototype.removeChild;R.prototype.replaceChild;R.prototype.setAttribute;R.prototype.removeAttribute;R.prototype.querySelector;R.prototype.querySelectorAll;R.prototype.parentNode;R.prototype.firstChild;R.prototype.lastChild;R.prototype.nextSibling;R.prototype.previousSibling;R.prototype.firstElementChild;R.prototype.lastElementChild;R.prototype.nextElementSibling;R.prototype.previousElementSibling;R.prototype.childNodes;R.prototype.children;R.prototype.classList;R.prototype.textContent;R.prototype.innerHTML;var Yl=R;if(window.ShadyDOM&&window.ShadyDOM.inUse&&window.ShadyDOM.noPatch&&window.ShadyDOM.Wrapper){class t extends window.ShadyDOM.Wrapper{}Object.getOwnPropertyNames(R.prototype).forEach(e=>{e!="activeElement"&&(t.prototype[e]=R.prototype[e])}),om(t.prototype,["classList"]),Yl=t,Object.defineProperties(Vo.prototype,{localTarget:{get(){let e=this.event.currentTarget,r=e&&j(e).getOwnerRoot(),i=this.path;for(let n=0;n<i.length;n++){let o=i[n];if(j(o).getOwnerRoot()===r)return o}},configurable:!0},path:{get(){return window.ShadyDOM.composedPath(this.event)},configurable:!0}})}else Gx(R.prototype,["cloneNode","appendChild","insertBefore","removeChild","replaceChild","setAttribute","removeAttribute","querySelector","querySelectorAll"]),om(R.prototype,["parentNode","firstChild","lastChild","nextSibling","previousSibling","firstElementChild","lastElementChild","nextElementSibling","previousElementSibling","childNodes","children","classList"]),Wx(R.prototype,["textContent","innerHTML","className"]);var j=function(t){if(t=t||document,t instanceof Yl||t instanceof Vo)return t;let e=t.__domApi;return e||(t instanceof Event?e=new Vo(t):e=new Yl(t),t.__domApi=e),e};var Jl=window.ShadyDOM,sm=window.ShadyCSS;function am(t,e){return b(t).getRootNode()===e}function lm(t,e=!1){if(!Jl||!sm||!Jl.handlesDynamicScoping)return null;let r=sm.ScopingShim;if(!r)return null;let i=r.scopeForNode(t),n=b(t).getRootNode(),o=s=>{if(!am(s,n))return;let a=Array.from(Jl.nativeMethods.querySelectorAll.call(s,"*"));a.push(s);for(let l=0;l<a.length;l++){let u=a[l];if(!am(u,n))continue;let c=r.currentScopeForNode(u);c!==i&&(c!==""&&r.unscopeNode(u,c),r.scopeNode(u,i))}};if(o(t),e){let s=new MutationObserver(a=>{for(let l=0;l<a.length;l++){let u=a[l];for(let c=0;c<u.addedNodes.length;c++){let p=u.addedNodes[c];p.nodeType===Node.ELEMENT_NODE&&o(p)}}});return s.observe(t,{childList:!0,subtree:!0}),s}else return null}var Xl="disable-upgrade",Zl=t=>{for(;t;){let e=Object.getOwnPropertyDescriptor(t,"observedAttributes");if(e)return e.get;t=Object.getPrototypeOf(t.prototype).constructor}return()=>[]},e1=V(t=>{let e=ut(t),r=Zl(e);class i extends e{constructor(){super();this.__isUpgradeDisabled}static get observedAttributes(){return r.call(this).concat(Xl)}_initializeProperties(){this.hasAttribute(Xl)?this.__isUpgradeDisabled=!0:super._initializeProperties()}_enableProperties(){this.__isUpgradeDisabled||super._enableProperties()}_canApplyPropertyDefault(o){return super._canApplyPropertyDefault(o)&&!(this.__isUpgradeDisabled&&this._isPropertyPending(o))}attributeChangedCallback(o,s,a,l){o==Xl?this.__isUpgradeDisabled&&a==null&&(super._initializeProperties(),this.__isUpgradeDisabled=!1,b(this).isConnected&&super.connectedCallback()):super.attributeChangedCallback(o,s,a,l)}connectedCallback(){this.__isUpgradeDisabled||super.connectedCallback()}disconnectedCallback(){this.__isUpgradeDisabled||super.disconnectedCallback()}}return i});var Bo="disable-upgrade",Yx=window.ShadyCSS,Fi=V(t=>{let e=Cr(ut(t)),r=Eo?e:tm(e),i=Zl(r),n={x:"pan-x",y:"pan-y",none:"none",all:"auto"};class o extends r{constructor(){super();this.isAttached,this.__boundListeners,this._debouncers,this.__isUpgradeDisabled,this.__needsAttributesAtConnected,this._legacyForceObservedAttributes}static get importMeta(){return this.prototype.importMeta}created(){}__attributeReaction(a,l,u){(this.__dataAttributes&&this.__dataAttributes[a]||a===Bo)&&this.attributeChangedCallback(a,l,u,null)}setAttribute(a,l){if(_i&&!this._legacyForceObservedAttributes){let u=this.getAttribute(a);super.setAttribute(a,l),this.__attributeReaction(a,u,String(l))}else super.setAttribute(a,l)}removeAttribute(a){if(_i&&!this._legacyForceObservedAttributes){let l=this.getAttribute(a);super.removeAttribute(a),this.__attributeReaction(a,l,null)}else super.removeAttribute(a)}static get observedAttributes(){return _i&&!this.prototype._legacyForceObservedAttributes?(this.hasOwnProperty(JSCompiler_renameProperty("__observedAttributes",this))||(this.__observedAttributes=[],So(this.prototype)),this.__observedAttributes):i.call(this).concat(Bo)}_enableProperties(){this.__isUpgradeDisabled||super._enableProperties()}_canApplyPropertyDefault(a){return super._canApplyPropertyDefault(a)&&!(this.__isUpgradeDisabled&&this._isPropertyPending(a))}connectedCallback(){this.__needsAttributesAtConnected&&this._takeAttributes(),this.__isUpgradeDisabled||(super.connectedCallback(),this.isAttached=!0,this.attached())}attached(){}disconnectedCallback(){this.__isUpgradeDisabled||(super.disconnectedCallback(),this.isAttached=!1,this.detached())}detached(){}attributeChangedCallback(a,l,u,c){l!==u&&(a==Bo?this.__isUpgradeDisabled&&u==null&&(this._initializeProperties(),this.__isUpgradeDisabled=!1,b(this).isConnected&&this.connectedCallback()):(super.attributeChangedCallback(a,l,u,c),this.attributeChanged(a,l,u)))}attributeChanged(a,l,u){}_initializeProperties(){if(ze&&this.hasAttribute(Bo))this.__isUpgradeDisabled=!0;else{let a=Object.getPrototypeOf(this);a.hasOwnProperty(JSCompiler_renameProperty("__hasRegisterFinished",a))||(this._registered(),a.__hasRegisterFinished=!0),super._initializeProperties(),this.root=this,this.created(),_i&&!this._legacyForceObservedAttributes&&(this.hasAttributes()?this._takeAttributes():this.parentNode||(this.__needsAttributesAtConnected=!0)),this._applyListeners()}}_takeAttributes(){let a=this.attributes;for(let l=0,u=a.length;l<u;l++){let c=a[l];this.__attributeReaction(c.name,null,c.value)}}_registered(){}ready(){this._ensureAttributes(),super.ready()}_ensureAttributes(){}_applyListeners(){}serialize(a){return this._serializeValue(a)}deserialize(a,l){return this._deserializeValue(a,l)}reflectPropertyToAttribute(a,l,u){this._propertyToAttribute(a,l,u)}serializeValueToAttribute(a,l,u){this._valueToNodeAttribute(u||this,a,l)}extend(a,l){if(!(a&&l))return a||l;let u=Object.getOwnPropertyNames(l);for(let c=0,p;c<u.length&&(p=u[c]);c++){let f=Object.getOwnPropertyDescriptor(l,p);f&&Object.defineProperty(a,p,f)}return a}mixin(a,l){for(let u in l)a[u]=l[u];return a}chainObject(a,l){return a&&l&&a!==l&&(a.__proto__=l),a}instanceTemplate(a){let l=this.constructor._contentForTemplate(a);return document.importNode(l,!0)}fire(a,l,u){u=u||{},l=l??{};let c=new Event(a,{bubbles:u.bubbles===void 0?!0:u.bubbles,cancelable:Boolean(u.cancelable),composed:u.composed===void 0?!0:u.composed});c.detail=l;let p=u.node||this;return b(p).dispatchEvent(c),c}listen(a,l,u){a=a||this;let c=this.__boundListeners||(this.__boundListeners=new WeakMap),p=c.get(a);p||(p={},c.set(a,p));let f=l+u;p[f]||(p[f]=this._addMethodEventListenerToNode(a,l,u,this))}unlisten(a,l,u){a=a||this;let c=this.__boundListeners&&this.__boundListeners.get(a),p=l+u,f=c&&c[p];f&&(this._removeEventListenerFromNode(a,l,f),c[p]=null)}setScrollDirection(a,l){Al(l||this,n[a]||"auto")}$$(a){return this.root.querySelector(a)}get domHost(){let a=b(this).getRootNode();return a instanceof DocumentFragment?a.host:a}distributeContent(){let l=j(this);window.ShadyDOM&&l.shadowRoot&&ShadyDOM.flush()}getEffectiveChildNodes(){return j(this).getEffectiveChildNodes()}queryDistributedElements(a){return j(this).queryDistributedElements(a)}getEffectiveChildren(){return this.getEffectiveChildNodes().filter(function(l){return l.nodeType===Node.ELEMENT_NODE})}getEffectiveTextContent(){let a=this.getEffectiveChildNodes(),l=[];for(let u=0,c;c=a[u];u++)c.nodeType!==Node.COMMENT_NODE&&l.push(c.textContent);return l.join("")}queryEffectiveChildren(a){let l=this.queryDistributedElements(a);return l&&l[0]}queryAllEffectiveChildren(a){return this.queryDistributedElements(a)}getContentChildNodes(a){let l=this.root.querySelector(a||"slot");return l?j(l).getDistributedNodes():[]}getContentChildren(a){return this.getContentChildNodes(a).filter(function(u){return u.nodeType===Node.ELEMENT_NODE})}isLightDescendant(a){let l=this;return l!==a&&b(l).contains(a)&&b(l).getRootNode()===b(a).getRootNode()}isLocalDescendant(a){return this.root===b(a).getRootNode()}scopeSubtree(a,l=!1){return lm(a,l)}getComputedStyleValue(a){return Yx.getComputedStyleValue(this,a)}debounce(a,l,u){return this._debouncers=this._debouncers||{},this._debouncers[a]=me.debounce(this._debouncers[a],u>0?lt.after(u):se,l.bind(this))}isDebouncerActive(a){this._debouncers=this._debouncers||{};let l=this._debouncers[a];return!!(l&&l.isActive())}flushDebouncer(a){this._debouncers=this._debouncers||{};let l=this._debouncers[a];l&&l.flush()}cancelDebouncer(a){this._debouncers=this._debouncers||{};let l=this._debouncers[a];l&&l.cancel()}async(a,l){return l>0?lt.run(a.bind(this),l):~se.run(a.bind(this))}cancelAsync(a){a<0?se.cancel(~a):lt.cancel(a)}create(a,l){let u=document.createElement(a);if(l)if(u.setProperties)u.setProperties(l);else for(let c in l)u[c]=l[c];return u}elementMatches(a,l){return Wl(l||this,a)}toggleAttribute(a,l){let u=this;return arguments.length===3&&(u=arguments[2]),arguments.length==1&&(l=!u.hasAttribute(a)),l?(b(u).setAttribute(a,""),!0):(b(u).removeAttribute(a),!1)}toggleClass(a,l,u){u=u||this,arguments.length==1&&(l=!u.classList.contains(a)),l?u.classList.add(a):u.classList.remove(a)}transform(a,l){l=l||this,l.style.webkitTransform=a,l.style.transform=a}translate3d(a,l,u,c){c=c||this,this.transform("translate3d("+a+","+l+","+u+")",c)}arrayDelete(a,l){let u;if(Array.isArray(a)){if(u=a.indexOf(l),u>=0)return a.splice(u,1)}else if(u=Y(this,a).indexOf(l),u>=0)return this.splice(a,u,1);return null}_logger(a,l){switch(Array.isArray(l)&&l.length===1&&Array.isArray(l[0])&&(l=l[0]),a){case"log":case"warn":case"error":console[a](...l)}}_log(...a){this._logger("log",a)}_warn(...a){this._logger("warn",a)}_error(...a){this._logger("error",a)}_logf(a,...l){return["[%s::%s]",this.is,a,...l]}}return o.prototype.is="",o});var Jx={attached:!0,detached:!0,ready:!0,created:!0,beforeRegister:!0,registered:!0,attributeChanged:!0,listeners:!0,hostAttributes:!0},um={attached:!0,detached:!0,ready:!0,created:!0,beforeRegister:!0,registered:!0,attributeChanged:!0,behaviors:!0,_noAccessors:!0},Xx=Object.assign({listeners:!0,hostAttributes:!0,properties:!0,observers:!0},um);function Zx(t,e,r){let i=t._noAccessors,n=Object.getOwnPropertyNames(t);for(let o=0;o<n.length;o++){let s=n[o];if(!(s in r))if(i)e[s]=t[s];else{let a=Object.getOwnPropertyDescriptor(t,s);a&&(a.configurable=!0,Object.defineProperty(e,s,a))}}}function pm(t,e){return cm({},Fi(e),t)}function ew(t,e,r){for(let i=0;i<e.length;i++)fm(t,e[i],r,Xx)}function fm(t,e,r,i){Zx(e,t,i);for(let n in Jx)e[n]&&(r[n]=r[n]||[],r[n].push(e[n]))}function dm(t,e,r){e=e||[];for(let i=t.length-1;i>=0;i--){let n=t[i];n?Array.isArray(n)?dm(n,e):e.indexOf(n)<0&&(!r||r.indexOf(n)<0)&&e.unshift(n):console.warn("behavior is null, check for missing or 404 import")}return e}function hm(t,e){for(let r in e){let i=t[r],n=e[r];!("value"in n)&&i&&"value"in i?t[r]=Object.assign({value:i.value},n):t[r]=n}}var mm=Fi(HTMLElement);function cm(t,e,r){let i,n={};class o extends e{static _finalizeClass(){if(!this.hasOwnProperty(JSCompiler_renameProperty("generatedFrom",this)))e._finalizeClass.call(this);else{if(i)for(let l=0,u;l<i.length;l++)u=i[l],u.properties&&this.createProperties(u.properties),u.observers&&this.createObservers(u.observers,u.properties);t.properties&&this.createProperties(t.properties),t.observers&&this.createObservers(t.observers,t.properties),this._prepareTemplate()}}static get properties(){let l={};if(i)for(let u=0;u<i.length;u++)hm(l,i[u].properties);return hm(l,t.properties),l}static get observers(){let l=[];if(i)for(let u=0,c;u<i.length;u++)c=i[u],c.observers&&(l=l.concat(c.observers));return t.observers&&(l=l.concat(t.observers)),l}created(){super.created();let l=n.created;if(l)for(let u=0;u<l.length;u++)l[u].call(this)}_registered(){let l=o.prototype;if(!l.hasOwnProperty(JSCompiler_renameProperty("__hasRegisterFinished",l))){l.__hasRegisterFinished=!0,super._registered(),ze&&s(l);let u=Object.getPrototypeOf(this),c=n.beforeRegister;if(c)for(let p=0;p<c.length;p++)c[p].call(u);if(c=n.registered,c)for(let p=0;p<c.length;p++)c[p].call(u)}}_applyListeners(){super._applyListeners();let l=n.listeners;if(l)for(let u=0;u<l.length;u++){let c=l[u];if(c)for(let p in c)this._addMethodEventListenerToNode(this,p,c[p])}}_ensureAttributes(){let l=n.hostAttributes;if(l)for(let u=l.length-1;u>=0;u--){let c=l[u];for(let p in c)this._ensureAttribute(p,c[p])}super._ensureAttributes()}ready(){super.ready();let l=n.ready;if(l)for(let u=0;u<l.length;u++)l[u].call(this)}attached(){super.attached();let l=n.attached;if(l)for(let u=0;u<l.length;u++)l[u].call(this)}detached(){super.detached();let l=n.detached;if(l)for(let u=0;u<l.length;u++)l[u].call(this)}attributeChanged(l,u,c){super.attributeChanged();let p=n.attributeChanged;if(p)for(let f=0;f<p.length;f++)p[f].call(this,l,u,c)}}if(r){Array.isArray(r)||(r=[r]);let a=e.prototype.behaviors;i=dm(r,null,a),o.prototype.behaviors=a?a.concat(r):i}let s=a=>{i&&ew(a,i,n),fm(a,t,n,um)};return ze||s(o.prototype),o.generatedFrom=t,o}var ym=function(t,e){t||console.warn("Polymer.Class requires `info` argument");let r=e?e(mm):mm;return r=cm(t,r,t.behaviors),r.is=r.prototype.is=t.is,r};var K=function(t){let e;return typeof t=="function"?e=t:e=K.Class(t),t._legacyForceObservedAttributes&&(e.prototype._legacyForceObservedAttributes=t._legacyForceObservedAttributes),customElements.define(e.is,e),e};K.Class=ym;function eu(t,e,r,i,n){let o;n&&(o=typeof r=="object"&&r!==null,o&&(i=t.__dataTemp[e]));let s=i!==r&&(i===i||r===r);return o&&s&&(t.__dataTemp[e]=r),s}var Ir=V(t=>{class e extends t{_shouldPropertyChange(i,n,o){return eu(this,i,n,o,!0)}}return e}),qo=V(t=>{class e extends t{static get properties(){return{mutableData:Boolean}}_shouldPropertyChange(i,n,o){return eu(this,i,n,o,this.mutableData)}}return e});Ir._mutablePropertyChange=eu;var tu=null;function ru(){return tu}ru.prototype=Object.create(HTMLTemplateElement.prototype,{constructor:{value:ru,writable:!0}});var vm=Dt(ru),tw=Ir(vm);function rw(t,e){tu=t,Object.setPrototypeOf(t,e.prototype),new e,tu=null}var iw=Dt(class{});function iu(t,e){for(let r=0;r<e.length;r++){let i=e[r];if(Boolean(t)!=Boolean(i.__hideTemplateChildren__))if(i.nodeType===Node.TEXT_NODE)t?(i.__polymerTextContent__=i.textContent,i.textContent=""):i.textContent=i.__polymerTextContent__;else if(i.localName==="slot")if(t)i.__polymerReplaced__=document.createComment("hidden-slot"),b(b(i).parentNode).replaceChild(i.__polymerReplaced__,i);else{let n=i.__polymerReplaced__;n&&b(b(n).parentNode).replaceChild(i,n)}else i.style&&(t?(i.__polymerDisplay__=i.style.display,i.style.display="none"):i.style.display=i.__polymerDisplay__);i.__hideTemplateChildren__=t,i._showHideChildren&&i._showHideChildren(t)}}var We=class extends iw{constructor(e){super();this._configureProperties(e),this.root=this._stampTemplate(this.__dataHost);let r=[];this.children=r;for(let n=this.root.firstChild;n;n=n.nextSibling)r.push(n),n.__templatizeInstance=this;this.__templatizeOwner&&this.__templatizeOwner.__hideTemplateChildren__&&this._showHideChildren(!0);let i=this.__templatizeOptions;(e&&i.instanceProps||!i.instanceProps)&&this._enableProperties()}_configureProperties(e){if(this.__templatizeOptions.forwardHostProp)for(let i in this.__hostProps)this._setPendingProperty(i,this.__dataHost["_host_"+i]);for(let i in e)this._setPendingProperty(i,e[i])}forwardHostProp(e,r){this._setPendingPropertyOrPath(e,r,!1,!0)&&this.__dataHost._enqueueClient(this)}_addEventListenerToNode(e,r,i){if(this._methodHost&&this.__templatizeOptions.parentModel)this._methodHost._addEventListenerToNode(e,r,n=>{n.model=this,i(n)});else{let n=this.__dataHost.__dataHost;n&&n._addEventListenerToNode(e,r,i)}}_showHideChildren(e){iu(e,this.children)}_setUnmanagedPropertyToNode(e,r,i){e.__hideTemplateChildren__&&e.nodeType==Node.TEXT_NODE&&r=="textContent"?e.__polymerTextContent__=i:super._setUnmanagedPropertyToNode(e,r,i)}get parentModel(){let e=this.__parentModel;if(!e){let r;e=this;do e=e.__dataHost.__dataHost;while((r=e.__templatizeOptions)&&!r.parentModel);this.__parentModel=e}return e}dispatchEvent(e){return!0}};We.prototype.__dataHost;We.prototype.__templatizeOptions;We.prototype._methodHost;We.prototype.__templatizeOwner;We.prototype.__hostProps;var nw=Ir(We);function _m(t){let e=t.__dataHost;return e&&e._methodHost||e}function sw(t,e,r){let i=r.mutableData?nw:We;Rt.mixin&&(i=Rt.mixin(i));let n=class extends i{};return n.prototype.__templatizeOptions=r,n.prototype._bindTemplate(t),ow(n,t,e,r),n}function uw(t,e,r,i){let n=r.forwardHostProp;if(n&&e.hasHostProps){let o=t.localName=="template",s=e.templatizeTemplateClass;if(!s){if(o){let l=r.mutableData?tw:vm;class u extends l{}s=e.templatizeTemplateClass=u}else{let l=t.constructor;class u extends l{}s=e.templatizeTemplateClass=u}let a=e.hostProps;for(let l in a)s.prototype._addPropertyEffect("_host_"+l,s.prototype.PROPERTY_EFFECT_TYPES.PROPAGATE,{fn:aw(l,n)}),s.prototype._createNotifyingProperty("_host_"+l);ho&&i&&lw(e,r,i)}if(t.__dataProto&&Object.assign(t.__data,t.__dataProto),o)rw(t,s),t.__dataTemp={},t.__dataPending=null,t.__dataOld=null,t._enableProperties();else{Object.setPrototypeOf(t,s.prototype);let a=e.hostProps;for(let l in a)if(l="_host_"+l,l in t){let u=t[l];delete t[l],t.__data[l]=u}}}}function aw(t,e){return function(i,n,o){e.call(i.__templatizeOwner,n.substring("_host_".length),o[n])}}function ow(t,e,r,i){let n=r.hostProps||{};for(let o in i.instanceProps){delete n[o];let s=i.notifyInstanceProp;s&&t.prototype._addPropertyEffect(o,t.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,{fn:cw(o,s)})}if(i.forwardHostProp&&e.__dataHost)for(let o in n)r.hasHostProps||(r.hasHostProps=!0),t.prototype._addPropertyEffect(o,t.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,{fn:pw()})}function cw(t,e){return function(i,n,o){e.call(i.__templatizeOwner,i,n,o[n])}}function pw(){return function(e,r,i){e.__dataHost._setPendingPropertyOrPath("_host_"+r,i[r],!0,!0)}}function Rt(t,e,r){if(be&&!_m(t))throw new Error("strictTemplatePolicy: template owner not trusted");if(r=r||{},t.__templatizeOwner)throw new Error("A <template> can only be templatized once");t.__templatizeOwner=e;let n=(e?e.constructor:We)._parseTemplate(t),o=n.templatizeInstanceClass;o||(o=sw(t,n,r),n.templatizeInstanceClass=o);let s=_m(t);uw(t,n,r,s);let a=class extends o{};return a.prototype._methodHost=s,a.prototype.__dataHost=t,a.prototype.__templatizeOwner=e,a.prototype.__hostProps=n.hostProps,a=a,a}function lw(t,e,r){let i=r.constructor._properties,{propertyEffects:n}=t,{instanceProps:o}=e;for(let s in n)if(!i[s]&&!(o&&o[s])){let a=n[s];for(let l=0;l<a.length;l++){let{part:u}=a[l].info;if(!(u.signature&&u.signature.static)){console.warn(`Property '${s}' used in template but not declared in 'properties'; attribute will not be observed.`);break}}}}function nu(t,e){let r;for(;e;)if(r=e.__dataHost?e:e.__templatizeInstance)if(r.__dataHost!=t)e=r.__dataHost;else return r;else e=b(e).parentNode;return null}var gm=!1;function Mr(){if(ze&&!cl){if(!gm){gm=!0;let t=document.createElement("style");t.textContent="dom-bind,dom-if,dom-repeat{display:none;}",document.head.appendChild(t)}return!0}return!1}var fw=Cr(qo(Dt(HTMLElement))),bm=class extends fw{static get observedAttributes(){return["mutable-data"]}constructor(){super();if(be)throw new Error("strictTemplatePolicy: dom-bind not allowed");this.root=null,this.$=null,this.__children=null}attributeChangedCallback(e,r,i,n){this.mutableData=!0}connectedCallback(){Mr()||(this.style.display="none"),this.render()}disconnectedCallback(){this.__removeChildren()}__insertChildren(){b(b(this).parentNode).insertBefore(this.root,this)}__removeChildren(){if(this.__children)for(let e=0;e<this.__children.length;e++)this.root.appendChild(this.__children[e])}render(){let e;if(!this.__children){if(e=e||this.querySelector("template"),!e){let r=new MutationObserver(()=>{if(e=this.querySelector("template"),e)r.disconnect(),this.render();else throw new Error("dom-bind requires a <template> child")});r.observe(this,{childList:!0});return}this.root=this._stampTemplate(e),this.$=this.root.$,this.__children=[];for(let r=this.root.firstChild;r;r=r.nextSibling)this.__children[this.__children.length]=r;this._enableProperties()}this.__insertChildren(),this.dispatchEvent(new CustomEvent("dom-change",{bubbles:!0,composed:!0}))}};customElements.define("dom-bind",bm);var dw=qo(he),ou=class extends dw{static get is(){return"dom-repeat"}static get template(){return null}static get properties(){return{items:{type:Array},as:{type:String,value:"item"},indexAs:{type:String,value:"index"},itemsIndexAs:{type:String,value:"itemsIndex"},sort:{type:Function,observer:"__sortChanged"},filter:{type:Function,observer:"__filterChanged"},observe:{type:String,observer:"__observeChanged"},delay:Number,renderedItemCount:{type:Number,notify:!vi,readOnly:!0},initialCount:{type:Number},targetFramerate:{type:Number,value:20},_targetFrameTime:{type:Number,computed:"__computeFrameTime(targetFramerate)"},notifyDomChange:{type:Boolean},reuseChunkedInstances:{type:Boolean}}}static get observers(){return["__itemsChanged(items.*)"]}constructor(){super();this.__instances=[],this.__renderDebouncer=null,this.__itemsIdxToInstIdx={},this.__chunkCount=null,this.__renderStartTime=null,this.__itemsArrayChanged=!1,this.__shouldMeasureChunk=!1,this.__shouldContinueChunking=!1,this.__chunkingId=0,this.__sortFn=null,this.__filterFn=null,this.__observePaths=null,this.__ctor=null,this.__isDetached=!0,this.template=null,this._templateInfo}disconnectedCallback(){super.disconnectedCallback(),this.__isDetached=!0;for(let e=0;e<this.__instances.length;e++)this.__detachInstance(e)}connectedCallback(){if(super.connectedCallback(),Mr()||(this.style.display="none"),this.__isDetached){this.__isDetached=!1;let e=b(b(this).parentNode);for(let r=0;r<this.__instances.length;r++)this.__attachInstance(r,e)}}__ensureTemplatized(){if(!this.__ctor){let e=this,r=this.template=e._templateInfo?e:this.querySelector("template");if(!r){let n=new MutationObserver(()=>{if(this.querySelector("template"))n.disconnect(),this.__render();else throw new Error("dom-repeat requires a <template> child")});return n.observe(this,{childList:!0}),!1}let i={};i[this.as]=!0,i[this.indexAs]=!0,i[this.itemsIndexAs]=!0,this.__ctor=Rt(r,this,{mutableData:this.mutableData,parentModel:!0,instanceProps:i,forwardHostProp:function(n,o){let s=this.__instances;for(let a=0,l;a<s.length&&(l=s[a]);a++)l.forwardHostProp(n,o)},notifyInstanceProp:function(n,o,s){if(Hd(this.as,o)){let a=n[this.itemsIndexAs];o==this.as&&(this.items[a]=s);let l=At(this.as,`${JSCompiler_renameProperty("items",this)}.${a}`,o);this.notifyPath(l,s)}}})}return!0}__getMethodHost(){return this.__dataHost._methodHost||this.__dataHost}__functionFromPropertyValue(e){if(typeof e=="string"){let r=e,i=this.__getMethodHost();return function(){return i[r].apply(i,arguments)}}return e}__sortChanged(e){this.__sortFn=this.__functionFromPropertyValue(e),this.items&&this.__debounceRender(this.__render)}__filterChanged(e){this.__filterFn=this.__functionFromPropertyValue(e),this.items&&this.__debounceRender(this.__render)}__computeFrameTime(e){return Math.ceil(1e3/e)}__observeChanged(){this.__observePaths=this.observe&&this.observe.replace(".*",".").split(" ")}__handleObservedPaths(e){if(this.__sortFn||this.__filterFn){if(!e)this.__debounceRender(this.__render,this.delay);else if(this.__observePaths){let r=this.__observePaths;for(let i=0;i<r.length;i++)e.indexOf(r[i])===0&&this.__debounceRender(this.__render,this.delay)}}}__itemsChanged(e){this.items&&!Array.isArray(this.items)&&console.warn("dom-repeat expected array for `items`, found",this.items),this.__handleItemPath(e.path,e.value)||(e.path==="items"&&(this.__itemsArrayChanged=!0),this.__debounceRender(this.__render))}__debounceRender(e,r=0){this.__renderDebouncer=me.debounce(this.__renderDebouncer,r>0?lt.after(r):se,e.bind(this)),Er(this.__renderDebouncer)}render(){this.__debounceRender(this.__render),ji()}__render(){if(!this.__ensureTemplatized())return;let e=this.items||[],r=this.__sortAndFilterItems(e),i=this.__calculateLimit(r.length);this.__updateInstances(e,i,r),this.initialCount&&(this.__shouldMeasureChunk||this.__shouldContinueChunking)&&(cancelAnimationFrame(this.__chunkingId),this.__chunkingId=requestAnimationFrame(()=>this.__continueChunking())),this._setRenderedItemCount(this.__instances.length),(!vi||this.notifyDomChange)&&this.dispatchEvent(new CustomEvent("dom-change",{bubbles:!0,composed:!0}))}__sortAndFilterItems(e){let r=new Array(e.length);for(let i=0;i<e.length;i++)r[i]=i;return this.__filterFn&&(r=r.filter((i,n,o)=>this.__filterFn(e[i],n,o))),this.__sortFn&&r.sort((i,n)=>this.__sortFn(e[i],e[n])),r}__calculateLimit(e){let r=e,i=this.__instances.length;if(this.initialCount){let n;!this.__chunkCount||this.__itemsArrayChanged&&!this.reuseChunkedInstances?(r=Math.min(e,this.initialCount),n=Math.max(r-i,0),this.__chunkCount=n||1):(n=Math.min(Math.max(e-i,0),this.__chunkCount),r=Math.min(i+n,e)),this.__shouldMeasureChunk=n===this.__chunkCount,this.__shouldContinueChunking=r<e,this.__renderStartTime=performance.now()}return this.__itemsArrayChanged=!1,r}__continueChunking(){if(this.__shouldMeasureChunk){let e=performance.now()-this.__renderStartTime,r=this._targetFrameTime/e;this.__chunkCount=Math.round(this.__chunkCount*r)||1}this.__shouldContinueChunking&&this.__debounceRender(this.__render)}__updateInstances(e,r,i){let n=this.__itemsIdxToInstIdx={},o;for(o=0;o<r;o++){let s=this.__instances[o],a=i[o],l=e[a];n[a]=o,s?(s._setPendingProperty(this.as,l),s._setPendingProperty(this.indexAs,o),s._setPendingProperty(this.itemsIndexAs,a),s._flushProperties()):this.__insertInstance(l,o,a)}for(let s=this.__instances.length-1;s>=o;s--)this.__detachAndRemoveInstance(s)}__detachInstance(e){let r=this.__instances[e],i=b(r.root);for(let n=0;n<r.children.length;n++){let o=r.children[n];i.appendChild(o)}return r}__attachInstance(e,r){let i=this.__instances[e];r.insertBefore(i.root,this)}__detachAndRemoveInstance(e){this.__detachInstance(e),this.__instances.splice(e,1)}__stampInstance(e,r,i){let n={};return n[this.as]=e,n[this.indexAs]=r,n[this.itemsIndexAs]=i,new this.__ctor(n)}__insertInstance(e,r,i){let n=this.__stampInstance(e,r,i),o=this.__instances[r+1],s=o?o.children[0]:this;return b(b(this).parentNode).insertBefore(n.root,s),this.__instances[r]=n,n}_showHideChildren(e){for(let r=0;r<this.__instances.length;r++)this.__instances[r]._showHideChildren(e)}__handleItemPath(e,r){let i=e.slice(6),n=i.indexOf("."),o=n<0?i:i.substring(0,n);if(o==parseInt(o,10)){let s=n<0?"":i.substring(n+1);this.__handleObservedPaths(s);let a=this.__itemsIdxToInstIdx[o],l=this.__instances[a];if(l){let u=this.as+(s?"."+s:"");l._setPendingPropertyOrPath(u,r,!1,!0),l._flushProperties()}return!0}}itemForElement(e){let r=this.modelForElement(e);return r&&r[this.as]}indexForElement(e){let r=this.modelForElement(e);return r&&r[this.indexAs]}modelForElement(e){return nu(this.template,e)}};customElements.define(ou.is,ou);var su=class extends he{static get is(){return"dom-if"}static get template(){return null}static get properties(){return{if:{type:Boolean,observer:"__debounceRender"},restamp:{type:Boolean,observer:"__debounceRender"},notifyDomChange:{type:Boolean}}}constructor(){super();this.__renderDebouncer=null,this._lastIf=!1,this.__hideTemplateChildren__=!1,this.__template,this._templateInfo}__debounceRender(){this.__renderDebouncer=me.debounce(this.__renderDebouncer,se,()=>this.__render()),Er(this.__renderDebouncer)}disconnectedCallback(){super.disconnectedCallback();let e=b(this).parentNode;(!e||e.nodeType==Node.DOCUMENT_FRAGMENT_NODE&&!b(e).host)&&this.__teardownInstance()}connectedCallback(){super.connectedCallback(),Mr()||(this.style.display="none"),this.if&&this.__debounceRender()}__ensureTemplate(){if(!this.__template){let e=this,r=e._templateInfo?e:b(e).querySelector("template");if(!r){let i=new MutationObserver(()=>{if(b(this).querySelector("template"))i.disconnect(),this.__render();else throw new Error("dom-if requires a <template> child")});return i.observe(this,{childList:!0}),!1}this.__template=r}return!0}__ensureInstance(){let e=b(this).parentNode;if(this.__hasInstance()){let r=this.__getInstanceNodes();if(r&&r.length&&b(this).previousSibling!==r[r.length-1])for(let n=0,o;n<r.length&&(o=r[n]);n++)b(e).insertBefore(o,this)}else{if(!e||!this.__ensureTemplate())return!1;this.__createAndInsertInstance(e)}return!0}render(){ji()}__render(){if(this.if){if(!this.__ensureInstance())return}else this.restamp&&this.__teardownInstance();this._showHideChildren(),(!vi||this.notifyDomChange)&&this.if!=this._lastIf&&(this.dispatchEvent(new CustomEvent("dom-change",{bubbles:!0,composed:!0})),this._lastIf=this.if)}__hasInstance(){}__getInstanceNodes(){}__createAndInsertInstance(e){}__teardownInstance(){}_showHideChildren(){}},xm=class extends su{constructor(){super();this.__instance=null,this.__syncInfo=null}__hasInstance(){return Boolean(this.__instance)}__getInstanceNodes(){return this.__instance.templateInfo.childNodes}__createAndInsertInstance(e){let r=this.__dataHost||this;if(be&&!this.__dataHost)throw new Error("strictTemplatePolicy: template owner not trusted");let i=r._bindTemplate(this.__template,!0);i.runEffects=(n,o,s)=>{let a=this.__syncInfo;if(this.if)a&&(this.__syncInfo=null,this._showHideChildren(),o=Object.assign(a.changedProps,o)),n(o,s);else if(this.__instance)if(a||(a=this.__syncInfo={runEffects:n,changedProps:{}}),s)for(let l in o){let u=xe(l);a.changedProps[u]=this.__dataHost[u]}else Object.assign(a.changedProps,o)},this.__instance=r._stampTemplate(this.__template,i),b(e).insertBefore(this.__instance,this)}__syncHostProperties(){let e=this.__syncInfo;e&&(this.__syncInfo=null,e.runEffects(e.changedProps,!1))}__teardownInstance(){let e=this.__dataHost||this;this.__instance&&(e._removeBoundDom(this.__instance),this.__instance=null,this.__syncInfo=null)}_showHideChildren(){let e=this.__hideTemplateChildren__||!this.if;this.__instance&&Boolean(this.__instance.__hidden)!==e&&(this.__instance.__hidden=e,iu(e,this.__instance.templateInfo.childNodes)),e||this.__syncHostProperties()}},wm=class extends su{constructor(){super();this.__ctor=null,this.__instance=null,this.__invalidProps=null}__hasInstance(){return Boolean(this.__instance)}__getInstanceNodes(){return this.__instance.children}__createAndInsertInstance(e){this.__ctor||(this.__ctor=Rt(this.__template,this,{mutableData:!0,forwardHostProp:function(r,i){this.__instance&&(this.if?this.__instance.forwardHostProp(r,i):(this.__invalidProps=this.__invalidProps||Object.create(null),this.__invalidProps[xe(r)]=!0))}})),this.__instance=new this.__ctor,b(e).insertBefore(this.__instance.root,this)}__teardownInstance(){if(this.__instance){let e=this.__instance.children;if(e&&e.length){let r=b(e[0]).parentNode;if(r){r=b(r);for(let i=0,n;i<e.length&&(n=e[i]);i++)r.removeChild(n)}}this.__invalidProps=null,this.__instance=null}}__syncHostProperties(){let e=this.__invalidProps;if(e){this.__invalidProps=null;for(let r in e)this.__instance._setPendingProperty(r,this.__dataHost[r]);this.__instance._flushProperties()}}_showHideChildren(){let e=this.__hideTemplateChildren__||!this.if;this.__instance&&Boolean(this.__instance.__hidden)!==e&&(this.__instance.__hidden=e,this.__instance._showHideChildren(e)),e||this.__syncHostProperties()}},Sm=yo?xm:wm;customElements.define(Sm.is,Sm);var hw=V(t=>{let e=ut(t);class r extends e{static get properties(){return{items:{type:Array},multi:{type:Boolean,value:!1},selected:{type:Object,notify:!0},selectedItem:{type:Object,notify:!0},toggle:{type:Boolean,value:!1}}}static get observers(){return["__updateSelection(multi, items.*)"]}constructor(){super();this.__lastItems=null,this.__lastMulti=null,this.__selectedMap=null}__updateSelection(n,o){let s=o.path;if(s==JSCompiler_renameProperty("items",this)){let a=o.base||[],l=this.__lastItems,u=this.__lastMulti;if(n!==u&&this.clearSelection(),l){let c=Lo(a,l);this.__applySplices(c)}this.__lastItems=a,this.__lastMulti=n}else if(o.path==`${JSCompiler_renameProperty("items",this)}.splices`)this.__applySplices(o.value.indexSplices);else{let a=s.slice(`${JSCompiler_renameProperty("items",this)}.`.length),l=parseInt(a,10);a.indexOf(".")<0&&a==l&&this.__deselectChangedIdx(l)}}__applySplices(n){let o=this.__selectedMap;for(let a=0;a<n.length;a++){let l=n[a];o.forEach((u,c)=>{u<l.index||(u>=l.index+l.removed.length?o.set(c,u+l.addedCount-l.removed.length):o.set(c,-1))});for(let u=0;u<l.addedCount;u++){let c=l.index+u;o.has(this.items[c])&&o.set(this.items[c],c)}}this.__updateLinks();let s=0;o.forEach((a,l)=>{a<0?(this.multi?this.splice(JSCompiler_renameProperty("selected",this),s,1):this.selected=this.selectedItem=null,o.delete(l)):s++})}__updateLinks(){if(this.__dataLinkedPaths={},this.multi){let n=0;this.__selectedMap.forEach(o=>{o>=0&&this.linkPaths(`${JSCompiler_renameProperty("items",this)}.${o}`,`${JSCompiler_renameProperty("selected",this)}.${n++}`)})}else this.__selectedMap.forEach(n=>{this.linkPaths(JSCompiler_renameProperty("selected",this),`${JSCompiler_renameProperty("items",this)}.${n}`),this.linkPaths(JSCompiler_renameProperty("selectedItem",this),`${JSCompiler_renameProperty("items",this)}.${n}`)})}clearSelection(){this.__dataLinkedPaths={},this.__selectedMap=new Map,this.selected=this.multi?[]:null,this.selectedItem=null}isSelected(n){return this.__selectedMap.has(n)}isIndexSelected(n){return this.isSelected(this.items[n])}__deselectChangedIdx(n){let o=this.__selectedIndexForItemIndex(n);if(o>=0){let s=0;this.__selectedMap.forEach((a,l)=>{o==s++&&this.deselect(l)})}}__selectedIndexForItemIndex(n){let o=this.__dataLinkedPaths[`${JSCompiler_renameProperty("items",this)}.${n}`];if(o)return parseInt(o.slice(`${JSCompiler_renameProperty("selected",this)}.`.length),10)}deselect(n){let o=this.__selectedMap.get(n);if(o>=0){this.__selectedMap.delete(n);let s;this.multi&&(s=this.__selectedIndexForItemIndex(o)),this.__updateLinks(),this.multi?this.splice(JSCompiler_renameProperty("selected",this),s,1):this.selected=this.selectedItem=null}}deselectIndex(n){this.deselect(this.items[n])}select(n){this.selectIndex(this.items.indexOf(n))}selectIndex(n){let o=this.items[n];this.isSelected(o)?this.toggle&&this.deselectIndex(n):(this.multi||this.__selectedMap.clear(),this.__selectedMap.set(o,n),this.__updateLinks(),this.multi?this.push(JSCompiler_renameProperty("selected",this),o):this.selected=this.selectedItem=o)}}return r});var mw=hw(he),au=class extends mw{static get is(){return"array-selector"}static get template(){return null}};customElements.define(au.is,au);"use strict";var Uo=new Wh;window.ShadyCSS||(window.ShadyCSS={prepareTemplate(t,e,r){},prepareTemplateDom(t,e){},prepareTemplateStyles(t,e,r){},styleSubtree(t,e){Uo.processStyles(),ki(t,e)},styleElement(t){Uo.processStyles()},styleDocument(t){Uo.processStyles(),ki(document.body,t)},getComputedStyleValue(t,e){return Do(t,e)},flushCustomStyles(){},nativeCss:Or,nativeShadow:Mt,cssBuild:pt,disableRuntime:Ao});window.ShadyCSS.CustomStyleInterface=Uo;var Em="include",yw=window.ShadyCSS.CustomStyleInterface,Tm=class extends HTMLElement{constructor(){super();this._style=null,yw.addCustomStyle(this)}getStyle(){if(this._style)return this._style;let e=this.querySelector("style");if(!e)return null;this._style=e;let r=e.getAttribute(Em);return r&&(e.removeAttribute(Em),e.textContent=Ud(r)+e.textContent),this.ownerDocument!==window.document&&window.document.head.appendChild(this),this._style}};window.customElements.define("custom-style",Tm);var vw;(()=>{vw=Ir._mutablePropertyChange})();var VF=Fi(HTMLElement).prototype;var Cm={"U+0008":"backspace","U+0009":"tab","U+001B":"esc","U+0020":"space","U+007F":"del"},_w={8:"backspace",9:"tab",13:"enter",27:"esc",33:"pageup",34:"pagedown",35:"end",36:"home",32:"space",37:"left",38:"up",39:"right",40:"down",46:"del",106:"*"},Om={shift:"shiftKey",ctrl:"ctrlKey",alt:"altKey",meta:"metaKey"},gw=/[a-z0-9*]/,bw=/U\+/,xw=/^arrow/,ww=/^space(bar)?/,Sw=/^escape$/;function Pm(t,e){var r="";if(t){var i=t.toLowerCase();i===" "||ww.test(i)?r="space":Sw.test(i)?r="esc":i.length==1?(!e||gw.test(i))&&(r=i):xw.test(i)?r=i.replace("arrow",""):i=="multiply"?r="*":r=i}return r}function Ew(t){var e="";return t&&(t in Cm?e=Cm[t]:bw.test(t)?(t=parseInt(t.replace("U+","0x"),16),e=String.fromCharCode(t).toLowerCase()):e=t.toLowerCase()),e}function Tw(t){var e="";return Number(t)&&(t>=65&&t<=90?e=String.fromCharCode(32+t):t>=112&&t<=123?e="f"+(t-112+1):t>=48&&t<=57?e=String(t-48):t>=96&&t<=105?e=String(t-96):e=_w[t]),e}function Cw(t,e){return t.key?Pm(t.key,e):t.detail&&t.detail.key?Pm(t.detail.key,e):Ew(t.keyIdentifier)||Tw(t.keyCode)||""}function km(t,e){var r=Cw(e,t.hasModifiers);return r===t.key&&(!t.hasModifiers||!!e.shiftKey==!!t.shiftKey&&!!e.ctrlKey==!!t.ctrlKey&&!!e.altKey==!!t.altKey&&!!e.metaKey==!!t.metaKey)}function Ow(t){return t.length===1?{combo:t,key:t,event:"keydown"}:t.split("+").reduce(function(e,r){var i=r.split(":"),n=i[0],o=i[1];return n in Om?(e[Om[n]]=!0,e.hasModifiers=!0):(e.key=n,e.event=o||"keydown"),e},{combo:t.split(":").shift()})}function Am(t){return t.trim().split(" ").map(function(e){return Ow(e)})}var ft={properties:{keyEventTarget:{type:Object,value:function(){return this}},stopKeyboardEventPropagation:{type:Boolean,value:!1},_boundKeyHandlers:{type:Array,value:function(){return[]}},_imperativeKeyBindings:{type:Object,value:function(){return{}}}},observers:["_resetKeyEventListeners(keyEventTarget, _boundKeyHandlers)"],keyBindings:{},registered:function(){this._prepKeyBindings()},attached:function(){this._listenKeyEventListeners()},detached:function(){this._unlistenKeyEventListeners()},addOwnKeyBinding:function(t,e){this._imperativeKeyBindings[t]=e,this._prepKeyBindings(),this._resetKeyEventListeners()},removeOwnKeyBindings:function(){this._imperativeKeyBindings={},this._prepKeyBindings(),this._resetKeyEventListeners()},keyboardEventMatchesKeys:function(t,e){for(var r=Am(e),i=0;i<r.length;++i)if(km(r[i],t))return!0;return!1},_collectKeyBindings:function(){var t=this.behaviors.map(function(e){return e.keyBindings});return t.indexOf(this.keyBindings)===-1&&t.push(this.keyBindings),t},_prepKeyBindings:function(){this._keyBindings={},this._collectKeyBindings().forEach(function(r){for(var i in r)this._addKeyBinding(i,r[i])},this);for(var t in this._imperativeKeyBindings)this._addKeyBinding(t,this._imperativeKeyBindings[t]);for(var e in this._keyBindings)this._keyBindings[e].sort(function(r,i){var n=r[0].hasModifiers,o=i[0].hasModifiers;return n===o?0:n?-1:1})},_addKeyBinding:function(t,e){Am(t).forEach(function(r){this._keyBindings[r.event]=this._keyBindings[r.event]||[],this._keyBindings[r.event].push([r,e])},this)},_resetKeyEventListeners:function(){this._unlistenKeyEventListeners(),this.isAttached&&this._listenKeyEventListeners()},_listenKeyEventListeners:function(){!this.keyEventTarget||Object.keys(this._keyBindings).forEach(function(t){var e=this._keyBindings[t],r=this._onKeyBindingEvent.bind(this,e);this._boundKeyHandlers.push([this.keyEventTarget,t,r]),this.keyEventTarget.addEventListener(t,r)},this)},_unlistenKeyEventListeners:function(){for(var t,e,r,i;this._boundKeyHandlers.length;)t=this._boundKeyHandlers.pop(),e=t[0],r=t[1],i=t[2],e.removeEventListener(r,i)},_onKeyBindingEvent:function(t,e){if(this.stopKeyboardEventPropagation&&e.stopPropagation(),!e.defaultPrevented)for(var r=0;r<t.length;r++){var i=t[r][0],n=t[r][1];if(km(i,e)&&(this._triggerKeyHandler(i,n,e),e.defaultPrevented))return}},_triggerKeyHandler:function(t,e,r){var i=Object.create(t);i.keyboardEvent=r;var n=new CustomEvent(t.event,{detail:i,cancelable:!0});this[e].call(this,n),n.defaultPrevented&&r.preventDefault()}};var Ho={properties:{name:{type:String},value:{notify:!0,type:String},required:{type:Boolean,value:!1}},attached:function(){},detached:function(){}};var Li={properties:{focused:{type:Boolean,value:!1,notify:!0,readOnly:!0,reflectToAttribute:!0},disabled:{type:Boolean,value:!1,notify:!0,observer:"_disabledChanged",reflectToAttribute:!0},_oldTabIndex:{type:String},_boundFocusBlurHandler:{type:Function,value:function(){return this._focusBlurHandler.bind(this)}}},observers:["_changedControlState(focused, disabled)"],ready:function(){this.addEventListener("focus",this._boundFocusBlurHandler,!0),this.addEventListener("blur",this._boundFocusBlurHandler,!0)},_focusBlurHandler:function(t){this._setFocused(t.type==="focus")},_disabledChanged:function(t,e){this.setAttribute("aria-disabled",t?"true":"false"),this.style.pointerEvents=t?"none":"",t?(this._oldTabIndex=this.getAttribute("tabindex"),this._setFocused(!1),this.tabIndex=-1,this.blur()):this._oldTabIndex!==void 0&&(this._oldTabIndex===null?this.removeAttribute("tabindex"):this.setAttribute("tabindex",this._oldTabIndex))},_changedControlState:function(){this._controlStateChanged&&this._controlStateChanged()}};var lu={properties:{pressed:{type:Boolean,readOnly:!0,value:!1,reflectToAttribute:!0,observer:"_pressedChanged"},toggles:{type:Boolean,value:!1,reflectToAttribute:!0},active:{type:Boolean,value:!1,notify:!0,reflectToAttribute:!0},pointerDown:{type:Boolean,readOnly:!0,value:!1},receivedFocusFromKeyboard:{type:Boolean,readOnly:!0},ariaActiveAttribute:{type:String,value:"aria-pressed",observer:"_ariaActiveAttributeChanged"}},listeners:{down:"_downHandler",up:"_upHandler",tap:"_tapHandler"},observers:["_focusChanged(focused)","_activeChanged(active, ariaActiveAttribute)"],keyBindings:{"enter:keydown":"_asyncClick","space:keydown":"_spaceKeyDownHandler","space:keyup":"_spaceKeyUpHandler"},_mouseEventRe:/^mouse/,_tapHandler:function(){this.toggles?this._userActivate(!this.active):this.active=!1},_focusChanged:function(t){this._detectKeyboardFocus(t),t||this._setPressed(!1)},_detectKeyboardFocus:function(t){this._setReceivedFocusFromKeyboard(!this.pointerDown&&t)},_userActivate:function(t){this.active!==t&&(this.active=t,this.fire("change"))},_downHandler:function(t){this._setPointerDown(!0),this._setPressed(!0),this._setReceivedFocusFromKeyboard(!1)},_upHandler:function(){this._setPointerDown(!1),this._setPressed(!1)},_spaceKeyDownHandler:function(t){var e=t.detail.keyboardEvent,r=j(e).localTarget;this.isLightDescendant(r)||(e.preventDefault(),e.stopImmediatePropagation(),this._setPressed(!0))},_spaceKeyUpHandler:function(t){var e=t.detail.keyboardEvent,r=j(e).localTarget;this.isLightDescendant(r)||(this.pressed&&this._asyncClick(),this._setPressed(!1))},_asyncClick:function(){this.async(function(){this.click()},1)},_pressedChanged:function(t){this._changedButtonState()},_ariaActiveAttributeChanged:function(t,e){e&&e!=t&&this.hasAttribute(e)&&this.removeAttribute(e)},_activeChanged:function(t,e){this.toggles?this.setAttribute(this.ariaActiveAttribute,t?"true":"false"):this.removeAttribute(this.ariaActiveAttribute),this._changedButtonState()},_controlStateChanged:function(){this.disabled?this._setPressed(!1):this._changedButtonState()},_changedButtonState:function(){this._buttonStateChanged&&this._buttonStateChanged()}},Dm=[ft,lu];var Pe={distance:function(t,e,r,i){var n=t-r,o=e-i;return Math.sqrt(n*n+o*o)},now:window.performance&&window.performance.now?window.performance.now.bind(window.performance):Date.now};function Nm(t){this.element=t,this.width=this.boundingRect.width,this.height=this.boundingRect.height,this.size=Math.max(this.width,this.height)}Nm.prototype={get boundingRect(){return this.element.getBoundingClientRect()},furthestCornerDistanceFrom:function(t,e){var r=Pe.distance(t,e,0,0),i=Pe.distance(t,e,this.width,0),n=Pe.distance(t,e,0,this.height),o=Pe.distance(t,e,this.width,this.height);return Math.max(r,i,n,o)}};function jt(t){this.element=t,this.color=window.getComputedStyle(t).color,this.wave=document.createElement("div"),this.waveContainer=document.createElement("div"),this.wave.style.backgroundColor=this.color,this.wave.classList.add("wave"),this.waveContainer.classList.add("wave-container"),j(this.waveContainer).appendChild(this.wave),this.resetInteractionState()}jt.MAX_RADIUS=300;jt.prototype={get recenters(){return this.element.recenters},get center(){return this.element.center},get mouseDownElapsed(){var t;return this.mouseDownStart?(t=Pe.now()-this.mouseDownStart,this.mouseUpStart&&(t-=this.mouseUpElapsed),t):0},get mouseUpElapsed(){return this.mouseUpStart?Pe.now()-this.mouseUpStart:0},get mouseDownElapsedSeconds(){return this.mouseDownElapsed/1e3},get mouseUpElapsedSeconds(){return this.mouseUpElapsed/1e3},get mouseInteractionSeconds(){return this.mouseDownElapsedSeconds+this.mouseUpElapsedSeconds},get initialOpacity(){return this.element.initialOpacity},get opacityDecayVelocity(){return this.element.opacityDecayVelocity},get radius(){var t=this.containerMetrics.width*this.containerMetrics.width,e=this.containerMetrics.height*this.containerMetrics.height,r=Math.min(Math.sqrt(t+e),jt.MAX_RADIUS)*1.1+5,i=1.1-.2*(r/jt.MAX_RADIUS),n=this.mouseInteractionSeconds/i,o=r*(1-Math.pow(80,-n));return Math.abs(o)},get opacity(){return this.mouseUpStart?Math.max(0,this.initialOpacity-this.mouseUpElapsedSeconds*this.opacityDecayVelocity):this.initialOpacity},get outerOpacity(){var t=this.mouseUpElapsedSeconds*.3,e=this.opacity;return Math.max(0,Math.min(t,e))},get isOpacityFullyDecayed(){return this.opacity<.01&&this.radius>=Math.min(this.maxRadius,jt.MAX_RADIUS)},get isRestingAtMaxRadius(){return this.opacity>=this.initialOpacity&&this.radius>=Math.min(this.maxRadius,jt.MAX_RADIUS)},get isAnimationComplete(){return this.mouseUpStart?this.isOpacityFullyDecayed:this.isRestingAtMaxRadius},get translationFraction(){return Math.min(1,this.radius/this.containerMetrics.size*2/Math.sqrt(2))},get xNow(){return this.xEnd?this.xStart+this.translationFraction*(this.xEnd-this.xStart):this.xStart},get yNow(){return this.yEnd?this.yStart+this.translationFraction*(this.yEnd-this.yStart):this.yStart},get isMouseDown(){return this.mouseDownStart&&!this.mouseUpStart},resetInteractionState:function(){this.maxRadius=0,this.mouseDownStart=0,this.mouseUpStart=0,this.xStart=0,this.yStart=0,this.xEnd=0,this.yEnd=0,this.slideDistance=0,this.containerMetrics=new Nm(this.element)},draw:function(){var t,e,r;this.wave.style.opacity=this.opacity,t=this.radius/(this.containerMetrics.size/2),e=this.xNow-this.containerMetrics.width/2,r=this.yNow-this.containerMetrics.height/2,this.waveContainer.style.webkitTransform="translate("+e+"px, "+r+"px)",this.waveContainer.style.transform="translate3d("+e+"px, "+r+"px, 0)",this.wave.style.webkitTransform="scale("+t+","+t+")",this.wave.style.transform="scale3d("+t+","+t+",1)"},downAction:function(t){var e=this.containerMetrics.width/2,r=this.containerMetrics.height/2;this.resetInteractionState(),this.mouseDownStart=Pe.now(),this.center?(this.xStart=e,this.yStart=r,this.slideDistance=Pe.distance(this.xStart,this.yStart,this.xEnd,this.yEnd)):(this.xStart=t?t.detail.x-this.containerMetrics.boundingRect.left:this.containerMetrics.width/2,this.yStart=t?t.detail.y-this.containerMetrics.boundingRect.top:this.containerMetrics.height/2),this.recenters&&(this.xEnd=e,this.yEnd=r,this.slideDistance=Pe.distance(this.xStart,this.yStart,this.xEnd,this.yEnd)),this.maxRadius=this.containerMetrics.furthestCornerDistanceFrom(this.xStart,this.yStart),this.waveContainer.style.top=(this.containerMetrics.height-this.containerMetrics.size)/2+"px",this.waveContainer.style.left=(this.containerMetrics.width-this.containerMetrics.size)/2+"px",this.waveContainer.style.width=this.containerMetrics.size+"px",this.waveContainer.style.height=this.containerMetrics.size+"px"},upAction:function(t){!this.isMouseDown||(this.mouseUpStart=Pe.now())},remove:function(){j(j(this.waveContainer).parentNode).removeChild(this.waveContainer)}};K({_template:I`
    <style>
      :host {
        display: block;
        position: absolute;
        border-radius: inherit;
        overflow: hidden;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;

        /* See PolymerElements/paper-behaviors/issues/34. On non-Chrome browsers,
         * creating a node (with a position:absolute) in the middle of an event
         * handler "interrupts" that event handler (which happens when the
         * ripple is created on demand) */
        pointer-events: none;
      }

      :host([animating]) {
        /* This resolves a rendering issue in Chrome (as of 40) where the
           ripple is not properly clipped by its parent (which may have
           rounded corners). See: http://jsbin.com/temexa/4

           Note: We only apply this style conditionally. Otherwise, the browser
           will create a new compositing layer for every ripple element on the
           page, and that would be bad. */
        -webkit-transform: translate(0, 0);
        transform: translate3d(0, 0, 0);
      }

      #background,
      #waves,
      .wave-container,
      .wave {
        pointer-events: none;
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
      }

      #background,
      .wave {
        opacity: 0;
      }

      #waves,
      .wave {
        overflow: hidden;
      }

      .wave-container,
      .wave {
        border-radius: 50%;
      }

      :host(.circle) #background,
      :host(.circle) #waves {
        border-radius: 50%;
      }

      :host(.circle) .wave-container {
        overflow: hidden;
      }
    </style>

    <div id="background"></div>
    <div id="waves"></div>
`,is:"paper-ripple",behaviors:[ft],properties:{initialOpacity:{type:Number,value:.25},opacityDecayVelocity:{type:Number,value:.8},recenters:{type:Boolean,value:!1},center:{type:Boolean,value:!1},ripples:{type:Array,value:function(){return[]}},animating:{type:Boolean,readOnly:!0,reflectToAttribute:!0,value:!1},holdDown:{type:Boolean,value:!1,observer:"_holdDownChanged"},noink:{type:Boolean,value:!1},_animating:{type:Boolean},_boundAnimate:{type:Function,value:function(){return this.animate.bind(this)}}},get target(){return this.keyEventTarget},keyBindings:{"enter:keydown":"_onEnterKeydown","space:keydown":"_onSpaceKeydown","space:keyup":"_onSpaceKeyup"},attached:function(){j(this).parentNode.nodeType==11?this.keyEventTarget=j(this).getOwnerRoot().host:this.keyEventTarget=j(this).parentNode;var t=this.keyEventTarget;this.listen(t,"up","uiUpAction"),this.listen(t,"down","uiDownAction")},detached:function(){this.unlisten(this.keyEventTarget,"up","uiUpAction"),this.unlisten(this.keyEventTarget,"down","uiDownAction"),this.keyEventTarget=null},get shouldKeepAnimating(){for(var t=0;t<this.ripples.length;++t)if(!this.ripples[t].isAnimationComplete)return!0;return!1},simulatedRipple:function(){this.downAction(null),this.async(function(){this.upAction()},1)},uiDownAction:function(t){this.noink||this.downAction(t)},downAction:function(t){if(!(this.holdDown&&this.ripples.length>0)){var e=this.addRipple();e.downAction(t),this._animating||(this._animating=!0,this.animate())}},uiUpAction:function(t){this.noink||this.upAction(t)},upAction:function(t){this.holdDown||(this.ripples.forEach(function(e){e.upAction(t)}),this._animating=!0,this.animate())},onAnimationComplete:function(){this._animating=!1,this.$.background.style.backgroundColor="",this.fire("transitionend")},addRipple:function(){var t=new jt(this);return j(this.$.waves).appendChild(t.waveContainer),this.$.background.style.backgroundColor=t.color,this.ripples.push(t),this._setAnimating(!0),t},removeRipple:function(t){var e=this.ripples.indexOf(t);e<0||(this.ripples.splice(e,1),t.remove(),this.ripples.length||this._setAnimating(!1))},animate:function(){if(!!this._animating){var t,e;for(t=0;t<this.ripples.length;++t)e=this.ripples[t],e.draw(),this.$.background.style.opacity=e.outerOpacity,e.isOpacityFullyDecayed&&!e.isRestingAtMaxRadius&&this.removeRipple(e);!this.shouldKeepAnimating&&this.ripples.length===0?this.onAnimationComplete():window.requestAnimationFrame(this._boundAnimate)}},animateRipple:function(){return this.animate()},_onEnterKeydown:function(){this.uiDownAction(),this.async(this.uiUpAction,1)},_onSpaceKeydown:function(){this.uiDownAction()},_onSpaceKeyup:function(){this.uiUpAction()},_holdDownChanged:function(t,e){e!==void 0&&(t?this.downAction():this.upAction())}});var uu={properties:{noink:{type:Boolean,observer:"_noinkChanged"},_rippleContainer:{type:Object}},_buttonStateChanged:function(){this.focused&&this.ensureRipple()},_downHandler:function(t){lu._downHandler.call(this,t),this.pressed&&this.ensureRipple(t)},ensureRipple:function(t){if(!this.hasRipple()){this._ripple=this._createRipple(),this._ripple.noink=this.noink;var e=this._rippleContainer||this.root;if(e&&j(e).appendChild(this._ripple),t){var r=j(this._rippleContainer||this),i=j(t).rootTarget;r.deepContains(i)&&this._ripple.uiDownAction(t)}}},getRipple:function(){return this.ensureRipple(),this._ripple},hasRipple:function(){return Boolean(this._ripple)},_createRipple:function(){var t=document.createElement("paper-ripple");return t},_noinkChanged:function(t){this.hasRipple()&&(this._ripple.noink=t)}};var Ko={observers:["_focusedChanged(receivedFocusFromKeyboard)"],_focusedChanged:function(t){t&&this.ensureRipple(),this.hasRipple()&&(this._ripple.holdDown=t)},_createRipple:function(){var t=uu._createRipple();return t.id="ink",t.setAttribute("center",""),t.classList.add("circle"),t}},Im=[Dm,Li,uu,Ko];var Qo={properties:{value:{type:Number,value:0,notify:!0,reflectToAttribute:!0},min:{type:Number,value:0,notify:!0},max:{type:Number,value:100,notify:!0},step:{type:Number,value:1,notify:!0},ratio:{type:Number,value:0,readOnly:!0,notify:!0}},observers:["_update(value, min, max, step)"],_calcRatio:function(t){return(this._clampValue(t)-this.min)/(this.max-this.min)},_clampValue:function(t){return Math.min(this.max,Math.max(this.min,this._calcStep(t)))},_calcStep:function(t){if(t=parseFloat(t),!this.step)return t;var e=Math.round((t-this.min)/this.step);return this.step<1?e/(1/this.step)+this.min:e*this.step+this.min},_validateValue:function(){var t=this._clampValue(this.value);return this.value=this.oldValue=isNaN(t)?this.oldValue:t,this.value!==t},_update:function(){this._validateValue(),this._setRatio(this._calcRatio(this.value)*100)}};var Mm=I`
<custom-style>
  <style is="custom-style">
    [hidden] {
      display: none !important;
    }
  </style>
</custom-style>
<custom-style>
  <style is="custom-style">
    html {

      --layout: {
        display: -ms-flexbox;
        display: -webkit-flex;
        display: flex;
      };

      --layout-inline: {
        display: -ms-inline-flexbox;
        display: -webkit-inline-flex;
        display: inline-flex;
      };

      --layout-horizontal: {
        @apply --layout;

        -ms-flex-direction: row;
        -webkit-flex-direction: row;
        flex-direction: row;
      };

      --layout-horizontal-reverse: {
        @apply --layout;

        -ms-flex-direction: row-reverse;
        -webkit-flex-direction: row-reverse;
        flex-direction: row-reverse;
      };

      --layout-vertical: {
        @apply --layout;

        -ms-flex-direction: column;
        -webkit-flex-direction: column;
        flex-direction: column;
      };

      --layout-vertical-reverse: {
        @apply --layout;

        -ms-flex-direction: column-reverse;
        -webkit-flex-direction: column-reverse;
        flex-direction: column-reverse;
      };

      --layout-wrap: {
        -ms-flex-wrap: wrap;
        -webkit-flex-wrap: wrap;
        flex-wrap: wrap;
      };

      --layout-wrap-reverse: {
        -ms-flex-wrap: wrap-reverse;
        -webkit-flex-wrap: wrap-reverse;
        flex-wrap: wrap-reverse;
      };

      --layout-flex-auto: {
        -ms-flex: 1 1 auto;
        -webkit-flex: 1 1 auto;
        flex: 1 1 auto;
      };

      --layout-flex-none: {
        -ms-flex: none;
        -webkit-flex: none;
        flex: none;
      };

      --layout-flex: {
        -ms-flex: 1 1 0.000000001px;
        -webkit-flex: 1;
        flex: 1;
        -webkit-flex-basis: 0.000000001px;
        flex-basis: 0.000000001px;
      };

      --layout-flex-2: {
        -ms-flex: 2;
        -webkit-flex: 2;
        flex: 2;
      };

      --layout-flex-3: {
        -ms-flex: 3;
        -webkit-flex: 3;
        flex: 3;
      };

      --layout-flex-4: {
        -ms-flex: 4;
        -webkit-flex: 4;
        flex: 4;
      };

      --layout-flex-5: {
        -ms-flex: 5;
        -webkit-flex: 5;
        flex: 5;
      };

      --layout-flex-6: {
        -ms-flex: 6;
        -webkit-flex: 6;
        flex: 6;
      };

      --layout-flex-7: {
        -ms-flex: 7;
        -webkit-flex: 7;
        flex: 7;
      };

      --layout-flex-8: {
        -ms-flex: 8;
        -webkit-flex: 8;
        flex: 8;
      };

      --layout-flex-9: {
        -ms-flex: 9;
        -webkit-flex: 9;
        flex: 9;
      };

      --layout-flex-10: {
        -ms-flex: 10;
        -webkit-flex: 10;
        flex: 10;
      };

      --layout-flex-11: {
        -ms-flex: 11;
        -webkit-flex: 11;
        flex: 11;
      };

      --layout-flex-12: {
        -ms-flex: 12;
        -webkit-flex: 12;
        flex: 12;
      };

      /* alignment in cross axis */

      --layout-start: {
        -ms-flex-align: start;
        -webkit-align-items: flex-start;
        align-items: flex-start;
      };

      --layout-center: {
        -ms-flex-align: center;
        -webkit-align-items: center;
        align-items: center;
      };

      --layout-end: {
        -ms-flex-align: end;
        -webkit-align-items: flex-end;
        align-items: flex-end;
      };

      --layout-baseline: {
        -ms-flex-align: baseline;
        -webkit-align-items: baseline;
        align-items: baseline;
      };

      /* alignment in main axis */

      --layout-start-justified: {
        -ms-flex-pack: start;
        -webkit-justify-content: flex-start;
        justify-content: flex-start;
      };

      --layout-center-justified: {
        -ms-flex-pack: center;
        -webkit-justify-content: center;
        justify-content: center;
      };

      --layout-end-justified: {
        -ms-flex-pack: end;
        -webkit-justify-content: flex-end;
        justify-content: flex-end;
      };

      --layout-around-justified: {
        -ms-flex-pack: distribute;
        -webkit-justify-content: space-around;
        justify-content: space-around;
      };

      --layout-justified: {
        -ms-flex-pack: justify;
        -webkit-justify-content: space-between;
        justify-content: space-between;
      };

      --layout-center-center: {
        @apply --layout-center;
        @apply --layout-center-justified;
      };

      /* self alignment */

      --layout-self-start: {
        -ms-align-self: flex-start;
        -webkit-align-self: flex-start;
        align-self: flex-start;
      };

      --layout-self-center: {
        -ms-align-self: center;
        -webkit-align-self: center;
        align-self: center;
      };

      --layout-self-end: {
        -ms-align-self: flex-end;
        -webkit-align-self: flex-end;
        align-self: flex-end;
      };

      --layout-self-stretch: {
        -ms-align-self: stretch;
        -webkit-align-self: stretch;
        align-self: stretch;
      };

      --layout-self-baseline: {
        -ms-align-self: baseline;
        -webkit-align-self: baseline;
        align-self: baseline;
      };

      /* multi-line alignment in main axis */

      --layout-start-aligned: {
        -ms-flex-line-pack: start;  /* IE10 */
        -ms-align-content: flex-start;
        -webkit-align-content: flex-start;
        align-content: flex-start;
      };

      --layout-end-aligned: {
        -ms-flex-line-pack: end;  /* IE10 */
        -ms-align-content: flex-end;
        -webkit-align-content: flex-end;
        align-content: flex-end;
      };

      --layout-center-aligned: {
        -ms-flex-line-pack: center;  /* IE10 */
        -ms-align-content: center;
        -webkit-align-content: center;
        align-content: center;
      };

      --layout-between-aligned: {
        -ms-flex-line-pack: justify;  /* IE10 */
        -ms-align-content: space-between;
        -webkit-align-content: space-between;
        align-content: space-between;
      };

      --layout-around-aligned: {
        -ms-flex-line-pack: distribute;  /* IE10 */
        -ms-align-content: space-around;
        -webkit-align-content: space-around;
        align-content: space-around;
      };

      /*******************************
                Other Layout
      *******************************/

      --layout-block: {
        display: block;
      };

      --layout-invisible: {
        visibility: hidden !important;
      };

      --layout-relative: {
        position: relative;
      };

      --layout-fit: {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
      };

      --layout-scroll: {
        -webkit-overflow-scrolling: touch;
        overflow: auto;
      };

      --layout-fullbleed: {
        margin: 0;
        height: 100vh;
      };

      /* fixed position */

      --layout-fixed-top: {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
      };

      --layout-fixed-right: {
        position: fixed;
        top: 0;
        right: 0;
        bottom: 0;
      };

      --layout-fixed-bottom: {
        position: fixed;
        right: 0;
        bottom: 0;
        left: 0;
      };

      --layout-fixed-left: {
        position: fixed;
        top: 0;
        bottom: 0;
        left: 0;
      };

    }
  </style>
</custom-style>`;Mm.setAttribute("style","display: none;");document.head.appendChild(Mm.content);var Rm=document.createElement("style");Rm.textContent="[hidden] { display: none !important; }";document.head.appendChild(Rm);var jm=I`
<custom-style>
  <style is="custom-style">
    html {

      /* Material Design color palette for Google products */

      --google-red-100: #f4c7c3;
      --google-red-300: #e67c73;
      --google-red-500: #db4437;
      --google-red-700: #c53929;

      --google-blue-100: #c6dafc;
      --google-blue-300: #7baaf7;
      --google-blue-500: #4285f4;
      --google-blue-700: #3367d6;

      --google-green-100: #b7e1cd;
      --google-green-300: #57bb8a;
      --google-green-500: #0f9d58;
      --google-green-700: #0b8043;

      --google-yellow-100: #fce8b2;
      --google-yellow-300: #f7cb4d;
      --google-yellow-500: #f4b400;
      --google-yellow-700: #f09300;

      --google-grey-100: #f5f5f5;
      --google-grey-300: #e0e0e0;
      --google-grey-500: #9e9e9e;
      --google-grey-700: #616161;

      /* Material Design color palette from online spec document */

      --paper-red-50: #ffebee;
      --paper-red-100: #ffcdd2;
      --paper-red-200: #ef9a9a;
      --paper-red-300: #e57373;
      --paper-red-400: #ef5350;
      --paper-red-500: #f44336;
      --paper-red-600: #e53935;
      --paper-red-700: #d32f2f;
      --paper-red-800: #c62828;
      --paper-red-900: #b71c1c;
      --paper-red-a100: #ff8a80;
      --paper-red-a200: #ff5252;
      --paper-red-a400: #ff1744;
      --paper-red-a700: #d50000;

      --paper-pink-50: #fce4ec;
      --paper-pink-100: #f8bbd0;
      --paper-pink-200: #f48fb1;
      --paper-pink-300: #f06292;
      --paper-pink-400: #ec407a;
      --paper-pink-500: #e91e63;
      --paper-pink-600: #d81b60;
      --paper-pink-700: #c2185b;
      --paper-pink-800: #ad1457;
      --paper-pink-900: #880e4f;
      --paper-pink-a100: #ff80ab;
      --paper-pink-a200: #ff4081;
      --paper-pink-a400: #f50057;
      --paper-pink-a700: #c51162;

      --paper-purple-50: #f3e5f5;
      --paper-purple-100: #e1bee7;
      --paper-purple-200: #ce93d8;
      --paper-purple-300: #ba68c8;
      --paper-purple-400: #ab47bc;
      --paper-purple-500: #9c27b0;
      --paper-purple-600: #8e24aa;
      --paper-purple-700: #7b1fa2;
      --paper-purple-800: #6a1b9a;
      --paper-purple-900: #4a148c;
      --paper-purple-a100: #ea80fc;
      --paper-purple-a200: #e040fb;
      --paper-purple-a400: #d500f9;
      --paper-purple-a700: #aa00ff;

      --paper-deep-purple-50: #ede7f6;
      --paper-deep-purple-100: #d1c4e9;
      --paper-deep-purple-200: #b39ddb;
      --paper-deep-purple-300: #9575cd;
      --paper-deep-purple-400: #7e57c2;
      --paper-deep-purple-500: #673ab7;
      --paper-deep-purple-600: #5e35b1;
      --paper-deep-purple-700: #512da8;
      --paper-deep-purple-800: #4527a0;
      --paper-deep-purple-900: #311b92;
      --paper-deep-purple-a100: #b388ff;
      --paper-deep-purple-a200: #7c4dff;
      --paper-deep-purple-a400: #651fff;
      --paper-deep-purple-a700: #6200ea;

      --paper-indigo-50: #e8eaf6;
      --paper-indigo-100: #c5cae9;
      --paper-indigo-200: #9fa8da;
      --paper-indigo-300: #7986cb;
      --paper-indigo-400: #5c6bc0;
      --paper-indigo-500: #3f51b5;
      --paper-indigo-600: #3949ab;
      --paper-indigo-700: #303f9f;
      --paper-indigo-800: #283593;
      --paper-indigo-900: #1a237e;
      --paper-indigo-a100: #8c9eff;
      --paper-indigo-a200: #536dfe;
      --paper-indigo-a400: #3d5afe;
      --paper-indigo-a700: #304ffe;

      --paper-blue-50: #e3f2fd;
      --paper-blue-100: #bbdefb;
      --paper-blue-200: #90caf9;
      --paper-blue-300: #64b5f6;
      --paper-blue-400: #42a5f5;
      --paper-blue-500: #2196f3;
      --paper-blue-600: #1e88e5;
      --paper-blue-700: #1976d2;
      --paper-blue-800: #1565c0;
      --paper-blue-900: #0d47a1;
      --paper-blue-a100: #82b1ff;
      --paper-blue-a200: #448aff;
      --paper-blue-a400: #2979ff;
      --paper-blue-a700: #2962ff;

      --paper-light-blue-50: #e1f5fe;
      --paper-light-blue-100: #b3e5fc;
      --paper-light-blue-200: #81d4fa;
      --paper-light-blue-300: #4fc3f7;
      --paper-light-blue-400: #29b6f6;
      --paper-light-blue-500: #03a9f4;
      --paper-light-blue-600: #039be5;
      --paper-light-blue-700: #0288d1;
      --paper-light-blue-800: #0277bd;
      --paper-light-blue-900: #01579b;
      --paper-light-blue-a100: #80d8ff;
      --paper-light-blue-a200: #40c4ff;
      --paper-light-blue-a400: #00b0ff;
      --paper-light-blue-a700: #0091ea;

      --paper-cyan-50: #e0f7fa;
      --paper-cyan-100: #b2ebf2;
      --paper-cyan-200: #80deea;
      --paper-cyan-300: #4dd0e1;
      --paper-cyan-400: #26c6da;
      --paper-cyan-500: #00bcd4;
      --paper-cyan-600: #00acc1;
      --paper-cyan-700: #0097a7;
      --paper-cyan-800: #00838f;
      --paper-cyan-900: #006064;
      --paper-cyan-a100: #84ffff;
      --paper-cyan-a200: #18ffff;
      --paper-cyan-a400: #00e5ff;
      --paper-cyan-a700: #00b8d4;

      --paper-teal-50: #e0f2f1;
      --paper-teal-100: #b2dfdb;
      --paper-teal-200: #80cbc4;
      --paper-teal-300: #4db6ac;
      --paper-teal-400: #26a69a;
      --paper-teal-500: #009688;
      --paper-teal-600: #00897b;
      --paper-teal-700: #00796b;
      --paper-teal-800: #00695c;
      --paper-teal-900: #004d40;
      --paper-teal-a100: #a7ffeb;
      --paper-teal-a200: #64ffda;
      --paper-teal-a400: #1de9b6;
      --paper-teal-a700: #00bfa5;

      --paper-green-50: #e8f5e9;
      --paper-green-100: #c8e6c9;
      --paper-green-200: #a5d6a7;
      --paper-green-300: #81c784;
      --paper-green-400: #66bb6a;
      --paper-green-500: #4caf50;
      --paper-green-600: #43a047;
      --paper-green-700: #388e3c;
      --paper-green-800: #2e7d32;
      --paper-green-900: #1b5e20;
      --paper-green-a100: #b9f6ca;
      --paper-green-a200: #69f0ae;
      --paper-green-a400: #00e676;
      --paper-green-a700: #00c853;

      --paper-light-green-50: #f1f8e9;
      --paper-light-green-100: #dcedc8;
      --paper-light-green-200: #c5e1a5;
      --paper-light-green-300: #aed581;
      --paper-light-green-400: #9ccc65;
      --paper-light-green-500: #8bc34a;
      --paper-light-green-600: #7cb342;
      --paper-light-green-700: #689f38;
      --paper-light-green-800: #558b2f;
      --paper-light-green-900: #33691e;
      --paper-light-green-a100: #ccff90;
      --paper-light-green-a200: #b2ff59;
      --paper-light-green-a400: #76ff03;
      --paper-light-green-a700: #64dd17;

      --paper-lime-50: #f9fbe7;
      --paper-lime-100: #f0f4c3;
      --paper-lime-200: #e6ee9c;
      --paper-lime-300: #dce775;
      --paper-lime-400: #d4e157;
      --paper-lime-500: #cddc39;
      --paper-lime-600: #c0ca33;
      --paper-lime-700: #afb42b;
      --paper-lime-800: #9e9d24;
      --paper-lime-900: #827717;
      --paper-lime-a100: #f4ff81;
      --paper-lime-a200: #eeff41;
      --paper-lime-a400: #c6ff00;
      --paper-lime-a700: #aeea00;

      --paper-yellow-50: #fffde7;
      --paper-yellow-100: #fff9c4;
      --paper-yellow-200: #fff59d;
      --paper-yellow-300: #fff176;
      --paper-yellow-400: #ffee58;
      --paper-yellow-500: #ffeb3b;
      --paper-yellow-600: #fdd835;
      --paper-yellow-700: #fbc02d;
      --paper-yellow-800: #f9a825;
      --paper-yellow-900: #f57f17;
      --paper-yellow-a100: #ffff8d;
      --paper-yellow-a200: #ffff00;
      --paper-yellow-a400: #ffea00;
      --paper-yellow-a700: #ffd600;

      --paper-amber-50: #fff8e1;
      --paper-amber-100: #ffecb3;
      --paper-amber-200: #ffe082;
      --paper-amber-300: #ffd54f;
      --paper-amber-400: #ffca28;
      --paper-amber-500: #ffc107;
      --paper-amber-600: #ffb300;
      --paper-amber-700: #ffa000;
      --paper-amber-800: #ff8f00;
      --paper-amber-900: #ff6f00;
      --paper-amber-a100: #ffe57f;
      --paper-amber-a200: #ffd740;
      --paper-amber-a400: #ffc400;
      --paper-amber-a700: #ffab00;

      --paper-orange-50: #fff3e0;
      --paper-orange-100: #ffe0b2;
      --paper-orange-200: #ffcc80;
      --paper-orange-300: #ffb74d;
      --paper-orange-400: #ffa726;
      --paper-orange-500: #ff9800;
      --paper-orange-600: #fb8c00;
      --paper-orange-700: #f57c00;
      --paper-orange-800: #ef6c00;
      --paper-orange-900: #e65100;
      --paper-orange-a100: #ffd180;
      --paper-orange-a200: #ffab40;
      --paper-orange-a400: #ff9100;
      --paper-orange-a700: #ff6500;

      --paper-deep-orange-50: #fbe9e7;
      --paper-deep-orange-100: #ffccbc;
      --paper-deep-orange-200: #ffab91;
      --paper-deep-orange-300: #ff8a65;
      --paper-deep-orange-400: #ff7043;
      --paper-deep-orange-500: #ff5722;
      --paper-deep-orange-600: #f4511e;
      --paper-deep-orange-700: #e64a19;
      --paper-deep-orange-800: #d84315;
      --paper-deep-orange-900: #bf360c;
      --paper-deep-orange-a100: #ff9e80;
      --paper-deep-orange-a200: #ff6e40;
      --paper-deep-orange-a400: #ff3d00;
      --paper-deep-orange-a700: #dd2c00;

      --paper-brown-50: #efebe9;
      --paper-brown-100: #d7ccc8;
      --paper-brown-200: #bcaaa4;
      --paper-brown-300: #a1887f;
      --paper-brown-400: #8d6e63;
      --paper-brown-500: #795548;
      --paper-brown-600: #6d4c41;
      --paper-brown-700: #5d4037;
      --paper-brown-800: #4e342e;
      --paper-brown-900: #3e2723;

      --paper-grey-50: #fafafa;
      --paper-grey-100: #f5f5f5;
      --paper-grey-200: #eeeeee;
      --paper-grey-300: #e0e0e0;
      --paper-grey-400: #bdbdbd;
      --paper-grey-500: #9e9e9e;
      --paper-grey-600: #757575;
      --paper-grey-700: #616161;
      --paper-grey-800: #424242;
      --paper-grey-900: #212121;

      --paper-blue-grey-50: #eceff1;
      --paper-blue-grey-100: #cfd8dc;
      --paper-blue-grey-200: #b0bec5;
      --paper-blue-grey-300: #90a4ae;
      --paper-blue-grey-400: #78909c;
      --paper-blue-grey-500: #607d8b;
      --paper-blue-grey-600: #546e7a;
      --paper-blue-grey-700: #455a64;
      --paper-blue-grey-800: #37474f;
      --paper-blue-grey-900: #263238;

      /* opacity for dark text on a light background */
      --dark-divider-opacity: 0.12;
      --dark-disabled-opacity: 0.38; /* or hint text or icon */
      --dark-secondary-opacity: 0.54;
      --dark-primary-opacity: 0.87;

      /* opacity for light text on a dark background */
      --light-divider-opacity: 0.12;
      --light-disabled-opacity: 0.3; /* or hint text or icon */
      --light-secondary-opacity: 0.7;
      --light-primary-opacity: 1.0;

    }

  </style>
</custom-style>
`;jm.setAttribute("style","display: none;");document.head.appendChild(jm.content);K({_template:I`
    <style>
      :host {
        display: block;
        width: 200px;
        position: relative;
        overflow: hidden;
      }

      :host([hidden]), [hidden] {
        display: none !important;
      }

      #progressContainer {
        @apply --paper-progress-container;
        position: relative;
      }

      #progressContainer,
      /* the stripe for the indeterminate animation*/
      .indeterminate::after {
        height: var(--paper-progress-height, 4px);
      }

      #primaryProgress,
      #secondaryProgress,
      .indeterminate::after {
        @apply --layout-fit;
      }

      #progressContainer,
      .indeterminate::after {
        background: var(--paper-progress-container-color, var(--google-grey-300));
      }

      :host(.transiting) #primaryProgress,
      :host(.transiting) #secondaryProgress {
        -webkit-transition-property: -webkit-transform;
        transition-property: transform;

        /* Duration */
        -webkit-transition-duration: var(--paper-progress-transition-duration, 0.08s);
        transition-duration: var(--paper-progress-transition-duration, 0.08s);

        /* Timing function */
        -webkit-transition-timing-function: var(--paper-progress-transition-timing-function, ease);
        transition-timing-function: var(--paper-progress-transition-timing-function, ease);

        /* Delay */
        -webkit-transition-delay: var(--paper-progress-transition-delay, 0s);
        transition-delay: var(--paper-progress-transition-delay, 0s);
      }

      #primaryProgress,
      #secondaryProgress {
        @apply --layout-fit;
        -webkit-transform-origin: left center;
        transform-origin: left center;
        -webkit-transform: scaleX(0);
        transform: scaleX(0);
        will-change: transform;
      }

      #primaryProgress {
        background: var(--paper-progress-active-color, var(--google-green-500));
      }

      #secondaryProgress {
        background: var(--paper-progress-secondary-color, var(--google-green-100));
      }

      :host([disabled]) #primaryProgress {
        background: var(--paper-progress-disabled-active-color, var(--google-grey-500));
      }

      :host([disabled]) #secondaryProgress {
        background: var(--paper-progress-disabled-secondary-color, var(--google-grey-300));
      }

      :host(:not([disabled])) #primaryProgress.indeterminate {
        -webkit-transform-origin: right center;
        transform-origin: right center;
        -webkit-animation: indeterminate-bar var(--paper-progress-indeterminate-cycle-duration, 2s) linear infinite;
        animation: indeterminate-bar var(--paper-progress-indeterminate-cycle-duration, 2s) linear infinite;
      }

      :host(:not([disabled])) #primaryProgress.indeterminate::after {
        content: "";
        -webkit-transform-origin: center center;
        transform-origin: center center;

        -webkit-animation: indeterminate-splitter var(--paper-progress-indeterminate-cycle-duration, 2s) linear infinite;
        animation: indeterminate-splitter var(--paper-progress-indeterminate-cycle-duration, 2s) linear infinite;
      }

      @-webkit-keyframes indeterminate-bar {
        0% {
          -webkit-transform: scaleX(1) translateX(-100%);
        }
        50% {
          -webkit-transform: scaleX(1) translateX(0%);
        }
        75% {
          -webkit-transform: scaleX(1) translateX(0%);
          -webkit-animation-timing-function: cubic-bezier(.28,.62,.37,.91);
        }
        100% {
          -webkit-transform: scaleX(0) translateX(0%);
        }
      }

      @-webkit-keyframes indeterminate-splitter {
        0% {
          -webkit-transform: scaleX(.75) translateX(-125%);
        }
        30% {
          -webkit-transform: scaleX(.75) translateX(-125%);
          -webkit-animation-timing-function: cubic-bezier(.42,0,.6,.8);
        }
        90% {
          -webkit-transform: scaleX(.75) translateX(125%);
        }
        100% {
          -webkit-transform: scaleX(.75) translateX(125%);
        }
      }

      @keyframes indeterminate-bar {
        0% {
          transform: scaleX(1) translateX(-100%);
        }
        50% {
          transform: scaleX(1) translateX(0%);
        }
        75% {
          transform: scaleX(1) translateX(0%);
          animation-timing-function: cubic-bezier(.28,.62,.37,.91);
        }
        100% {
          transform: scaleX(0) translateX(0%);
        }
      }

      @keyframes indeterminate-splitter {
        0% {
          transform: scaleX(.75) translateX(-125%);
        }
        30% {
          transform: scaleX(.75) translateX(-125%);
          animation-timing-function: cubic-bezier(.42,0,.6,.8);
        }
        90% {
          transform: scaleX(.75) translateX(125%);
        }
        100% {
          transform: scaleX(.75) translateX(125%);
        }
      }
    </style>

    <div id="progressContainer">
      <div id="secondaryProgress" hidden\$="[[_hideSecondaryProgress(secondaryRatio)]]"></div>
      <div id="primaryProgress"></div>
    </div>
`,is:"paper-progress",behaviors:[Qo],properties:{secondaryProgress:{type:Number,value:0},secondaryRatio:{type:Number,value:0,readOnly:!0},indeterminate:{type:Boolean,value:!1,observer:"_toggleIndeterminate"},disabled:{type:Boolean,value:!1,reflectToAttribute:!0,observer:"_disabledChanged"}},observers:["_progressChanged(secondaryProgress, value, min, max, indeterminate)"],hostAttributes:{role:"progressbar"},_toggleIndeterminate:function(t){this.toggleClass("indeterminate",t,this.$.primaryProgress)},_transformProgress:function(t,e){var r="scaleX("+e/100+")";t.style.transform=t.style.webkitTransform=r},_mainRatioChanged:function(t){this._transformProgress(this.$.primaryProgress,t)},_progressChanged:function(t,e,r,i,n){t=this._clampValue(t),e=this._clampValue(e);var o=this._calcRatio(t)*100,s=this._calcRatio(e)*100;this._setSecondaryRatio(o),this._transformProgress(this.$.secondaryProgress,o),this._transformProgress(this.$.primaryProgress,s),this.secondaryProgress=t,n?this.removeAttribute("aria-valuenow"):this.setAttribute("aria-valuenow",e),this.setAttribute("aria-valuemin",r),this.setAttribute("aria-valuemax",i)},_disabledChanged:function(t){this.setAttribute("aria-disabled",t?"true":"false")},_hideSecondaryProgress:function(t){return t===0}});var ke=K({_template:I`
    <style>
      :host {
        display: inline-block;
        position: fixed;
        clip: rect(0px,0px,0px,0px);
      }
    </style>
    <div aria-live$="[[mode]]">[[_text]]</div>
`,is:"iron-a11y-announcer",properties:{mode:{type:String,value:"polite"},timeout:{type:Number,value:150},_text:{type:String,value:""}},created:function(){ke.instance||(ke.instance=this),document.addEventListener("iron-announce",this._onIronAnnounce.bind(this))},announce:function(t){this._text="",this.async(function(){this._text=t},this.timeout)},_onIronAnnounce:function(t){t.detail&&t.detail.text&&this.announce(t.detail.text)}});ke.instance=null;ke.requestAvailability=function(){ke.instance||(ke.instance=document.createElement("iron-a11y-announcer")),document.body?document.body.appendChild(ke.instance):document.addEventListener("load",function(){document.body.appendChild(ke.instance)})};var ie=class{constructor(e){ie[" "](e),this.type=e&&e.type||"default",this.key=e&&e.key,e&&"value"in e&&(this.value=e.value)}get value(){var e=this.type,r=this.key;if(e&&r)return ie.types[e]&&ie.types[e][r]}set value(e){var r=this.type,i=this.key;r&&i&&(r=ie.types[r]=ie.types[r]||{},e==null?delete r[i]:r[i]=e)}get list(){var e=this.type;if(e){var r=ie.types[this.type];return r?Object.keys(r).map(function(i){return Pw[this.type][i]},this):[]}}byKey(e){return this.key=e,this.value}};ie[" "]=function(){};ie.types={};var Pw=ie.types;K({is:"iron-meta",properties:{type:{type:String,value:"default"},key:{type:String},value:{type:String,notify:!0},self:{type:Boolean,observer:"_selfChanged"},__meta:{type:Boolean,computed:"__computeMeta(type, key, value)"}},hostAttributes:{hidden:!0},__computeMeta:function(t,e,r){var i=new ie({type:t,key:e});return r!==void 0&&r!==i.value?i.value=r:this.value!==i.value&&(this.value=i.value),i},get list(){return this.__meta&&this.__meta.list},_selfChanged:function(t){t&&(this.value=this)},byKey:function(t){return new ie({type:this.type,key:t}).value}});var cu=null,pu={properties:{validator:{type:String},invalid:{notify:!0,reflectToAttribute:!0,type:Boolean,value:!1,observer:"_invalidChanged"}},registered:function(){cu=new ie({type:"validator"})},_invalidChanged:function(){this.invalid?this.setAttribute("aria-invalid","true"):this.removeAttribute("aria-invalid")},get _validator(){return cu&&cu.byKey(this.validator)},hasValidator:function(){return this._validator!=null},validate:function(t){return t===void 0&&this.value!==void 0?this.invalid=!this._getValidity(this.value):this.invalid=!this._getValidity(t),!this.invalid},_getValidity:function(t){return this.hasValidator()?this._validator.validate(t):!0}};K({_template:I`
    <style>
      :host {
        display: inline-block;
      }
    </style>
    <slot id="content"></slot>
`,is:"iron-input",behaviors:[pu],properties:{bindValue:{type:String,value:""},value:{type:String,computed:"_computeValue(bindValue)"},allowedPattern:{type:String},autoValidate:{type:Boolean,value:!1},_inputElement:Object},observers:["_bindValueChanged(bindValue, _inputElement)"],listeners:{input:"_onInput",keypress:"_onKeypress"},created:function(){ke.requestAvailability(),this._previousValidInput="",this._patternAlreadyChecked=!1},attached:function(){this._observer=j(this).observeNodes(function(t){this._initSlottedInput()}.bind(this))},detached:function(){this._observer&&(j(this).unobserveNodes(this._observer),this._observer=null)},get inputElement(){return this._inputElement},_initSlottedInput:function(){this._inputElement=this.getEffectiveChildren()[0],this.inputElement&&this.inputElement.value&&(this.bindValue=this.inputElement.value),this.fire("iron-input-ready")},get _patternRegExp(){var t;if(this.allowedPattern)t=new RegExp(this.allowedPattern);else switch(this.inputElement.type){case"number":t=/[0-9.,e-]/;break}return t},_bindValueChanged:function(t,e){!e||(t===void 0?e.value=null:t!==e.value&&(this.inputElement.value=t),this.autoValidate&&this.validate(),this.fire("bind-value-changed",{value:t}))},_onInput:function(){if(this.allowedPattern&&!this._patternAlreadyChecked){var t=this._checkPatternValidity();t||(this._announceInvalidCharacter("Invalid string of characters not entered."),this.inputElement.value=this._previousValidInput)}this.bindValue=this._previousValidInput=this.inputElement.value,this._patternAlreadyChecked=!1},_isPrintable:function(t){var e=t.keyCode==8||t.keyCode==9||t.keyCode==13||t.keyCode==27,r=t.keyCode==19||t.keyCode==20||t.keyCode==45||t.keyCode==46||t.keyCode==144||t.keyCode==145||t.keyCode>32&&t.keyCode<41||t.keyCode>111&&t.keyCode<124;return!e&&!(t.charCode==0&&r)},_onKeypress:function(t){if(!(!this.allowedPattern&&this.inputElement.type!=="number")){var e=this._patternRegExp;if(!!e&&!(t.metaKey||t.ctrlKey||t.altKey)){this._patternAlreadyChecked=!0;var r=String.fromCharCode(t.charCode);this._isPrintable(t)&&!e.test(r)&&(t.preventDefault(),this._announceInvalidCharacter("Invalid character "+r+" not entered."))}}},_checkPatternValidity:function(){var t=this._patternRegExp;if(!t)return!0;for(var e=0;e<this.inputElement.value.length;e++)if(!t.test(this.inputElement.value[e]))return!1;return!0},validate:function(){if(!this.inputElement)return this.invalid=!1,!0;var t=this.inputElement.checkValidity();return t&&(this.required&&this.bindValue===""?t=!1:this.hasValidator()&&(t=pu.validate.call(this,this.bindValue))),this.invalid=!t,this.fire("iron-input-validate"),t},_announceInvalidCharacter:function(t){this.fire("iron-announce",{text:t})},_computeValue:function(t){return t}});if(!window.polymerSkipLoadingFontRoboto){let t=document.createElement("link");t.rel="stylesheet",t.type="text/css",t.crossOrigin="anonymous",t.href="https://fonts.googleapis.com/css?family=Roboto+Mono:400,700|Roboto:400,300,300italic,400italic,500,500italic,700,700italic",document.head.appendChild(t)}var Fm=I`<custom-style>
  <style is="custom-style">
    html {

      /* Shared Styles */
      --paper-font-common-base: {
        font-family: 'Roboto', 'Noto', sans-serif;
        -webkit-font-smoothing: antialiased;
      };

      --paper-font-common-code: {
        font-family: 'Roboto Mono', 'Consolas', 'Menlo', monospace;
        -webkit-font-smoothing: antialiased;
      };

      --paper-font-common-expensive-kerning: {
        text-rendering: optimizeLegibility;
      };

      --paper-font-common-nowrap: {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
      };

      /* Material Font Styles */

      --paper-font-display4: {
        @apply --paper-font-common-base;
        @apply --paper-font-common-nowrap;

        font-size: 112px;
        font-weight: 300;
        letter-spacing: -.044em;
        line-height: 120px;
      };

      --paper-font-display3: {
        @apply --paper-font-common-base;
        @apply --paper-font-common-nowrap;

        font-size: 56px;
        font-weight: 400;
        letter-spacing: -.026em;
        line-height: 60px;
      };

      --paper-font-display2: {
        @apply --paper-font-common-base;

        font-size: 45px;
        font-weight: 400;
        letter-spacing: -.018em;
        line-height: 48px;
      };

      --paper-font-display1: {
        @apply --paper-font-common-base;

        font-size: 34px;
        font-weight: 400;
        letter-spacing: -.01em;
        line-height: 40px;
      };

      --paper-font-headline: {
        @apply --paper-font-common-base;

        font-size: 24px;
        font-weight: 400;
        letter-spacing: -.012em;
        line-height: 32px;
      };

      --paper-font-title: {
        @apply --paper-font-common-base;
        @apply --paper-font-common-nowrap;

        font-size: 20px;
        font-weight: 500;
        line-height: 28px;
      };

      --paper-font-subhead: {
        @apply --paper-font-common-base;

        font-size: 16px;
        font-weight: 400;
        line-height: 24px;
      };

      --paper-font-body2: {
        @apply --paper-font-common-base;

        font-size: 14px;
        font-weight: 500;
        line-height: 24px;
      };

      --paper-font-body1: {
        @apply --paper-font-common-base;

        font-size: 14px;
        font-weight: 400;
        line-height: 20px;
      };

      --paper-font-caption: {
        @apply --paper-font-common-base;
        @apply --paper-font-common-nowrap;

        font-size: 12px;
        font-weight: 400;
        letter-spacing: 0.011em;
        line-height: 20px;
      };

      --paper-font-menu: {
        @apply --paper-font-common-base;
        @apply --paper-font-common-nowrap;

        font-size: 13px;
        font-weight: 500;
        line-height: 24px;
      };

      --paper-font-button: {
        @apply --paper-font-common-base;
        @apply --paper-font-common-nowrap;

        font-size: 14px;
        font-weight: 500;
        letter-spacing: 0.018em;
        line-height: 24px;
        text-transform: uppercase;
      };

      --paper-font-code2: {
        @apply --paper-font-common-code;

        font-size: 14px;
        font-weight: 700;
        line-height: 20px;
      };

      --paper-font-code1: {
        @apply --paper-font-common-code;

        font-size: 14px;
        font-weight: 500;
        line-height: 20px;
      };

    }

  </style>
</custom-style>`;Fm.setAttribute("style","display: none;");document.head.appendChild(Fm.content);var zo={attached:function(){this.fire("addon-attached")},update:function(t){}};K({_template:I`
    <style>
      :host {
        display: inline-block;
        float: right;

        @apply --paper-font-caption;
        @apply --paper-input-char-counter;
      }

      :host([hidden]) {
        display: none !important;
      }

      :host(:dir(rtl)) {
        float: left;
      }
    </style>

    <span>[[_charCounterStr]]</span>
`,is:"paper-input-char-counter",behaviors:[zo],properties:{_charCounterStr:{type:String,value:"0"}},update:function(t){if(!!t.inputElement){t.value=t.value||"";var e=t.value.toString().length.toString();t.inputElement.hasAttribute("maxlength")&&(e+="/"+t.inputElement.getAttribute("maxlength")),this._charCounterStr=e}}});var Lm=I`
<custom-style>
  <style is="custom-style">
    html {
      /*
       * You can use these generic variables in your elements for easy theming.
       * For example, if all your elements use \`--primary-text-color\` as its main
       * color, then switching from a light to a dark theme is just a matter of
       * changing the value of \`--primary-text-color\` in your application.
       */
      --primary-text-color: var(--light-theme-text-color);
      --primary-background-color: var(--light-theme-background-color);
      --secondary-text-color: var(--light-theme-secondary-color);
      --disabled-text-color: var(--light-theme-disabled-color);
      --divider-color: var(--light-theme-divider-color);
      --error-color: var(--paper-deep-orange-a700);

      /*
       * Primary and accent colors. Also see color.js for more colors.
       */
      --primary-color: var(--paper-indigo-500);
      --light-primary-color: var(--paper-indigo-100);
      --dark-primary-color: var(--paper-indigo-700);

      --accent-color: var(--paper-pink-a200);
      --light-accent-color: var(--paper-pink-a100);
      --dark-accent-color: var(--paper-pink-a400);


      /*
       * Material Design Light background theme
       */
      --light-theme-background-color: #ffffff;
      --light-theme-base-color: #000000;
      --light-theme-text-color: var(--paper-grey-900);
      --light-theme-secondary-color: #737373;  /* for secondary text and icons */
      --light-theme-disabled-color: #9b9b9b;  /* disabled/hint text */
      --light-theme-divider-color: #dbdbdb;

      /*
       * Material Design Dark background theme
       */
      --dark-theme-background-color: var(--paper-grey-900);
      --dark-theme-base-color: #ffffff;
      --dark-theme-text-color: #ffffff;
      --dark-theme-secondary-color: #bcbcbc;  /* for secondary text and icons */
      --dark-theme-disabled-color: #646464;  /* disabled/hint text */
      --dark-theme-divider-color: #3c3c3c;

      /*
       * Deprecated values because of their confusing names.
       */
      --text-primary-color: var(--dark-theme-text-color);
      --default-primary-color: var(--primary-color);
    }
  </style>
</custom-style>`;Lm.setAttribute("style","display: none;");document.head.appendChild(Lm.content);var Vm=I`
<custom-style>
  <style is="custom-style">
    html {
      --paper-input-container-shared-input-style: {
        position: relative; /* to make a stacking context */
        outline: none;
        box-shadow: none;
        padding: 0;
        margin: 0;
        width: 100%;
        max-width: 100%;
        background: transparent;
        border: none;
        color: var(--paper-input-container-input-color, var(--primary-text-color));
        -webkit-appearance: none;
        text-align: inherit;
        vertical-align: var(--paper-input-container-input-align, bottom);

        @apply --paper-font-subhead;
      };
    }
  </style>
</custom-style>
`;Vm.setAttribute("style","display: none;");document.head.appendChild(Vm.content);K({_template:I`
    <style>
      :host {
        display: block;
        padding: 8px 0;
        @apply --paper-input-container;
      }

      :host([inline]) {
        display: inline-block;
      }

      :host([disabled]) {
        pointer-events: none;
        opacity: 0.33;

        @apply --paper-input-container-disabled;
      }

      :host([hidden]) {
        display: none !important;
      }

      [hidden] {
        display: none !important;
      }

      .floated-label-placeholder {
        @apply --paper-font-caption;
      }

      .underline {
        height: 2px;
        position: relative;
      }

      .focused-line {
        @apply --layout-fit;
        border-bottom: 2px solid var(--paper-input-container-focus-color, var(--primary-color));

        -webkit-transform-origin: center center;
        transform-origin: center center;
        -webkit-transform: scale3d(0,1,1);
        transform: scale3d(0,1,1);

        @apply --paper-input-container-underline-focus;
      }

      .underline.is-highlighted .focused-line {
        -webkit-transform: none;
        transform: none;
        -webkit-transition: -webkit-transform 0.25s;
        transition: transform 0.25s;

        @apply --paper-transition-easing;
      }

      .underline.is-invalid .focused-line {
        border-color: var(--paper-input-container-invalid-color, var(--error-color));
        -webkit-transform: none;
        transform: none;
        -webkit-transition: -webkit-transform 0.25s;
        transition: transform 0.25s;

        @apply --paper-transition-easing;
      }

      .unfocused-line {
        @apply --layout-fit;
        border-bottom: 1px solid var(--paper-input-container-color, var(--secondary-text-color));
        @apply --paper-input-container-underline;
      }

      :host([disabled]) .unfocused-line {
        border-bottom: 1px dashed;
        border-color: var(--paper-input-container-color, var(--secondary-text-color));
        @apply --paper-input-container-underline-disabled;
      }

      .input-wrapper {
        @apply --layout-horizontal;
        @apply --layout-center;
        position: relative;
      }

      .input-content {
        @apply --layout-flex-auto;
        @apply --layout-relative;
        max-width: 100%;
      }

      .input-content ::slotted(label),
      .input-content ::slotted(.paper-input-label) {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        font: inherit;
        color: var(--paper-input-container-color, var(--secondary-text-color));
        -webkit-transition: -webkit-transform 0.25s, width 0.25s;
        transition: transform 0.25s, width 0.25s;
        -webkit-transform-origin: left top;
        transform-origin: left top;
        /* Fix for safari not focusing 0-height date/time inputs with -webkit-apperance: none; */
        min-height: 1px;

        @apply --paper-font-common-nowrap;
        @apply --paper-font-subhead;
        @apply --paper-input-container-label;
        @apply --paper-transition-easing;
      }


      .input-content ::slotted(label):before,
      .input-content ::slotted(.paper-input-label):before {
        @apply --paper-input-container-label-before;
      }

      .input-content ::slotted(label):after,
      .input-content ::slotted(.paper-input-label):after {
        @apply --paper-input-container-label-after;
      }

      .input-content.label-is-floating ::slotted(label),
      .input-content.label-is-floating ::slotted(.paper-input-label) {
        -webkit-transform: translateY(-75%) scale(0.75);
        transform: translateY(-75%) scale(0.75);

        /* Since we scale to 75/100 of the size, we actually have 100/75 of the
        original space now available */
        width: 133%;

        @apply --paper-input-container-label-floating;
      }

      :host(:dir(rtl)) .input-content.label-is-floating ::slotted(label),
      :host(:dir(rtl)) .input-content.label-is-floating ::slotted(.paper-input-label) {
        right: 0;
        left: auto;
        -webkit-transform-origin: right top;
        transform-origin: right top;
      }

      .input-content.label-is-highlighted ::slotted(label),
      .input-content.label-is-highlighted ::slotted(.paper-input-label) {
        color: var(--paper-input-container-focus-color, var(--primary-color));

        @apply --paper-input-container-label-focus;
      }

      .input-content.is-invalid ::slotted(label),
      .input-content.is-invalid ::slotted(.paper-input-label) {
        color: var(--paper-input-container-invalid-color, var(--error-color));
      }

      .input-content.label-is-hidden ::slotted(label),
      .input-content.label-is-hidden ::slotted(.paper-input-label) {
        visibility: hidden;
      }

      .input-content ::slotted(input),
      .input-content ::slotted(iron-input),
      .input-content ::slotted(textarea),
      .input-content ::slotted(iron-autogrow-textarea),
      .input-content ::slotted(.paper-input-input) {
        @apply --paper-input-container-shared-input-style;
        /* The apply shim doesn't apply the nested color custom property,
          so we have to re-apply it here. */
        color: var(--paper-input-container-input-color, var(--primary-text-color));
        @apply --paper-input-container-input;
      }

      .input-content ::slotted(input)::-webkit-outer-spin-button,
      .input-content ::slotted(input)::-webkit-inner-spin-button {
        @apply --paper-input-container-input-webkit-spinner;
      }

      .input-content.focused ::slotted(input),
      .input-content.focused ::slotted(iron-input),
      .input-content.focused ::slotted(textarea),
      .input-content.focused ::slotted(iron-autogrow-textarea),
      .input-content.focused ::slotted(.paper-input-input) {
        @apply --paper-input-container-input-focus;
      }

      .input-content.is-invalid ::slotted(input),
      .input-content.is-invalid ::slotted(iron-input),
      .input-content.is-invalid ::slotted(textarea),
      .input-content.is-invalid ::slotted(iron-autogrow-textarea),
      .input-content.is-invalid ::slotted(.paper-input-input) {
        @apply --paper-input-container-input-invalid;
      }

      .prefix ::slotted(*) {
        display: inline-block;
        @apply --paper-font-subhead;
        @apply --layout-flex-none;
        @apply --paper-input-prefix;
      }

      .suffix ::slotted(*) {
        display: inline-block;
        @apply --paper-font-subhead;
        @apply --layout-flex-none;

        @apply --paper-input-suffix;
      }

      /* Firefox sets a min-width on the input, which can cause layout issues */
      .input-content ::slotted(input) {
        min-width: 0;
      }

      .input-content ::slotted(textarea) {
        resize: none;
      }

      .add-on-content {
        position: relative;
      }

      .add-on-content.is-invalid ::slotted(*) {
        color: var(--paper-input-container-invalid-color, var(--error-color));
      }

      .add-on-content.is-highlighted ::slotted(*) {
        color: var(--paper-input-container-focus-color, var(--primary-color));
      }
    </style>

    <div class="floated-label-placeholder" aria-hidden="true" hidden="[[noLabelFloat]]">&nbsp;</div>

    <div class="input-wrapper">
      <span class="prefix"><slot name="prefix"></slot></span>

      <div class$="[[_computeInputContentClass(noLabelFloat,alwaysFloatLabel,focused,invalid,_inputHasContent)]]" id="labelAndInputContainer">
        <slot name="label"></slot>
        <slot name="input"></slot>
      </div>

      <span class="suffix"><slot name="suffix"></slot></span>
    </div>

    <div class$="[[_computeUnderlineClass(focused,invalid)]]">
      <div class="unfocused-line"></div>
      <div class="focused-line"></div>
    </div>

    <div class$="[[_computeAddOnContentClass(focused,invalid)]]">
      <slot name="add-on"></slot>
    </div>
`,is:"paper-input-container",properties:{noLabelFloat:{type:Boolean,value:!1},alwaysFloatLabel:{type:Boolean,value:!1},attrForValue:{type:String,value:"bind-value"},autoValidate:{type:Boolean,value:!1},invalid:{observer:"_invalidChanged",type:Boolean,value:!1},focused:{readOnly:!0,type:Boolean,value:!1,notify:!0},_addons:{type:Array},_inputHasContent:{type:Boolean,value:!1},_inputSelector:{type:String,value:"input,iron-input,textarea,.paper-input-input"},_boundOnFocus:{type:Function,value:function(){return this._onFocus.bind(this)}},_boundOnBlur:{type:Function,value:function(){return this._onBlur.bind(this)}},_boundOnInput:{type:Function,value:function(){return this._onInput.bind(this)}},_boundValueChanged:{type:Function,value:function(){return this._onValueChanged.bind(this)}}},listeners:{"addon-attached":"_onAddonAttached","iron-input-validate":"_onIronInputValidate"},get _valueChangedEvent(){return this.attrForValue+"-changed"},get _propertyForValue(){return xr(this.attrForValue)},get _inputElement(){return j(this).querySelector(this._inputSelector)},get _inputElementValue(){return this._inputElement[this._propertyForValue]||this._inputElement.value},ready:function(){this.__isFirstValueUpdate=!0,this._addons||(this._addons=[]),this.addEventListener("focus",this._boundOnFocus,!0),this.addEventListener("blur",this._boundOnBlur,!0)},attached:function(){this.attrForValue?this._inputElement.addEventListener(this._valueChangedEvent,this._boundValueChanged):this.addEventListener("input",this._onInput),this._inputElementValue&&this._inputElementValue!=""?this._handleValueAndAutoValidate(this._inputElement):this._handleValue(this._inputElement)},_onAddonAttached:function(t){this._addons||(this._addons=[]);var e=t.target;this._addons.indexOf(e)===-1&&(this._addons.push(e),this.isAttached&&this._handleValue(this._inputElement))},_onFocus:function(){this._setFocused(!0)},_onBlur:function(){this._setFocused(!1),this._handleValueAndAutoValidate(this._inputElement)},_onInput:function(t){this._handleValueAndAutoValidate(t.target)},_onValueChanged:function(t){var e=t.target;this.__isFirstValueUpdate&&(this.__isFirstValueUpdate=!1,e.value===void 0||e.value==="")||this._handleValueAndAutoValidate(t.target)},_handleValue:function(t){var e=this._inputElementValue;e||e===0||t.type==="number"&&!t.checkValidity()?this._inputHasContent=!0:this._inputHasContent=!1,this.updateAddons({inputElement:t,value:e,invalid:this.invalid})},_handleValueAndAutoValidate:function(t){if(this.autoValidate&&t){var e;t.validate?e=t.validate(this._inputElementValue):e=t.checkValidity(),this.invalid=!e}this._handleValue(t)},_onIronInputValidate:function(t){this.invalid=this._inputElement.invalid},_invalidChanged:function(){this._addons&&this.updateAddons({invalid:this.invalid})},updateAddons:function(t){for(var e,r=0;e=this._addons[r];r++)e.update(t)},_computeInputContentClass:function(t,e,r,i,n){var o="input-content";if(t)n&&(o+=" label-is-hidden"),i&&(o+=" is-invalid");else{var s=this.querySelector("label");e||n?(o+=" label-is-floating",this.$.labelAndInputContainer.style.position="static",i?o+=" is-invalid":r&&(o+=" label-is-highlighted")):(s&&(this.$.labelAndInputContainer.style.position="relative"),i&&(o+=" is-invalid"))}return r&&(o+=" focused"),o},_computeUnderlineClass:function(t,e){var r="underline";return e?r+=" is-invalid":t&&(r+=" is-highlighted"),r},_computeAddOnContentClass:function(t,e){var r="add-on-content";return e?r+=" is-invalid":t&&(r+=" is-highlighted"),r}});K({_template:I`
    <style>
      :host {
        display: inline-block;
        visibility: hidden;

        color: var(--paper-input-container-invalid-color, var(--error-color));

        @apply --paper-font-caption;
        @apply --paper-input-error;
        position: absolute;
        left:0;
        right:0;
      }

      :host([invalid]) {
        visibility: visible;
      }

      #a11yWrapper {
        visibility: hidden;
      }

      :host([invalid]) #a11yWrapper {
        visibility: visible;
      }
    </style>

    <!--
    If the paper-input-error element is directly referenced by an
    \`aria-describedby\` attribute, such as when used as a paper-input add-on,
    then applying \`visibility: hidden;\` to the paper-input-error element itself
    does not hide the error.

    For more information, see:
    https://www.w3.org/TR/accname-1.1/#mapping_additional_nd_description
    -->
    <div id="a11yWrapper">
      <slot></slot>
    </div>
`,is:"paper-input-error",behaviors:[zo],properties:{invalid:{readOnly:!0,reflectToAttribute:!0,type:Boolean}},update:function(t){this._setInvalid(t.invalid)}});var Rr={};Rr.NextLabelID=1;Rr.NextAddonID=1;Rr.NextInputID=1;var kw={properties:{label:{type:String},value:{notify:!0,type:String},disabled:{type:Boolean,value:!1},invalid:{type:Boolean,value:!1,notify:!0},allowedPattern:{type:String},type:{type:String},list:{type:String},pattern:{type:String},required:{type:Boolean,value:!1},errorMessage:{type:String},charCounter:{type:Boolean,value:!1},noLabelFloat:{type:Boolean,value:!1},alwaysFloatLabel:{type:Boolean,value:!1},autoValidate:{type:Boolean,value:!1},validator:{type:String},autocomplete:{type:String,value:"off"},autofocus:{type:Boolean,observer:"_autofocusChanged"},inputmode:{type:String},minlength:{type:Number},maxlength:{type:Number},min:{type:String},max:{type:String},step:{type:String},name:{type:String},placeholder:{type:String,value:""},readonly:{type:Boolean,value:!1},size:{type:Number},autocapitalize:{type:String,value:"none"},autocorrect:{type:String,value:"off"},autosave:{type:String},results:{type:Number},accept:{type:String},multiple:{type:Boolean},_ariaDescribedBy:{type:String,value:""},_ariaLabelledBy:{type:String,value:""},_inputId:{type:String,value:""}},listeners:{"addon-attached":"_onAddonAttached"},keyBindings:{"shift+tab:keydown":"_onShiftTabDown"},hostAttributes:{tabindex:0},get inputElement(){return this.$||(this.$={}),this.$.input||(this._generateInputId(),this.$.input=this.$$("#"+this._inputId)),this.$.input},get _focusableElement(){return this.inputElement},created:function(){this._typesThatHaveText=["date","datetime","datetime-local","month","time","week","file"]},attached:function(){this._updateAriaLabelledBy(),!he&&this.inputElement&&this._typesThatHaveText.indexOf(this.inputElement.type)!==-1&&(this.alwaysFloatLabel=!0)},_appendStringWithSpace:function(t,e){return t?t=t+" "+e:t=e,t},_onAddonAttached:function(t){var e=j(t).rootTarget;if(e.id)this._ariaDescribedBy=this._appendStringWithSpace(this._ariaDescribedBy,e.id);else{var r="paper-input-add-on-"+Rr.NextAddonID++;e.id=r,this._ariaDescribedBy=this._appendStringWithSpace(this._ariaDescribedBy,r)}},validate:function(){return this.inputElement.validate()},_focusBlurHandler:function(t){Li._focusBlurHandler.call(this,t),this.focused&&!this._shiftTabPressed&&this._focusableElement&&this._focusableElement.focus()},_onShiftTabDown:function(t){var e=this.getAttribute("tabindex");this._shiftTabPressed=!0,this.setAttribute("tabindex","-1"),this.async(function(){this.setAttribute("tabindex",e),this._shiftTabPressed=!1},1)},_handleAutoValidate:function(){this.autoValidate&&this.validate()},updateValueAndPreserveCaret:function(t){try{var e=this.inputElement.selectionStart;this.value=t,this.inputElement.selectionStart=e,this.inputElement.selectionEnd=e}catch(r){this.value=t}},_computeAlwaysFloatLabel:function(t,e){return e||t},_updateAriaLabelledBy:function(){var t=j(this.root).querySelector("label");if(!t){this._ariaLabelledBy="";return}var e;t.id?e=t.id:(e="paper-input-label-"+Rr.NextLabelID++,t.id=e),this._ariaLabelledBy=e},_generateInputId:function(){(!this._inputId||this._inputId==="")&&(this._inputId="input-"+Rr.NextInputID++)},_onChange:function(t){this.shadowRoot&&this.fire(t.type,{sourceEvent:t},{node:this,bubbles:t.bubbles,cancelable:t.cancelable})},_autofocusChanged:function(){if(this.autofocus&&this._focusableElement){var t=document.activeElement,e=t instanceof HTMLElement,r=e&&t!==document.body&&t!==document.documentElement;r||this._focusableElement.focus()}}},Bm=[Li,ft,kw];K({is:"paper-input",_template:I`
    <style>
      :host {
        display: block;
      }

      :host([focused]) {
        outline: none;
      }

      :host([hidden]) {
        display: none !important;
      }

      input {
        /* Firefox sets a min-width on the input, which can cause layout issues */
        min-width: 0;
      }

      /* In 1.x, the <input> is distributed to paper-input-container, which styles it.
      In 2.x the <iron-input> is distributed to paper-input-container, which styles
      it, but in order for this to work correctly, we need to reset some
      of the native input's properties to inherit (from the iron-input) */
      iron-input > input {
        @apply --paper-input-container-shared-input-style;
        font-family: inherit;
        font-weight: inherit;
        font-size: inherit;
        letter-spacing: inherit;
        word-spacing: inherit;
        line-height: inherit;
        text-shadow: inherit;
        color: inherit;
        cursor: inherit;
      }

      input:disabled {
        @apply --paper-input-container-input-disabled;
      }

      input::-webkit-outer-spin-button,
      input::-webkit-inner-spin-button {
        @apply --paper-input-container-input-webkit-spinner;
      }

      input::-webkit-clear-button {
        @apply --paper-input-container-input-webkit-clear;
      }

      input::-webkit-calendar-picker-indicator {
        @apply --paper-input-container-input-webkit-calendar-picker-indicator;
      }

      input::-webkit-input-placeholder {
        color: var(--paper-input-container-color, var(--secondary-text-color));
      }

      input:-moz-placeholder {
        color: var(--paper-input-container-color, var(--secondary-text-color));
      }

      input::-moz-placeholder {
        color: var(--paper-input-container-color, var(--secondary-text-color));
      }

      input::-ms-clear {
        @apply --paper-input-container-ms-clear;
      }

      input::-ms-reveal {
        @apply --paper-input-container-ms-reveal;
      }

      input:-ms-input-placeholder {
        color: var(--paper-input-container-color, var(--secondary-text-color));
      }

      label {
        pointer-events: none;
      }
    </style>

    <paper-input-container id="container" no-label-float="[[noLabelFloat]]" always-float-label="[[_computeAlwaysFloatLabel(alwaysFloatLabel,placeholder)]]" auto-validate$="[[autoValidate]]" disabled$="[[disabled]]" invalid="[[invalid]]">

      <slot name="prefix" slot="prefix"></slot>

      <label hidden$="[[!label]]" aria-hidden="true" for$="[[_inputId]]" slot="label">[[label]]</label>

      <!-- Need to bind maxlength so that the paper-input-char-counter works correctly -->
      <iron-input bind-value="{{value}}" slot="input" class="input-element" id$="[[_inputId]]" maxlength$="[[maxlength]]" allowed-pattern="[[allowedPattern]]" invalid="{{invalid}}" validator="[[validator]]">
        <input aria-labelledby$="[[_ariaLabelledBy]]" aria-describedby$="[[_ariaDescribedBy]]" disabled$="[[disabled]]" title$="[[title]]" type$="[[type]]" pattern$="[[pattern]]" required$="[[required]]" autocomplete$="[[autocomplete]]" autofocus$="[[autofocus]]" inputmode$="[[inputmode]]" minlength$="[[minlength]]" maxlength$="[[maxlength]]" min$="[[min]]" max$="[[max]]" step$="[[step]]" name$="[[name]]" placeholder$="[[placeholder]]" readonly$="[[readonly]]" list$="[[list]]" size$="[[size]]" autocapitalize$="[[autocapitalize]]" autocorrect$="[[autocorrect]]" on-change="_onChange" tabindex$="[[tabIndex]]" autosave$="[[autosave]]" results$="[[results]]" accept$="[[accept]]" multiple$="[[multiple]]" role$="[[inputRole]]" aria-haspopup$="[[inputAriaHaspopup]]">
      </iron-input>

      <slot name="suffix" slot="suffix"></slot>

      <template is="dom-if" if="[[errorMessage]]">
        <paper-input-error aria-live="assertive" slot="add-on">[[errorMessage]]</paper-input-error>
      </template>

      <template is="dom-if" if="[[charCounter]]">
        <paper-input-char-counter slot="add-on"></paper-input-char-counter>
      </template>

    </paper-input-container>
  `,behaviors:[Bm,Ho],properties:{value:{type:String},inputRole:{type:String,value:void 0},inputAriaHaspopup:{type:String,value:void 0}},get _focusableElement(){return this.inputElement._inputElement},listeners:{"iron-input-ready":"_onIronInputReady"},_onIronInputReady:function(){this.$.nativeInput||(this.$.nativeInput=this.$$("input")),this.inputElement&&this._typesThatHaveText.indexOf(this.$.nativeInput.type)!==-1&&(this.alwaysFloatLabel=!0),this.inputElement.bindValue&&this.$.container._handleValueAndAutoValidate(this.inputElement)}});var qm=class extends pm([ft,Ho,Im,Ko,Qo],he){static get template(){return I`
            <!--<template strip-whitespace> -->
                <style>
                  :host {
                    @apply --layout;
                    @apply --layout-justified;
                    @apply --layout-center;
                    width: 200px;
                    cursor: default;
                    -webkit-user-select: none;
                    -moz-user-select: none;
                    -ms-user-select: none;
                    user-select: none;
                    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
                    --paper-progress-active-color: var(--paper-single-range-slider-active-color, var(--google-blue-700));
                    --paper-progress-secondary-color: var(--paper-single-range-slider-secondary-color, var(--google-blue-300));
                    --paper-progress-disabled-active-color: var(--paper-single-range-slider-disabled-active-color, var(--paper-grey-400));
                    --paper-progress-disabled-secondary-color: var(--paper-single-range-slider-disabled-secondary-color, var(--paper-grey-400));
                    --calculated-paper-single-range-slider-height: var(--paper-single-range-slider-height, 2px);
                  }
            
                  /* focus shows the ripple */
                  :host(:focus) {
                    outline: none;
                  }
            
                  /** 
                   * NOTE(keanulee): Though :host-context is not universally supported, some pages
                   * still rely on paper-single-range-slider being flipped when dir="rtl" is set on body. For full
                   * compatability, dir="rtl" must be explicitly set on paper-single-range-slider.
                   */
                  :host-context([dir="rtl"]) #sliderContainer {
                    -webkit-transform: scaleX(-1);
                    transform: scaleX(-1);
                  }
            
                  /** 
                   * NOTE(keanulee): This is separate from the rule above because :host-context may
                   * not be recognized.
                   */
                  :host([dir="rtl"]) #sliderContainer {
                    -webkit-transform: scaleX(-1);
                    transform: scaleX(-1);
                  }
            
                  /** 
                   * NOTE(keanulee): Needed to override the :host-context rule (where supported)
                   * to support LTR sliders in RTL pages.
                   */
                  :host([dir="ltr"]) #sliderContainer {
                    -webkit-transform: scaleX(1);
                    transform: scaleX(1);
                  }
            
                  #sliderContainer {
                    position: relative;
                    width: 100%;
                    height: calc(30px + var(--calculated-paper-single-range-slider-height));
                    margin-left: calc(15px + var(--calculated-paper-single-range-slider-height)/2);
                    margin-right: calc(15px + var(--calculated-paper-single-range-slider-height)/2);
                  }
            
                  #sliderContainer:focus {
                    outline: 0;
                  }
            
                  #sliderContainer.editable {
                    margin-top: 12px;
                    margin-bottom: 12px;
                  }
            
                  .bar-container {
                    position: absolute;
                    top: 0;
                    bottom: 0;
                    left: 0;
                    right: 0;
                    overflow: hidden;
                  }
            
                  .ring > .bar-container {
                    left: calc(5px + var(--calculated-paper-single-range-slider-height)/2);
                    transition: left 0.18s ease;
                  }
            
                  .ring.expand.dragging > .bar-container {
                    transition: none;
                  }
            
                  .ring.expand:not(.pin) > .bar-container {
                    left: calc(8px + var(--calculated-paper-single-range-slider-height)/2);
                  }
            
                  #sliderBar {
                    padding: 15px 0;
                    width: 100%;
                    background-color: var(--paper-single-range-slider-bar-color, transparent);
                    --paper-progress-container-color: var(--paper-single-range-slider-container-color, var(--paper-grey-400));
                    --paper-progress-height: var(--calculated-paper-single-range-slider-height);
                  }
            
                  .slider-markers {
                    position: absolute;
                    top: calc(14px + var(--paper-single-range-slider-height,2px)/2);
                    height: var(--calculated-paper-single-range-slider-height);
                    left: 0;
                    right: -1px;
                    box-sizing: border-box;
                    pointer-events: none;
                    @apply --layout-horizontal;
                  }
            
                  .slider-marker {
                    @apply --layout-flex;
                  }
                  .slider-markers::after,
                  .slider-marker::after {
                    content: "";
                    display: block;
                    margin-left: -1px;
                    width: 2px;
                    height: var(--calculated-paper-single-range-slider-height);
                    border-radius: 50%;
                    background-color: var(--paper-single-range-slider-markers-color, #000);
                  }
            
                  .slider-knob {
                    position: absolute;
                    left: 0;
                    top: 0;
                    margin-left: calc(-15px - var(--calculated-paper-single-range-slider-height)/2);
                    width: calc(30px + var(--calculated-paper-single-range-slider-height));
                    height: calc(30px + var(--calculated-paper-single-range-slider-height));
                  }
            
                  .transiting > .slider-knob {
                    transition: left 0.08s ease;
                  }
            
                  .slider-knob:focus {
                    outline: none;
                  }
            
                  .slider-knob.dragging {
                    transition: none;
                  }
            
                  .snaps > .slider-knob.dragging {
                    transition: -webkit-transform 0.08s ease;
                    transition: transform 0.08s ease;
                  }
            
                  .slider-knob-inner {
                    margin: 10px;
                    width: calc(100% - 20px);
                    height: calc(100% - 20px);
                    background-color: var(--paper-single-range-slider-knob-color, var(--google-blue-700));
                    border: 2px solid var(--paper-single-range-slider-knob-color, var(--google-blue-700));
                    border-radius: 50%;
            
                    -moz-box-sizing: border-box;
                    box-sizing: border-box;
            
                    transition-property: -webkit-transform, background-color, border;
                    transition-property: transform, background-color, border;
                    transition-duration: 0.18s;
                    transition-timing-function: ease;
                  }
            
                  .expand:not(.pin) > .slider-knob > .slider-knob-inner {
                    -webkit-transform: scale(1.5);
                    transform: scale(1.5);
                  }
            
                  .ring > .slider-knob > .slider-knob-inner {
                    background-color: var(--paper-single-range-slider-knob-start-color, transparent);
                    border: 2px solid var(--paper-single-range-slider-knob-start-border-color, var(--paper-grey-400));
                  }
            
                  .slider-knob-inner::before {
                    background-color: var(--paper-single-range-slider-pin-color, var(--google-blue-700));
                  }
            
                  .pin > .slider-knob > .slider-knob-inner::before {
                    content: "";
                    position: absolute;
                    top: 0;
                    left: 50%;
                    margin-left: -13px;
                    width: 26px;
                    height: 26px;
                    border-radius: 50% 50% 50% 0;
            
                    -webkit-transform: rotate(-45deg) scale(0) translate(0);
                    transform: rotate(-45deg) scale(0) translate(0);
                  }
            
                  .slider-knob-inner::before,
                  .slider-knob-inner::after {
                    transition: -webkit-transform .18s ease, background-color .18s ease;
                    transition: transform .18s ease, background-color .18s ease;
                  }
            
                  .pin.ring > .slider-knob > .slider-knob-inner::before {
                    background-color: var(--paper-single-range-slider-pin-start-color, var(--paper-grey-400));
                  }
            
                  .pin.expand > .slider-knob > .slider-knob-inner::before {
                    -webkit-transform: rotate(-45deg) scale(1) translate(17px, -17px);
                    transform: rotate(-45deg) scale(1) translate(17px, -17px);
                  }
            
                  .pin > .slider-knob > .slider-knob-inner::after {
                    content: attr(value);
                    position: absolute;
                    top: 0;
                    left: 50%;
                    margin-left: -16px;
                    width: 32px;
                    height: 26px;
                    text-align: center;
                    color: var(--paper-single-range-slider-font-color, #fff);
                    font-size: 10px;
            
                    -webkit-transform: scale(0) translate(0);
                    transform: scale(0) translate(0);
                    @apply paper-single-range-slider-knob-inner-text;
                  }
            
                  .pin.expand > .slider-knob > .slider-knob-inner::after {
                    -webkit-transform: scale(1) translate(0, -17px);
                    transform: scale(1) translate(0, -17px);
                  }
            
                  /* paper-input */
                  .slider-input {
                    width: 50px;
                    overflow: hidden;
                    --paper-input-container-input: {
                      text-align: center;
                    };
                    @apply --paper-single-range-slider-input;
                  }
            
                  /* disabled state */
                  #sliderContainer.disabled {
                    pointer-events: none;
                  }
            
                  .disabled > .slider-knob > .slider-knob-inner {
                    background-color: var(--paper-single-range-slider-disabled-knob-color, var(--paper-grey-400));
                    border: 2px solid var(--paper-single-range-slider-disabled-knob-color, var(--paper-grey-400));
                    -webkit-transform: scale3d(0.75, 0.75, 1);
                    transform: scale3d(0.75, 0.75, 1);
                  }
            
                  .disabled.ring > .slider-knob > .slider-knob-inner {
                    background-color: var(--paper-single-range-slider-knob-start-color, transparent);
                    border: 2px solid var(--paper-single-range-slider-knob-start-border-color, var(--paper-grey-400));
                  }
            
                  paper-ripple {
                    color: var(--paper-single-range-slider-knob-color, var(--google-blue-700));
                  }
                </style>
            
                <div id="sliderContainer"
                  class$="[[_getClassNames(disabled, pin, snaps, immediateValue, min, expand, dragging, transiting, editable)]]">
                  <div class="bar-container">
                    <paper-progress
                      disabled$="[[disabled]]"
                      id="sliderBar"
                      aria-hidden="true"
                      min="[[min]]"
                      max="[[max]]"
                      step="[[step]]"
                      value="[[immediateValue]]"
                      secondary-progress="[[secondaryProgress]]"
                      on-down="_bardown"
                      on-up="_resetKnob"
                      on-track="_onTrack">
                    </paper-progress>
                  </div>
            
                  <template is="dom-if" if="[[snaps]]">
                    <div class="slider-markers">
                      <template is="dom-repeat" items="[[markers]]">
                        <div class="slider-marker"></div>
                      </template>
                    </div>
                  </template>
            
                  <div id="sliderKnob"
                    class="slider-knob"
                    on-down="_knobdown"
                    on-up="_resetKnob"
                    on-track="_onTrack"
                    on-transitionend="_knobTransitionEnd">
                      <div class="slider-knob-inner" value$="[[displayFunction(immediateValue)]]"></div>
                  </div>
                </div>
            
                <template is="dom-if" if="[[editable]]">
                  <paper-input
                    id="input"
                    type="number"
                    step="[[step]]"
                    min="[[min]]"
                    max="[[max]]"
                    class="slider-input"
                    disabled$="[[disabled]]"
                    value="[[immediateValue]]"
                    on-change="_changeValue"
                    on-keydown="_inputKeyDown"
                    no-label-float>
                  </paper-input>
                </template>
              </template>
        `}static get is(){return"paper-single-range-slider"}static get properties(){return{displayFunction:{type:Function,value:function(){return function(e){return e}}},snaps:{type:Boolean,value:!1,notify:!0},pin:{type:Boolean,value:!1,notify:!0},secondaryProgress:{type:Number,value:0,notify:!0,observer:"_secondaryProgressChanged"},editable:{type:Boolean,value:!1},immediateValue:{type:Number,value:0,readOnly:!0,notify:!0},maxMarkers:{type:Number,value:0,notify:!0},expand:{type:Boolean,value:!1,readOnly:!0},dragging:{type:Boolean,value:!1,readOnly:!0},transiting:{type:Boolean,value:!1,readOnly:!0},markers:{type:Array,readOnly:!0,value:function(){return[]}},keyBindings:{left:"_leftKey",right:"_rightKey","down pagedown home":"_decrementKey","up pageup end":"_incrementKey"}}}static get observers(){return["_updateKnob(value, min, max, snaps, step)","_valueChanged(value)","_immediateValueChanged(immediateValue)","_updateMarkers(maxMarkers, min, max, snaps)"]}constructor(){super();this._ensureAttribute("role","slider"),this._ensureAttribute("tabindex","0")}ready(){super.ready(),this.isReady=!0,this.sliderKnob=this.shadowRoot.querySelector("#sliderKnob")}increment(){this.value=this._clampValue(this.value+this.step)}decrement(){this.value=this._clampValue(this.value-this.step)}_updateKnob(e,r,i,n,o){this.setAttribute("aria-valuemin",r),this.setAttribute("aria-valuemax",i),this.setAttribute("aria-valuenow",e),this._positionKnob(this._calcRatio(e)*100)}_valueChanged(){this.fire("value-change",{composed:!0})}_immediateValueChanged(){this.dragging?this.fire("immediate-value-change",{composed:!0}):this.value=this.immediateValue}_secondaryProgressChanged(){this.secondaryProgress=this._clampValue(this.secondaryProgress)}_expandKnob(){this._setExpand(!0)}_resetKnob(){this.cancelDebouncer("expandKnob"),this._setExpand(!1)}_positionKnob(e){this._setImmediateValue(this._calcStep(this._calcKnobPosition(e))),this._setRatio(this._calcRatio(this.immediateValue)*100),this.sliderKnob=this.shadowRoot.querySelector("#sliderKnob"),this.sliderKnob.style.left=this.ratio+"%",this.dragging&&(this._knobstartx=this.ratio*this._w/100,this.translate3d(0,0,0,this.sliderKnob))}_calcKnobPosition(e){return(this.max-this.min)*e/100+this.min}_onTrack(e){switch(e.stopPropagation(),e.detail.state){case"start":this._trackStart(e);break;case"track":this._trackX(e);break;case"end":this._trackEnd();break}}_trackStart(e){this._setTransiting(!1),this._w=this.$.sliderBar.offsetWidth,this._x=this.ratio*this._w/100,this._startx=this._x,this._knobstartx=this._startx,this._minx=-this._startx,this._maxx=this._w-this._startx,this.sliderKnob=this.shadowRoot.querySelector("#sliderKnob"),this.sliderKnob.classList.add("dragging"),this._setDragging(!0)}_trackX(e){this.dragging||this._trackStart(e);var r=this._isRTL?-1:1,i=Math.min(this._maxx,Math.max(this._minx,e.detail.dx*r));this._x=this._startx+i;var n=this._calcStep(this._calcKnobPosition(this._x/this._w*100));this._setImmediateValue(n),this.sliderKnob=this.shadowRoot.querySelector("#sliderKnob");var o=this._calcRatio(this.immediateValue)*this._w-this._knobstartx;this.translate3d(o+"px",0,0,this.sliderKnob)}_trackEnd(){this.sliderKnob=this.shadowRoot.querySelector("#sliderKnob");var e=this.sliderKnob.style;this.sliderKnob.classList.remove("dragging"),this._setDragging(!1),this._resetKnob(),this.value=this.immediateValue,e.transform=e.webkitTransform="",this.fire("change",{composed:!0})}_knobdown(e){this._expandKnob(),e.preventDefault(),this.focus()}_bardown(e){this._w=this.$.sliderBar.offsetWidth;var r=this.$.sliderBar.getBoundingClientRect(),i=(e.detail.x-r.left)/this._w*100;this._isRTL&&(i=100-i);var n=this.ratio;this._setTransiting(!0),this._positionKnob(i),this.debounce("expandKnob",this._expandKnob,60),n===this.ratio&&this._setTransiting(!1),this.async(function(){this.fire("change",{composed:!0})}),e.preventDefault(),this.focus()}_knobTransitionEnd(e){this.sliderKnob=this.shadowRoot.querySelector("#sliderKnob"),e.target===this.sliderKnob&&this._setTransiting(!1)}_updateMarkers(e,r,i,n){n||this._setMarkers([]);var o=Math.round((i-r)/this.step);o>e&&(o=e),(o<0||!isFinite(o))&&(o=0),this._setMarkers(new Array(o))}_mergeClasses(e){return Object.keys(e).filter(function(r){return e[r]}).join(" ")}_getClassNames(){return this._mergeClasses({disabled:this.disabled,pin:this.pin,snaps:this.snaps,ring:this.immediateValue<=this.min,expand:this.expand,dragging:this.dragging,transiting:this.transiting,editable:this.editable})}get _isRTL(){return this.__isRTL===void 0&&(this.__isRTL=window.getComputedStyle(this).direction==="rtl"),this.__isRTL}_leftKey(e){this._isRTL?this._incrementKey(e):this._decrementKey(e)}_rightKey(e){this._isRTL?this._decrementKey(e):this._incrementKey(e)}_incrementKey(e){this.disabled||(e.detail.key==="end"?this.value=this.max:this.increment(),this.fire("change"),e.preventDefault())}_decrementKey(e){this.disabled||(e.detail.key==="home"?this.value=this.min:this.decrement(),this.fire("change"),e.preventDefault())}_changeValue(e){this.value=e.target.value,this.fire("change",{composed:!0})}_inputKeyDown(e){e.stopPropagation()}_createRipple(){return this.sliderKnob=this.shadowRoot.querySelector("#sliderKnob"),this._rippleContainer=this.sliderKnob,Ko._createRipple.call(this)}_focusedChanged(e){e&&this.ensureRipple(),this.hasRipple()&&(e?this._ripple.style.display="":this._ripple.style.display="none",this._ripple.holdDown=e)}getEle(e){return this.shadowRoot.querySelector(e)}};window.customElements.define("paper-single-range-slider",qm);var Um=class extends Cr(he){static get template(){return I`
        <style>
              /* local styles go here */
              :host {
                @apply --layout;
                @apply --layout-justified;
                @apply --layout-center;
  
                --paper-range-slider-width: 200px;
  
                --paper-range-slider-lower-color:             var(--paper-grey-400);
                --paper-range-slider-active-color:            var(--primary-color);
                --paper-range-slider-higher-color:            var(--paper-grey-400);
                --paper-range-slider-knob-color:              var(--primary-color);
                --paper-range-slider-pin-color:               var(--primary-color);
                --paper-range-slider-pin-start-color:         var(--paper-grey-400);
                --paper-range-slider-knob-start-color:        transparent;
                --paper-range-slider-knob-start-border-color: var(--paper-grey-400);
              }
  
              #sliderOuterDiv_0 {
                display: inline-block;
                width: var(--paper-range-slider-width);
              }
  
              #sliderOuterDiv_1 {
                position: relative;
                height: calc(30px + var(--paper-single-range-slider-height, 2px));
                margin-left: 0;
                margin-right: 0;
                margin-top: 0;
                margin-bottom: 0;
              }
  
              /* mimic the size of the #sliderKnob of paper-single-range-slider */
              .sliderKnobMinMax {
                position: absolute;
                left: 0;
                top: 0;
                margin-left: calc(-15px - var(--paper-single-range-slider-height, 2px)/2);
                width: calc(30px + var(--paper-single-range-slider-height, 2px));
                height: calc(30px + var(--paper-single-range-slider-height, 2px));
                /*background: #2196F3; opacity: 0.3;*/
              }
  
              .divSpanWidth {
                  position:absolute;
                  width:100%;
                  display:block;
                  top:0px;
              }
  
              #sliderMax {
                  line-height: normal;
                  --paper-single-range-slider-bar-color:               transparent;
                  --paper-single-range-slider-knob-color:              var(--paper-range-slider-knob-color);
                  --paper-single-range-slider-pin-color:               var(--paper-range-slider-pin-color);
                  --paper-single-range-slider-active-color:            var(--paper-range-slider-active-color);
                  --paper-single-range-slider-secondary-color:         var(--paper-range-slider-higher-color);
                  --paper-single-range-slider-pin-start-color:         var(--paper-range-slider-pin-start-color);
                  --paper-single-range-slider-knob-start-color:        var(--paper-range-slider-knob-start-color);
                  --paper-single-range-slider-knob-start-border-color: var(--paper-range-slider-knob-start-border-color);
              }
              #sliderMin {
                  line-height: normal;
                  --paper-single-range-slider-active-color:            var(--paper-range-slider-lower-color);
                  --paper-single-range-slider-secondary-color:         transparent;
                  --paper-single-range-slider-knob-color:              var(--paper-range-slider-knob-color);
                  --paper-single-range-slider-pin-color:               var(--paper-range-slider-pin-color);
                  --paper-single-range-slider-pin-start-color:         var(--paper-range-slider-pin-start-color);
                  --paper-single-range-slider-knob-start-color:        var(--paper-range-slider-knob-start-color);
                  --paper-single-range-slider-knob-start-border-color: var(--paper-range-slider-knob-start-border-color);
              }
          </style>
  
          <div id="sliderOuterDiv_0" style="[[mainDivStyle]]">
              <div id="sliderOuterDiv_1">
                <!-- style="background: #2196F3; opacity:0.2;" -->
                <div id='backDiv' class="divSpanWidth" on-down="_backDivDown" on-tap="_backDivTap"
                     on-up="_backDivUp" on-track="_backDivOnTrack" on-transitionend="_backDivTransEnd">
                    <!-- must have this in order to force width/height -->
                    <div id='backDivInner_0' style="line-height:200%;"><br></div>
                </div>
  
                <div class="divSpanWidth" style="pointer-events: none;">
                  <paper-single-range-slider id='sliderMax' display-function="[[displayFunction]]" disabled$="[[disabled]]" on-down="_sliderMaxDown"
                                on-up="_sliderMaxUp" step="[[step]]" min="[[min]]" max="[[max]]"
                                value="[[valueMax]]" secondary-progress='[[max]]' style="width:100%;">
                  </paper-single-range-slider>
                </div>
  
                <div class="divSpanWidth" style="pointer-events: none;">
                  <paper-single-range-slider id='sliderMin' display-function="[[displayFunction]]" disabled$="[[disabled]]" on-down="_sliderMinDown"
                                on-up="_sliderMinUp" noink step="[[step]]" min="[[min]]" max="[[max]]"
                                value="[[valueMin]]" style="width:100%;">
                  </paper-single-range-slider>
                </div>
  
                <!-- now add one real line -->
                <div id='backDivInner_1' style="line-height:100%;"><br></div>
              </div>
          </div>
      `}static get is(){return"paper-range-slider"}static get properties(){return{displayFunction:{type:Function,value:function(){return function(e){return e}}},sliderWidth:{type:String,value:"",notify:!0,reflectToAttribute:!0},mainDivStyle:{type:Object,value:function(){return{}},notify:!0,reflectToAttribute:!0},min:{type:Number,value:0,notify:!0,reflectToAttribute:!0},max:{type:Number,value:100,notify:!0,reflectToAttribute:!0},valueMin:{type:Number,value:0,notify:!1,reflectToAttribute:!0},valueMax:{type:Number,value:100,notify:!1,reflectToAttribute:!0},step:{type:Number,value:1,notify:!0,reflectToAttribute:!0},valueDiffMin:{type:Number,value:0,notify:!0,reflectToAttribute:!0},valueDiffMax:{type:Number,value:0,notify:!0,reflectToAttribute:!0},alwaysShowPin:{type:Boolean,value:!1,notify:!0},pin:{type:Boolean,value:!1,notify:!0},snaps:{type:Boolean,value:!1,notify:!0},disabled:{type:Boolean,value:!1,notify:!0},singleSlider:{type:Boolean,value:!1,notify:!0},transDuration:{type:Number,value:250},tapValueExtend:{type:Boolean,value:!0,notify:!0},tapValueReduce:{type:Boolean,value:!1,notify:!0},tapValueMove:{type:Boolean,value:!1,notify:!0}}}ready(){super.ready(),this.inInit=!0;var e=this,r=0,i=this.shadowRoot.querySelector("#sliderMin"),n=this.shadowRoot.querySelector("#sliderMax");function o(){i.isReady&&n.isReady?(e.init(),i.addEventListener("immediate-value-change",function(s){e._setValueMinMax(e._getValuesMinMax(this.immediateValue,null),"immediate-value-change")}),n.addEventListener("immediate-value-change",function(s){e._setValueMinMax(e._getValuesMinMax(null,this.immediateValue),"immediate-value-change")}),i.addEventListener("change",function(s){e._setValueMinMax(e._getValuesMinMax(this.immediateValue,null),"change"),e.alwaysShowPin&&e.$.sliderMin._expandKnob()}),n.addEventListener("change",function(s){e._setValueMinMax(e._getValuesMinMax(null,this.immediateValue),"change"),e.alwaysShowPin&&e.$.sliderMax._expandKnob()}),e.inInit=!1):(r<1e3?setTimeout(function(){o()},10):console.error("could not properly initialize the underlying paper-single-range-slider elements ..."),r++)}o()}init(){this.setSingleSlider(this.singleSlider),this.setDisabled(this.disabled),this.alwaysShowPin&&(this.pin=!0),this.shadowRoot.querySelector("#sliderMin").pin=this.pin,this.shadowRoot.querySelector("#sliderMax").pin=this.pin,this.shadowRoot.querySelector("#sliderMin").snaps=this.snaps,this.shadowRoot.querySelector("#sliderMax").snaps=this.snaps,this.sliderWidth!=""&&this.updateStyles({"--paper-range-slider-width":this.sliderWidth}),this.sliderBar=this.shadowRoot.querySelector("#sliderMin").getEle("#sliderBar"),this.sliderBar&&(this.progressContainer=this.sliderBar.shadowRoot.querySelector("#progressContainer"),this.progressContainer&&(this.progressContainer.style.background="transparent")),this._prevUpdateValues=[this.min,this.max],this._setValueDiff(),this._setValueMinMax(this._getValuesMinMax(this.valueMin,this.valueMax),"init"),this.alwaysShowPin&&(this.shadowRoot.querySelector("#sliderMin")._expandKnob(),this.shadowRoot.querySelector("#sliderMax")._expandKnob())}_setValueDiff(){this._valueDiffMax=Math.max(this.valueDiffMax,0),this._valueDiffMin=Math.max(this.valueDiffMin,0)}_getValuesMinMax(e,r){var i=e!=null&&e>=this.min&&e<=this.max,n=r!=null&&r>=this.min&&r<=this.max;if(!i&&!n)return[this.valueMin,this.valueMax];var o=i?e:this.valueMin,s=n?r:this.valueMax;o=Math.min(Math.max(o,this.min),this.max),s=Math.min(Math.max(s,this.min),this.max);var a=s-o;return i?a<this._valueDiffMin?(s=Math.min(this.max,o+this._valueDiffMin),a=s-o,a<this._valueDiffMin&&(o=s-this._valueDiffMin)):a>this._valueDiffMax&&this._valueDiffMax>0&&(s=o+this._valueDiffMax):a<this._valueDiffMin?(o=Math.max(this.min,s-this._valueDiffMin),a=s-o,a<this._valueDiffMin&&(s=o+this._valueDiffMin)):a>this._valueDiffMax&&this._valueDiffMax>0&&(o=s-this._valueDiffMax),[o,s]}_setValueMin(e){e=Math.max(e,this.min),this.shadowRoot.querySelector("#sliderMin").value=e,this.valueMin=e}_setValueMax(e){e=Math.min(e,this.max),this.shadowRoot.querySelector("#sliderMax").value=e,this.valueMax=e}_setValueMinMax(e,r){this._setValueMin(e[0]),this._setValueMax(e[1]),this.updateValues(r)}_setValuesNoTrans(e,r,i){e!=null&&(e<this.min||e>this.max)&&(e=null),r!=null&&(r<this.min||r>this.max)&&(r=null),e!=null&&r!=null&&(e=Math.min(e,r)),this._setValueMinMax(this._getValuesMinMax(e,r),i)}_setValuesTrans(e,r,i){this.shadowRoot.querySelector("#sliderMin")._setTransiting(!0),this.shadowRoot.querySelector("#sliderMax")._setTransiting(!0),this._setValuesNoTrans(e,r,i);var n=this;setTimeout(function(){n.$.sliderMin._setTransiting(!1),n.$.sliderMax._setTransiting(!1)},n.transDuration)}_backDivOnTrack(e){switch(e.stopPropagation(),e.detail.state){case"start":this._backDivTrackStart(e);break;case"track":this._backDivTrackDuring(e);break;case"end":this._backDivTrackEnd();break}}_backDivTrackStart(e){}_backDivTrackDuring(e){var r=this.shadowRoot.querySelector("#sliderMin"),i=this.shadowRoot.querySelector("#sliderMax");this._x1_Min=this._x0_Min+e.detail.dx;var n=r._calcStep(this._getRatioPos(r,this._x1_Min/this._xWidth));this._x1_Max=this._x0_Max+e.detail.dx;var o=i._calcStep(this._getRatioPos(i,this._x1_Max/this._xWidth));n>=this.min&&o<=this.max&&this._setValuesWithCurrentDiff(n,o,!1)}_setValuesWithCurrentDiff(e,r,i){var n=this._valueDiffMin,o=this._valueDiffMax;this._valueDiffMin=this.valueMax-this.valueMin,this._valueDiffMax=this.valueMax-this.valueMin,i?this._setValuesTrans(e,r,"_setValuesWithCurrentDiff"):this._setValuesNoTrans(e,r,"_setValuesWithCurrentDiff"),this._valueDiffMin=n,this._valueDiffMax=o}_backDivTrackEnd(){}_sliderMinDown(){this.shadowRoot.querySelector("#sliderMax")._expandKnob()}_sliderMaxDown(e){this.singleSlider?this._setValuesNoTrans(null,this._getEventValue(e),"_sliderMaxDown"):this.shadowRoot.querySelector("#sliderMin")._expandKnob()}_sliderMinUp(){this.alwaysShowPin?this.shadowRoot.querySelector("#sliderMin")._expandKnob():this.shadowRoot.querySelector("#sliderMax")._resetKnob()}_sliderMaxUp(){this.alwaysShowPin?this.shadowRoot.querySelector("#sliderMax")._expandKnob():(this.shadowRoot.querySelector("#sliderMin")._resetKnob(),this.singleSlider&&this.shadowRoot.querySelector("#sliderMax")._resetKnob())}_getEventValue(e){var r=this.shadowRoot.querySelector("#sliderMax").getEle("#sliderContainer").offsetWidth,i=this.shadowRoot.querySelector("#sliderMax").getEle("#sliderContainer").getBoundingClientRect(),n=(e.detail.x-i.left)/r,o=this.min+n*(this.max-this.min);return o}_backDivTap(e){this._setValueNow=function(n,o){this.tapValueMove?this._setValuesWithCurrentDiff(n,o,!0):this._setValuesTrans(n,o,"_backDivTap")};var r=this._getEventValue(e);if(r>this.valueMin&&r<this.valueMax){if(this.tapValueReduce){var i=r<this.valueMin+(this.valueMax-this.valueMin)/2;i?this._setValueNow(r,null):this._setValueNow(null,r)}}else(this.tapValueExtend||this.tapValueMove)&&(r<this.valueMin&&this._setValueNow(r,null),r>this.valueMax&&this._setValueNow(null,r))}_backDivDown(e){this._sliderMinDown(),this._sliderMaxDown(),this._xWidth=this.shadowRoot.querySelector("#sliderMin").getEle("#sliderBar").offsetWidth,this._x0_Min=this.shadowRoot.querySelector("#sliderMin").ratio/100*this._xWidth,this._x0_Max=this.shadowRoot.querySelector("#sliderMax").ratio/100*this._xWidth}_backDivUp(){this._sliderMinUp(),this._sliderMaxUp()}_backDivTransEnd(e){}_getRatioPos(e,r){return Math.max(e.min,Math.min(e.max,(e.max-e.min)*r+e.min))}_toBool(e){return e==="false"||e==="0"?!1:Boolean(e)}setValues(e,r,i){var n=i||"setValues";this._setValuesTrans(e,r,n)}updateValues(e){var r=this._prevUpdateValues[0]!==this.valueMin,i=this._prevUpdateValues[1]!==this.valueMax;(r||i)&&(this._prevUpdateValues=[this.valueMin,this.valueMax],this.inInit||(this.dispatchEvent(new CustomEvent("updateValues",{bubbles:!0,composed:!0,detail:{this:this,eventName:e}})),r&&this.dispatchEvent(new CustomEvent("value-min-changed",{bubbles:!0,composed:!0,detail:{this:this,value:this.valueMin,eventName:e}})),i&&this.dispatchEvent(new CustomEvent("value-max-changed",{bubbles:!0,composed:!0,detail:{this:this,value:this.valueMax,eventName:e}}))))}setMin(e){this.max<e&&(this.max=e),this.min=e,this._prevUpdateValues=[this.min,this.max],this.valueMin<this.min&&this._setValuesNoTrans(this.min,null,"setMin")}setMax(e){this.min>e&&(this.min=e),this.max=e,this._prevUpdateValues=[this.min,this.max],this.valueMax>this.max&&this._setValuesNoTrans(null,this.max,"setMax")}setStep(e){this.step=e}getRatio(){var e=this.shadowRoot.querySelector("#sliderMin").ratio/100,r=this.shadowRoot.querySelector("#sliderMax").ratio/100;return[e,r]}setValueDiffMin(e){this._valueDiffMin=e}setValueDiffMax(e){this._valueDiffMax=e}setTapValueExtend(e){this.tapValueExtend=this._toBool(e)}setTapValueReduce(e){this.tapValueReduce=this._toBool(e)}setTapValueMove(e){this.tapValueMove=this._toBool(e)}setDisabled(e){this.disabled=this._toBool(e);var r=this.disabled?"none":"auto";this.shadowRoot.querySelector("#sliderMax").getEle("#sliderKnob").style.pointerEvents=r,this.shadowRoot.querySelector("#sliderMin").getEle("#sliderKnob").style.pointerEvents=r,this.shadowRoot.querySelector("#sliderOuterDiv_1").style.pointerEvents=r}setSingleSlider(e){this.singleSlider=this._toBool(e);var r=this.shadowRoot.querySelector("#sliderMin"),i=this.shadowRoot.querySelector("#sliderMax"),n=this.shadowRoot.querySelector("#backDiv"),o=r.getEle("#sliderKnob"),s=i.getEle("#sliderKnob");e?(n.style.display="none",i.style.pointerEvents="auto",i.style.display="",r.style.display="none",n.style.cursor="default",s.style.cursor="default",o.style.cursor="default"):(n.style.display="block",i.style.pointerEvents="none",i.style.display="",r.style.display="",n.style.cursor="ew-resize",s.style.cursor="col-resize",o.style.cursor="col-resize"),i.getEle("#sliderContainer").style.pointerEvents=this.singleSlider?"auto":"none",r.getEle("#sliderContainer").style.pointerEvents="none"}};window.customElements.define("paper-range-slider",Um);var Aw=new Aa({uri:"https://luxe-bbq-dev.myshopify.com/api/2021-01/graphql.json",cache:new qn,headers:{"Content-Type":"application/graphql","X-Shopify-Storefront-Access-Token":"9056963bca32d153b6dde5e5a6d0640b"}});window.__APOLLO_CLIENT__=Aw;var Hm=()=>{let t=window.location.pathname;document.querySelector("#main-menu")?.querySelector(`[href*="${t}"]`)?.closest("#main-menu>li>a")?.classList?.add("active"),document.dispatchEvent(new CustomEvent("customElementsPrepared"))};/complete|interactive|loaded/.test(document.readyState)?(console.log(document.readyState),Hm()):document.addEventListener("DOMContentLoaded",Hm,!1);export{ue as a,dt as b,Go as c,Hi as d,Je as e,pe as f,ry as g,cs as h,us as i,iy as j,uy as k,cy as l,py as m,ds as n,TI as o,tM as p,rM as q,iM as r,$_ as s,G_ as t,nM as u,Qa as v,oM as w,W_ as x,Y_ as y,sM as z,aM as A,lM as B,uM as C,cM as D,Hf as E,Hb as F};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/**
 * @fileoverview
 * @suppress {checkPrototypalTypes}
 * @license Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt The complete set of authors may be found
 * at http://polymer.github.io/AUTHORS.txt The complete set of contributors may
 * be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by
 * Google as part of the polymer project is also subject to an additional IP
 * rights grant found at http://polymer.github.io/PATENTS.txt
 */
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * @license
 * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
@license
Copyright (c) 2014 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at
http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
part of the polymer project is also subject to an additional IP rights grant
found at http://polymer.github.io/PATENTS.txt
*/
/**
@license
Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at
http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
part of the polymer project is also subject to an additional IP rights grant
found at http://polymer.github.io/PATENTS.txt
*/
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
/**
@license
Copyright (c) 2019 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
//# sourceMappingURL=data:application/json;base64,
