{
  "version": 3,
  "sources": ["../src/node_modules/@apollo/client/node_modules/tslib/tslib.js", "../src/node_modules/ts-invariant/node_modules/tslib/tslib.js", "../src/node_modules/fast-json-stable-stringify/index.js", "../src/node_modules/zen-observable/lib/Observable.js", "../src/node_modules/zen-observable/index.js", "../src/node_modules/graphql/jsutils/nodejsCustomInspectSymbol.js", "../src/node_modules/graphql/jsutils/inspect.js", "../src/node_modules/graphql/jsutils/invariant.js", "../src/node_modules/graphql/jsutils/defineInspect.js", "../src/node_modules/graphql/language/ast.js", "../src/node_modules/graphql/language/visitor.js", "../src/node_modules/graphql-tag/node_modules/tslib/tslib.js", "../src/node_modules/lodash.pickby/index.js", "../src/node_modules/lit-html/src/lib/directive.ts", "../src/node_modules/lit-html/src/lib/dom.ts", "../src/node_modules/lit-html/src/lib/part.ts", "../src/node_modules/lit-html/src/lib/template.ts", "../src/node_modules/lit-html/src/lib/template-instance.ts", "../src/node_modules/lit-html/src/lib/template-result.ts", "../src/node_modules/lit-html/src/lib/parts.ts", "../src/node_modules/lit-html/src/lib/default-template-processor.ts", "../src/node_modules/lit-html/src/lib/template-factory.ts", "../src/node_modules/lit-html/src/lib/render.ts", "../src/node_modules/lit-html/src/lit-html.ts", "../src/node_modules/haunted/lib/symbols.js", "../src/node_modules/haunted/lib/interface.js", "../src/node_modules/haunted/lib/hook.js", "../src/node_modules/haunted/lib/create-effect.js", "../src/node_modules/haunted/lib/use-effect.js", "../src/node_modules/haunted/lib/use-state.js", "../src/node_modules/haunted/lib/use-reducer.js", "../src/node_modules/haunted/lib/state.js", "../src/node_modules/haunted/lib/scheduler.js", "../src/node_modules/haunted/lib/component.js", "../src/node_modules/haunted/lib/use-context.js", "../src/node_modules/haunted/lib/create-context.js", "../src/node_modules/haunted/lib/use-memo.js", "../src/node_modules/haunted/lib/use-layout-effect.js", "../src/node_modules/haunted/lib/use-ref.js", "../src/node_modules/haunted/lib/core.js", "../src/node_modules/haunted/lib/virtual.js", "../src/node_modules/haunted/lib/lit-haunted.js", "../src/node_modules/@apollo/client/node_modules/tslib/modules/index.js", "../src/node_modules/ts-invariant/node_modules/tslib/modules/index.js", "../src/node_modules/@ungap/global-this/esm/index.js", "../src/node_modules/ts-invariant/src/invariant.ts", "../src/node_modules/graphql/jsutils/isObjectLike.mjs", "../src/node_modules/graphql/polyfills/symbols.mjs", "../src/node_modules/graphql/language/location.mjs", "../src/node_modules/graphql/language/printLocation.mjs", "../src/node_modules/graphql/error/GraphQLError.mjs", "../src/node_modules/graphql/error/syntaxError.mjs", "../src/node_modules/graphql/language/kinds.mjs", "../src/node_modules/graphql/jsutils/invariant.mjs", "../src/node_modules/graphql/jsutils/nodejsCustomInspectSymbol.mjs", "../src/node_modules/graphql/jsutils/defineInspect.mjs", "../src/node_modules/graphql/language/ast.mjs", "../src/node_modules/graphql/language/tokenKind.mjs", "../src/node_modules/graphql/jsutils/inspect.mjs", "../src/node_modules/graphql/jsutils/devAssert.mjs", "../src/node_modules/graphql/jsutils/instanceOf.mjs", "../src/node_modules/graphql/language/source.mjs", "../src/node_modules/graphql/language/directiveLocation.mjs", "../src/node_modules/graphql/language/blockString.mjs", "../src/node_modules/graphql/language/lexer.mjs", "../src/node_modules/graphql/language/parser.mjs", "../src/node_modules/graphql/language/visitor.mjs", "../src/node_modules/graphql/language/printer.mjs", "../src/node_modules/@apollo/src/utilities/graphql/directives.ts", "../src/node_modules/@apollo/src/utilities/graphql/fragments.ts", "../src/node_modules/@apollo/src/utilities/graphql/storeUtils.ts", "../src/node_modules/@apollo/src/utilities/graphql/getFromAST.ts", "../src/node_modules/@apollo/src/utilities/common/filterInPlace.ts", "../src/node_modules/@apollo/src/utilities/graphql/transform.ts", "../src/node_modules/@apollo/src/utilities/common/mergeDeep.ts", "../src/node_modules/@apollo/src/utilities/observables/Observable.ts", "../src/node_modules/symbol-observable/es/ponyfill.js", "../src/node_modules/symbol-observable/es/index.js", "../src/node_modules/@apollo/src/utilities/common/cloneDeep.ts", "../src/node_modules/@apollo/src/utilities/common/maybeDeepFreeze.ts", "../src/node_modules/@apollo/src/utilities/observables/iteration.ts", "../src/node_modules/@apollo/src/utilities/observables/asyncMap.ts", "../src/node_modules/@apollo/src/utilities/observables/subclassing.ts", "../src/node_modules/@apollo/src/utilities/observables/Concast.ts", "../src/node_modules/@apollo/src/utilities/common/arrays.ts", "../src/node_modules/@apollo/src/utilities/common/errorHandling.ts", "../src/node_modules/@apollo/src/utilities/common/canUse.ts", "../src/node_modules/@apollo/src/utilities/common/compact.ts", "../src/node_modules/@apollo/src/link/utils/fromError.ts", "../src/node_modules/@apollo/src/link/utils/throwServerError.ts", "../src/node_modules/@apollo/src/link/utils/validateOperation.ts", "../src/node_modules/@apollo/src/link/utils/createOperation.ts", "../src/node_modules/@apollo/src/link/utils/transformOperation.ts", "../src/node_modules/@apollo/src/link/core/ApolloLink.ts", "../src/node_modules/@apollo/src/link/core/empty.ts", "../src/node_modules/@apollo/src/link/core/from.ts", "../src/node_modules/@apollo/src/link/core/split.ts", "../src/node_modules/@apollo/src/link/core/concat.ts", "../src/node_modules/@apollo/src/link/core/execute.ts", "../src/node_modules/@apollo/src/version.ts", "../src/node_modules/@apollo/src/link/http/parseAndCheckHttpResponse.ts", "../src/node_modules/@apollo/src/link/http/serializeFetchParameter.ts", "../src/node_modules/@apollo/src/link/http/selectHttpOptionsAndBody.ts", "../src/node_modules/@apollo/src/link/http/checkFetcher.ts", "../src/node_modules/@apollo/src/link/http/createSignalIfSupported.ts", "../src/node_modules/@apollo/src/link/http/selectURI.ts", "../src/node_modules/@apollo/src/link/http/createHttpLink.ts", "../src/node_modules/@apollo/src/link/http/rewriteURIForGET.ts", "../src/node_modules/@apollo/src/link/http/HttpLink.ts", "../src/node_modules/@wry/equality/src/equality.ts", "../src/node_modules/@apollo/src/errors/index.ts", "../src/node_modules/@apollo/src/core/networkStatus.ts", "../src/node_modules/@apollo/src/core/Reobserver.ts", "../src/node_modules/@apollo/src/core/ObservableQuery.ts", "../src/node_modules/@wry/trie/src/trie.ts", "../src/node_modules/@wry/context/src/slot.ts", "../src/node_modules/@wry/context/src/context.ts", "../src/node_modules/optimism/src/cache.ts", "../src/node_modules/optimism/src/context.ts", "../src/node_modules/optimism/src/helpers.ts", "../src/node_modules/optimism/src/entry.ts", "../src/node_modules/optimism/src/dep.ts", "../src/node_modules/optimism/src/index.ts", "../src/node_modules/@apollo/src/cache/core/cache.ts", "../src/node_modules/@apollo/src/cache/core/types/Cache.ts", "../src/node_modules/@apollo/src/cache/core/types/common.ts", "../src/node_modules/@apollo/src/cache/inmemory/helpers.ts", "../src/node_modules/@apollo/src/cache/inmemory/entityStore.ts", "../src/node_modules/@apollo/src/cache/inmemory/readFromStore.ts", "../src/node_modules/@apollo/src/cache/inmemory/writeToStore.ts", "../src/node_modules/@apollo/src/cache/inmemory/reactiveVars.ts", "../src/node_modules/@apollo/src/cache/inmemory/policies.ts", "../src/node_modules/@apollo/src/cache/inmemory/inMemoryCache.ts", "../src/node_modules/@apollo/src/core/LocalState.ts", "../src/node_modules/@apollo/src/core/QueryInfo.ts", "../src/node_modules/@apollo/src/core/QueryManager.ts", "../src/node_modules/@apollo/src/core/ApolloClient.ts", "../src/node_modules/graphql-tag/node_modules/tslib/modules/index.js", "../src/node_modules/graphql-tag/src/index.ts", "../src/node_modules/@apollo/src/core/index.ts", "../src/node_modules/@open-wc/dedupe-mixin/src/dedupeMixin.js", "../src/node_modules/@apollo-elements/lib/is-valid-gql.ts", "../src/node_modules/@apollo-elements/lib/descriptors.ts", "../src/node_modules/@apollo-elements/lib/helpers.ts", "../src/node_modules/@apollo-elements/mixins/apollo-element-mixin.ts", "../src/node_modules/@apollo-elements/mixins/apollo-query-mixin.ts", "../src/node_modules/@apollo-elements/interfaces/apollo-query.ts", "../src/node_modules/@apollo-elements/interfaces/apollo-element.ts", "../src/node_modules/@apollo-elements/lib/cuid.ts", "../src/node_modules/@apollo-elements/lib/prototypes.ts", "../src/node_modules/@apollo-elements/haunted/ApolloHook.ts", "../src/node_modules/@apollo-elements/haunted/useQuery.ts", "../src/node_modules/@apollo-elements/mixins/apollo-mutation-mixin.ts", "../src/node_modules/@apollo-elements/interfaces/apollo-mutation.ts", "../src/node_modules/@apollo-elements/haunted/useMutation.ts", "../src/node_modules/@apollo-elements/mixins/apollo-subscription-mixin.ts", "../src/node_modules/@apollo-elements/interfaces/apollo-subscription.ts", "../src/node_modules/@apollo-elements/haunted/useSubscription.ts", "../src/shared/helpers.js", "../src/components/common/TitleBanner.js", "../src/components/common/CompareTable.js", "../src/node_modules/@polymer/polymer/lib/utils/boot.js", "../src/node_modules/@polymer/polymer/lib/utils/resolve-url.js", "../src/node_modules/@polymer/polymer/lib/utils/settings.js", "../src/node_modules/@polymer/polymer/lib/utils/mixin.js", "../src/node_modules/@polymer/polymer/lib/elements/dom-module.js", "../src/node_modules/@polymer/polymer/lib/utils/style-gather.js", "../src/node_modules/@polymer/polymer/lib/utils/wrap.js", "../src/node_modules/@polymer/polymer/lib/utils/path.js", "../src/node_modules/@polymer/polymer/lib/utils/case-map.js", "../src/node_modules/@polymer/polymer/lib/utils/async.js", "../src/node_modules/@polymer/polymer/lib/mixins/properties-changed.js", "../src/node_modules/@polymer/polymer/lib/mixins/property-accessors.js", "../src/node_modules/@polymer/polymer/lib/mixins/template-stamp.js", "../src/node_modules/@polymer/polymer/lib/mixins/property-effects.js", "../src/node_modules/@polymer/polymer/lib/utils/telemetry.js", "../src/node_modules/@polymer/polymer/lib/mixins/properties-mixin.js", "../src/node_modules/@polymer/polymer/lib/mixins/element-mixin.js", "../src/node_modules/@polymer/polymer/lib/utils/html-tag.js", "../src/node_modules/@polymer/polymer/polymer-element.js", "../src/node_modules/@polymer/polymer/lib/utils/debounce.js", "../src/node_modules/@polymer/polymer/lib/utils/gestures.js", "../src/node_modules/@polymer/polymer/lib/mixins/gesture-event-listeners.js", "../src/node_modules/@webcomponents/shadycss/src/style-settings.js", "../src/node_modules/@webcomponents/shadycss/src/css-parse.js", "../src/node_modules/@webcomponents/shadycss/src/common-regex.js", "../src/node_modules/@webcomponents/shadycss/src/unscoped-style-handler.js", "../src/node_modules/@webcomponents/shadycss/src/style-util.js", "../src/node_modules/@webcomponents/shadycss/src/common-utils.js", "../src/node_modules/@webcomponents/shadycss/src/apply-shim.js", "../src/node_modules/@webcomponents/shadycss/src/template-map.js", "../src/node_modules/@webcomponents/shadycss/src/apply-shim-utils.js", "../src/node_modules/@webcomponents/shadycss/src/document-wait.js", "../src/node_modules/@webcomponents/shadycss/src/custom-style-interface.js", "../src/node_modules/@webcomponents/shadycss/entrypoints/apply-shim.js", "../src/node_modules/@polymer/polymer/lib/mixins/dir-mixin.js", "../src/node_modules/@polymer/polymer/lib/utils/render-status.js", "../src/node_modules/@polymer/polymer/lib/utils/unresolved.js", "../src/node_modules/@polymer/polymer/lib/utils/array-splice.js", "../src/node_modules/@polymer/polymer/lib/utils/flattened-nodes-observer.js", "../src/node_modules/@polymer/polymer/lib/utils/flush.js", "../src/node_modules/@polymer/polymer/lib/legacy/polymer.dom.js", "../src/node_modules/@polymer/polymer/lib/utils/scope-subtree.js", "../src/node_modules/@polymer/polymer/lib/mixins/disable-upgrade-mixin.js", "../src/node_modules/@polymer/polymer/lib/legacy/legacy-element-mixin.js", "../src/node_modules/@polymer/polymer/lib/legacy/class.js", "../src/node_modules/@polymer/polymer/lib/legacy/polymer-fn.js", "../src/node_modules/@polymer/polymer/lib/mixins/mutable-data.js", "../src/node_modules/@polymer/polymer/lib/utils/templatize.js", "../src/node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js", "../src/node_modules/@polymer/polymer/lib/utils/hide-template-controls.js", "../src/node_modules/@polymer/polymer/lib/elements/dom-bind.js", "../src/node_modules/@polymer/polymer/lib/elements/dom-repeat.js", "../src/node_modules/@polymer/polymer/lib/elements/dom-if.js", "../src/node_modules/@polymer/polymer/lib/elements/array-selector.js", "../src/node_modules/@webcomponents/shadycss/entrypoints/custom-style-interface.js", "../src/node_modules/@polymer/polymer/lib/elements/custom-style.js", "../src/node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js", "../src/node_modules/@polymer/polymer/polymer-legacy.js", "../src/node_modules/@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js", "../src/node_modules/@polymer/iron-form-element-behavior/iron-form-element-behavior.js", "../src/node_modules/@polymer/iron-behaviors/iron-control-state.js", "../src/node_modules/@polymer/iron-behaviors/iron-button-state.js", "../src/node_modules/@polymer/paper-ripple/paper-ripple.js", "../src/node_modules/@polymer/paper-behaviors/paper-ripple-behavior.js", "../src/node_modules/@polymer/paper-behaviors/paper-inky-focus-behavior.js", "../src/node_modules/@polymer/iron-range-behavior/iron-range-behavior.js", "../src/node_modules/@polymer/iron-flex-layout/iron-flex-layout.js", "../src/node_modules/@polymer/paper-styles/color.js", "../src/node_modules/@polymer/paper-progress/paper-progress.js", "../src/node_modules/@polymer/iron-a11y-announcer/iron-a11y-announcer.js", "../src/node_modules/@polymer/iron-meta/iron-meta.js", "../src/node_modules/@polymer/iron-validatable-behavior/iron-validatable-behavior.js", "../src/node_modules/@polymer/iron-input/iron-input.js", "../src/node_modules/@polymer/font-roboto/roboto.js", "../src/node_modules/@polymer/paper-styles/typography.js", "../src/node_modules/@polymer/paper-input/paper-input-addon-behavior.js", "../src/node_modules/@polymer/paper-input/paper-input-char-counter.js", "../src/node_modules/@polymer/paper-styles/default-theme.js", "../src/node_modules/@polymer/paper-input/paper-input-container.js", "../src/node_modules/@polymer/paper-input/paper-input-error.js", "../src/node_modules/@polymer/paper-input/paper-input-behavior.js", "../src/node_modules/@polymer/paper-input/paper-input.js", "../src/node_modules/paper-range-slider/paper-single-range-slider.js", "../src/node_modules/paper-range-slider/paper-range-slider.js", "../src/shared/apollo-client.js", "../src/shared/index.js"],
  "sourcesContent": ["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\n/* global global, define, System, Reflect, Promise */\r\nvar __extends;\r\nvar __assign;\r\nvar __rest;\r\nvar __decorate;\r\nvar __param;\r\nvar __metadata;\r\nvar __awaiter;\r\nvar __generator;\r\nvar __exportStar;\r\nvar __values;\r\nvar __read;\r\nvar __spread;\r\nvar __spreadArrays;\r\nvar __await;\r\nvar __asyncGenerator;\r\nvar __asyncDelegator;\r\nvar __asyncValues;\r\nvar __makeTemplateObject;\r\nvar __importStar;\r\nvar __importDefault;\r\nvar __classPrivateFieldGet;\r\nvar __classPrivateFieldSet;\r\nvar __createBinding;\r\n(function (factory) {\r\n    var root = typeof global === \"object\" ? global : typeof self === \"object\" ? self : typeof this === \"object\" ? this : {};\r\n    if (typeof define === \"function\" && define.amd) {\r\n        define(\"tslib\", [\"exports\"], function (exports) { factory(createExporter(root, createExporter(exports))); });\r\n    }\r\n    else if (typeof module === \"object\" && typeof module.exports === \"object\") {\r\n        factory(createExporter(root, createExporter(module.exports)));\r\n    }\r\n    else {\r\n        factory(createExporter(root));\r\n    }\r\n    function createExporter(exports, previous) {\r\n        if (exports !== root) {\r\n            if (typeof Object.create === \"function\") {\r\n                Object.defineProperty(exports, \"__esModule\", { value: true });\r\n            }\r\n            else {\r\n                exports.__esModule = true;\r\n            }\r\n        }\r\n        return function (id, v) { return exports[id] = previous ? previous(id, v) : v; };\r\n    }\r\n})\r\n(function (exporter) {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\n    __extends = function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n\r\n    __assign = Object.assign || function (t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n\r\n    __rest = function (s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    };\r\n\r\n    __decorate = function (decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    };\r\n\r\n    __param = function (paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    };\r\n\r\n    __metadata = function (metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    };\r\n\r\n    __awaiter = function (thisArg, _arguments, P, generator) {\r\n        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    };\r\n\r\n    __generator = function (thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    };\r\n\r\n    __createBinding = function(o, m, k, k2) {\r\n        if (k2 === undefined) k2 = k;\r\n        o[k2] = m[k];\r\n    };\r\n\r\n    __exportStar = function (m, exports) {\r\n        for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    };\r\n\r\n    __values = function (o) {\r\n        var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n        if (m) return m.call(o);\r\n        if (o && typeof o.length === \"number\") return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n        throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n    };\r\n\r\n    __read = function (o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    };\r\n\r\n    __spread = function () {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    };\r\n\r\n    __spreadArrays = function () {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    __await = function (v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    };\r\n\r\n    __asyncGenerator = function (thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    };\r\n\r\n    __asyncDelegator = function (o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    };\r\n\r\n    __asyncValues = function (o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    };\r\n\r\n    __makeTemplateObject = function (cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    __importStar = function (mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result[\"default\"] = mod;\r\n        return result;\r\n    };\r\n\r\n    __importDefault = function (mod) {\r\n        return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n    };\r\n\r\n    __classPrivateFieldGet = function (receiver, privateMap) {\r\n        if (!privateMap.has(receiver)) {\r\n            throw new TypeError(\"attempted to get private field on non-instance\");\r\n        }\r\n        return privateMap.get(receiver);\r\n    };\r\n\r\n    __classPrivateFieldSet = function (receiver, privateMap, value) {\r\n        if (!privateMap.has(receiver)) {\r\n            throw new TypeError(\"attempted to set private field on non-instance\");\r\n        }\r\n        privateMap.set(receiver, value);\r\n        return value;\r\n    };\r\n\r\n    exporter(\"__extends\", __extends);\r\n    exporter(\"__assign\", __assign);\r\n    exporter(\"__rest\", __rest);\r\n    exporter(\"__decorate\", __decorate);\r\n    exporter(\"__param\", __param);\r\n    exporter(\"__metadata\", __metadata);\r\n    exporter(\"__awaiter\", __awaiter);\r\n    exporter(\"__generator\", __generator);\r\n    exporter(\"__exportStar\", __exportStar);\r\n    exporter(\"__createBinding\", __createBinding);\r\n    exporter(\"__values\", __values);\r\n    exporter(\"__read\", __read);\r\n    exporter(\"__spread\", __spread);\r\n    exporter(\"__spreadArrays\", __spreadArrays);\r\n    exporter(\"__await\", __await);\r\n    exporter(\"__asyncGenerator\", __asyncGenerator);\r\n    exporter(\"__asyncDelegator\", __asyncDelegator);\r\n    exporter(\"__asyncValues\", __asyncValues);\r\n    exporter(\"__makeTemplateObject\", __makeTemplateObject);\r\n    exporter(\"__importStar\", __importStar);\r\n    exporter(\"__importDefault\", __importDefault);\r\n    exporter(\"__classPrivateFieldGet\", __classPrivateFieldGet);\r\n    exporter(\"__classPrivateFieldSet\", __classPrivateFieldSet);\r\n});\r\n", "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\n/* global global, define, System, Reflect, Promise */\r\nvar __extends;\r\nvar __assign;\r\nvar __rest;\r\nvar __decorate;\r\nvar __param;\r\nvar __metadata;\r\nvar __awaiter;\r\nvar __generator;\r\nvar __exportStar;\r\nvar __values;\r\nvar __read;\r\nvar __spread;\r\nvar __spreadArrays;\r\nvar __await;\r\nvar __asyncGenerator;\r\nvar __asyncDelegator;\r\nvar __asyncValues;\r\nvar __makeTemplateObject;\r\nvar __importStar;\r\nvar __importDefault;\r\nvar __classPrivateFieldGet;\r\nvar __classPrivateFieldSet;\r\nvar __createBinding;\r\n(function (factory) {\r\n    var root = typeof global === \"object\" ? global : typeof self === \"object\" ? self : typeof this === \"object\" ? this : {};\r\n    if (typeof define === \"function\" && define.amd) {\r\n        define(\"tslib\", [\"exports\"], function (exports) { factory(createExporter(root, createExporter(exports))); });\r\n    }\r\n    else if (typeof module === \"object\" && typeof module.exports === \"object\") {\r\n        factory(createExporter(root, createExporter(module.exports)));\r\n    }\r\n    else {\r\n        factory(createExporter(root));\r\n    }\r\n    function createExporter(exports, previous) {\r\n        if (exports !== root) {\r\n            if (typeof Object.create === \"function\") {\r\n                Object.defineProperty(exports, \"__esModule\", { value: true });\r\n            }\r\n            else {\r\n                exports.__esModule = true;\r\n            }\r\n        }\r\n        return function (id, v) { return exports[id] = previous ? previous(id, v) : v; };\r\n    }\r\n})\r\n(function (exporter) {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\n    __extends = function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n\r\n    __assign = Object.assign || function (t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n\r\n    __rest = function (s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    };\r\n\r\n    __decorate = function (decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    };\r\n\r\n    __param = function (paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    };\r\n\r\n    __metadata = function (metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    };\r\n\r\n    __awaiter = function (thisArg, _arguments, P, generator) {\r\n        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    };\r\n\r\n    __generator = function (thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    };\r\n\r\n    __createBinding = function(o, m, k, k2) {\r\n        if (k2 === undefined) k2 = k;\r\n        o[k2] = m[k];\r\n    };\r\n\r\n    __exportStar = function (m, exports) {\r\n        for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    };\r\n\r\n    __values = function (o) {\r\n        var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n        if (m) return m.call(o);\r\n        if (o && typeof o.length === \"number\") return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n        throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n    };\r\n\r\n    __read = function (o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    };\r\n\r\n    __spread = function () {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    };\r\n\r\n    __spreadArrays = function () {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    __await = function (v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    };\r\n\r\n    __asyncGenerator = function (thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    };\r\n\r\n    __asyncDelegator = function (o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    };\r\n\r\n    __asyncValues = function (o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    };\r\n\r\n    __makeTemplateObject = function (cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    __importStar = function (mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result[\"default\"] = mod;\r\n        return result;\r\n    };\r\n\r\n    __importDefault = function (mod) {\r\n        return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n    };\r\n\r\n    __classPrivateFieldGet = function (receiver, privateMap) {\r\n        if (!privateMap.has(receiver)) {\r\n            throw new TypeError(\"attempted to get private field on non-instance\");\r\n        }\r\n        return privateMap.get(receiver);\r\n    };\r\n\r\n    __classPrivateFieldSet = function (receiver, privateMap, value) {\r\n        if (!privateMap.has(receiver)) {\r\n            throw new TypeError(\"attempted to set private field on non-instance\");\r\n        }\r\n        privateMap.set(receiver, value);\r\n        return value;\r\n    };\r\n\r\n    exporter(\"__extends\", __extends);\r\n    exporter(\"__assign\", __assign);\r\n    exporter(\"__rest\", __rest);\r\n    exporter(\"__decorate\", __decorate);\r\n    exporter(\"__param\", __param);\r\n    exporter(\"__metadata\", __metadata);\r\n    exporter(\"__awaiter\", __awaiter);\r\n    exporter(\"__generator\", __generator);\r\n    exporter(\"__exportStar\", __exportStar);\r\n    exporter(\"__createBinding\", __createBinding);\r\n    exporter(\"__values\", __values);\r\n    exporter(\"__read\", __read);\r\n    exporter(\"__spread\", __spread);\r\n    exporter(\"__spreadArrays\", __spreadArrays);\r\n    exporter(\"__await\", __await);\r\n    exporter(\"__asyncGenerator\", __asyncGenerator);\r\n    exporter(\"__asyncDelegator\", __asyncDelegator);\r\n    exporter(\"__asyncValues\", __asyncValues);\r\n    exporter(\"__makeTemplateObject\", __makeTemplateObject);\r\n    exporter(\"__importStar\", __importStar);\r\n    exporter(\"__importDefault\", __importDefault);\r\n    exporter(\"__classPrivateFieldGet\", __classPrivateFieldGet);\r\n    exporter(\"__classPrivateFieldSet\", __classPrivateFieldSet);\r\n});\r\n", "'use strict';\n\nmodule.exports = function (data, opts) {\n    if (!opts) opts = {};\n    if (typeof opts === 'function') opts = { cmp: opts };\n    var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;\n\n    var cmp = opts.cmp && (function (f) {\n        return function (node) {\n            return function (a, b) {\n                var aobj = { key: a, value: node[a] };\n                var bobj = { key: b, value: node[b] };\n                return f(aobj, bobj);\n            };\n        };\n    })(opts.cmp);\n\n    var seen = [];\n    return (function stringify (node) {\n        if (node && node.toJSON && typeof node.toJSON === 'function') {\n            node = node.toJSON();\n        }\n\n        if (node === undefined) return;\n        if (typeof node == 'number') return isFinite(node) ? '' + node : 'null';\n        if (typeof node !== 'object') return JSON.stringify(node);\n\n        var i, out;\n        if (Array.isArray(node)) {\n            out = '[';\n            for (i = 0; i < node.length; i++) {\n                if (i) out += ',';\n                out += stringify(node[i]) || 'null';\n            }\n            return out + ']';\n        }\n\n        if (node === null) return 'null';\n\n        if (seen.indexOf(node) !== -1) {\n            if (cycles) return JSON.stringify('__cycle__');\n            throw new TypeError('Converting circular structure to JSON');\n        }\n\n        var seenIndex = seen.push(node) - 1;\n        var keys = Object.keys(node).sort(cmp && cmp(node));\n        out = '';\n        for (i = 0; i < keys.length; i++) {\n            var key = keys[i];\n            var value = stringify(node[key]);\n\n            if (!value) continue;\n            if (out) out += ',';\n            out += JSON.stringify(key) + ':' + value;\n        }\n        seen.splice(seenIndex, 1);\n        return '{' + out + '}';\n    })(data);\n};\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Observable = void 0;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n// === Symbol Support ===\nvar hasSymbols = function () {\n  return typeof Symbol === 'function';\n};\n\nvar hasSymbol = function (name) {\n  return hasSymbols() && Boolean(Symbol[name]);\n};\n\nvar getSymbol = function (name) {\n  return hasSymbol(name) ? Symbol[name] : '@@' + name;\n};\n\nif (hasSymbols() && !hasSymbol('observable')) {\n  Symbol.observable = Symbol('observable');\n}\n\nvar SymbolIterator = getSymbol('iterator');\nvar SymbolObservable = getSymbol('observable');\nvar SymbolSpecies = getSymbol('species'); // === Abstract Operations ===\n\nfunction getMethod(obj, key) {\n  var value = obj[key];\n  if (value == null) return undefined;\n  if (typeof value !== 'function') throw new TypeError(value + ' is not a function');\n  return value;\n}\n\nfunction getSpecies(obj) {\n  var ctor = obj.constructor;\n\n  if (ctor !== undefined) {\n    ctor = ctor[SymbolSpecies];\n\n    if (ctor === null) {\n      ctor = undefined;\n    }\n  }\n\n  return ctor !== undefined ? ctor : Observable;\n}\n\nfunction isObservable(x) {\n  return x instanceof Observable; // SPEC: Brand check\n}\n\nfunction hostReportError(e) {\n  if (hostReportError.log) {\n    hostReportError.log(e);\n  } else {\n    setTimeout(function () {\n      throw e;\n    });\n  }\n}\n\nfunction enqueue(fn) {\n  Promise.resolve().then(function () {\n    try {\n      fn();\n    } catch (e) {\n      hostReportError(e);\n    }\n  });\n}\n\nfunction cleanupSubscription(subscription) {\n  var cleanup = subscription._cleanup;\n  if (cleanup === undefined) return;\n  subscription._cleanup = undefined;\n\n  if (!cleanup) {\n    return;\n  }\n\n  try {\n    if (typeof cleanup === 'function') {\n      cleanup();\n    } else {\n      var unsubscribe = getMethod(cleanup, 'unsubscribe');\n\n      if (unsubscribe) {\n        unsubscribe.call(cleanup);\n      }\n    }\n  } catch (e) {\n    hostReportError(e);\n  }\n}\n\nfunction closeSubscription(subscription) {\n  subscription._observer = undefined;\n  subscription._queue = undefined;\n  subscription._state = 'closed';\n}\n\nfunction flushSubscription(subscription) {\n  var queue = subscription._queue;\n\n  if (!queue) {\n    return;\n  }\n\n  subscription._queue = undefined;\n  subscription._state = 'ready';\n\n  for (var i = 0; i < queue.length; ++i) {\n    notifySubscription(subscription, queue[i].type, queue[i].value);\n    if (subscription._state === 'closed') break;\n  }\n}\n\nfunction notifySubscription(subscription, type, value) {\n  subscription._state = 'running';\n  var observer = subscription._observer;\n\n  try {\n    var m = getMethod(observer, type);\n\n    switch (type) {\n      case 'next':\n        if (m) m.call(observer, value);\n        break;\n\n      case 'error':\n        closeSubscription(subscription);\n        if (m) m.call(observer, value);else throw value;\n        break;\n\n      case 'complete':\n        closeSubscription(subscription);\n        if (m) m.call(observer);\n        break;\n    }\n  } catch (e) {\n    hostReportError(e);\n  }\n\n  if (subscription._state === 'closed') cleanupSubscription(subscription);else if (subscription._state === 'running') subscription._state = 'ready';\n}\n\nfunction onNotify(subscription, type, value) {\n  if (subscription._state === 'closed') return;\n\n  if (subscription._state === 'buffering') {\n    subscription._queue.push({\n      type: type,\n      value: value\n    });\n\n    return;\n  }\n\n  if (subscription._state !== 'ready') {\n    subscription._state = 'buffering';\n    subscription._queue = [{\n      type: type,\n      value: value\n    }];\n    enqueue(function () {\n      return flushSubscription(subscription);\n    });\n    return;\n  }\n\n  notifySubscription(subscription, type, value);\n}\n\nvar Subscription =\n/*#__PURE__*/\nfunction () {\n  function Subscription(observer, subscriber) {\n    _classCallCheck(this, Subscription);\n\n    // ASSERT: observer is an object\n    // ASSERT: subscriber is callable\n    this._cleanup = undefined;\n    this._observer = observer;\n    this._queue = undefined;\n    this._state = 'initializing';\n    var subscriptionObserver = new SubscriptionObserver(this);\n\n    try {\n      this._cleanup = subscriber.call(undefined, subscriptionObserver);\n    } catch (e) {\n      subscriptionObserver.error(e);\n    }\n\n    if (this._state === 'initializing') this._state = 'ready';\n  }\n\n  _createClass(Subscription, [{\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      if (this._state !== 'closed') {\n        closeSubscription(this);\n        cleanupSubscription(this);\n      }\n    }\n  }, {\n    key: \"closed\",\n    get: function () {\n      return this._state === 'closed';\n    }\n  }]);\n\n  return Subscription;\n}();\n\nvar SubscriptionObserver =\n/*#__PURE__*/\nfunction () {\n  function SubscriptionObserver(subscription) {\n    _classCallCheck(this, SubscriptionObserver);\n\n    this._subscription = subscription;\n  }\n\n  _createClass(SubscriptionObserver, [{\n    key: \"next\",\n    value: function next(value) {\n      onNotify(this._subscription, 'next', value);\n    }\n  }, {\n    key: \"error\",\n    value: function error(value) {\n      onNotify(this._subscription, 'error', value);\n    }\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      onNotify(this._subscription, 'complete');\n    }\n  }, {\n    key: \"closed\",\n    get: function () {\n      return this._subscription._state === 'closed';\n    }\n  }]);\n\n  return SubscriptionObserver;\n}();\n\nvar Observable =\n/*#__PURE__*/\nfunction () {\n  function Observable(subscriber) {\n    _classCallCheck(this, Observable);\n\n    if (!(this instanceof Observable)) throw new TypeError('Observable cannot be called as a function');\n    if (typeof subscriber !== 'function') throw new TypeError('Observable initializer must be a function');\n    this._subscriber = subscriber;\n  }\n\n  _createClass(Observable, [{\n    key: \"subscribe\",\n    value: function subscribe(observer) {\n      if (typeof observer !== 'object' || observer === null) {\n        observer = {\n          next: observer,\n          error: arguments[1],\n          complete: arguments[2]\n        };\n      }\n\n      return new Subscription(observer, this._subscriber);\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(fn) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        if (typeof fn !== 'function') {\n          reject(new TypeError(fn + ' is not a function'));\n          return;\n        }\n\n        function done() {\n          subscription.unsubscribe();\n          resolve();\n        }\n\n        var subscription = _this.subscribe({\n          next: function (value) {\n            try {\n              fn(value, done);\n            } catch (e) {\n              reject(e);\n              subscription.unsubscribe();\n            }\n          },\n          error: reject,\n          complete: resolve\n        });\n      });\n    }\n  }, {\n    key: \"map\",\n    value: function map(fn) {\n      var _this2 = this;\n\n      if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n      var C = getSpecies(this);\n      return new C(function (observer) {\n        return _this2.subscribe({\n          next: function (value) {\n            try {\n              value = fn(value);\n            } catch (e) {\n              return observer.error(e);\n            }\n\n            observer.next(value);\n          },\n          error: function (e) {\n            observer.error(e);\n          },\n          complete: function () {\n            observer.complete();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(fn) {\n      var _this3 = this;\n\n      if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n      var C = getSpecies(this);\n      return new C(function (observer) {\n        return _this3.subscribe({\n          next: function (value) {\n            try {\n              if (!fn(value)) return;\n            } catch (e) {\n              return observer.error(e);\n            }\n\n            observer.next(value);\n          },\n          error: function (e) {\n            observer.error(e);\n          },\n          complete: function () {\n            observer.complete();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"reduce\",\n    value: function reduce(fn) {\n      var _this4 = this;\n\n      if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n      var C = getSpecies(this);\n      var hasSeed = arguments.length > 1;\n      var hasValue = false;\n      var seed = arguments[1];\n      var acc = seed;\n      return new C(function (observer) {\n        return _this4.subscribe({\n          next: function (value) {\n            var first = !hasValue;\n            hasValue = true;\n\n            if (!first || hasSeed) {\n              try {\n                acc = fn(acc, value);\n              } catch (e) {\n                return observer.error(e);\n              }\n            } else {\n              acc = value;\n            }\n          },\n          error: function (e) {\n            observer.error(e);\n          },\n          complete: function () {\n            if (!hasValue && !hasSeed) return observer.error(new TypeError('Cannot reduce an empty sequence'));\n            observer.next(acc);\n            observer.complete();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"concat\",\n    value: function concat() {\n      var _this5 = this;\n\n      for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {\n        sources[_key] = arguments[_key];\n      }\n\n      var C = getSpecies(this);\n      return new C(function (observer) {\n        var subscription;\n        var index = 0;\n\n        function startNext(next) {\n          subscription = next.subscribe({\n            next: function (v) {\n              observer.next(v);\n            },\n            error: function (e) {\n              observer.error(e);\n            },\n            complete: function () {\n              if (index === sources.length) {\n                subscription = undefined;\n                observer.complete();\n              } else {\n                startNext(C.from(sources[index++]));\n              }\n            }\n          });\n        }\n\n        startNext(_this5);\n        return function () {\n          if (subscription) {\n            subscription.unsubscribe();\n            subscription = undefined;\n          }\n        };\n      });\n    }\n  }, {\n    key: \"flatMap\",\n    value: function flatMap(fn) {\n      var _this6 = this;\n\n      if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n      var C = getSpecies(this);\n      return new C(function (observer) {\n        var subscriptions = [];\n\n        var outer = _this6.subscribe({\n          next: function (value) {\n            if (fn) {\n              try {\n                value = fn(value);\n              } catch (e) {\n                return observer.error(e);\n              }\n            }\n\n            var inner = C.from(value).subscribe({\n              next: function (value) {\n                observer.next(value);\n              },\n              error: function (e) {\n                observer.error(e);\n              },\n              complete: function () {\n                var i = subscriptions.indexOf(inner);\n                if (i >= 0) subscriptions.splice(i, 1);\n                completeIfDone();\n              }\n            });\n            subscriptions.push(inner);\n          },\n          error: function (e) {\n            observer.error(e);\n          },\n          complete: function () {\n            completeIfDone();\n          }\n        });\n\n        function completeIfDone() {\n          if (outer.closed && subscriptions.length === 0) observer.complete();\n        }\n\n        return function () {\n          subscriptions.forEach(function (s) {\n            return s.unsubscribe();\n          });\n          outer.unsubscribe();\n        };\n      });\n    }\n  }, {\n    key: SymbolObservable,\n    value: function () {\n      return this;\n    }\n  }], [{\n    key: \"from\",\n    value: function from(x) {\n      var C = typeof this === 'function' ? this : Observable;\n      if (x == null) throw new TypeError(x + ' is not an object');\n      var method = getMethod(x, SymbolObservable);\n\n      if (method) {\n        var observable = method.call(x);\n        if (Object(observable) !== observable) throw new TypeError(observable + ' is not an object');\n        if (isObservable(observable) && observable.constructor === C) return observable;\n        return new C(function (observer) {\n          return observable.subscribe(observer);\n        });\n      }\n\n      if (hasSymbol('iterator')) {\n        method = getMethod(x, SymbolIterator);\n\n        if (method) {\n          return new C(function (observer) {\n            enqueue(function () {\n              if (observer.closed) return;\n              var _iteratorNormalCompletion = true;\n              var _didIteratorError = false;\n              var _iteratorError = undefined;\n\n              try {\n                for (var _iterator = method.call(x)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                  var _item = _step.value;\n                  observer.next(_item);\n                  if (observer.closed) return;\n                }\n              } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                  }\n                } finally {\n                  if (_didIteratorError) {\n                    throw _iteratorError;\n                  }\n                }\n              }\n\n              observer.complete();\n            });\n          });\n        }\n      }\n\n      if (Array.isArray(x)) {\n        return new C(function (observer) {\n          enqueue(function () {\n            if (observer.closed) return;\n\n            for (var i = 0; i < x.length; ++i) {\n              observer.next(x[i]);\n              if (observer.closed) return;\n            }\n\n            observer.complete();\n          });\n        });\n      }\n\n      throw new TypeError(x + ' is not observable');\n    }\n  }, {\n    key: \"of\",\n    value: function of() {\n      for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        items[_key2] = arguments[_key2];\n      }\n\n      var C = typeof this === 'function' ? this : Observable;\n      return new C(function (observer) {\n        enqueue(function () {\n          if (observer.closed) return;\n\n          for (var i = 0; i < items.length; ++i) {\n            observer.next(items[i]);\n            if (observer.closed) return;\n          }\n\n          observer.complete();\n        });\n      });\n    }\n  }, {\n    key: SymbolSpecies,\n    get: function () {\n      return this;\n    }\n  }]);\n\n  return Observable;\n}();\n\nexports.Observable = Observable;\n\nif (hasSymbols()) {\n  Object.defineProperty(Observable, Symbol('extensions'), {\n    value: {\n      symbol: SymbolObservable,\n      hostReportError: hostReportError\n    },\n    configurable: true\n  });\n}", "module.exports = require('./lib/Observable.js').Observable;\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n// istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')\nvar nodejsCustomInspectSymbol = typeof Symbol === 'function' && typeof Symbol.for === 'function' ? Symbol.for('nodejs.util.inspect.custom') : undefined;\nvar _default = nodejsCustomInspectSymbol;\nexports.default = _default;\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = inspect;\n\nvar _nodejsCustomInspectSymbol = _interopRequireDefault(require(\"./nodejsCustomInspectSymbol.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar MAX_ARRAY_LENGTH = 10;\nvar MAX_RECURSIVE_DEPTH = 2;\n/**\n * Used to print values in error messages.\n */\n\nfunction inspect(value) {\n  return formatValue(value, []);\n}\n\nfunction formatValue(value, seenValues) {\n  switch (_typeof(value)) {\n    case 'string':\n      return JSON.stringify(value);\n\n    case 'function':\n      return value.name ? \"[function \".concat(value.name, \"]\") : '[function]';\n\n    case 'object':\n      if (value === null) {\n        return 'null';\n      }\n\n      return formatObjectValue(value, seenValues);\n\n    default:\n      return String(value);\n  }\n}\n\nfunction formatObjectValue(value, previouslySeenValues) {\n  if (previouslySeenValues.indexOf(value) !== -1) {\n    return '[Circular]';\n  }\n\n  var seenValues = [].concat(previouslySeenValues, [value]);\n  var customInspectFn = getCustomFn(value);\n\n  if (customInspectFn !== undefined) {\n    var customValue = customInspectFn.call(value); // check for infinite recursion\n\n    if (customValue !== value) {\n      return typeof customValue === 'string' ? customValue : formatValue(customValue, seenValues);\n    }\n  } else if (Array.isArray(value)) {\n    return formatArray(value, seenValues);\n  }\n\n  return formatObject(value, seenValues);\n}\n\nfunction formatObject(object, seenValues) {\n  var keys = Object.keys(object);\n\n  if (keys.length === 0) {\n    return '{}';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[' + getObjectTag(object) + ']';\n  }\n\n  var properties = keys.map(function (key) {\n    var value = formatValue(object[key], seenValues);\n    return key + ': ' + value;\n  });\n  return '{ ' + properties.join(', ') + ' }';\n}\n\nfunction formatArray(array, seenValues) {\n  if (array.length === 0) {\n    return '[]';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[Array]';\n  }\n\n  var len = Math.min(MAX_ARRAY_LENGTH, array.length);\n  var remaining = array.length - len;\n  var items = [];\n\n  for (var i = 0; i < len; ++i) {\n    items.push(formatValue(array[i], seenValues));\n  }\n\n  if (remaining === 1) {\n    items.push('... 1 more item');\n  } else if (remaining > 1) {\n    items.push(\"... \".concat(remaining, \" more items\"));\n  }\n\n  return '[' + items.join(', ') + ']';\n}\n\nfunction getCustomFn(object) {\n  var customInspectFn = object[String(_nodejsCustomInspectSymbol.default)];\n\n  if (typeof customInspectFn === 'function') {\n    return customInspectFn;\n  }\n\n  if (typeof object.inspect === 'function') {\n    return object.inspect;\n  }\n}\n\nfunction getObjectTag(object) {\n  var tag = Object.prototype.toString.call(object).replace(/^\\[object /, '').replace(/]$/, '');\n\n  if (tag === 'Object' && typeof object.constructor === 'function') {\n    var name = object.constructor.name;\n\n    if (typeof name === 'string' && name !== '') {\n      return name;\n    }\n  }\n\n  return tag;\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = invariant;\n\nfunction invariant(condition, message) {\n  var booleanCondition = Boolean(condition); // istanbul ignore else (See transformation done in './resources/inlineInvariant.js')\n\n  if (!booleanCondition) {\n    throw new Error(message != null ? message : 'Unexpected invariant triggered.');\n  }\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = defineInspect;\n\nvar _invariant = _interopRequireDefault(require(\"./invariant.js\"));\n\nvar _nodejsCustomInspectSymbol = _interopRequireDefault(require(\"./nodejsCustomInspectSymbol.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * The `defineInspect()` function defines `inspect()` prototype method as alias of `toJSON`\n */\nfunction defineInspect(classObject) {\n  var fn = classObject.prototype.toJSON;\n  typeof fn === 'function' || (0, _invariant.default)(0);\n  classObject.prototype.inspect = fn; // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2317')\n\n  if (_nodejsCustomInspectSymbol.default) {\n    classObject.prototype[_nodejsCustomInspectSymbol.default] = fn;\n  }\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isNode = isNode;\nexports.Token = exports.Location = void 0;\n\nvar _defineInspect = _interopRequireDefault(require(\"../jsutils/defineInspect.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Contains a range of UTF-8 character offsets and token references that\n * identify the region of the source from which the AST derived.\n */\nvar Location = /*#__PURE__*/function () {\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The Token at which this Node begins.\n   */\n\n  /**\n   * The Token at which this Node ends.\n   */\n\n  /**\n   * The Source document the AST represents.\n   */\n  function Location(startToken, endToken, source) {\n    this.start = startToken.start;\n    this.end = endToken.end;\n    this.startToken = startToken;\n    this.endToken = endToken;\n    this.source = source;\n  }\n\n  var _proto = Location.prototype;\n\n  _proto.toJSON = function toJSON() {\n    return {\n      start: this.start,\n      end: this.end\n    };\n  };\n\n  return Location;\n}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.\n\n\nexports.Location = Location;\n(0, _defineInspect.default)(Location);\n/**\n * Represents a range of characters represented by a lexical token\n * within a Source.\n */\n\nvar Token = /*#__PURE__*/function () {\n  /**\n   * The kind of Token.\n   */\n\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The 1-indexed line number on which this Token appears.\n   */\n\n  /**\n   * The 1-indexed column number at which this Token begins.\n   */\n\n  /**\n   * For non-punctuation tokens, represents the interpreted value of the token.\n   */\n\n  /**\n   * Tokens exist as nodes in a double-linked-list amongst all tokens\n   * including ignored tokens. <SOF> is always the first node and <EOF>\n   * the last.\n   */\n  function Token(kind, start, end, line, column, prev, value) {\n    this.kind = kind;\n    this.start = start;\n    this.end = end;\n    this.line = line;\n    this.column = column;\n    this.value = value;\n    this.prev = prev;\n    this.next = null;\n  }\n\n  var _proto2 = Token.prototype;\n\n  _proto2.toJSON = function toJSON() {\n    return {\n      kind: this.kind,\n      value: this.value,\n      line: this.line,\n      column: this.column\n    };\n  };\n\n  return Token;\n}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.\n\n\nexports.Token = Token;\n(0, _defineInspect.default)(Token);\n/**\n * @internal\n */\n\nfunction isNode(maybeNode) {\n  return maybeNode != null && typeof maybeNode.kind === 'string';\n}\n/**\n * The list of all possible AST node types.\n */\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.visit = visit;\nexports.visitInParallel = visitInParallel;\nexports.getVisitFn = getVisitFn;\nexports.BREAK = exports.QueryDocumentKeys = void 0;\n\nvar _inspect = _interopRequireDefault(require(\"../jsutils/inspect.js\"));\n\nvar _ast = require(\"./ast.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar QueryDocumentKeys = {\n  Name: [],\n  Document: ['definitions'],\n  OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],\n  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: ['name', // Note: fragment variable definitions are experimental and may be changed\n  // or removed in the future.\n  'variableDefinitions', 'typeCondition', 'directives', 'selectionSet'],\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n  Directive: ['name', 'arguments'],\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n  SchemaDefinition: ['description', 'directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: ['description', 'name', 'type', 'defaultValue', 'directives'],\n  InterfaceTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],\n  SchemaExtension: ['directives', 'operationTypes'],\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields']\n};\nexports.QueryDocumentKeys = QueryDocumentKeys;\nvar BREAK = Object.freeze({});\n/**\n * visit() will walk through an AST using a depth-first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n *     const editedAST = visit(ast, {\n *       enter(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: skip visiting this node\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       },\n *       leave(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: no action\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       }\n *     });\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to four permutations of the\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node of a specific kind.\n *\n *     visit(ast, {\n *       Kind(node) {\n *         // enter the \"Kind\" node\n *       }\n *     })\n *\n * 2) Named visitors that trigger upon entering and leaving a node of\n *    a specific kind.\n *\n *     visit(ast, {\n *       Kind: {\n *         enter(node) {\n *           // enter the \"Kind\" node\n *         }\n *         leave(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n *     visit(ast, {\n *       enter(node) {\n *         // enter any node\n *       },\n *       leave(node) {\n *         // leave any node\n *       }\n *     })\n *\n * 4) Parallel visitors for entering and leaving nodes of a specific kind.\n *\n *     visit(ast, {\n *       enter: {\n *         Kind(node) {\n *           // enter the \"Kind\" node\n *         }\n *       },\n *       leave: {\n *         Kind(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n */\n\nexports.BREAK = BREAK;\n\nfunction visit(root, visitor) {\n  var visitorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : QueryDocumentKeys;\n\n  /* eslint-disable no-undef-init */\n  var stack = undefined;\n  var inArray = Array.isArray(root);\n  var keys = [root];\n  var index = -1;\n  var edits = [];\n  var node = undefined;\n  var key = undefined;\n  var parent = undefined;\n  var path = [];\n  var ancestors = [];\n  var newRoot = root;\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    var isLeaving = index === keys.length;\n    var isEdited = isLeaving && edits.length !== 0;\n\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n        } else {\n          var clone = {};\n\n          for (var _i2 = 0, _Object$keys2 = Object.keys(node); _i2 < _Object$keys2.length; _i2++) {\n            var k = _Object$keys2[_i2];\n            clone[k] = node[k];\n          }\n\n          node = clone;\n        }\n\n        var editOffset = 0;\n\n        for (var ii = 0; ii < edits.length; ii++) {\n          var editKey = edits[ii][0];\n          var editValue = edits[ii][1];\n\n          if (inArray) {\n            editKey -= editOffset;\n          }\n\n          if (inArray && editValue === null) {\n            node.splice(editKey, 1);\n            editOffset++;\n          } else {\n            node[editKey] = editValue;\n          }\n        }\n      }\n\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else {\n      key = parent ? inArray ? index : keys[index] : undefined;\n      node = parent ? parent[key] : newRoot;\n\n      if (node === null || node === undefined) {\n        continue;\n      }\n\n      if (parent) {\n        path.push(key);\n      }\n    }\n\n    var result = void 0;\n\n    if (!Array.isArray(node)) {\n      if (!(0, _ast.isNode)(node)) {\n        throw new Error(\"Invalid AST Node: \".concat((0, _inspect.default)(node), \".\"));\n      }\n\n      var visitFn = getVisitFn(visitor, node.kind, isLeaving);\n\n      if (visitFn) {\n        result = visitFn.call(visitor, node, key, parent, path, ancestors);\n\n        if (result === BREAK) {\n          break;\n        }\n\n        if (result === false) {\n          if (!isLeaving) {\n            path.pop();\n            continue;\n          }\n        } else if (result !== undefined) {\n          edits.push([key, result]);\n\n          if (!isLeaving) {\n            if ((0, _ast.isNode)(result)) {\n              node = result;\n            } else {\n              path.pop();\n              continue;\n            }\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      var _visitorKeys$node$kin;\n\n      stack = {\n        inArray: inArray,\n        index: index,\n        keys: keys,\n        edits: edits,\n        prev: stack\n      };\n      inArray = Array.isArray(node);\n      keys = inArray ? node : (_visitorKeys$node$kin = visitorKeys[node.kind]) !== null && _visitorKeys$node$kin !== void 0 ? _visitorKeys$node$kin : [];\n      index = -1;\n      edits = [];\n\n      if (parent) {\n        ancestors.push(parent);\n      }\n\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    newRoot = edits[edits.length - 1][1];\n  }\n\n  return newRoot;\n}\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\n\n\nfunction visitInParallel(visitors) {\n  var skipping = new Array(visitors.length);\n  return {\n    enter: function enter(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (skipping[i] == null) {\n          var fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          false);\n\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      }\n    },\n    leave: function leave(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (skipping[i] == null) {\n          var fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          true);\n\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          }\n        } else if (skipping[i] === node) {\n          skipping[i] = null;\n        }\n      }\n    }\n  };\n}\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n */\n\n\nfunction getVisitFn(visitor, kind, isLeaving) {\n  var kindVisitor = visitor[kind];\n\n  if (kindVisitor) {\n    if (!isLeaving && typeof kindVisitor === 'function') {\n      // { Kind() {} }\n      return kindVisitor;\n    }\n\n    var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;\n\n    if (typeof kindSpecificVisitor === 'function') {\n      // { Kind: { enter() {}, leave() {} } }\n      return kindSpecificVisitor;\n    }\n  } else {\n    var specificVisitor = isLeaving ? visitor.leave : visitor.enter;\n\n    if (specificVisitor) {\n      if (typeof specificVisitor === 'function') {\n        // { enter() {}, leave() {} }\n        return specificVisitor;\n      }\n\n      var specificKindVisitor = specificVisitor[kind];\n\n      if (typeof specificKindVisitor === 'function') {\n        // { enter: { Kind() {} }, leave: { Kind() {} } }\n        return specificKindVisitor;\n      }\n    }\n  }\n}\n", "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\n/* global global, define, System, Reflect, Promise */\r\nvar __extends;\r\nvar __assign;\r\nvar __rest;\r\nvar __decorate;\r\nvar __param;\r\nvar __metadata;\r\nvar __awaiter;\r\nvar __generator;\r\nvar __exportStar;\r\nvar __values;\r\nvar __read;\r\nvar __spread;\r\nvar __spreadArrays;\r\nvar __await;\r\nvar __asyncGenerator;\r\nvar __asyncDelegator;\r\nvar __asyncValues;\r\nvar __makeTemplateObject;\r\nvar __importStar;\r\nvar __importDefault;\r\nvar __classPrivateFieldGet;\r\nvar __classPrivateFieldSet;\r\nvar __createBinding;\r\n(function (factory) {\r\n    var root = typeof global === \"object\" ? global : typeof self === \"object\" ? self : typeof this === \"object\" ? this : {};\r\n    if (typeof define === \"function\" && define.amd) {\r\n        define(\"tslib\", [\"exports\"], function (exports) { factory(createExporter(root, createExporter(exports))); });\r\n    }\r\n    else if (typeof module === \"object\" && typeof module.exports === \"object\") {\r\n        factory(createExporter(root, createExporter(module.exports)));\r\n    }\r\n    else {\r\n        factory(createExporter(root));\r\n    }\r\n    function createExporter(exports, previous) {\r\n        if (exports !== root) {\r\n            if (typeof Object.create === \"function\") {\r\n                Object.defineProperty(exports, \"__esModule\", { value: true });\r\n            }\r\n            else {\r\n                exports.__esModule = true;\r\n            }\r\n        }\r\n        return function (id, v) { return exports[id] = previous ? previous(id, v) : v; };\r\n    }\r\n})\r\n(function (exporter) {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\n    __extends = function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n\r\n    __assign = Object.assign || function (t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n\r\n    __rest = function (s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    };\r\n\r\n    __decorate = function (decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    };\r\n\r\n    __param = function (paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    };\r\n\r\n    __metadata = function (metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    };\r\n\r\n    __awaiter = function (thisArg, _arguments, P, generator) {\r\n        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    };\r\n\r\n    __generator = function (thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    };\r\n\r\n    __createBinding = function(o, m, k, k2) {\r\n        if (k2 === undefined) k2 = k;\r\n        o[k2] = m[k];\r\n    };\r\n\r\n    __exportStar = function (m, exports) {\r\n        for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    };\r\n\r\n    __values = function (o) {\r\n        var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n        if (m) return m.call(o);\r\n        if (o && typeof o.length === \"number\") return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n        throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n    };\r\n\r\n    __read = function (o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    };\r\n\r\n    __spread = function () {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    };\r\n\r\n    __spreadArrays = function () {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    __await = function (v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    };\r\n\r\n    __asyncGenerator = function (thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    };\r\n\r\n    __asyncDelegator = function (o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    };\r\n\r\n    __asyncValues = function (o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    };\r\n\r\n    __makeTemplateObject = function (cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    __importStar = function (mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result[\"default\"] = mod;\r\n        return result;\r\n    };\r\n\r\n    __importDefault = function (mod) {\r\n        return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n    };\r\n\r\n    __classPrivateFieldGet = function (receiver, privateMap) {\r\n        if (!privateMap.has(receiver)) {\r\n            throw new TypeError(\"attempted to get private field on non-instance\");\r\n        }\r\n        return privateMap.get(receiver);\r\n    };\r\n\r\n    __classPrivateFieldSet = function (receiver, privateMap, value) {\r\n        if (!privateMap.has(receiver)) {\r\n            throw new TypeError(\"attempted to set private field on non-instance\");\r\n        }\r\n        privateMap.set(receiver, value);\r\n        return value;\r\n    };\r\n\r\n    exporter(\"__extends\", __extends);\r\n    exporter(\"__assign\", __assign);\r\n    exporter(\"__rest\", __rest);\r\n    exporter(\"__decorate\", __decorate);\r\n    exporter(\"__param\", __param);\r\n    exporter(\"__metadata\", __metadata);\r\n    exporter(\"__awaiter\", __awaiter);\r\n    exporter(\"__generator\", __generator);\r\n    exporter(\"__exportStar\", __exportStar);\r\n    exporter(\"__createBinding\", __createBinding);\r\n    exporter(\"__values\", __values);\r\n    exporter(\"__read\", __read);\r\n    exporter(\"__spread\", __spread);\r\n    exporter(\"__spreadArrays\", __spreadArrays);\r\n    exporter(\"__await\", __await);\r\n    exporter(\"__asyncGenerator\", __asyncGenerator);\r\n    exporter(\"__asyncDelegator\", __asyncDelegator);\r\n    exporter(\"__asyncValues\", __asyncValues);\r\n    exporter(\"__makeTemplateObject\", __makeTemplateObject);\r\n    exporter(\"__importStar\", __importStar);\r\n    exporter(\"__importDefault\", __importDefault);\r\n    exporter(\"__classPrivateFieldGet\", __classPrivateFieldGet);\r\n    exporter(\"__classPrivateFieldSet\", __classPrivateFieldSet);\r\n});\r\n", "/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for comparison styles. */\nvar UNORDERED_COMPARE_FLAG = 1,\n    PARTIAL_COMPARE_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values ? values.length : 0;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHasIn(object, key) {\n  return object != null && key in Object(object);\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {boolean} [bitmask] The bitmask of comparison flags.\n *  The bitmask may be composed of the following flags:\n *     1 - Unordered comparison\n *     2 - Partial comparison\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, customizer, bitmask, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = arrayTag,\n      othTag = arrayTag;\n\n  if (!objIsArr) {\n    objTag = getTag(object);\n    objTag = objTag == argsTag ? objectTag : objTag;\n  }\n  if (!othIsArr) {\n    othTag = getTag(other);\n    othTag = othTag == argsTag ? objectTag : othTag;\n  }\n  var objIsObj = objTag == objectTag && !isHostObject(object),\n      othIsObj = othTag == objectTag && !isHostObject(other),\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)\n      : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);\n  }\n  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);\n}\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];\n}\n\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n  if (value == null) {\n    return identity;\n  }\n  if (typeof value == 'object') {\n    return isArray(value)\n      ? baseMatchesProperty(value[0], value[1])\n      : baseMatches(value);\n  }\n  return property(value);\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatches(source) {\n  var matchData = getMatchData(source);\n  if (matchData.length == 1 && matchData[0][2]) {\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n  return function(object) {\n    return object === source || baseIsMatch(object, source, matchData);\n  };\n}\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);\n  };\n}\n\n/**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} props The property identifiers to pick from.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */\nfunction basePickBy(object, props, predicate) {\n  var index = -1,\n      length = props.length,\n      result = {};\n\n  while (++index < length) {\n    var key = props[index],\n        value = object[key];\n\n    if (predicate(value, key)) {\n      result[key] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyDeep(path) {\n  return function(object) {\n    return baseGet(object, path);\n  };\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} customizer The function to customize comparisons.\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, equalFunc, customizer, bitmask, stack) {\n  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!seen.has(othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {\n              return seen.add(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, customizer, bitmask, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} customizer The function to customize comparisons.\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= UNORDERED_COMPARE_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} customizer The function to customize comparisons.\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, equalFunc, customizer, bitmask, stack) {\n  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n      objProps = keys(object),\n      objLength = objProps.length,\n      othProps = keys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own and inherited enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeysIn(object) {\n  return baseGetAllKeys(object, keysIn, getSymbolsIn);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\nfunction getMatchData(object) {\n  var result = keys(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n\n    result[length] = [key, value, isStrictComparable(value)];\n  }\n  return result;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Creates an array of the own and inherited enumerable symbol properties\n * of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n  var result = [];\n  while (object) {\n    arrayPush(result, getSymbols(object));\n    object = getPrototype(object);\n  }\n  return result;\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\nfunction hasPath(object, path, hasFunc) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var result,\n      index = -1,\n      length = path.length;\n\n  while (++index < length) {\n    var key = toKey(path[index]);\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n    object = object[key];\n  }\n  if (result) {\n    return result;\n  }\n  var length = object ? object.length : 0;\n  return !!length && isLength(length) && isIndex(key, length) &&\n    (isArray(object) || isArguments(object));\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\n/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    return object[key] === srcValue &&\n      (srcValue !== undefined || (key in Object(object)));\n  };\n}\n\n/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoize(function(string) {\n  string = toString(string);\n\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */\nfunction hasIn(object, path) {\n  return object != null && hasPath(object, path, baseHasIn);\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\n/**\n * Creates an object composed of the `object` properties `predicate` returns\n * truthy for. The predicate is invoked with two arguments: (value, key).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The source object.\n * @param {Function} [predicate=_.identity] The function invoked per property.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pickBy(object, _.isNumber);\n * // => { 'a': 1, 'c': 3 }\n */\nfunction pickBy(object, predicate) {\n  return object == null ? {} : basePickBy(object, getAllKeysIn(object), baseIteratee(predicate));\n}\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\nfunction property(path) {\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\nmodule.exports = pickBy;\n", "/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Part} from './part.js';\n\nconst directives = new WeakMap<object, true>();\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type DirectiveFactory = (...args: any[]) => object;\n\nexport type DirectiveFn = (part: Part) => void;\n\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = <F extends DirectiveFactory>(f: F): F =>\n    ((...args: unknown[]) => {\n      const d = f(...args);\n      directives.set(d, true);\n      return d;\n    }) as F;\n\nexport const isDirective = (o: unknown): o is DirectiveFn => {\n  return typeof o === 'function' && directives.has(o);\n};\n", "/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\ninterface MaybePolyfilledCe extends CustomElementRegistry {\n  readonly polyfillWrapFlushCallback?: object;\n}\n\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = typeof window !== 'undefined' &&\n    window.customElements != null &&\n    (window.customElements as MaybePolyfilledCe).polyfillWrapFlushCallback !==\n        undefined;\n\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes =\n    (container: Node,\n     start: Node|null,\n     end: Node|null = null,\n     before: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.insertBefore(start!, before);\n        start = n;\n      }\n    };\n\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes =\n    (container: Node, start: Node|null, end: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.removeChild(start!);\n        start = n;\n      }\n    };\n", "/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * The Part interface represents a dynamic part of a template instance rendered\n * by lit-html.\n */\nexport interface Part {\n  readonly value: unknown;\n\n  /**\n   * Sets the current part value, but does not write it to the DOM.\n   * @param value The value that will be committed.\n   */\n  setValue(value: unknown): void;\n\n  /**\n   * Commits the current part value, causing it to actually be written to the\n   * DOM.\n   *\n   * Directives are run at the start of `commit`, so that if they call\n   * `part.setValue(...)` synchronously that value will be used in the current\n   * commit, and there's no need to call `part.commit()` within the directive.\n   * If directives set a part value asynchronously, then they must call\n   * `part.commit()` manually.\n   */\n  commit(): void;\n}\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n", "/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {TemplateResult} from './template-result.js';\n\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\n\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n\n/**\n * An updatable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n  readonly parts: TemplatePart[] = [];\n  readonly element: HTMLTemplateElement;\n\n  constructor(result: TemplateResult, element: HTMLTemplateElement) {\n    this.element = element;\n\n    const nodesToRemove: Node[] = [];\n    const stack: Node[] = [];\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        element.content,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    // Keeps track of the last index associated with a part. We try to delete\n    // unnecessary nodes, but we never want to associate two different parts\n    // to the same index. They must have a constant node between.\n    let lastPartIndex = 0;\n    let index = -1;\n    let partIndex = 0;\n    const {strings, values: {length}} = result;\n    while (partIndex < length) {\n      const node = walker.nextNode() as Element | Comment | Text | null;\n      if (node === null) {\n        // We've exhausted the content inside a nested template element.\n        // Because we still have parts (the outer for-loop), we know:\n        // - There is a template in the stack\n        // - The walker will find a nextNode outside the template\n        walker.currentNode = stack.pop()!;\n        continue;\n      }\n      index++;\n\n      if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n        if ((node as Element).hasAttributes()) {\n          const attributes = (node as Element).attributes;\n          const {length} = attributes;\n          // Per\n          // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n          // attributes are not guaranteed to be returned in document order.\n          // In particular, Edge/IE can return them out of order, so we cannot\n          // assume a correspondence between part index and attribute index.\n          let count = 0;\n          for (let i = 0; i < length; i++) {\n            if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n              count++;\n            }\n          }\n          while (count-- > 0) {\n            // Get the template literal section leading up to the first\n            // expression in this attribute\n            const stringForPart = strings[partIndex];\n            // Find the attribute name\n            const name = lastAttributeNameRegex.exec(stringForPart)![2];\n            // Find the corresponding attribute\n            // All bound attributes have had a suffix added in\n            // TemplateResult#getHTML to opt out of special attribute\n            // handling. To look up the attribute value we also need to add\n            // the suffix.\n            const attributeLookupName =\n                name.toLowerCase() + boundAttributeSuffix;\n            const attributeValue =\n                (node as Element).getAttribute(attributeLookupName)!;\n            (node as Element).removeAttribute(attributeLookupName);\n            const statics = attributeValue.split(markerRegex);\n            this.parts.push({type: 'attribute', index, name, strings: statics});\n            partIndex += statics.length - 1;\n          }\n        }\n        if ((node as Element).tagName === 'TEMPLATE') {\n          stack.push(node);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n      } else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n        const data = (node as Text).data;\n        if (data.indexOf(marker) >= 0) {\n          const parent = node.parentNode!;\n          const strings = data.split(markerRegex);\n          const lastIndex = strings.length - 1;\n          // Generate a new text node for each literal section\n          // These nodes are also used as the markers for node parts\n          for (let i = 0; i < lastIndex; i++) {\n            let insert: Node;\n            let s = strings[i];\n            if (s === '') {\n              insert = createMarker();\n            } else {\n              const match = lastAttributeNameRegex.exec(s);\n              if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                s = s.slice(0, match.index) + match[1] +\n                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n              }\n              insert = document.createTextNode(s);\n            }\n            parent.insertBefore(insert, node);\n            this.parts.push({type: 'node', index: ++index});\n          }\n          // If there's no text, we must insert a comment to mark our place.\n          // Else, we can trust it will stick around after cloning.\n          if (strings[lastIndex] === '') {\n            parent.insertBefore(createMarker(), node);\n            nodesToRemove.push(node);\n          } else {\n            (node as Text).data = strings[lastIndex];\n          }\n          // We have a part for each match found\n          partIndex += lastIndex;\n        }\n      } else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n        if ((node as Comment).data === marker) {\n          const parent = node.parentNode!;\n          // Add a new marker node to be the startNode of the Part if any of\n          // the following are true:\n          //  * We don't have a previousSibling\n          //  * The previousSibling is already the start of a previous part\n          if (node.previousSibling === null || index === lastPartIndex) {\n            index++;\n            parent.insertBefore(createMarker(), node);\n          }\n          lastPartIndex = index;\n          this.parts.push({type: 'node', index});\n          // If we don't have a nextSibling, keep this node so we have an end.\n          // Else, we can remove it to save future costs.\n          if (node.nextSibling === null) {\n            (node as Comment).data = '';\n          } else {\n            nodesToRemove.push(node);\n            index--;\n          }\n          partIndex++;\n        } else {\n          let i = -1;\n          while ((i = (node as Comment).data.indexOf(marker, i + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            // TODO (justinfagnani): consider whether it's even worth it to\n            // make bindings in comments work\n            this.parts.push({type: 'node', index: -1});\n            partIndex++;\n          }\n        }\n      }\n    }\n\n    // Remove text binding nodes after the walk to not disturb the TreeWalker\n    for (const n of nodesToRemove) {\n      n.parentNode!.removeChild(n);\n    }\n  }\n}\n\nconst endsWith = (str: string, suffix: string): boolean => {\n  const index = str.length - suffix.length;\n  return index >= 0 && str.slice(index) === suffix;\n};\n\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport type TemplatePart = {\n  readonly type: 'node'; index: number;\n}|{\n  readonly type: 'attribute';\n  index: number;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n};\n\nexport const isTemplatePartActive = (part: TemplatePart) => part.index !== -1;\n\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex =\n    // eslint-disable-next-line no-control-regex\n    /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n", "/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {isCEPolyfill} from './dom.js';\nimport {Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {isTemplatePartActive, Template, TemplatePart} from './template.js';\n\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n  private readonly __parts: Array<Part|undefined> = [];\n  readonly processor: TemplateProcessor;\n  readonly options: RenderOptions;\n  readonly template: Template;\n\n  constructor(\n      template: Template, processor: TemplateProcessor,\n      options: RenderOptions) {\n    this.template = template;\n    this.processor = processor;\n    this.options = options;\n  }\n\n  update(values: readonly unknown[]) {\n    let i = 0;\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.setValue(values[i]);\n      }\n      i++;\n    }\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.commit();\n      }\n    }\n  }\n\n  _clone(): DocumentFragment {\n    // There are a number of steps in the lifecycle of a template instance's\n    // DOM fragment:\n    //  1. Clone - create the instance fragment\n    //  2. Adopt - adopt into the main document\n    //  3. Process - find part markers and create parts\n    //  4. Upgrade - upgrade custom elements\n    //  5. Update - set node, attribute, property, etc., values\n    //  6. Connect - connect to the document. Optional and outside of this\n    //     method.\n    //\n    // We have a few constraints on the ordering of these steps:\n    //  * We need to upgrade before updating, so that property values will pass\n    //    through any property setters.\n    //  * We would like to process before upgrading so that we're sure that the\n    //    cloned fragment is inert and not disturbed by self-modifying DOM.\n    //  * We want custom elements to upgrade even in disconnected fragments.\n    //\n    // Given these constraints, with full custom elements support we would\n    // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n    //\n    // But Safari does not implement CustomElementRegistry#upgrade, so we\n    // can not implement that order and still have upgrade-before-update and\n    // upgrade disconnected fragments. So we instead sacrifice the\n    // process-before-upgrade constraint, since in Custom Elements v1 elements\n    // must not modify their light DOM in the constructor. We still have issues\n    // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n    // that don't strictly adhere to the no-modification rule because shadow\n    // DOM, which may be created in the constructor, is emulated by being placed\n    // in the light DOM.\n    //\n    // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n    // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n    // in one step.\n    //\n    // The Custom Elements v1 polyfill supports upgrade(), so the order when\n    // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n    // Connect.\n\n    const fragment = isCEPolyfill ?\n        this.template.element.content.cloneNode(true) as DocumentFragment :\n        document.importNode(this.template.element.content, true);\n\n    const stack: Node[] = [];\n    const parts = this.template.parts;\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        fragment,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    let partIndex = 0;\n    let nodeIndex = 0;\n    let part: TemplatePart;\n    let node = walker.nextNode();\n    // Loop through all the nodes and parts of a template\n    while (partIndex < parts.length) {\n      part = parts[partIndex];\n      if (!isTemplatePartActive(part)) {\n        this.__parts.push(undefined);\n        partIndex++;\n        continue;\n      }\n\n      // Progress the tree walker until we find our next part's node.\n      // Note that multiple parts may share the same node (attribute parts\n      // on a single element), so this loop may not run at all.\n      while (nodeIndex < part.index) {\n        nodeIndex++;\n        if (node!.nodeName === 'TEMPLATE') {\n          stack.push(node!);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n        if ((node = walker.nextNode()) === null) {\n          // We've exhausted the content inside a nested template element.\n          // Because we still have parts (the outer for-loop), we know:\n          // - There is a template in the stack\n          // - The walker will find a nextNode outside the template\n          walker.currentNode = stack.pop()!;\n          node = walker.nextNode();\n        }\n      }\n\n      // We've arrived at our part's node.\n      if (part.type === 'node') {\n        const part = this.processor.handleTextExpression(this.options);\n        part.insertAfterNode(node!.previousSibling!);\n        this.__parts.push(part);\n      } else {\n        this.__parts.push(...this.processor.handleAttributeExpressions(\n            node as Element, part.name, part.strings, this.options));\n      }\n      partIndex++;\n    }\n\n    if (isCEPolyfill) {\n      document.adoptNode(fragment);\n      customElements.upgrade(fragment);\n    }\n    return fragment;\n  }\n}\n", "/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {reparentNodes} from './dom.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker} from './template.js';\n\ndeclare const trustedTypes: typeof window.trustedTypes;\n/**\n * Our TrustedTypePolicy for HTML which is declared using the html template\n * tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n */\nconst policy = window.trustedTypes &&\n    trustedTypes!.createPolicy('lit-html', {createHTML: (s) => s});\n\nconst commentMarker = ` ${marker} `;\n\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n  readonly strings: TemplateStringsArray;\n  readonly values: readonly unknown[];\n  readonly type: string;\n  readonly processor: TemplateProcessor;\n\n  constructor(\n      strings: TemplateStringsArray, values: readonly unknown[], type: string,\n      processor: TemplateProcessor) {\n    this.strings = strings;\n    this.values = values;\n    this.type = type;\n    this.processor = processor;\n  }\n\n  /**\n   * Returns a string of HTML used to create a `<template>` element.\n   */\n  getHTML(): string {\n    const l = this.strings.length - 1;\n    let html = '';\n    let isCommentBinding = false;\n\n    for (let i = 0; i < l; i++) {\n      const s = this.strings[i];\n      // For each binding we want to determine the kind of marker to insert\n      // into the template source before it's parsed by the browser's HTML\n      // parser. The marker type is based on whether the expression is in an\n      // attribute, text, or comment position.\n      //   * For node-position bindings we insert a comment with the marker\n      //     sentinel as its text content, like <!--{{lit-guid}}-->.\n      //   * For attribute bindings we insert just the marker sentinel for the\n      //     first binding, so that we support unquoted attribute bindings.\n      //     Subsequent bindings can use a comment marker because multi-binding\n      //     attributes must be quoted.\n      //   * For comment bindings we insert just the marker sentinel so we don't\n      //     close the comment.\n      //\n      // The following code scans the template source, but is *not* an HTML\n      // parser. We don't need to track the tree structure of the HTML, only\n      // whether a binding is inside a comment, and if not, if it appears to be\n      // the first binding in an attribute.\n      const commentOpen = s.lastIndexOf('<!--');\n      // We're in comment position if we have a comment open with no following\n      // comment close. Because <-- can appear in an attribute value there can\n      // be false positives.\n      isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n          s.indexOf('-->', commentOpen + 1) === -1;\n      // Check to see if we have an attribute-like sequence preceding the\n      // expression. This can match \"name=value\" like structures in text,\n      // comments, and attribute values, so there can be false-positives.\n      const attributeMatch = lastAttributeNameRegex.exec(s);\n      if (attributeMatch === null) {\n        // We're only in this branch if we don't have a attribute-like\n        // preceding sequence. For comments, this guards against unusual\n        // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n        // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n        // below.\n        html += s + (isCommentBinding ? commentMarker : nodeMarker);\n      } else {\n        // For attributes we use just a marker sentinel, and also append a\n        // $lit$ suffix to the name to opt-out of attribute-specific parsing\n        // that IE and Edge do for style and certain SVG attributes.\n        html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n            attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n            marker;\n      }\n    }\n    html += this.strings[l];\n    return html;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = document.createElement('template');\n    let value = this.getHTML();\n    if (policy !== undefined) {\n      // this is secure because `this.strings` is a TemplateStringsArray.\n      // TODO: validate this when\n      // https://github.com/tc39/proposal-array-is-template-object is\n      // implemented.\n      value = policy.createHTML(value) as unknown as string;\n    }\n    template.innerHTML = value;\n    return template;\n  }\n}\n\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n  getHTML(): string {\n    return `<svg>${super.getHTML()}</svg>`;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = super.getTemplateElement();\n    const content = template.content;\n    const svgElement = content.firstChild!;\n    content.removeChild(svgElement);\n    reparentNodes(content, svgElement.firstChild);\n    return template;\n  }\n}\n", "/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {isDirective} from './directive.js';\nimport {removeNodes} from './dom.js';\nimport {noChange, nothing, Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\nimport {createMarker} from './template.js';\n\n// https://tc39.github.io/ecma262/#sec-typeof-operator\nexport type Primitive = null|undefined|boolean|number|string|symbol|bigint;\nexport const isPrimitive = (value: unknown): value is Primitive => {\n  return (\n      value === null ||\n      !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value: unknown): value is Iterable<unknown> => {\n  return Array.isArray(value) ||\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      !!(value && (value as any)[Symbol.iterator]);\n};\n\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attribute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n  readonly element: Element;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n  readonly parts: ReadonlyArray<AttributePart>;\n  dirty = true;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n    this.parts = [];\n    for (let i = 0; i < strings.length - 1; i++) {\n      (this.parts as AttributePart[])[i] = this._createPart();\n    }\n  }\n\n  /**\n   * Creates a single part. Override this to create a differnt type of part.\n   */\n  protected _createPart(): AttributePart {\n    return new AttributePart(this);\n  }\n\n  protected _getValue(): unknown {\n    const strings = this.strings;\n    const l = strings.length - 1;\n    const parts = this.parts;\n\n    // If we're assigning an attribute via syntax like:\n    //    attr=\"${foo}\"  or  attr=${foo}\n    // but not\n    //    attr=\"${foo} ${bar}\" or attr=\"${foo} baz\"\n    // then we don't want to coerce the attribute value into one long\n    // string. Instead we want to just return the value itself directly,\n    // so that sanitizeDOMValue can get the actual value rather than\n    // String(value)\n    // The exception is if v is an array, in which case we do want to smash\n    // it together into a string without calling String() on the array.\n    //\n    // This also allows trusted values (when using TrustedTypes) being\n    // assigned to DOM sinks without being stringified in the process.\n    if (l === 1 && strings[0] === '' && strings[1] === '') {\n      const v = parts[0].value;\n      if (typeof v === 'symbol') {\n        return String(v);\n      }\n      if (typeof v === 'string' || !isIterable(v)) {\n        return v;\n      }\n    }\n    let text = '';\n\n    for (let i = 0; i < l; i++) {\n      text += strings[i];\n      const part = parts[i];\n      if (part !== undefined) {\n        const v = part.value;\n        if (isPrimitive(v) || !isIterable(v)) {\n          text += typeof v === 'string' ? v : String(v);\n        } else {\n          for (const t of v) {\n            text += typeof t === 'string' ? t : String(t);\n          }\n        }\n      }\n    }\n\n    text += strings[l];\n    return text;\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      this.element.setAttribute(this.name, this._getValue() as string);\n    }\n  }\n}\n\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart implements Part {\n  readonly committer: AttributeCommitter;\n  value: unknown = undefined;\n\n  constructor(committer: AttributeCommitter) {\n    this.committer = committer;\n  }\n\n  setValue(value: unknown): void {\n    if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n      this.value = value;\n      // If the value is a not a directive, dirty the committer so that it'll\n      // call setAttribute. If the value is a directive, it'll dirty the\n      // committer if it calls setValue().\n      if (!isDirective(value)) {\n        this.committer.dirty = true;\n      }\n    }\n  }\n\n  commit() {\n    while (isDirective(this.value)) {\n      const directive = this.value;\n      this.value = noChange;\n      directive(this);\n    }\n    if (this.value === noChange) {\n      return;\n    }\n    this.committer.commit();\n  }\n}\n\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart implements Part {\n  readonly options: RenderOptions;\n  startNode!: Node;\n  endNode!: Node;\n  value: unknown = undefined;\n  private __pendingValue: unknown = undefined;\n\n  constructor(options: RenderOptions) {\n    this.options = options;\n  }\n\n  /**\n   * Appends this part into a container.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendInto(container: Node) {\n    this.startNode = container.appendChild(createMarker());\n    this.endNode = container.appendChild(createMarker());\n  }\n\n  /**\n   * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n   * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n   * such as those that appear in a literal section of a template.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterNode(ref: Node) {\n    this.startNode = ref;\n    this.endNode = ref.nextSibling!;\n  }\n\n  /**\n   * Appends this part into a parent part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendIntoPart(part: NodePart) {\n    part.__insert(this.startNode = createMarker());\n    part.__insert(this.endNode = createMarker());\n  }\n\n  /**\n   * Inserts this part after the `ref` part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterPart(ref: NodePart) {\n    ref.__insert(this.startNode = createMarker());\n    this.endNode = ref.endNode;\n    ref.endNode = this.startNode;\n  }\n\n  setValue(value: unknown): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    if (this.startNode.parentNode === null) {\n      return;\n    }\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    const value = this.__pendingValue;\n    if (value === noChange) {\n      return;\n    }\n    if (isPrimitive(value)) {\n      if (value !== this.value) {\n        this.__commitText(value);\n      }\n    } else if (value instanceof TemplateResult) {\n      this.__commitTemplateResult(value);\n    } else if (value instanceof Node) {\n      this.__commitNode(value);\n    } else if (isIterable(value)) {\n      this.__commitIterable(value);\n    } else if (value === nothing) {\n      this.value = nothing;\n      this.clear();\n    } else {\n      // Fallback, will render the string representation\n      this.__commitText(value);\n    }\n  }\n\n  private __insert(node: Node) {\n    this.endNode.parentNode!.insertBefore(node, this.endNode);\n  }\n\n  private __commitNode(value: Node): void {\n    if (this.value === value) {\n      return;\n    }\n    this.clear();\n    this.__insert(value);\n    this.value = value;\n  }\n\n  private __commitText(value: unknown): void {\n    const node = this.startNode.nextSibling!;\n    value = value == null ? '' : value;\n    // If `value` isn't already a string, we explicitly convert it here in case\n    // it can't be implicitly converted - i.e. it's a symbol.\n    const valueAsString: string =\n        typeof value === 'string' ? value : String(value);\n    if (node === this.endNode.previousSibling &&\n        node.nodeType === 3 /* Node.TEXT_NODE */) {\n      // If we only have a single text node between the markers, we can just\n      // set its value, rather than replacing it.\n      // TODO(justinfagnani): Can we just check if this.value is primitive?\n      (node as Text).data = valueAsString;\n    } else {\n      this.__commitNode(document.createTextNode(valueAsString));\n    }\n    this.value = value;\n  }\n\n  private __commitTemplateResult(value: TemplateResult): void {\n    const template = this.options.templateFactory(value);\n    if (this.value instanceof TemplateInstance &&\n        this.value.template === template) {\n      this.value.update(value.values);\n    } else {\n      // Make sure we propagate the template processor from the TemplateResult\n      // so that we use its syntax extension, etc. The template factory comes\n      // from the render function options so that it can control template\n      // caching and preprocessing.\n      const instance =\n          new TemplateInstance(template, value.processor, this.options);\n      const fragment = instance._clone();\n      instance.update(value.values);\n      this.__commitNode(fragment);\n      this.value = instance;\n    }\n  }\n\n  private __commitIterable(value: Iterable<unknown>): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If _value is an array, then the previous render was of an\n    // iterable and _value will contain the NodeParts from the previous\n    // render. If _value is not an array, clear this part and make a new\n    // array for NodeParts.\n    if (!Array.isArray(this.value)) {\n      this.value = [];\n      this.clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this.value as NodePart[];\n    let partIndex = 0;\n    let itemPart: NodePart|undefined;\n\n    for (const item of value) {\n      // Try to reuse an existing part\n      itemPart = itemParts[partIndex];\n\n      // If no existing part, create a new one\n      if (itemPart === undefined) {\n        itemPart = new NodePart(this.options);\n        itemParts.push(itemPart);\n        if (partIndex === 0) {\n          itemPart.appendIntoPart(this);\n        } else {\n          itemPart.insertAfterPart(itemParts[partIndex - 1]);\n        }\n      }\n      itemPart.setValue(item);\n      itemPart.commit();\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n      this.clear(itemPart && itemPart.endNode);\n    }\n  }\n\n  clear(startNode: Node = this.startNode) {\n    removeNodes(\n        this.startNode.parentNode!, startNode.nextSibling!, this.endNode);\n  }\n}\n\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart implements Part {\n  readonly element: Element;\n  readonly name: string;\n  readonly strings: readonly string[];\n  value: unknown = undefined;\n  private __pendingValue: unknown = undefined;\n\n  constructor(element: Element, name: string, strings: readonly string[]) {\n    if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n      throw new Error(\n          'Boolean attributes can only contain a single expression');\n    }\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n  }\n\n  setValue(value: unknown): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n    const value = !!this.__pendingValue;\n    if (this.value !== value) {\n      if (value) {\n        this.element.setAttribute(this.name, '');\n      } else {\n        this.element.removeAttribute(this.name);\n      }\n      this.value = value;\n    }\n    this.__pendingValue = noChange;\n  }\n}\n\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n  readonly single: boolean;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    super(element, name, strings);\n    this.single =\n        (strings.length === 2 && strings[0] === '' && strings[1] === '');\n  }\n\n  protected _createPart(): PropertyPart {\n    return new PropertyPart(this);\n  }\n\n  protected _getValue() {\n    if (this.single) {\n      return this.parts[0].value;\n    }\n    return super._getValue();\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this.element as any)[this.name] = this._getValue();\n    }\n  }\n}\n\nexport class PropertyPart extends AttributePart {}\n\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the third\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n\n// Wrap into an IIFE because MS Edge <= v41 does not support having try/catch\n// blocks right into the body of a module\n(() => {\n  try {\n    const options = {\n      get capture() {\n        eventOptionsSupported = true;\n        return false;\n      }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    window.addEventListener('test', options as any, options);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    window.removeEventListener('test', options as any, options);\n  } catch (_e) {\n    // event options not supported\n  }\n})();\n\ntype EventHandlerWithOptions =\n    EventListenerOrEventListenerObject&Partial<AddEventListenerOptions>;\nexport class EventPart implements Part {\n  readonly element: Element;\n  readonly eventName: string;\n  readonly eventContext?: EventTarget;\n  value: undefined|EventHandlerWithOptions = undefined;\n  private __options?: AddEventListenerOptions;\n  private __pendingValue: undefined|EventHandlerWithOptions = undefined;\n  private readonly __boundHandleEvent: (event: Event) => void;\n\n  constructor(element: Element, eventName: string, eventContext?: EventTarget) {\n    this.element = element;\n    this.eventName = eventName;\n    this.eventContext = eventContext;\n    this.__boundHandleEvent = (e) => this.handleEvent(e);\n  }\n\n  setValue(value: undefined|EventHandlerWithOptions): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange as EventHandlerWithOptions;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n\n    const newListener = this.__pendingValue;\n    const oldListener = this.value;\n    const shouldRemoveListener = newListener == null ||\n        oldListener != null &&\n            (newListener.capture !== oldListener.capture ||\n             newListener.once !== oldListener.once ||\n             newListener.passive !== oldListener.passive);\n    const shouldAddListener =\n        newListener != null && (oldListener == null || shouldRemoveListener);\n\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n          this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    if (shouldAddListener) {\n      this.__options = getOptions(newListener);\n      this.element.addEventListener(\n          this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    this.value = newListener;\n    this.__pendingValue = noChange as EventHandlerWithOptions;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this.value === 'function') {\n      this.value.call(this.eventContext || this.element, event);\n    } else {\n      (this.value as EventListenerObject).handleEvent(event);\n    }\n  }\n}\n\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o: AddEventListenerOptions|undefined) => o &&\n    (eventOptionsSupported ?\n         {capture: o.capture, passive: o.passive, once: o.once} :\n         o.capture as AddEventListenerOptions);\n", "/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Part} from './part.js';\nimport {AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\n\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor implements TemplateProcessor {\n  /**\n   * Create parts for an attribute-position binding, given the event, attribute\n   * name, and string literals.\n   *\n   * @param element The element containing the binding\n   * @param name  The attribute name\n   * @param strings The string literals. There are always at least two strings,\n   *   event for fully-controlled bindings with a single expression.\n   */\n  handleAttributeExpressions(\n      element: Element, name: string, strings: string[],\n      options: RenderOptions): ReadonlyArray<Part> {\n    const prefix = name[0];\n    if (prefix === '.') {\n      const committer = new PropertyCommitter(element, name.slice(1), strings);\n      return committer.parts;\n    }\n    if (prefix === '@') {\n      return [new EventPart(element, name.slice(1), options.eventContext)];\n    }\n    if (prefix === '?') {\n      return [new BooleanAttributePart(element, name.slice(1), strings)];\n    }\n    const committer = new AttributeCommitter(element, name, strings);\n    return committer.parts;\n  }\n  /**\n   * Create parts for a text-position binding.\n   * @param templateFactory\n   */\n  handleTextExpression(options: RenderOptions) {\n    return new NodePart(options);\n  }\n}\n\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n", "/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {TemplateResult} from './template-result.js';\nimport {marker, Template} from './template.js';\n\n/**\n * A function type that creates a Template from a TemplateResult.\n *\n * This is a hook into the template-creation process for rendering that\n * requires some modification of templates before they're used, like ShadyCSS,\n * which must add classes to elements and remove styles.\n *\n * Templates should be cached as aggressively as possible, so that many\n * TemplateResults produced from the same expression only do the work of\n * creating the Template the first time.\n *\n * Templates are usually cached by TemplateResult.strings and\n * TemplateResult.type, but may be cached by other keys if this function\n * modifies the template.\n *\n * Note that currently TemplateFactories must not add, remove, or reorder\n * expressions, because there is no way to describe such a modification\n * to render() so that values are interpolated to the correct place in the\n * template instances.\n */\nexport type TemplateFactory = (result: TemplateResult) => Template;\n\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result: TemplateResult) {\n  let templateCache = templateCaches.get(result.type);\n  if (templateCache === undefined) {\n    templateCache = {\n      stringsArray: new WeakMap<TemplateStringsArray, Template>(),\n      keyString: new Map<string, Template>()\n    };\n    templateCaches.set(result.type, templateCache);\n  }\n\n  let template = templateCache.stringsArray.get(result.strings);\n  if (template !== undefined) {\n    return template;\n  }\n\n  // If the TemplateStringsArray is new, generate a key from the strings\n  // This key is shared between all templates with identical content\n  const key = result.strings.join(marker);\n\n  // Check if we already have a Template for this key\n  template = templateCache.keyString.get(key);\n  if (template === undefined) {\n    // If we have not seen this key before, create a new Template\n    template = new Template(result, result.getTemplateElement());\n    // Cache the Template for this key\n    templateCache.keyString.set(key, template);\n  }\n\n  // Cache all future queries for this TemplateStringsArray\n  templateCache.stringsArray.set(result.strings, template);\n  return template;\n}\n\n/**\n * The first argument to JS template tags retain identity across multiple\n * calls to a tag for the same literal, so we can cache work done per literal\n * in a Map.\n *\n * Safari currently has a bug which occasionally breaks this behavior, so we\n * need to cache the Template at two levels. We first cache the\n * TemplateStringsArray, and if that fails, we cache a key constructed by\n * joining the strings array.\n */\nexport interface TemplateCache {\n  readonly stringsArray: WeakMap<TemplateStringsArray, Template>;\n  readonly keyString: Map<string, Template>;\n}\n\nexport const templateCaches = new Map<string, TemplateCache>();\n", "/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {removeNodes} from './dom.js';\nimport {NodePart} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {templateFactory} from './template-factory.js';\n\nexport const parts = new WeakMap<Node, NodePart>();\n\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render =\n    (result: unknown,\n     container: Element|DocumentFragment,\n     options?: Partial<RenderOptions>) => {\n      let part = parts.get(container);\n      if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart({\n                               templateFactory,\n                               ...options,\n                             }));\n        part.appendInto(container);\n      }\n      part.setValue(result);\n      part.commit();\n    };\n", "/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @packageDocumentation\n */\n\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport {defaultTemplateProcessor} from './lib/default-template-processor.js';\nimport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\n\nexport {DefaultTemplateProcessor, defaultTemplateProcessor} from './lib/default-template-processor.js';\nexport {directive, DirectiveFn, isDirective} from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport {removeNodes, reparentNodes} from './lib/dom.js';\nexport {noChange, nothing, Part} from './lib/part.js';\nexport {AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart} from './lib/parts.js';\nexport {RenderOptions} from './lib/render-options.js';\nexport {parts, render} from './lib/render.js';\nexport {templateCaches, templateFactory} from './lib/template-factory.js';\nexport {TemplateInstance} from './lib/template-instance.js';\nexport {TemplateProcessor} from './lib/template-processor.js';\nexport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\nexport {createMarker, isTemplatePartActive, Template} from './lib/template.js';\n\ndeclare global {\n  interface Window {\n    litHtmlVersions: string[];\n  }\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\nif (typeof window !== 'undefined') {\n  (window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.3.0');\n}\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n", "const phaseSymbol = Symbol('haunted.phase');\nconst hookSymbol = Symbol('haunted.hook');\nconst updateSymbol = Symbol('haunted.update');\nconst commitSymbol = Symbol('haunted.commit');\nconst effectsSymbol = Symbol('haunted.effects');\nconst layoutEffectsSymbol = Symbol('haunted.layoutEffects');\nconst contextEvent = 'haunted.context';\nexport { phaseSymbol, hookSymbol, updateSymbol, commitSymbol, effectsSymbol, layoutEffectsSymbol, contextEvent, };\n", "let current;\nlet currentId = 0;\nfunction setCurrent(state) {\n    current = state;\n}\nfunction clear() {\n    current = null;\n    currentId = 0;\n}\nfunction notify() {\n    return currentId++;\n}\nexport { clear, current, setCurrent, notify };\n", "import { current, notify } from './interface';\nimport { hookSymbol } from './symbols';\nclass Hook {\n    constructor(id, state) {\n        this.id = id;\n        this.state = state;\n    }\n}\nfunction use(Hook, ...args) {\n    let id = notify();\n    let hooks = current[hookSymbol];\n    let hook = hooks.get(id);\n    if (!hook) {\n        hook = new Hook(id, current, ...args);\n        hooks.set(id, hook);\n    }\n    return hook.update(...args);\n}\nfunction hook(Hook) {\n    return use.bind(null, Hook);\n}\nexport { hook, Hook };\n", "import { Hook, hook } from './hook';\nfunction createEffect(setEffects) {\n    return hook(class extends Hook {\n        constructor(id, state, ignored1, ignored2) {\n            super(id, state);\n            setEffects(state, this);\n        }\n        update(callback, values) {\n            this.callback = callback;\n            this.values = values;\n        }\n        call() {\n            if (!this.values || this.hasChanged()) {\n                this.run();\n            }\n            this.lastValues = this.values;\n        }\n        run() {\n            this.teardown();\n            this._teardown = this.callback.call(this.state);\n        }\n        teardown() {\n            if (typeof this._teardown === 'function') {\n                this._teardown();\n            }\n        }\n        hasChanged() {\n            return !this.lastValues || this.values.some((value, i) => this.lastValues[i] !== value);\n        }\n    });\n}\nexport { createEffect };\n", "import { effectsSymbol } from './symbols';\nimport { createEffect } from './create-effect';\nfunction setEffects(state, cb) {\n    state[effectsSymbol].push(cb);\n}\nconst useEffect = createEffect(setEffects);\nexport { setEffects, useEffect };\n", "import { hook, Hook } from './hook';\nconst useState = hook(class extends Hook {\n    constructor(id, state, initialValue) {\n        super(id, state);\n        this.updater = this.updater.bind(this);\n        if (typeof initialValue === 'function') {\n            initialValue = initialValue();\n        }\n        this.makeArgs(initialValue);\n    }\n    update() {\n        return this.args;\n    }\n    updater(value) {\n        if (typeof value === 'function') {\n            const updaterFn = value;\n            const [previousValue] = this.args;\n            value = updaterFn(previousValue);\n        }\n        this.makeArgs(value);\n        this.state.update();\n    }\n    makeArgs(value) {\n        this.args = Object.freeze([value, this.updater]);\n    }\n});\nexport { useState };\n", "import { hook, Hook } from './hook';\nconst useReducer = hook(class extends Hook {\n    constructor(id, state, _, initialState, init) {\n        super(id, state);\n        this.dispatch = this.dispatch.bind(this);\n        this.currentState = init !== undefined ? init(initialState) : initialState;\n    }\n    update(reducer) {\n        this.reducer = reducer;\n        return [this.currentState, this.dispatch];\n    }\n    dispatch(action) {\n        this.currentState = this.reducer(this.currentState, action);\n        this.state.update();\n    }\n});\nexport { useReducer };\n", "import { setCurrent, clear } from './interface';\nimport { hookSymbol, effectsSymbol, layoutEffectsSymbol } from './symbols';\nclass State {\n    constructor(update, host) {\n        this.update = update;\n        this.host = host;\n        this[hookSymbol] = new Map();\n        this[effectsSymbol] = [];\n        this[layoutEffectsSymbol] = [];\n    }\n    run(cb) {\n        setCurrent(this);\n        let res = cb();\n        clear();\n        return res;\n    }\n    _runEffects(phase) {\n        let effects = this[phase];\n        setCurrent(this);\n        for (let effect of effects) {\n            effect.call(this);\n        }\n        clear();\n    }\n    runEffects() {\n        this._runEffects(effectsSymbol);\n    }\n    runLayoutEffects() {\n        this._runEffects(layoutEffectsSymbol);\n    }\n    teardown() {\n        let hooks = this[hookSymbol];\n        hooks.forEach(hook => {\n            if (typeof hook.teardown === 'function') {\n                hook.teardown();\n            }\n        });\n    }\n}\nexport { State };\n", "import { State } from './state';\nimport { commitSymbol, phaseSymbol, updateSymbol, effectsSymbol, layoutEffectsSymbol } from './symbols';\nconst defer = Promise.resolve().then.bind(Promise.resolve());\nfunction runner() {\n    let tasks = [];\n    let id;\n    function runTasks() {\n        id = null;\n        let t = tasks;\n        tasks = [];\n        for (var i = 0, len = t.length; i < len; i++) {\n            t[i]();\n        }\n    }\n    return function (task) {\n        tasks.push(task);\n        if (id == null) {\n            id = defer(runTasks);\n        }\n    };\n}\nconst read = runner();\nconst write = runner();\nclass BaseScheduler {\n    constructor(renderer, host) {\n        this.renderer = renderer;\n        this.host = host;\n        this.state = new State(this.update.bind(this), host);\n        this[phaseSymbol] = null;\n        this._updateQueued = false;\n    }\n    update() {\n        if (this._updateQueued)\n            return;\n        read(() => {\n            let result = this.handlePhase(updateSymbol);\n            write(() => {\n                this.handlePhase(commitSymbol, result);\n                write(() => {\n                    this.handlePhase(effectsSymbol);\n                });\n            });\n            this._updateQueued = false;\n        });\n        this._updateQueued = true;\n    }\n    handlePhase(phase, arg) {\n        this[phaseSymbol] = phase;\n        switch (phase) {\n            case commitSymbol:\n                this.commit(arg);\n                this.runEffects(layoutEffectsSymbol);\n                return;\n            case updateSymbol: return this.render();\n            case effectsSymbol: return this.runEffects(effectsSymbol);\n        }\n        this[phaseSymbol] = null;\n    }\n    render() {\n        return this.state.run(() => this.renderer.call(this.host, this.host));\n    }\n    runEffects(phase) {\n        this.state._runEffects(phase);\n    }\n    teardown() {\n        this.state.teardown();\n    }\n}\nexport { BaseScheduler };\n", "import { BaseScheduler } from './scheduler';\nconst toCamelCase = (val = '') => val.replace(/-+([a-z])?/g, (_, char) => char ? char.toUpperCase() : '');\nfunction makeComponent(render) {\n    class Scheduler extends BaseScheduler {\n        constructor(renderer, frag, host) {\n            super(renderer, host || frag);\n            this.frag = frag;\n        }\n        commit(result) {\n            render(result, this.frag);\n        }\n    }\n    function component(renderer, baseElementOrOptions, options) {\n        const BaseElement = (options || baseElementOrOptions || {}).baseElement || HTMLElement;\n        const { observedAttributes = [], useShadowDOM = true, shadowRootInit = {} } = options || baseElementOrOptions || {};\n        class Element extends BaseElement {\n            constructor() {\n                super();\n                if (useShadowDOM === false) {\n                    this._scheduler = new Scheduler(renderer, this);\n                }\n                else {\n                    this.attachShadow({ mode: 'open', ...shadowRootInit });\n                    this._scheduler = new Scheduler(renderer, this.shadowRoot, this);\n                }\n            }\n            static get observedAttributes() {\n                return renderer.observedAttributes || observedAttributes || [];\n            }\n            connectedCallback() {\n                this._scheduler.update();\n            }\n            disconnectedCallback() {\n                this._scheduler.teardown();\n            }\n            attributeChangedCallback(name, oldValue, newValue) {\n                if (oldValue === newValue) {\n                    return;\n                }\n                let val = newValue === '' ? true : newValue;\n                Reflect.set(this, toCamelCase(name), val);\n            }\n        }\n        ;\n        function reflectiveProp(initialValue) {\n            let value = initialValue;\n            return Object.freeze({\n                enumerable: true,\n                configurable: true,\n                get() {\n                    return value;\n                },\n                set(newValue) {\n                    value = newValue;\n                    this._scheduler.update();\n                }\n            });\n        }\n        const proto = new Proxy(BaseElement.prototype, {\n            getPrototypeOf(target) {\n                return target;\n            },\n            set(target, key, value, receiver) {\n                let desc;\n                if (key in target) {\n                    desc = Object.getOwnPropertyDescriptor(target, key);\n                    if (desc && desc.set) {\n                        desc.set.call(receiver, value);\n                        return true;\n                    }\n                    Reflect.set(target, key, value, receiver);\n                    return true;\n                }\n                if (typeof key === 'symbol' || key[0] === '_') {\n                    desc = {\n                        enumerable: true,\n                        configurable: true,\n                        writable: true,\n                        value\n                    };\n                }\n                else {\n                    desc = reflectiveProp(value);\n                }\n                Object.defineProperty(receiver, key, desc);\n                if (desc.set) {\n                    desc.set.call(receiver, value);\n                }\n                return true;\n            }\n        });\n        Object.setPrototypeOf(Element.prototype, proto);\n        return Element;\n    }\n    return component;\n}\nexport { makeComponent };\n", "import { hook, Hook } from './hook';\nimport { contextEvent } from './symbols';\nimport { setEffects } from './use-effect';\nconst useContext = hook(class extends Hook {\n    constructor(id, state, _) {\n        super(id, state);\n        this._updater = this._updater.bind(this);\n        this._ranEffect = false;\n        this._unsubscribe = null;\n        setEffects(state, this);\n    }\n    update(Context) {\n        if (this.state.virtual) {\n            throw new Error('can\\'t be used with virtual components');\n        }\n        if (this.Context !== Context) {\n            this._subscribe(Context);\n            this.Context = Context;\n        }\n        return this.value;\n    }\n    call() {\n        if (!this._ranEffect) {\n            this._ranEffect = true;\n            if (this._unsubscribe)\n                this._unsubscribe();\n            this._subscribe(this.Context);\n            this.state.update();\n        }\n    }\n    _updater(value) {\n        this.value = value;\n        this.state.update();\n    }\n    _subscribe(Context) {\n        const detail = { Context, callback: this._updater };\n        this.state.host.dispatchEvent(new CustomEvent(contextEvent, {\n            detail,\n            bubbles: true,\n            cancelable: true,\n            composed: true,\n        }));\n        const { unsubscribe, value } = detail;\n        this.value = unsubscribe ? value : Context.defaultValue;\n        this._unsubscribe = unsubscribe;\n    }\n    teardown() {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n    }\n});\nexport { useContext };\n", "import { contextEvent } from './symbols';\nimport { useContext } from './use-context';\nfunction makeContext(component) {\n    return (defaultValue) => {\n        const Context = {\n            Provider: class extends HTMLElement {\n                constructor() {\n                    super();\n                    this.listeners = new Set();\n                    this.addEventListener(contextEvent, this);\n                }\n                disconnectedCallback() {\n                    this.removeEventListener(contextEvent, this);\n                }\n                handleEvent(event) {\n                    const { detail } = event;\n                    if (detail.Context === Context) {\n                        detail.value = this.value;\n                        detail.unsubscribe = this.unsubscribe.bind(this, detail.callback);\n                        this.listeners.add(detail.callback);\n                        event.stopPropagation();\n                    }\n                }\n                unsubscribe(callback) {\n                    this.listeners.delete(callback);\n                }\n                set value(value) {\n                    this._value = value;\n                    for (let callback of this.listeners) {\n                        callback(value);\n                    }\n                }\n                get value() {\n                    return this._value;\n                }\n            },\n            Consumer: component(function ({ render }) {\n                const context = useContext(Context);\n                return render(context);\n            }),\n            defaultValue,\n        };\n        return Context;\n    };\n}\nexport { makeContext };\n", "import { hook, Hook } from './hook';\nconst useMemo = hook(class extends Hook {\n    constructor(id, state, fn, values) {\n        super(id, state);\n        this.value = fn();\n        this.values = values;\n    }\n    update(fn, values) {\n        if (this.hasChanged(values)) {\n            this.values = values;\n            this.value = fn();\n        }\n        return this.value;\n    }\n    hasChanged(values = []) {\n        return values.some((value, i) => this.values[i] !== value);\n    }\n});\nexport { useMemo };\n", "import { layoutEffectsSymbol } from './symbols';\nimport { createEffect } from './create-effect';\nfunction setLayoutEffects(state, cb) {\n    state[layoutEffectsSymbol].push(cb);\n}\nconst useLayoutEffect = createEffect(setLayoutEffects);\nexport { useLayoutEffect };\n", "import { useMemo } from './use-memo';\nconst useRef = (initialValue) => useMemo(() => ({\n    current: initialValue\n}), []);\nexport { useRef };\n", "import { makeComponent } from './component';\nimport { makeContext } from './create-context';\nfunction haunted({ render }) {\n    const component = makeComponent(render);\n    const createContext = makeContext(component);\n    return { component, createContext };\n}\nexport { haunted as default };\nexport { useCallback } from './use-callback';\nexport { useEffect } from './use-effect';\nexport { useLayoutEffect } from './use-layout-effect';\nexport { useState } from './use-state';\nexport { useReducer } from './use-reducer';\nexport { useMemo } from './use-memo';\nexport { useContext } from './use-context';\nexport { useRef } from './use-ref';\nexport { hook, Hook } from './hook';\nexport { BaseScheduler } from './scheduler';\nexport { State } from './state';\n", "import { directive } from 'lit-html';\nimport { BaseScheduler } from './scheduler';\nconst includes = Array.prototype.includes;\nfunction makeVirtual() {\n    const partToScheduler = new WeakMap();\n    const schedulerToPart = new WeakMap();\n    class Scheduler extends BaseScheduler {\n        constructor(renderer, part) {\n            super(renderer, part);\n            this.state.virtual = true;\n        }\n        render() {\n            return this.state.run(() => this.renderer.apply(this.host, this.args));\n        }\n        commit(result) {\n            this.host.setValue(result);\n            this.host.commit();\n        }\n        teardown() {\n            super.teardown();\n            let part = schedulerToPart.get(this);\n            partToScheduler.delete(part);\n        }\n    }\n    function virtual(renderer) {\n        function factory(...args) {\n            return (part) => {\n                let cont = partToScheduler.get(part);\n                if (!cont) {\n                    cont = new Scheduler(renderer, part);\n                    partToScheduler.set(part, cont);\n                    schedulerToPart.set(cont, part);\n                    teardownOnRemove(cont, part);\n                }\n                cont.args = args;\n                cont.update();\n            };\n        }\n        return directive(factory);\n    }\n    return virtual;\n}\nfunction teardownOnRemove(cont, part, node = part.startNode) {\n    let frag = node.parentNode;\n    let mo = new MutationObserver(mutations => {\n        for (let mutation of mutations) {\n            if (includes.call(mutation.removedNodes, node)) {\n                mo.disconnect();\n                if (node.parentNode instanceof ShadowRoot) {\n                    teardownOnRemove(cont, part);\n                }\n                else {\n                    cont.teardown();\n                }\n                break;\n            }\n            else if (includes.call(mutation.addedNodes, node.nextSibling)) {\n                mo.disconnect();\n                teardownOnRemove(cont, part, node.nextSibling || undefined);\n                break;\n            }\n        }\n    });\n    mo.observe(frag, { childList: true });\n}\nexport { makeVirtual };\n", "import { html, render } from 'lit-html';\nimport haunted from './core';\nimport { makeVirtual } from './virtual';\nconst { component, createContext } = haunted({ render });\nconst virtual = makeVirtual();\nexport { component, createContext, virtual, html, render };\n", "import tslib from '../tslib.js';\r\nconst {\r\n    __extends,\r\n    __assign,\r\n    __rest,\r\n    __decorate,\r\n    __param,\r\n    __metadata,\r\n    __awaiter,\r\n    __generator,\r\n    __exportStar,\r\n    __createBinding,\r\n    __values,\r\n    __read,\r\n    __spread,\r\n    __spreadArrays,\r\n    __await,\r\n    __asyncGenerator,\r\n    __asyncDelegator,\r\n    __asyncValues,\r\n    __makeTemplateObject,\r\n    __importStar,\r\n    __importDefault,\r\n    __classPrivateFieldGet,\r\n    __classPrivateFieldSet,\r\n} = tslib;\r\nexport {\r\n    __extends,\r\n    __assign,\r\n    __rest,\r\n    __decorate,\r\n    __param,\r\n    __metadata,\r\n    __awaiter,\r\n    __generator,\r\n    __exportStar,\r\n    __createBinding,\r\n    __values,\r\n    __read,\r\n    __spread,\r\n    __spreadArrays,\r\n    __await,\r\n    __asyncGenerator,\r\n    __asyncDelegator,\r\n    __asyncValues,\r\n    __makeTemplateObject,\r\n    __importStar,\r\n    __importDefault,\r\n    __classPrivateFieldGet,\r\n    __classPrivateFieldSet,\r\n};\r\n", "import tslib from '../tslib.js';\r\nconst {\r\n    __extends,\r\n    __assign,\r\n    __rest,\r\n    __decorate,\r\n    __param,\r\n    __metadata,\r\n    __awaiter,\r\n    __generator,\r\n    __exportStar,\r\n    __createBinding,\r\n    __values,\r\n    __read,\r\n    __spread,\r\n    __spreadArrays,\r\n    __await,\r\n    __asyncGenerator,\r\n    __asyncDelegator,\r\n    __asyncValues,\r\n    __makeTemplateObject,\r\n    __importStar,\r\n    __importDefault,\r\n    __classPrivateFieldGet,\r\n    __classPrivateFieldSet,\r\n} = tslib;\r\nexport {\r\n    __extends,\r\n    __assign,\r\n    __rest,\r\n    __decorate,\r\n    __param,\r\n    __metadata,\r\n    __awaiter,\r\n    __generator,\r\n    __exportStar,\r\n    __createBinding,\r\n    __values,\r\n    __read,\r\n    __spread,\r\n    __spreadArrays,\r\n    __await,\r\n    __asyncGenerator,\r\n    __asyncDelegator,\r\n    __asyncValues,\r\n    __makeTemplateObject,\r\n    __importStar,\r\n    __importDefault,\r\n    __classPrivateFieldGet,\r\n    __classPrivateFieldSet,\r\n};\r\n", "(function (Object) {\n  typeof globalThis !== 'object' && (\n    this ?\n      get() :\n      (Object.defineProperty(Object.prototype, '_T_', {\n        configurable: true,\n        get: get\n      }), _T_)\n  );\n  function get() {\n    var global = this || self;\n    global.globalThis = global;\n    delete Object.prototype._T_;\n  }\n}(Object));\nexport default globalThis;\n", "import globalThis from \"@ungap/global-this\";\nconst global = globalThis as any;\nconst console = global.console;\n\nconst genericMessage = \"Invariant Violation\";\nconst {\n  setPrototypeOf = function (obj: any, proto: any) {\n    obj.__proto__ = proto;\n    return obj;\n  },\n} = Object as any;\n\nexport class InvariantError extends Error {\n  framesToPop = 1;\n  name = genericMessage;\n  constructor(message: string | number = genericMessage) {\n    super(\n      typeof message === \"number\"\n        ? `${genericMessage}: ${message} (see https://github.com/apollographql/invariant-packages)`\n        : message\n    );\n    setPrototypeOf(this, InvariantError.prototype);\n  }\n}\n\nexport function invariant(\n  condition: any,\n  message?: string | number,\n): asserts condition {\n  if (!condition) {\n    throw new InvariantError(message);\n  }\n}\n\nconst verbosityLevels = [\"log\", \"warn\", \"error\", \"silent\"] as const;\ntype VerbosityLevel = (typeof verbosityLevels)[number];\ntype ConsoleMethodName = Exclude<VerbosityLevel, \"silent\">;\nlet verbosityLevel = verbosityLevels.indexOf(\"log\");\n\nfunction wrapConsoleMethod<M extends ConsoleMethodName>(method: M) {\n  return function () {\n    if (verbosityLevels.indexOf(method) >= verbosityLevel) {\n      return console[method].apply(console, arguments as any);\n    }\n  } as (typeof console)[M];\n}\n\nexport namespace invariant {\n  export const log = wrapConsoleMethod(\"log\");\n  export const warn = wrapConsoleMethod(\"warn\");\n  export const error = wrapConsoleMethod(\"error\");\n}\n\nexport function setVerbosity(level: VerbosityLevel): VerbosityLevel {\n  const old = verbosityLevels[verbosityLevel];\n  verbosityLevel = Math.max(0, verbosityLevels.indexOf(level));\n  return old;\n}\n\n// Code that uses ts-invariant with rollup-plugin-invariant may want to\n// import this process stub to avoid errors evaluating process.env.NODE_ENV.\n// However, because most ESM-to-CJS compilers will rewrite the process import\n// as tsInvariant.process, which prevents proper replacement by minifiers, we\n// also attempt to define the stub globally when it is not already defined.\nconst processStub = global.process || { env: {} };\nexport { processStub as process };\nif (!global.process) try {\n  Object.defineProperty(globalThis, \"process\", {\n    value: processStub,\n  });\n} catch {\n  // If this fails, it isn't the end of the world.\n}\n\nexport default invariant;\n", "function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Return true if `value` is object-like. A value is object-like if it's not\n * `null` and has a `typeof` result of \"object\".\n */\nexport default function isObjectLike(value) {\n  return _typeof(value) == 'object' && value !== null;\n}\n", "// In ES2015 (or a polyfilled) environment, this will be Symbol.iterator\n// istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')\nexport var SYMBOL_ITERATOR = typeof Symbol === 'function' && Symbol.iterator != null ? Symbol.iterator : '@@iterator'; // In ES2017 (or a polyfilled) environment, this will be Symbol.asyncIterator\n// istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')\n\nexport var SYMBOL_ASYNC_ITERATOR = typeof Symbol === 'function' && Symbol.asyncIterator != null ? Symbol.asyncIterator : '@@asyncIterator'; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')\n\nexport var SYMBOL_TO_STRING_TAG = typeof Symbol === 'function' && Symbol.toStringTag != null ? Symbol.toStringTag : '@@toStringTag';\n", "/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  var lineRegexp = /\\r\\n|[\\n\\r]/g;\n  var line = 1;\n  var column = position + 1;\n  var match;\n\n  while ((match = lineRegexp.exec(source.body)) && match.index < position) {\n    line += 1;\n    column = position + 1 - (match.index + match[0].length);\n  }\n\n  return {\n    line: line,\n    column: column\n  };\n}\n", "import { getLocation } from \"./location.mjs\";\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printLocation(location) {\n  return printSourceLocation(location.source, getLocation(location.source, location.start));\n}\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printSourceLocation(source, sourceLocation) {\n  var firstLineColumnOffset = source.locationOffset.column - 1;\n  var body = whitespace(firstLineColumnOffset) + source.body;\n  var lineIndex = sourceLocation.line - 1;\n  var lineOffset = source.locationOffset.line - 1;\n  var lineNum = sourceLocation.line + lineOffset;\n  var columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\n  var columnNum = sourceLocation.column + columnOffset;\n  var locationStr = \"\".concat(source.name, \":\").concat(lineNum, \":\").concat(columnNum, \"\\n\");\n  var lines = body.split(/\\r\\n|[\\n\\r]/g);\n  var locationLine = lines[lineIndex]; // Special case for minified documents\n\n  if (locationLine.length > 120) {\n    var subLineIndex = Math.floor(columnNum / 80);\n    var subLineColumnNum = columnNum % 80;\n    var subLines = [];\n\n    for (var i = 0; i < locationLine.length; i += 80) {\n      subLines.push(locationLine.slice(i, i + 80));\n    }\n\n    return locationStr + printPrefixedLines([[\"\".concat(lineNum), subLines[0]]].concat(subLines.slice(1, subLineIndex + 1).map(function (subLine) {\n      return ['', subLine];\n    }), [[' ', whitespace(subLineColumnNum - 1) + '^'], ['', subLines[subLineIndex + 1]]]));\n  }\n\n  return locationStr + printPrefixedLines([// Lines specified like this: [\"prefix\", \"string\"],\n  [\"\".concat(lineNum - 1), lines[lineIndex - 1]], [\"\".concat(lineNum), locationLine], ['', whitespace(columnNum - 1) + '^'], [\"\".concat(lineNum + 1), lines[lineIndex + 1]]]);\n}\n\nfunction printPrefixedLines(lines) {\n  var existingLines = lines.filter(function (_ref) {\n    var _ = _ref[0],\n        line = _ref[1];\n    return line !== undefined;\n  });\n  var padLen = Math.max.apply(Math, existingLines.map(function (_ref2) {\n    var prefix = _ref2[0];\n    return prefix.length;\n  }));\n  return existingLines.map(function (_ref3) {\n    var prefix = _ref3[0],\n        line = _ref3[1];\n    return leftPad(padLen, prefix) + (line ? ' | ' + line : ' |');\n  }).join('\\n');\n}\n\nfunction whitespace(len) {\n  return Array(len + 1).join(' ');\n}\n\nfunction leftPad(len, str) {\n  return whitespace(len - str.length) + str;\n}\n", "function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n// FIXME:\n// flowlint uninitialized-instance-property:off\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport { SYMBOL_TO_STRING_TAG } from \"../polyfills/symbols.mjs\";\nimport { getLocation } from \"../language/location.mjs\";\nimport { printLocation, printSourceLocation } from \"../language/printLocation.mjs\";\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nexport var GraphQLError = /*#__PURE__*/function (_Error) {\n  _inherits(GraphQLError, _Error);\n\n  var _super = _createSuper(GraphQLError);\n\n  /**\n   * A message describing the Error for debugging purposes.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   *\n   * Note: should be treated as readonly, despite invariant usage.\n   */\n\n  /**\n   * An array of { line, column } locations within the source GraphQL document\n   * which correspond to this error.\n   *\n   * Errors during validation often contain multiple locations, for example to\n   * point out two things with the same name. Errors during execution include a\n   * single location, the field which produced the error.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array describing the JSON-path into the execution response which\n   * corresponds to this error. Only included for errors during execution.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array of GraphQL AST Nodes corresponding to this error.\n   */\n\n  /**\n   * The source GraphQL document for the first location of this error.\n   *\n   * Note that if this Error represents more than one node, the source may not\n   * represent nodes after the first node.\n   */\n\n  /**\n   * An array of character offsets within the source GraphQL document\n   * which correspond to this error.\n   */\n\n  /**\n   * The original error thrown from a field resolver during execution.\n   */\n\n  /**\n   * Extension fields to add to the formatted error.\n   */\n  function GraphQLError(message, nodes, source, positions, path, originalError, extensions) {\n    var _locations2, _source2, _positions2, _extensions2;\n\n    var _this;\n\n    _classCallCheck(this, GraphQLError);\n\n    _this = _super.call(this, message); // Compute list of blame nodes.\n\n    var _nodes = Array.isArray(nodes) ? nodes.length !== 0 ? nodes : undefined : nodes ? [nodes] : undefined; // Compute locations in the source for the given nodes/positions.\n\n\n    var _source = source;\n\n    if (!_source && _nodes) {\n      var _nodes$0$loc;\n\n      _source = (_nodes$0$loc = _nodes[0].loc) === null || _nodes$0$loc === void 0 ? void 0 : _nodes$0$loc.source;\n    }\n\n    var _positions = positions;\n\n    if (!_positions && _nodes) {\n      _positions = _nodes.reduce(function (list, node) {\n        if (node.loc) {\n          list.push(node.loc.start);\n        }\n\n        return list;\n      }, []);\n    }\n\n    if (_positions && _positions.length === 0) {\n      _positions = undefined;\n    }\n\n    var _locations;\n\n    if (positions && source) {\n      _locations = positions.map(function (pos) {\n        return getLocation(source, pos);\n      });\n    } else if (_nodes) {\n      _locations = _nodes.reduce(function (list, node) {\n        if (node.loc) {\n          list.push(getLocation(node.loc.source, node.loc.start));\n        }\n\n        return list;\n      }, []);\n    }\n\n    var _extensions = extensions;\n\n    if (_extensions == null && originalError != null) {\n      var originalExtensions = originalError.extensions;\n\n      if (isObjectLike(originalExtensions)) {\n        _extensions = originalExtensions;\n      }\n    }\n\n    Object.defineProperties(_assertThisInitialized(_this), {\n      name: {\n        value: 'GraphQLError'\n      },\n      message: {\n        value: message,\n        // By being enumerable, JSON.stringify will include `message` in the\n        // resulting output. This ensures that the simplest possible GraphQL\n        // service adheres to the spec.\n        enumerable: true,\n        writable: true\n      },\n      locations: {\n        // Coercing falsy values to undefined ensures they will not be included\n        // in JSON.stringify() when not provided.\n        value: (_locations2 = _locations) !== null && _locations2 !== void 0 ? _locations2 : undefined,\n        // By being enumerable, JSON.stringify will include `locations` in the\n        // resulting output. This ensures that the simplest possible GraphQL\n        // service adheres to the spec.\n        enumerable: _locations != null\n      },\n      path: {\n        // Coercing falsy values to undefined ensures they will not be included\n        // in JSON.stringify() when not provided.\n        value: path !== null && path !== void 0 ? path : undefined,\n        // By being enumerable, JSON.stringify will include `path` in the\n        // resulting output. This ensures that the simplest possible GraphQL\n        // service adheres to the spec.\n        enumerable: path != null\n      },\n      nodes: {\n        value: _nodes !== null && _nodes !== void 0 ? _nodes : undefined\n      },\n      source: {\n        value: (_source2 = _source) !== null && _source2 !== void 0 ? _source2 : undefined\n      },\n      positions: {\n        value: (_positions2 = _positions) !== null && _positions2 !== void 0 ? _positions2 : undefined\n      },\n      originalError: {\n        value: originalError\n      },\n      extensions: {\n        // Coercing falsy values to undefined ensures they will not be included\n        // in JSON.stringify() when not provided.\n        value: (_extensions2 = _extensions) !== null && _extensions2 !== void 0 ? _extensions2 : undefined,\n        // By being enumerable, JSON.stringify will include `path` in the\n        // resulting output. This ensures that the simplest possible GraphQL\n        // service adheres to the spec.\n        enumerable: _extensions != null\n      }\n    }); // Include (non-enumerable) stack trace.\n\n    if (originalError !== null && originalError !== void 0 && originalError.stack) {\n      Object.defineProperty(_assertThisInitialized(_this), 'stack', {\n        value: originalError.stack,\n        writable: true,\n        configurable: true\n      });\n      return _possibleConstructorReturn(_this);\n    } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')\n\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(_assertThisInitialized(_this), GraphQLError);\n    } else {\n      Object.defineProperty(_assertThisInitialized(_this), 'stack', {\n        value: Error().stack,\n        writable: true,\n        configurable: true\n      });\n    }\n\n    return _this;\n  }\n\n  _createClass(GraphQLError, [{\n    key: \"toString\",\n    value: function toString() {\n      return printError(this);\n    } // FIXME: workaround to not break chai comparisons, should be remove in v16\n    // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet\n\n  }, {\n    key: SYMBOL_TO_STRING_TAG,\n    get: function get() {\n      return 'Object';\n    }\n  }]);\n\n  return GraphQLError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n */\n\nexport function printError(error) {\n  var output = error.message;\n\n  if (error.nodes) {\n    for (var _i2 = 0, _error$nodes2 = error.nodes; _i2 < _error$nodes2.length; _i2++) {\n      var node = _error$nodes2[_i2];\n\n      if (node.loc) {\n        output += '\\n\\n' + printLocation(node.loc);\n      }\n    }\n  } else if (error.source && error.locations) {\n    for (var _i4 = 0, _error$locations2 = error.locations; _i4 < _error$locations2.length; _i4++) {\n      var location = _error$locations2[_i4];\n      output += '\\n\\n' + printSourceLocation(error.source, location);\n    }\n  }\n\n  return output;\n}\n", "import { GraphQLError } from \"./GraphQLError.mjs\";\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\nexport function syntaxError(source, position, description) {\n  return new GraphQLError(\"Syntax Error: \".concat(description), undefined, source, [position]);\n}\n", "/**\n * The set of allowed kind values for AST nodes.\n */\nexport var Kind = Object.freeze({\n  // Name\n  NAME: 'Name',\n  // Document\n  DOCUMENT: 'Document',\n  OPERATION_DEFINITION: 'OperationDefinition',\n  VARIABLE_DEFINITION: 'VariableDefinition',\n  SELECTION_SET: 'SelectionSet',\n  FIELD: 'Field',\n  ARGUMENT: 'Argument',\n  // Fragments\n  FRAGMENT_SPREAD: 'FragmentSpread',\n  INLINE_FRAGMENT: 'InlineFragment',\n  FRAGMENT_DEFINITION: 'FragmentDefinition',\n  // Values\n  VARIABLE: 'Variable',\n  INT: 'IntValue',\n  FLOAT: 'FloatValue',\n  STRING: 'StringValue',\n  BOOLEAN: 'BooleanValue',\n  NULL: 'NullValue',\n  ENUM: 'EnumValue',\n  LIST: 'ListValue',\n  OBJECT: 'ObjectValue',\n  OBJECT_FIELD: 'ObjectField',\n  // Directives\n  DIRECTIVE: 'Directive',\n  // Types\n  NAMED_TYPE: 'NamedType',\n  LIST_TYPE: 'ListType',\n  NON_NULL_TYPE: 'NonNullType',\n  // Type System Definitions\n  SCHEMA_DEFINITION: 'SchemaDefinition',\n  OPERATION_TYPE_DEFINITION: 'OperationTypeDefinition',\n  // Type Definitions\n  SCALAR_TYPE_DEFINITION: 'ScalarTypeDefinition',\n  OBJECT_TYPE_DEFINITION: 'ObjectTypeDefinition',\n  FIELD_DEFINITION: 'FieldDefinition',\n  INPUT_VALUE_DEFINITION: 'InputValueDefinition',\n  INTERFACE_TYPE_DEFINITION: 'InterfaceTypeDefinition',\n  UNION_TYPE_DEFINITION: 'UnionTypeDefinition',\n  ENUM_TYPE_DEFINITION: 'EnumTypeDefinition',\n  ENUM_VALUE_DEFINITION: 'EnumValueDefinition',\n  INPUT_OBJECT_TYPE_DEFINITION: 'InputObjectTypeDefinition',\n  // Directive Definitions\n  DIRECTIVE_DEFINITION: 'DirectiveDefinition',\n  // Type System Extensions\n  SCHEMA_EXTENSION: 'SchemaExtension',\n  // Type Extensions\n  SCALAR_TYPE_EXTENSION: 'ScalarTypeExtension',\n  OBJECT_TYPE_EXTENSION: 'ObjectTypeExtension',\n  INTERFACE_TYPE_EXTENSION: 'InterfaceTypeExtension',\n  UNION_TYPE_EXTENSION: 'UnionTypeExtension',\n  ENUM_TYPE_EXTENSION: 'EnumTypeExtension',\n  INPUT_OBJECT_TYPE_EXTENSION: 'InputObjectTypeExtension'\n});\n/**\n * The enum type representing the possible kind values of AST nodes.\n */\n", "export default function invariant(condition, message) {\n  var booleanCondition = Boolean(condition); // istanbul ignore else (See transformation done in './resources/inlineInvariant.js')\n\n  if (!booleanCondition) {\n    throw new Error(message != null ? message : 'Unexpected invariant triggered.');\n  }\n}\n", "// istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')\nvar nodejsCustomInspectSymbol = typeof Symbol === 'function' && typeof Symbol.for === 'function' ? Symbol.for('nodejs.util.inspect.custom') : undefined;\nexport default nodejsCustomInspectSymbol;\n", "import invariant from \"./invariant.mjs\";\nimport nodejsCustomInspectSymbol from \"./nodejsCustomInspectSymbol.mjs\";\n/**\n * The `defineInspect()` function defines `inspect()` prototype method as alias of `toJSON`\n */\n\nexport default function defineInspect(classObject) {\n  var fn = classObject.prototype.toJSON;\n  typeof fn === 'function' || invariant(0);\n  classObject.prototype.inspect = fn; // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2317')\n\n  if (nodejsCustomInspectSymbol) {\n    classObject.prototype[nodejsCustomInspectSymbol] = fn;\n  }\n}\n", "import defineInspect from \"../jsutils/defineInspect.mjs\";\n\n/**\n * Contains a range of UTF-8 character offsets and token references that\n * identify the region of the source from which the AST derived.\n */\nexport var Location = /*#__PURE__*/function () {\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The Token at which this Node begins.\n   */\n\n  /**\n   * The Token at which this Node ends.\n   */\n\n  /**\n   * The Source document the AST represents.\n   */\n  function Location(startToken, endToken, source) {\n    this.start = startToken.start;\n    this.end = endToken.end;\n    this.startToken = startToken;\n    this.endToken = endToken;\n    this.source = source;\n  }\n\n  var _proto = Location.prototype;\n\n  _proto.toJSON = function toJSON() {\n    return {\n      start: this.start,\n      end: this.end\n    };\n  };\n\n  return Location;\n}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.\n\ndefineInspect(Location);\n/**\n * Represents a range of characters represented by a lexical token\n * within a Source.\n */\n\nexport var Token = /*#__PURE__*/function () {\n  /**\n   * The kind of Token.\n   */\n\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The 1-indexed line number on which this Token appears.\n   */\n\n  /**\n   * The 1-indexed column number at which this Token begins.\n   */\n\n  /**\n   * For non-punctuation tokens, represents the interpreted value of the token.\n   */\n\n  /**\n   * Tokens exist as nodes in a double-linked-list amongst all tokens\n   * including ignored tokens. <SOF> is always the first node and <EOF>\n   * the last.\n   */\n  function Token(kind, start, end, line, column, prev, value) {\n    this.kind = kind;\n    this.start = start;\n    this.end = end;\n    this.line = line;\n    this.column = column;\n    this.value = value;\n    this.prev = prev;\n    this.next = null;\n  }\n\n  var _proto2 = Token.prototype;\n\n  _proto2.toJSON = function toJSON() {\n    return {\n      kind: this.kind,\n      value: this.value,\n      line: this.line,\n      column: this.column\n    };\n  };\n\n  return Token;\n}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.\n\ndefineInspect(Token);\n/**\n * @internal\n */\n\nexport function isNode(maybeNode) {\n  return maybeNode != null && typeof maybeNode.kind === 'string';\n}\n/**\n * The list of all possible AST node types.\n */\n", "/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nexport var TokenKind = Object.freeze({\n  SOF: '<SOF>',\n  EOF: '<EOF>',\n  BANG: '!',\n  DOLLAR: '$',\n  AMP: '&',\n  PAREN_L: '(',\n  PAREN_R: ')',\n  SPREAD: '...',\n  COLON: ':',\n  EQUALS: '=',\n  AT: '@',\n  BRACKET_L: '[',\n  BRACKET_R: ']',\n  BRACE_L: '{',\n  PIPE: '|',\n  BRACE_R: '}',\n  NAME: 'Name',\n  INT: 'Int',\n  FLOAT: 'Float',\n  STRING: 'String',\n  BLOCK_STRING: 'BlockString',\n  COMMENT: 'Comment'\n});\n/**\n * The enum type representing the token kinds values.\n */\n", "function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/* eslint-disable flowtype/no-weak-types */\nimport nodejsCustomInspectSymbol from \"./nodejsCustomInspectSymbol.mjs\";\nvar MAX_ARRAY_LENGTH = 10;\nvar MAX_RECURSIVE_DEPTH = 2;\n/**\n * Used to print values in error messages.\n */\n\nexport default function inspect(value) {\n  return formatValue(value, []);\n}\n\nfunction formatValue(value, seenValues) {\n  switch (_typeof(value)) {\n    case 'string':\n      return JSON.stringify(value);\n\n    case 'function':\n      return value.name ? \"[function \".concat(value.name, \"]\") : '[function]';\n\n    case 'object':\n      if (value === null) {\n        return 'null';\n      }\n\n      return formatObjectValue(value, seenValues);\n\n    default:\n      return String(value);\n  }\n}\n\nfunction formatObjectValue(value, previouslySeenValues) {\n  if (previouslySeenValues.indexOf(value) !== -1) {\n    return '[Circular]';\n  }\n\n  var seenValues = [].concat(previouslySeenValues, [value]);\n  var customInspectFn = getCustomFn(value);\n\n  if (customInspectFn !== undefined) {\n    var customValue = customInspectFn.call(value); // check for infinite recursion\n\n    if (customValue !== value) {\n      return typeof customValue === 'string' ? customValue : formatValue(customValue, seenValues);\n    }\n  } else if (Array.isArray(value)) {\n    return formatArray(value, seenValues);\n  }\n\n  return formatObject(value, seenValues);\n}\n\nfunction formatObject(object, seenValues) {\n  var keys = Object.keys(object);\n\n  if (keys.length === 0) {\n    return '{}';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[' + getObjectTag(object) + ']';\n  }\n\n  var properties = keys.map(function (key) {\n    var value = formatValue(object[key], seenValues);\n    return key + ': ' + value;\n  });\n  return '{ ' + properties.join(', ') + ' }';\n}\n\nfunction formatArray(array, seenValues) {\n  if (array.length === 0) {\n    return '[]';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[Array]';\n  }\n\n  var len = Math.min(MAX_ARRAY_LENGTH, array.length);\n  var remaining = array.length - len;\n  var items = [];\n\n  for (var i = 0; i < len; ++i) {\n    items.push(formatValue(array[i], seenValues));\n  }\n\n  if (remaining === 1) {\n    items.push('... 1 more item');\n  } else if (remaining > 1) {\n    items.push(\"... \".concat(remaining, \" more items\"));\n  }\n\n  return '[' + items.join(', ') + ']';\n}\n\nfunction getCustomFn(object) {\n  var customInspectFn = object[String(nodejsCustomInspectSymbol)];\n\n  if (typeof customInspectFn === 'function') {\n    return customInspectFn;\n  }\n\n  if (typeof object.inspect === 'function') {\n    return object.inspect;\n  }\n}\n\nfunction getObjectTag(object) {\n  var tag = Object.prototype.toString.call(object).replace(/^\\[object /, '').replace(/]$/, '');\n\n  if (tag === 'Object' && typeof object.constructor === 'function') {\n    var name = object.constructor.name;\n\n    if (typeof name === 'string' && name !== '') {\n      return name;\n    }\n  }\n\n  return tag;\n}\n", "export default function devAssert(condition, message) {\n  var booleanCondition = Boolean(condition); // istanbul ignore else (See transformation done in './resources/inlineInvariant.js')\n\n  if (!booleanCondition) {\n    throw new Error(message);\n  }\n}\n", "/**\n * A replacement for instanceof which includes an error warning when multi-realm\n * constructors are detected.\n */\n// See: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production\n// See: https://webpack.js.org/guides/production/\nexport default process.env.NODE_ENV === 'production' ? // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')\n// eslint-disable-next-line no-shadow\nfunction instanceOf(value, constructor) {\n  return value instanceof constructor;\n} : // eslint-disable-next-line no-shadow\nfunction instanceOf(value, constructor) {\n  if (value instanceof constructor) {\n    return true;\n  }\n\n  if (value) {\n    var valueClass = value.constructor;\n    var className = constructor.name;\n\n    if (className && valueClass && valueClass.name === className) {\n      throw new Error(\"Cannot use \".concat(className, \" \\\"\").concat(value, \"\\\" from another module or realm.\\n\\nEnsure that there is only one instance of \\\"graphql\\\" in the node_modules\\ndirectory. If different versions of \\\"graphql\\\" are the dependencies of other\\nrelied on modules, use \\\"resolutions\\\" to ensure only one version is installed.\\n\\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\\n\\nDuplicate \\\"graphql\\\" modules cannot be used at the same time since different\\nversions may have different capabilities and behavior. The data from one\\nversion used in the function from another could produce confusing and\\nspurious results.\"));\n    }\n  }\n\n  return false;\n};\n", "function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { SYMBOL_TO_STRING_TAG } from \"../polyfills/symbols.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport devAssert from \"../jsutils/devAssert.mjs\";\nimport instanceOf from \"../jsutils/instanceOf.mjs\";\n\n/**\n * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are\n * optional, but they are useful for clients who store GraphQL documents in source files.\n * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might\n * be useful for `name` to be `\"Foo.graphql\"` and location to be `{ line: 40, column: 1 }`.\n * The `line` and `column` properties in `locationOffset` are 1-indexed.\n */\nexport var Source = /*#__PURE__*/function () {\n  function Source(body) {\n    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GraphQL request';\n    var locationOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      line: 1,\n      column: 1\n    };\n    typeof body === 'string' || devAssert(0, \"Body must be a string. Received: \".concat(inspect(body), \".\"));\n    this.body = body;\n    this.name = name;\n    this.locationOffset = locationOffset;\n    this.locationOffset.line > 0 || devAssert(0, 'line in locationOffset is 1-indexed and must be positive.');\n    this.locationOffset.column > 0 || devAssert(0, 'column in locationOffset is 1-indexed and must be positive.');\n  } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet\n\n\n  _createClass(Source, [{\n    key: SYMBOL_TO_STRING_TAG,\n    get: function get() {\n      return 'Source';\n    }\n  }]);\n\n  return Source;\n}();\n/**\n * Test if the given value is a Source object.\n *\n * @internal\n */\n\n// eslint-disable-next-line no-redeclare\nexport function isSource(source) {\n  return instanceOf(source, Source);\n}\n", "/**\n * The set of allowed directive location values.\n */\nexport var DirectiveLocation = Object.freeze({\n  // Request Definitions\n  QUERY: 'QUERY',\n  MUTATION: 'MUTATION',\n  SUBSCRIPTION: 'SUBSCRIPTION',\n  FIELD: 'FIELD',\n  FRAGMENT_DEFINITION: 'FRAGMENT_DEFINITION',\n  FRAGMENT_SPREAD: 'FRAGMENT_SPREAD',\n  INLINE_FRAGMENT: 'INLINE_FRAGMENT',\n  VARIABLE_DEFINITION: 'VARIABLE_DEFINITION',\n  // Type System Definitions\n  SCHEMA: 'SCHEMA',\n  SCALAR: 'SCALAR',\n  OBJECT: 'OBJECT',\n  FIELD_DEFINITION: 'FIELD_DEFINITION',\n  ARGUMENT_DEFINITION: 'ARGUMENT_DEFINITION',\n  INTERFACE: 'INTERFACE',\n  UNION: 'UNION',\n  ENUM: 'ENUM',\n  ENUM_VALUE: 'ENUM_VALUE',\n  INPUT_OBJECT: 'INPUT_OBJECT',\n  INPUT_FIELD_DEFINITION: 'INPUT_FIELD_DEFINITION'\n});\n/**\n * The enum type representing the directive location values.\n */\n", "/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n *\n * @internal\n */\nexport function dedentBlockStringValue(rawString) {\n  // Expand a block string's raw value into independent lines.\n  var lines = rawString.split(/\\r\\n|[\\n\\r]/g); // Remove common indentation from all lines but first.\n\n  var commonIndent = getBlockStringIndentation(rawString);\n\n  if (commonIndent !== 0) {\n    for (var i = 1; i < lines.length; i++) {\n      lines[i] = lines[i].slice(commonIndent);\n    }\n  } // Remove leading and trailing blank lines.\n\n\n  var startLine = 0;\n\n  while (startLine < lines.length && isBlank(lines[startLine])) {\n    ++startLine;\n  }\n\n  var endLine = lines.length;\n\n  while (endLine > startLine && isBlank(lines[endLine - 1])) {\n    --endLine;\n  } // Return a string of the lines joined with U+000A.\n\n\n  return lines.slice(startLine, endLine).join('\\n');\n}\n\nfunction isBlank(str) {\n  for (var i = 0; i < str.length; ++i) {\n    if (str[i] !== ' ' && str[i] !== '\\t') {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * @internal\n */\n\n\nexport function getBlockStringIndentation(value) {\n  var _commonIndent;\n\n  var isFirstLine = true;\n  var isEmptyLine = true;\n  var indent = 0;\n  var commonIndent = null;\n\n  for (var i = 0; i < value.length; ++i) {\n    switch (value.charCodeAt(i)) {\n      case 13:\n        //  \\r\n        if (value.charCodeAt(i + 1) === 10) {\n          ++i; // skip \\r\\n as one symbol\n        }\n\n      // falls through\n\n      case 10:\n        //  \\n\n        isFirstLine = false;\n        isEmptyLine = true;\n        indent = 0;\n        break;\n\n      case 9: //   \\t\n\n      case 32:\n        //  <space>\n        ++indent;\n        break;\n\n      default:\n        if (isEmptyLine && !isFirstLine && (commonIndent === null || indent < commonIndent)) {\n          commonIndent = indent;\n        }\n\n        isEmptyLine = false;\n    }\n  }\n\n  return (_commonIndent = commonIndent) !== null && _commonIndent !== void 0 ? _commonIndent : 0;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n *\n * @internal\n */\n\nexport function printBlockString(value) {\n  var indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var preferMultipleLines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var isSingleLine = value.indexOf('\\n') === -1;\n  var hasLeadingSpace = value[0] === ' ' || value[0] === '\\t';\n  var hasTrailingQuote = value[value.length - 1] === '\"';\n  var hasTrailingSlash = value[value.length - 1] === '\\\\';\n  var printAsMultipleLines = !isSingleLine || hasTrailingQuote || hasTrailingSlash || preferMultipleLines;\n  var result = ''; // Format a multi-line block quote to account for leading space.\n\n  if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {\n    result += '\\n' + indentation;\n  }\n\n  result += indentation ? value.replace(/\\n/g, '\\n' + indentation) : value;\n\n  if (printAsMultipleLines) {\n    result += '\\n';\n  }\n\n  return '\"\"\"' + result.replace(/\"\"\"/g, '\\\\\"\"\"') + '\"\"\"';\n}\n", "import { syntaxError } from \"../error/syntaxError.mjs\";\nimport { Token } from \"./ast.mjs\";\nimport { TokenKind } from \"./tokenKind.mjs\";\nimport { dedentBlockStringValue } from \"./blockString.mjs\";\n/**\n * Given a Source object, creates a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport var Lexer = /*#__PURE__*/function () {\n  /**\n   * The previously focused non-ignored token.\n   */\n\n  /**\n   * The currently focused non-ignored token.\n   */\n\n  /**\n   * The (1-indexed) line containing the current token.\n   */\n\n  /**\n   * The character offset at which the current line begins.\n   */\n  function Lexer(source) {\n    var startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0, null);\n    this.source = source;\n    this.lastToken = startOfFileToken;\n    this.token = startOfFileToken;\n    this.line = 1;\n    this.lineStart = 0;\n  }\n  /**\n   * Advances the token stream to the next non-ignored token.\n   */\n\n\n  var _proto = Lexer.prototype;\n\n  _proto.advance = function advance() {\n    this.lastToken = this.token;\n    var token = this.token = this.lookahead();\n    return token;\n  }\n  /**\n   * Looks ahead and returns the next non-ignored token, but does not change\n   * the state of Lexer.\n   */\n  ;\n\n  _proto.lookahead = function lookahead() {\n    var token = this.token;\n\n    if (token.kind !== TokenKind.EOF) {\n      do {\n        var _token$next;\n\n        // Note: next is only mutable during parsing, so we cast to allow this.\n        token = (_token$next = token.next) !== null && _token$next !== void 0 ? _token$next : token.next = readToken(this, token);\n      } while (token.kind === TokenKind.COMMENT);\n    }\n\n    return token;\n  };\n\n  return Lexer;\n}();\n/**\n * @internal\n */\n\nexport function isPunctuatorTokenKind(kind) {\n  return kind === TokenKind.BANG || kind === TokenKind.DOLLAR || kind === TokenKind.AMP || kind === TokenKind.PAREN_L || kind === TokenKind.PAREN_R || kind === TokenKind.SPREAD || kind === TokenKind.COLON || kind === TokenKind.EQUALS || kind === TokenKind.AT || kind === TokenKind.BRACKET_L || kind === TokenKind.BRACKET_R || kind === TokenKind.BRACE_L || kind === TokenKind.PIPE || kind === TokenKind.BRACE_R;\n}\n\nfunction printCharCode(code) {\n  return (// NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.\n    \"\\\"\\\\u\".concat(('00' + code.toString(16).toUpperCase()).slice(-4), \"\\\"\")\n  );\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\n\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n  var pos = prev.end;\n\n  while (pos < bodyLength) {\n    var code = body.charCodeAt(pos);\n    var _line = lexer.line;\n\n    var _col = 1 + pos - lexer.lineStart; // SourceCharacter\n\n\n    switch (code) {\n      case 0xfeff: // <BOM>\n\n      case 9: //   \\t\n\n      case 32: //  <space>\n\n      case 44:\n        //  ,\n        ++pos;\n        continue;\n\n      case 10:\n        //  \\n\n        ++pos;\n        ++lexer.line;\n        lexer.lineStart = pos;\n        continue;\n\n      case 13:\n        //  \\r\n        if (body.charCodeAt(pos + 1) === 10) {\n          pos += 2;\n        } else {\n          ++pos;\n        }\n\n        ++lexer.line;\n        lexer.lineStart = pos;\n        continue;\n\n      case 33:\n        //  !\n        return new Token(TokenKind.BANG, pos, pos + 1, _line, _col, prev);\n\n      case 35:\n        //  #\n        return readComment(source, pos, _line, _col, prev);\n\n      case 36:\n        //  $\n        return new Token(TokenKind.DOLLAR, pos, pos + 1, _line, _col, prev);\n\n      case 38:\n        //  &\n        return new Token(TokenKind.AMP, pos, pos + 1, _line, _col, prev);\n\n      case 40:\n        //  (\n        return new Token(TokenKind.PAREN_L, pos, pos + 1, _line, _col, prev);\n\n      case 41:\n        //  )\n        return new Token(TokenKind.PAREN_R, pos, pos + 1, _line, _col, prev);\n\n      case 46:\n        //  .\n        if (body.charCodeAt(pos + 1) === 46 && body.charCodeAt(pos + 2) === 46) {\n          return new Token(TokenKind.SPREAD, pos, pos + 3, _line, _col, prev);\n        }\n\n        break;\n\n      case 58:\n        //  :\n        return new Token(TokenKind.COLON, pos, pos + 1, _line, _col, prev);\n\n      case 61:\n        //  =\n        return new Token(TokenKind.EQUALS, pos, pos + 1, _line, _col, prev);\n\n      case 64:\n        //  @\n        return new Token(TokenKind.AT, pos, pos + 1, _line, _col, prev);\n\n      case 91:\n        //  [\n        return new Token(TokenKind.BRACKET_L, pos, pos + 1, _line, _col, prev);\n\n      case 93:\n        //  ]\n        return new Token(TokenKind.BRACKET_R, pos, pos + 1, _line, _col, prev);\n\n      case 123:\n        // {\n        return new Token(TokenKind.BRACE_L, pos, pos + 1, _line, _col, prev);\n\n      case 124:\n        // |\n        return new Token(TokenKind.PIPE, pos, pos + 1, _line, _col, prev);\n\n      case 125:\n        // }\n        return new Token(TokenKind.BRACE_R, pos, pos + 1, _line, _col, prev);\n\n      case 34:\n        //  \"\n        if (body.charCodeAt(pos + 1) === 34 && body.charCodeAt(pos + 2) === 34) {\n          return readBlockString(source, pos, _line, _col, prev, lexer);\n        }\n\n        return readString(source, pos, _line, _col, prev);\n\n      case 45: //  -\n\n      case 48: //  0\n\n      case 49: //  1\n\n      case 50: //  2\n\n      case 51: //  3\n\n      case 52: //  4\n\n      case 53: //  5\n\n      case 54: //  6\n\n      case 55: //  7\n\n      case 56: //  8\n\n      case 57:\n        //  9\n        return readNumber(source, pos, code, _line, _col, prev);\n\n      case 65: //  A\n\n      case 66: //  B\n\n      case 67: //  C\n\n      case 68: //  D\n\n      case 69: //  E\n\n      case 70: //  F\n\n      case 71: //  G\n\n      case 72: //  H\n\n      case 73: //  I\n\n      case 74: //  J\n\n      case 75: //  K\n\n      case 76: //  L\n\n      case 77: //  M\n\n      case 78: //  N\n\n      case 79: //  O\n\n      case 80: //  P\n\n      case 81: //  Q\n\n      case 82: //  R\n\n      case 83: //  S\n\n      case 84: //  T\n\n      case 85: //  U\n\n      case 86: //  V\n\n      case 87: //  W\n\n      case 88: //  X\n\n      case 89: //  Y\n\n      case 90: //  Z\n\n      case 95: //  _\n\n      case 97: //  a\n\n      case 98: //  b\n\n      case 99: //  c\n\n      case 100: // d\n\n      case 101: // e\n\n      case 102: // f\n\n      case 103: // g\n\n      case 104: // h\n\n      case 105: // i\n\n      case 106: // j\n\n      case 107: // k\n\n      case 108: // l\n\n      case 109: // m\n\n      case 110: // n\n\n      case 111: // o\n\n      case 112: // p\n\n      case 113: // q\n\n      case 114: // r\n\n      case 115: // s\n\n      case 116: // t\n\n      case 117: // u\n\n      case 118: // v\n\n      case 119: // w\n\n      case 120: // x\n\n      case 121: // y\n\n      case 122:\n        // z\n        return readName(source, pos, _line, _col, prev);\n    }\n\n    throw syntaxError(source, pos, unexpectedCharacterMessage(code));\n  }\n\n  var line = lexer.line;\n  var col = 1 + pos - lexer.lineStart;\n  return new Token(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n}\n/**\n * Report a message that an unexpected character was encountered.\n */\n\n\nfunction unexpectedCharacterMessage(code) {\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    return \"Cannot contain the invalid character \".concat(printCharCode(code), \".\");\n  }\n\n  if (code === 39) {\n    // '\n    return 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?';\n  }\n\n  return \"Cannot parse the unexpected character \".concat(printCharCode(code), \".\");\n}\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\n\n\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code;\n  var position = start;\n\n  do {\n    code = body.charCodeAt(++position);\n  } while (!isNaN(code) && ( // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n\n  return new Token(TokenKind.COMMENT, start, position, line, col, prev, body.slice(start + 1, position));\n}\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\n\n\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n\n  if (code === 45) {\n    // -\n    code = body.charCodeAt(++position);\n  }\n\n  if (code === 48) {\n    // 0\n    code = body.charCodeAt(++position);\n\n    if (code >= 48 && code <= 57) {\n      throw syntaxError(source, position, \"Invalid number, unexpected digit after 0: \".concat(printCharCode(code), \".\"));\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 46) {\n    // .\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n    code = body.charCodeAt(++position);\n\n    if (code === 43 || code === 45) {\n      // + -\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or NameStart\n\n\n  if (code === 46 || isNameStart(code)) {\n    throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n  }\n\n  return new Token(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, body.slice(start, position));\n}\n/**\n * Returns the new position in the source after reading digits.\n */\n\n\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = body.charCodeAt(++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n\n\n    return position;\n  }\n\n  throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n}\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\n\n\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position)) && // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += body.slice(chunkStart, position);\n      return new Token(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    ++position;\n\n    if (code === 92) {\n      // \\\n      value += body.slice(chunkStart, position - 1);\n      code = body.charCodeAt(position);\n\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n\n        case 47:\n          value += '/';\n          break;\n\n        case 92:\n          value += '\\\\';\n          break;\n\n        case 98:\n          value += '\\b';\n          break;\n\n        case 102:\n          value += '\\f';\n          break;\n\n        case 110:\n          value += '\\n';\n          break;\n\n        case 114:\n          value += '\\r';\n          break;\n\n        case 116:\n          value += '\\t';\n          break;\n\n        case 117:\n          {\n            // uXXXX\n            var charCode = uniCharCode(body.charCodeAt(position + 1), body.charCodeAt(position + 2), body.charCodeAt(position + 3), body.charCodeAt(position + 4));\n\n            if (charCode < 0) {\n              var invalidSequence = body.slice(position + 1, position + 5);\n              throw syntaxError(source, position, \"Invalid character escape sequence: \\\\u\".concat(invalidSequence, \".\"));\n            }\n\n            value += String.fromCharCode(charCode);\n            position += 4;\n            break;\n          }\n\n        default:\n          throw syntaxError(source, position, \"Invalid character escape sequence: \\\\\".concat(String.fromCharCode(code), \".\"));\n      }\n\n      ++position;\n      chunkStart = position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Reads a block string token from the source file.\n *\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\n */\n\n\nfunction readBlockString(source, start, line, col, prev, lexer) {\n  var body = source.body;\n  var position = start + 3;\n  var chunkStart = position;\n  var code = 0;\n  var rawValue = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position))) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {\n      rawValue += body.slice(chunkStart, position);\n      return new Token(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, dedentBlockStringValue(rawValue));\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if ( // Escape Triple-Quote (\\\"\"\")\n    code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {\n      rawValue += body.slice(chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Converts four hexadecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\n\n\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\n\n\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\n\n\nfunction readName(source, start, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var position = start + 1;\n  var code = 0;\n\n  while (position !== bodyLength && !isNaN(code = body.charCodeAt(position)) && (code === 95 || // _\n  code >= 48 && code <= 57 || // 0-9\n  code >= 65 && code <= 90 || // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n\n  return new Token(TokenKind.NAME, start, position, line, col, prev, body.slice(start, position));\n} // _ A-Z a-z\n\n\nfunction isNameStart(code) {\n  return code === 95 || code >= 65 && code <= 90 || code >= 97 && code <= 122;\n}\n", "import { syntaxError } from \"../error/syntaxError.mjs\";\nimport { Kind } from \"./kinds.mjs\";\nimport { Location } from \"./ast.mjs\";\nimport { TokenKind } from \"./tokenKind.mjs\";\nimport { Source, isSource } from \"./source.mjs\";\nimport { DirectiveLocation } from \"./directiveLocation.mjs\";\nimport { Lexer, isPunctuatorTokenKind } from \"./lexer.mjs\";\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  var parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nexport var Parser = /*#__PURE__*/function () {\n  function Parser(source, options) {\n    var sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n\n  var _proto = Parser.prototype;\n\n  _proto.parseName = function parseName() {\n    var token = this.expectToken(TokenKind.NAME);\n    return {\n      kind: Kind.NAME,\n      value: token.value,\n      loc: this.loc(token)\n    };\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n  ;\n\n  _proto.parseDocument = function parseDocument() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(TokenKind.SOF, this.parseDefinition, TokenKind.EOF),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   */\n  ;\n\n  _proto.parseDefinition = function parseDefinition() {\n    if (this.peek(TokenKind.NAME)) {\n      switch (this._lexer.token.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'schema':\n        case 'scalar':\n        case 'type':\n        case 'interface':\n        case 'union':\n        case 'enum':\n        case 'input':\n        case 'directive':\n          return this.parseTypeSystemDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    } else if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } else if (this.peekDescription()) {\n      return this.parseTypeSystemDefinition();\n    }\n\n    throw this.unexpected();\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n  ;\n\n  _proto.parseOperationDefinition = function parseOperationDefinition() {\n    var start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: 'query',\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n        loc: this.loc(start)\n      };\n    }\n\n    var operation = this.parseOperationType();\n    var name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return {\n      kind: Kind.OPERATION_DEFINITION,\n      operation: operation,\n      name: name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n  ;\n\n  _proto.parseOperationType = function parseOperationType() {\n    var operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return 'query';\n\n      case 'mutation':\n        return 'mutation';\n\n      case 'subscription':\n        return 'subscription';\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n  ;\n\n  _proto.parseVariableDefinitions = function parseVariableDefinitions() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseVariableDefinition, TokenKind.PAREN_R);\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n  ;\n\n  _proto.parseVariableDefinition = function parseVariableDefinition() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS) ? this.parseValueLiteral(true) : undefined,\n      directives: this.parseDirectives(true),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Variable : $ Name\n   */\n  ;\n\n  _proto.parseVariable = function parseVariable() {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * SelectionSet : { Selection+ }\n   */\n  ;\n\n  _proto.parseSelectionSet = function parseSelectionSet() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(TokenKind.BRACE_L, this.parseSelection, TokenKind.BRACE_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n  ;\n\n  _proto.parseSelection = function parseSelection() {\n    return this.peek(TokenKind.SPREAD) ? this.parseFragment() : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n  ;\n\n  _proto.parseField = function parseField() {\n    var start = this._lexer.token;\n    var nameOrAlias = this.parseName();\n    var alias;\n    var name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return {\n      kind: Kind.FIELD,\n      alias: alias,\n      name: name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L) ? this.parseSelectionSet() : undefined,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n  ;\n\n  _proto.parseArguments = function parseArguments(isConst) {\n    var item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n  ;\n\n  _proto.parseArgument = function parseArgument() {\n    var start = this._lexer.token;\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return {\n      kind: Kind.ARGUMENT,\n      name: name,\n      value: this.parseValueLiteral(false),\n      loc: this.loc(start)\n    };\n  };\n\n  _proto.parseConstArgument = function parseConstArgument() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.ARGUMENT,\n      name: this.parseName(),\n      value: (this.expectToken(TokenKind.COLON), this.parseValueLiteral(true)),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n  ;\n\n  _proto.parseFragment = function parseFragment() {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    var hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n        loc: this.loc(start)\n      };\n    }\n\n    return {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n  ;\n\n  _proto.parseFragmentDefinition = function parseFragmentDefinition() {\n    var _this$_options;\n\n    var start = this._lexer.token;\n    this.expectKeyword('fragment'); // Experimental support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (((_this$_options = this._options) === null || _this$_options === void 0 ? void 0 : _this$_options.experimentalFragmentVariables) === true) {\n      return {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n        loc: this.loc(start)\n      };\n    }\n\n    return {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n  ;\n\n  _proto.parseFragmentName = function parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n  ;\n\n  _proto.parseValueLiteral = function parseValueLiteral(isConst) {\n    var token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this._lexer.advance();\n\n        return {\n          kind: Kind.INT,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.FLOAT:\n        this._lexer.advance();\n\n        return {\n          kind: Kind.FLOAT,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        this._lexer.advance();\n\n        switch (token.value) {\n          case 'true':\n            return {\n              kind: Kind.BOOLEAN,\n              value: true,\n              loc: this.loc(token)\n            };\n\n          case 'false':\n            return {\n              kind: Kind.BOOLEAN,\n              value: false,\n              loc: this.loc(token)\n            };\n\n          case 'null':\n            return {\n              kind: Kind.NULL,\n              loc: this.loc(token)\n            };\n\n          default:\n            return {\n              kind: Kind.ENUM,\n              value: token.value,\n              loc: this.loc(token)\n            };\n        }\n\n      case TokenKind.DOLLAR:\n        if (!isConst) {\n          return this.parseVariable();\n        }\n\n        break;\n    }\n\n    throw this.unexpected();\n  };\n\n  _proto.parseStringLiteral = function parseStringLiteral() {\n    var token = this._lexer.token;\n\n    this._lexer.advance();\n\n    return {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n      loc: this.loc(token)\n    };\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n  ;\n\n  _proto.parseList = function parseList(isConst) {\n    var _this = this;\n\n    var start = this._lexer.token;\n\n    var item = function item() {\n      return _this.parseValueLiteral(isConst);\n    };\n\n    return {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   */\n  ;\n\n  _proto.parseObject = function parseObject(isConst) {\n    var _this2 = this;\n\n    var start = this._lexer.token;\n\n    var item = function item() {\n      return _this2.parseObjectField(isConst);\n    };\n\n    return {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n  ;\n\n  _proto.parseObjectField = function parseObjectField(isConst) {\n    var start = this._lexer.token;\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return {\n      kind: Kind.OBJECT_FIELD,\n      name: name,\n      value: this.parseValueLiteral(isConst),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n  ;\n\n  _proto.parseDirectives = function parseDirectives(isConst) {\n    var directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n  /**\n   * Directive[Const] : @ Name Arguments[?Const]?\n   */\n  ;\n\n  _proto.parseDirective = function parseDirective(isConst) {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n  ;\n\n  _proto.parseTypeReference = function parseTypeReference() {\n    var start = this._lexer.token;\n    var type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      type = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = {\n        kind: Kind.LIST_TYPE,\n        type: type,\n        loc: this.loc(start)\n      };\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return {\n        kind: Kind.NON_NULL_TYPE,\n        type: type,\n        loc: this.loc(start)\n      };\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n  ;\n\n  _proto.parseNamedType = function parseNamedType() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Type Definition section.\n\n  /**\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n  ;\n\n  _proto.parseTypeSystemDefinition = function parseTypeSystemDefinition() {\n    // Many definitions begin with a description and require a lookahead.\n    var keywordToken = this.peekDescription() ? this._lexer.lookahead() : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  };\n\n  _proto.peekDescription = function peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n  ;\n\n  _proto.parseDescription = function parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   */\n  ;\n\n  _proto.parseSchemaDefinition = function parseSchemaDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('schema');\n    var directives = this.parseDirectives(true);\n    var operationTypes = this.many(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n    return {\n      kind: Kind.SCHEMA_DEFINITION,\n      description: description,\n      directives: directives,\n      operationTypes: operationTypes,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n  ;\n\n  _proto.parseOperationTypeDefinition = function parseOperationTypeDefinition() {\n    var start = this._lexer.token;\n    var operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseNamedType();\n    return {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation: operation,\n      type: type,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n  ;\n\n  _proto.parseScalarTypeDefinition = function parseScalarTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('scalar');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n  ;\n\n  _proto.parseObjectTypeDefinition = function parseObjectTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('type');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n    return {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n  ;\n\n  _proto.parseImplementsInterfaces = function parseImplementsInterfaces() {\n    var _this$_options2;\n\n    if (!this.expectOptionalKeyword('implements')) {\n      return [];\n    }\n\n    if (((_this$_options2 = this._options) === null || _this$_options2 === void 0 ? void 0 : _this$_options2.allowLegacySDLImplementsInterfaces) === true) {\n      var types = []; // Optional leading ampersand\n\n      this.expectOptionalToken(TokenKind.AMP);\n\n      do {\n        types.push(this.parseNamedType());\n      } while (this.expectOptionalToken(TokenKind.AMP) || this.peek(TokenKind.NAME));\n\n      return types;\n    }\n\n    return this.delimitedMany(TokenKind.AMP, this.parseNamedType);\n  }\n  /**\n   * FieldsDefinition : { FieldDefinition+ }\n   */\n  ;\n\n  _proto.parseFieldsDefinition = function parseFieldsDefinition() {\n    var _this$_options3;\n\n    // Legacy support for the SDL?\n    if (((_this$_options3 = this._options) === null || _this$_options3 === void 0 ? void 0 : _this$_options3.allowLegacySDLEmptyFields) === true && this.peek(TokenKind.BRACE_L) && this._lexer.lookahead().kind === TokenKind.BRACE_R) {\n      this._lexer.advance();\n\n      this._lexer.advance();\n\n      return [];\n    }\n\n    return this.optionalMany(TokenKind.BRACE_L, this.parseFieldDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n  ;\n\n  _proto.parseFieldDefinition = function parseFieldDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    var args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseTypeReference();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.FIELD_DEFINITION,\n      description: description,\n      name: name,\n      arguments: args,\n      type: type,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n  ;\n\n  _proto.parseArgumentDefs = function parseArgumentDefs() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseInputValueDef, TokenKind.PAREN_R);\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n  ;\n\n  _proto.parseInputValueDef = function parseInputValueDef() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseTypeReference();\n    var defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseValueLiteral(true);\n    }\n\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description: description,\n      name: name,\n      type: type,\n      defaultValue: defaultValue,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n  ;\n\n  _proto.parseInterfaceTypeDefinition = function parseInterfaceTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('interface');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n    return {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n  ;\n\n  _proto.parseUnionTypeDefinition = function parseUnionTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('union');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var types = this.parseUnionMemberTypes();\n    return {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      types: types,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n  ;\n\n  _proto.parseUnionMemberTypes = function parseUnionMemberTypes() {\n    return this.expectOptionalToken(TokenKind.EQUALS) ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType) : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n  ;\n\n  _proto.parseEnumTypeDefinition = function parseEnumTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('enum');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var values = this.parseEnumValuesDefinition();\n    return {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      values: values,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   */\n  ;\n\n  _proto.parseEnumValuesDefinition = function parseEnumValuesDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseEnumValueDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   *\n   * EnumValue : Name\n   */\n  ;\n\n  _proto.parseEnumValueDefinition = function parseEnumValueDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n  ;\n\n  _proto.parseInputObjectTypeDefinition = function parseInputObjectTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('input');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseInputFieldsDefinition();\n    return {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   */\n  ;\n\n  _proto.parseInputFieldsDefinition = function parseInputFieldsDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseInputValueDef, TokenKind.BRACE_R);\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n  ;\n\n  _proto.parseTypeSystemExtension = function parseTypeSystemExtension() {\n    var keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   */\n  ;\n\n  _proto.parseSchemaExtension = function parseSchemaExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    var directives = this.parseDirectives(true);\n    var operationTypes = this.optionalMany(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives: directives,\n      operationTypes: operationTypes,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n  ;\n\n  _proto.parseScalarTypeExtension = function parseScalarTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n  ;\n\n  _proto.parseObjectTypeExtension = function parseObjectTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n\n    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n  ;\n\n  _proto.parseInterfaceTypeExtension = function parseInterfaceTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n\n    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n  ;\n\n  _proto.parseUnionTypeExtension = function parseUnionTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      types: types,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n  ;\n\n  _proto.parseEnumTypeExtension = function parseEnumTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      values: values,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n  ;\n\n  _proto.parseInputObjectTypeExtension = function parseInputObjectTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   */\n  ;\n\n  _proto.parseDirectiveDefinition = function parseDirectiveDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    var name = this.parseName();\n    var args = this.parseArgumentDefs();\n    var repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    var locations = this.parseDirectiveLocations();\n    return {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description: description,\n      name: name,\n      arguments: args,\n      repeatable: repeatable,\n      locations: locations,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n  ;\n\n  _proto.parseDirectiveLocations = function parseDirectiveLocations() {\n    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n  ;\n\n  _proto.parseDirectiveLocation = function parseDirectiveLocation() {\n    var start = this._lexer.token;\n    var name = this.parseName();\n\n    if (DirectiveLocation[name.value] !== undefined) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a location object, used to identify the place in the source that created a given parsed object.\n   */\n  ;\n\n  _proto.loc = function loc(startToken) {\n    var _this$_options4;\n\n    if (((_this$_options4 = this._options) === null || _this$_options4 === void 0 ? void 0 : _this$_options4.noLocation) !== true) {\n      return new Location(startToken, this._lexer.lastToken, this._lexer.source);\n    }\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n  ;\n\n  _proto.peek = function peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n  ;\n\n  _proto.expectToken = function expectToken(kind) {\n    var token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    throw syntaxError(this._lexer.source, token.start, \"Expected \".concat(getTokenKindDesc(kind), \", found \").concat(getTokenDesc(token), \".\"));\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and return undefined.\n   */\n  ;\n\n  _proto.expectOptionalToken = function expectOptionalToken(kind) {\n    var token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    return undefined;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n  ;\n\n  _proto.expectKeyword = function expectKeyword(value) {\n    var token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n    } else {\n      throw syntaxError(this._lexer.source, token.start, \"Expected \\\"\".concat(value, \"\\\", found \").concat(getTokenDesc(token), \".\"));\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n  ;\n\n  _proto.expectOptionalKeyword = function expectOptionalKeyword(value) {\n    var token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n  ;\n\n  _proto.unexpected = function unexpected(atToken) {\n    var token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return syntaxError(this._lexer.source, token.start, \"Unexpected \".concat(getTokenDesc(token), \".\"));\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.any = function any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    var nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.optionalMany = function optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      var nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.many = function many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    var nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n  ;\n\n  _proto.delimitedMany = function delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    var nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n\n    return nodes;\n  };\n\n  return Parser;\n}();\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  var value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? \" \\\"\".concat(value, \"\\\"\") : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? \"\\\"\".concat(kind, \"\\\"\") : kind;\n}\n", "import inspect from \"../jsutils/inspect.mjs\";\nimport { isNode } from \"./ast.mjs\";\n/**\n * A visitor is provided to visit, it contains the collection of\n * relevant functions to be called during the visitor's traversal.\n */\n\nexport var QueryDocumentKeys = {\n  Name: [],\n  Document: ['definitions'],\n  OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],\n  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: ['name', // Note: fragment variable definitions are experimental and may be changed\n  // or removed in the future.\n  'variableDefinitions', 'typeCondition', 'directives', 'selectionSet'],\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n  Directive: ['name', 'arguments'],\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n  SchemaDefinition: ['description', 'directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: ['description', 'name', 'type', 'defaultValue', 'directives'],\n  InterfaceTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],\n  SchemaExtension: ['directives', 'operationTypes'],\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields']\n};\nexport var BREAK = Object.freeze({});\n/**\n * visit() will walk through an AST using a depth-first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n *     const editedAST = visit(ast, {\n *       enter(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: skip visiting this node\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       },\n *       leave(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: no action\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       }\n *     });\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to four permutations of the\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node of a specific kind.\n *\n *     visit(ast, {\n *       Kind(node) {\n *         // enter the \"Kind\" node\n *       }\n *     })\n *\n * 2) Named visitors that trigger upon entering and leaving a node of\n *    a specific kind.\n *\n *     visit(ast, {\n *       Kind: {\n *         enter(node) {\n *           // enter the \"Kind\" node\n *         }\n *         leave(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n *     visit(ast, {\n *       enter(node) {\n *         // enter any node\n *       },\n *       leave(node) {\n *         // leave any node\n *       }\n *     })\n *\n * 4) Parallel visitors for entering and leaving nodes of a specific kind.\n *\n *     visit(ast, {\n *       enter: {\n *         Kind(node) {\n *           // enter the \"Kind\" node\n *         }\n *       },\n *       leave: {\n *         Kind(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n */\n\nexport function visit(root, visitor) {\n  var visitorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : QueryDocumentKeys;\n\n  /* eslint-disable no-undef-init */\n  var stack = undefined;\n  var inArray = Array.isArray(root);\n  var keys = [root];\n  var index = -1;\n  var edits = [];\n  var node = undefined;\n  var key = undefined;\n  var parent = undefined;\n  var path = [];\n  var ancestors = [];\n  var newRoot = root;\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    var isLeaving = index === keys.length;\n    var isEdited = isLeaving && edits.length !== 0;\n\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n        } else {\n          var clone = {};\n\n          for (var _i2 = 0, _Object$keys2 = Object.keys(node); _i2 < _Object$keys2.length; _i2++) {\n            var k = _Object$keys2[_i2];\n            clone[k] = node[k];\n          }\n\n          node = clone;\n        }\n\n        var editOffset = 0;\n\n        for (var ii = 0; ii < edits.length; ii++) {\n          var editKey = edits[ii][0];\n          var editValue = edits[ii][1];\n\n          if (inArray) {\n            editKey -= editOffset;\n          }\n\n          if (inArray && editValue === null) {\n            node.splice(editKey, 1);\n            editOffset++;\n          } else {\n            node[editKey] = editValue;\n          }\n        }\n      }\n\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else {\n      key = parent ? inArray ? index : keys[index] : undefined;\n      node = parent ? parent[key] : newRoot;\n\n      if (node === null || node === undefined) {\n        continue;\n      }\n\n      if (parent) {\n        path.push(key);\n      }\n    }\n\n    var result = void 0;\n\n    if (!Array.isArray(node)) {\n      if (!isNode(node)) {\n        throw new Error(\"Invalid AST Node: \".concat(inspect(node), \".\"));\n      }\n\n      var visitFn = getVisitFn(visitor, node.kind, isLeaving);\n\n      if (visitFn) {\n        result = visitFn.call(visitor, node, key, parent, path, ancestors);\n\n        if (result === BREAK) {\n          break;\n        }\n\n        if (result === false) {\n          if (!isLeaving) {\n            path.pop();\n            continue;\n          }\n        } else if (result !== undefined) {\n          edits.push([key, result]);\n\n          if (!isLeaving) {\n            if (isNode(result)) {\n              node = result;\n            } else {\n              path.pop();\n              continue;\n            }\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      var _visitorKeys$node$kin;\n\n      stack = {\n        inArray: inArray,\n        index: index,\n        keys: keys,\n        edits: edits,\n        prev: stack\n      };\n      inArray = Array.isArray(node);\n      keys = inArray ? node : (_visitorKeys$node$kin = visitorKeys[node.kind]) !== null && _visitorKeys$node$kin !== void 0 ? _visitorKeys$node$kin : [];\n      index = -1;\n      edits = [];\n\n      if (parent) {\n        ancestors.push(parent);\n      }\n\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    newRoot = edits[edits.length - 1][1];\n  }\n\n  return newRoot;\n}\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\n\nexport function visitInParallel(visitors) {\n  var skipping = new Array(visitors.length);\n  return {\n    enter: function enter(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (skipping[i] == null) {\n          var fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          false);\n\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      }\n    },\n    leave: function leave(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (skipping[i] == null) {\n          var fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          true);\n\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          }\n        } else if (skipping[i] === node) {\n          skipping[i] = null;\n        }\n      }\n    }\n  };\n}\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n */\n\nexport function getVisitFn(visitor, kind, isLeaving) {\n  var kindVisitor = visitor[kind];\n\n  if (kindVisitor) {\n    if (!isLeaving && typeof kindVisitor === 'function') {\n      // { Kind() {} }\n      return kindVisitor;\n    }\n\n    var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;\n\n    if (typeof kindSpecificVisitor === 'function') {\n      // { Kind: { enter() {}, leave() {} } }\n      return kindSpecificVisitor;\n    }\n  } else {\n    var specificVisitor = isLeaving ? visitor.leave : visitor.enter;\n\n    if (specificVisitor) {\n      if (typeof specificVisitor === 'function') {\n        // { enter() {}, leave() {} }\n        return specificVisitor;\n      }\n\n      var specificKindVisitor = specificVisitor[kind];\n\n      if (typeof specificKindVisitor === 'function') {\n        // { enter: { Kind() {} }, leave: { Kind() {} } }\n        return specificKindVisitor;\n      }\n    }\n  }\n}\n", "import { visit } from \"./visitor.mjs\";\nimport { printBlockString } from \"./blockString.mjs\";\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\n\nexport function print(ast) {\n  return visit(ast, {\n    leave: printDocASTReducer\n  });\n}\nvar MAX_LINE_LENGTH = 80; // TODO: provide better type coverage in future\n\nvar printDocASTReducer = {\n  Name: function Name(node) {\n    return node.value;\n  },\n  Variable: function Variable(node) {\n    return '$' + node.name;\n  },\n  // Document\n  Document: function Document(node) {\n    return join(node.definitions, '\\n\\n') + '\\n';\n  },\n  OperationDefinition: function OperationDefinition(node) {\n    var op = node.operation;\n    var name = node.name;\n    var varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n    var directives = join(node.directives, ' ');\n    var selectionSet = node.selectionSet; // Anonymous queries with no directives or variable definitions can use\n    // the query short form.\n\n    return !name && !directives && !varDefs && op === 'query' ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], ' ');\n  },\n  VariableDefinition: function VariableDefinition(_ref) {\n    var variable = _ref.variable,\n        type = _ref.type,\n        defaultValue = _ref.defaultValue,\n        directives = _ref.directives;\n    return variable + ': ' + type + wrap(' = ', defaultValue) + wrap(' ', join(directives, ' '));\n  },\n  SelectionSet: function SelectionSet(_ref2) {\n    var selections = _ref2.selections;\n    return block(selections);\n  },\n  Field: function Field(_ref3) {\n    var alias = _ref3.alias,\n        name = _ref3.name,\n        args = _ref3.arguments,\n        directives = _ref3.directives,\n        selectionSet = _ref3.selectionSet;\n    var prefix = wrap('', alias, ': ') + name;\n    var argsLine = prefix + wrap('(', join(args, ', '), ')');\n\n    if (argsLine.length > MAX_LINE_LENGTH) {\n      argsLine = prefix + wrap('(\\n', indent(join(args, '\\n')), '\\n)');\n    }\n\n    return join([argsLine, join(directives, ' '), selectionSet], ' ');\n  },\n  Argument: function Argument(_ref4) {\n    var name = _ref4.name,\n        value = _ref4.value;\n    return name + ': ' + value;\n  },\n  // Fragments\n  FragmentSpread: function FragmentSpread(_ref5) {\n    var name = _ref5.name,\n        directives = _ref5.directives;\n    return '...' + name + wrap(' ', join(directives, ' '));\n  },\n  InlineFragment: function InlineFragment(_ref6) {\n    var typeCondition = _ref6.typeCondition,\n        directives = _ref6.directives,\n        selectionSet = _ref6.selectionSet;\n    return join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' ');\n  },\n  FragmentDefinition: function FragmentDefinition(_ref7) {\n    var name = _ref7.name,\n        typeCondition = _ref7.typeCondition,\n        variableDefinitions = _ref7.variableDefinitions,\n        directives = _ref7.directives,\n        selectionSet = _ref7.selectionSet;\n    return (// Note: fragment variable definitions are experimental and may be changed\n      // or removed in the future.\n      \"fragment \".concat(name).concat(wrap('(', join(variableDefinitions, ', '), ')'), \" \") + \"on \".concat(typeCondition, \" \").concat(wrap('', join(directives, ' '), ' ')) + selectionSet\n    );\n  },\n  // Value\n  IntValue: function IntValue(_ref8) {\n    var value = _ref8.value;\n    return value;\n  },\n  FloatValue: function FloatValue(_ref9) {\n    var value = _ref9.value;\n    return value;\n  },\n  StringValue: function StringValue(_ref10, key) {\n    var value = _ref10.value,\n        isBlockString = _ref10.block;\n    return isBlockString ? printBlockString(value, key === 'description' ? '' : '  ') : JSON.stringify(value);\n  },\n  BooleanValue: function BooleanValue(_ref11) {\n    var value = _ref11.value;\n    return value ? 'true' : 'false';\n  },\n  NullValue: function NullValue() {\n    return 'null';\n  },\n  EnumValue: function EnumValue(_ref12) {\n    var value = _ref12.value;\n    return value;\n  },\n  ListValue: function ListValue(_ref13) {\n    var values = _ref13.values;\n    return '[' + join(values, ', ') + ']';\n  },\n  ObjectValue: function ObjectValue(_ref14) {\n    var fields = _ref14.fields;\n    return '{' + join(fields, ', ') + '}';\n  },\n  ObjectField: function ObjectField(_ref15) {\n    var name = _ref15.name,\n        value = _ref15.value;\n    return name + ': ' + value;\n  },\n  // Directive\n  Directive: function Directive(_ref16) {\n    var name = _ref16.name,\n        args = _ref16.arguments;\n    return '@' + name + wrap('(', join(args, ', '), ')');\n  },\n  // Type\n  NamedType: function NamedType(_ref17) {\n    var name = _ref17.name;\n    return name;\n  },\n  ListType: function ListType(_ref18) {\n    var type = _ref18.type;\n    return '[' + type + ']';\n  },\n  NonNullType: function NonNullType(_ref19) {\n    var type = _ref19.type;\n    return type + '!';\n  },\n  // Type System Definitions\n  SchemaDefinition: addDescription(function (_ref20) {\n    var directives = _ref20.directives,\n        operationTypes = _ref20.operationTypes;\n    return join(['schema', join(directives, ' '), block(operationTypes)], ' ');\n  }),\n  OperationTypeDefinition: function OperationTypeDefinition(_ref21) {\n    var operation = _ref21.operation,\n        type = _ref21.type;\n    return operation + ': ' + type;\n  },\n  ScalarTypeDefinition: addDescription(function (_ref22) {\n    var name = _ref22.name,\n        directives = _ref22.directives;\n    return join(['scalar', name, join(directives, ' ')], ' ');\n  }),\n  ObjectTypeDefinition: addDescription(function (_ref23) {\n    var name = _ref23.name,\n        interfaces = _ref23.interfaces,\n        directives = _ref23.directives,\n        fields = _ref23.fields;\n    return join(['type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  }),\n  FieldDefinition: addDescription(function (_ref24) {\n    var name = _ref24.name,\n        args = _ref24.arguments,\n        type = _ref24.type,\n        directives = _ref24.directives;\n    return name + (hasMultilineItems(args) ? wrap('(\\n', indent(join(args, '\\n')), '\\n)') : wrap('(', join(args, ', '), ')')) + ': ' + type + wrap(' ', join(directives, ' '));\n  }),\n  InputValueDefinition: addDescription(function (_ref25) {\n    var name = _ref25.name,\n        type = _ref25.type,\n        defaultValue = _ref25.defaultValue,\n        directives = _ref25.directives;\n    return join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' ');\n  }),\n  InterfaceTypeDefinition: addDescription(function (_ref26) {\n    var name = _ref26.name,\n        interfaces = _ref26.interfaces,\n        directives = _ref26.directives,\n        fields = _ref26.fields;\n    return join(['interface', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  }),\n  UnionTypeDefinition: addDescription(function (_ref27) {\n    var name = _ref27.name,\n        directives = _ref27.directives,\n        types = _ref27.types;\n    return join(['union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');\n  }),\n  EnumTypeDefinition: addDescription(function (_ref28) {\n    var name = _ref28.name,\n        directives = _ref28.directives,\n        values = _ref28.values;\n    return join(['enum', name, join(directives, ' '), block(values)], ' ');\n  }),\n  EnumValueDefinition: addDescription(function (_ref29) {\n    var name = _ref29.name,\n        directives = _ref29.directives;\n    return join([name, join(directives, ' ')], ' ');\n  }),\n  InputObjectTypeDefinition: addDescription(function (_ref30) {\n    var name = _ref30.name,\n        directives = _ref30.directives,\n        fields = _ref30.fields;\n    return join(['input', name, join(directives, ' '), block(fields)], ' ');\n  }),\n  DirectiveDefinition: addDescription(function (_ref31) {\n    var name = _ref31.name,\n        args = _ref31.arguments,\n        repeatable = _ref31.repeatable,\n        locations = _ref31.locations;\n    return 'directive @' + name + (hasMultilineItems(args) ? wrap('(\\n', indent(join(args, '\\n')), '\\n)') : wrap('(', join(args, ', '), ')')) + (repeatable ? ' repeatable' : '') + ' on ' + join(locations, ' | ');\n  }),\n  SchemaExtension: function SchemaExtension(_ref32) {\n    var directives = _ref32.directives,\n        operationTypes = _ref32.operationTypes;\n    return join(['extend schema', join(directives, ' '), block(operationTypes)], ' ');\n  },\n  ScalarTypeExtension: function ScalarTypeExtension(_ref33) {\n    var name = _ref33.name,\n        directives = _ref33.directives;\n    return join(['extend scalar', name, join(directives, ' ')], ' ');\n  },\n  ObjectTypeExtension: function ObjectTypeExtension(_ref34) {\n    var name = _ref34.name,\n        interfaces = _ref34.interfaces,\n        directives = _ref34.directives,\n        fields = _ref34.fields;\n    return join(['extend type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  },\n  InterfaceTypeExtension: function InterfaceTypeExtension(_ref35) {\n    var name = _ref35.name,\n        interfaces = _ref35.interfaces,\n        directives = _ref35.directives,\n        fields = _ref35.fields;\n    return join(['extend interface', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  },\n  UnionTypeExtension: function UnionTypeExtension(_ref36) {\n    var name = _ref36.name,\n        directives = _ref36.directives,\n        types = _ref36.types;\n    return join(['extend union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');\n  },\n  EnumTypeExtension: function EnumTypeExtension(_ref37) {\n    var name = _ref37.name,\n        directives = _ref37.directives,\n        values = _ref37.values;\n    return join(['extend enum', name, join(directives, ' '), block(values)], ' ');\n  },\n  InputObjectTypeExtension: function InputObjectTypeExtension(_ref38) {\n    var name = _ref38.name,\n        directives = _ref38.directives,\n        fields = _ref38.fields;\n    return join(['extend input', name, join(directives, ' '), block(fields)], ' ');\n  }\n};\n\nfunction addDescription(cb) {\n  return function (node) {\n    return join([node.description, cb(node)], '\\n');\n  };\n}\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\n\n\nfunction join(maybeArray) {\n  var _maybeArray$filter$jo;\n\n  var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  return (_maybeArray$filter$jo = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.filter(function (x) {\n    return x;\n  }).join(separator)) !== null && _maybeArray$filter$jo !== void 0 ? _maybeArray$filter$jo : '';\n}\n/**\n * Given array, print each item on its own line, wrapped in an\n * indented \"{ }\" block.\n */\n\n\nfunction block(array) {\n  return wrap('{\\n', indent(join(array, '\\n')), '\\n}');\n}\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.\n */\n\n\nfunction wrap(start, maybeString) {\n  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  return maybeString != null && maybeString !== '' ? start + maybeString + end : '';\n}\n\nfunction indent(str) {\n  return wrap('  ', str.replace(/\\n/g, '\\n  '));\n}\n\nfunction isMultiline(str) {\n  return str.indexOf('\\n') !== -1;\n}\n\nfunction hasMultilineItems(maybeArray) {\n  return maybeArray != null && maybeArray.some(isMultiline);\n}\n", "// Provides the methods that allow QueryManager to handle the `skip` and\n// `include` directives within GraphQL.\nimport {\n  SelectionNode,\n  VariableNode,\n  BooleanValueNode,\n  DirectiveNode,\n  DocumentNode,\n  ArgumentNode,\n  ValueNode,\n  ASTNode,\n  visit,\n} from 'graphql';\n\nimport { invariant } from 'ts-invariant';\n\nexport type DirectiveInfo = {\n  [fieldName: string]: { [argName: string]: any };\n};\n\nexport function shouldInclude(\n  { directives }: SelectionNode,\n  variables?: Record<string, any>,\n): boolean {\n  if (!directives || !directives.length) {\n    return true;\n  }\n  return getInclusionDirectives(\n    directives\n  ).every(({ directive, ifArgument }) => {\n    let evaledValue: boolean = false;\n    if (ifArgument.value.kind === 'Variable') {\n      evaledValue = variables && variables[(ifArgument.value as VariableNode).name.value];\n      invariant(\n        evaledValue !== void 0,\n        `Invalid variable referenced in @${directive.name.value} directive.`,\n      );\n    } else {\n      evaledValue = (ifArgument.value as BooleanValueNode).value;\n    }\n    return directive.name.value === 'skip' ? !evaledValue : evaledValue;\n  });\n}\n\nexport function getDirectiveNames(root: ASTNode) {\n  const names: string[] = [];\n\n  visit(root, {\n    Directive(node: DirectiveNode) {\n      names.push(node.name.value);\n    },\n  });\n\n  return names;\n}\n\nexport function hasDirectives(names: string[], root: ASTNode) {\n  return getDirectiveNames(root).some(\n    (name: string) => names.indexOf(name) > -1,\n  );\n}\n\nexport function hasClientExports(document: DocumentNode) {\n  return (\n    document &&\n    hasDirectives(['client'], document) &&\n    hasDirectives(['export'], document)\n  );\n}\n\nexport type InclusionDirectives = Array<{\n  directive: DirectiveNode;\n  ifArgument: ArgumentNode;\n}>;\n\nfunction isInclusionDirective({ name: { value } }: DirectiveNode): boolean {\n  return value === 'skip' || value === 'include';\n}\n\nexport function getInclusionDirectives(\n  directives: ReadonlyArray<DirectiveNode>,\n): InclusionDirectives {\n  const result: InclusionDirectives = [];\n\n  if (directives && directives.length) {\n    directives.forEach(directive => {\n      if (!isInclusionDirective(directive)) return;\n\n      const directiveArguments = directive.arguments;\n      const directiveName = directive.name.value;\n\n      invariant(\n        directiveArguments && directiveArguments.length === 1,\n        `Incorrect number of arguments for the @${directiveName} directive.`,\n      );\n\n      const ifArgument = directiveArguments![0];\n      invariant(\n        ifArgument.name && ifArgument.name.value === 'if',\n        `Invalid argument for the @${directiveName} directive.`,\n      );\n\n      const ifValue: ValueNode = ifArgument.value;\n\n      // means it has to be a variable value if this is a valid @skip or @include directive\n      invariant(\n        ifValue &&\n          (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'),\n        `Argument for the @${directiveName} directive must be a variable or a boolean value.`,\n      );\n\n      result.push({ directive, ifArgument });\n    });\n  }\n\n  return result;\n}\n\n", "import {\n  DocumentNode,\n  FragmentDefinitionNode,\n  InlineFragmentNode,\n  SelectionNode\n} from 'graphql';\nimport { invariant, InvariantError } from 'ts-invariant';\n\n/**\n * Returns a query document which adds a single query operation that only\n * spreads the target fragment inside of it.\n *\n * So for example a document of:\n *\n * ```graphql\n * fragment foo on Foo { a b c }\n * ```\n *\n * Turns into:\n *\n * ```graphql\n * { ...foo }\n *\n * fragment foo on Foo { a b c }\n * ```\n *\n * The target fragment will either be the only fragment in the document, or a\n * fragment specified by the provided `fragmentName`. If there is more than one\n * fragment, but a `fragmentName` was not defined then an error will be thrown.\n */\nexport function getFragmentQueryDocument(\n  document: DocumentNode,\n  fragmentName?: string,\n): DocumentNode {\n  let actualFragmentName = fragmentName;\n\n  // Build an array of all our fragment definitions that will be used for\n  // validations. We also do some validations on the other definitions in the\n  // document while building this list.\n  const fragments: Array<FragmentDefinitionNode> = [];\n  document.definitions.forEach(definition => {\n    // Throw an error if we encounter an operation definition because we will\n    // define our own operation definition later on.\n    if (definition.kind === 'OperationDefinition') {\n      throw new InvariantError(\n        `Found a ${definition.operation} operation${\n          definition.name ? ` named '${definition.name.value}'` : ''\n        }. ` +\n          'No operations are allowed when using a fragment as a query. Only fragments are allowed.',\n      );\n    }\n    // Add our definition to the fragments array if it is a fragment\n    // definition.\n    if (definition.kind === 'FragmentDefinition') {\n      fragments.push(definition);\n    }\n  });\n\n  // If the user did not give us a fragment name then let us try to get a\n  // name from a single fragment in the definition.\n  if (typeof actualFragmentName === 'undefined') {\n    invariant(\n      fragments.length === 1,\n      `Found ${\n        fragments.length\n      } fragments. \\`fragmentName\\` must be provided when there is not exactly 1 fragment.`,\n    );\n    actualFragmentName = fragments[0].name.value;\n  }\n\n  // Generate a query document with an operation that simply spreads the\n  // fragment inside of it.\n  const query: DocumentNode = {\n    ...document,\n    definitions: [\n      {\n        kind: 'OperationDefinition',\n        operation: 'query',\n        selectionSet: {\n          kind: 'SelectionSet',\n          selections: [\n            {\n              kind: 'FragmentSpread',\n              name: {\n                kind: 'Name',\n                value: actualFragmentName,\n              },\n            },\n          ],\n        },\n      },\n      ...document.definitions,\n    ],\n  };\n\n  return query;\n}\n\n/**\n * This is an interface that describes a map from fragment names to fragment definitions.\n */\nexport interface FragmentMap {\n  [fragmentName: string]: FragmentDefinitionNode;\n}\n\n// Utility function that takes a list of fragment definitions and makes a hash out of them\n// that maps the name of the fragment to the fragment definition.\nexport function createFragmentMap(\n  fragments: FragmentDefinitionNode[] = [],\n): FragmentMap {\n  const symTable: FragmentMap = {};\n  fragments.forEach(fragment => {\n    symTable[fragment.name.value] = fragment;\n  });\n  return symTable;\n}\n\nexport function getFragmentFromSelection(\n  selection: SelectionNode,\n  fragmentMap?: FragmentMap,\n): InlineFragmentNode | FragmentDefinitionNode | null {\n  switch (selection.kind) {\n    case 'InlineFragment':\n      return selection;\n    case 'FragmentSpread': {\n      const fragment = fragmentMap && fragmentMap[selection.name.value];\n      invariant(fragment, `No fragment named ${selection.name.value}.`);\n      return fragment!;\n    }\n    default:\n      return null;\n  }\n}\n", "import {\n  DirectiveNode,\n  FieldNode,\n  IntValueNode,\n  FloatValueNode,\n  StringValueNode,\n  BooleanValueNode,\n  ObjectValueNode,\n  ListValueNode,\n  EnumValueNode,\n  NullValueNode,\n  VariableNode,\n  InlineFragmentNode,\n  ValueNode,\n  SelectionNode,\n  NameNode,\n  SelectionSetNode,\n} from 'graphql';\n\nimport stringify from 'fast-json-stable-stringify';\nimport { InvariantError } from 'ts-invariant';\nimport { FragmentMap, getFragmentFromSelection } from './fragments';\n\nexport interface Reference {\n  readonly __ref: string;\n}\n\nexport function makeReference(id: string): Reference {\n  return { __ref: String(id) };\n}\n\nexport function isReference(obj: any): obj is Reference {\n  return Boolean(obj && typeof obj === 'object' && typeof obj.__ref === 'string');\n}\n\nexport type StoreValue =\n  | number\n  | string\n  | string[]\n  | Reference\n  | Reference[]\n  | null\n  | undefined\n  | void\n  | Object;\n\nexport interface StoreObject {\n  __typename?: string;\n  [storeFieldName: string]: StoreValue;\n}\n\nfunction isStringValue(value: ValueNode): value is StringValueNode {\n  return value.kind === 'StringValue';\n}\n\nfunction isBooleanValue(value: ValueNode): value is BooleanValueNode {\n  return value.kind === 'BooleanValue';\n}\n\nfunction isIntValue(value: ValueNode): value is IntValueNode {\n  return value.kind === 'IntValue';\n}\n\nfunction isFloatValue(value: ValueNode): value is FloatValueNode {\n  return value.kind === 'FloatValue';\n}\n\nfunction isVariable(value: ValueNode): value is VariableNode {\n  return value.kind === 'Variable';\n}\n\nfunction isObjectValue(value: ValueNode): value is ObjectValueNode {\n  return value.kind === 'ObjectValue';\n}\n\nfunction isListValue(value: ValueNode): value is ListValueNode {\n  return value.kind === 'ListValue';\n}\n\nfunction isEnumValue(value: ValueNode): value is EnumValueNode {\n  return value.kind === 'EnumValue';\n}\n\nfunction isNullValue(value: ValueNode): value is NullValueNode {\n  return value.kind === 'NullValue';\n}\n\nexport function valueToObjectRepresentation(\n  argObj: any,\n  name: NameNode,\n  value: ValueNode,\n  variables?: Object,\n) {\n  if (isIntValue(value) || isFloatValue(value)) {\n    argObj[name.value] = Number(value.value);\n  } else if (isBooleanValue(value) || isStringValue(value)) {\n    argObj[name.value] = value.value;\n  } else if (isObjectValue(value)) {\n    const nestedArgObj = {};\n    value.fields.map(obj =>\n      valueToObjectRepresentation(nestedArgObj, obj.name, obj.value, variables),\n    );\n    argObj[name.value] = nestedArgObj;\n  } else if (isVariable(value)) {\n    const variableValue = (variables || ({} as any))[value.name.value];\n    argObj[name.value] = variableValue;\n  } else if (isListValue(value)) {\n    argObj[name.value] = value.values.map(listValue => {\n      const nestedArgArrayObj = {};\n      valueToObjectRepresentation(\n        nestedArgArrayObj,\n        name,\n        listValue,\n        variables,\n      );\n      return (nestedArgArrayObj as any)[name.value];\n    });\n  } else if (isEnumValue(value)) {\n    argObj[name.value] = (value as EnumValueNode).value;\n  } else if (isNullValue(value)) {\n    argObj[name.value] = null;\n  } else {\n    throw new InvariantError(\n      `The inline argument \"${name.value}\" of kind \"${(value as any).kind}\"` +\n        'is not supported. Use variables instead of inline arguments to ' +\n        'overcome this limitation.',\n    );\n  }\n}\n\nexport function storeKeyNameFromField(\n  field: FieldNode,\n  variables?: Object,\n): string {\n  let directivesObj: any = null;\n  if (field.directives) {\n    directivesObj = {};\n    field.directives.forEach(directive => {\n      directivesObj[directive.name.value] = {};\n\n      if (directive.arguments) {\n        directive.arguments.forEach(({ name, value }) =>\n          valueToObjectRepresentation(\n            directivesObj[directive.name.value],\n            name,\n            value,\n            variables,\n          ),\n        );\n      }\n    });\n  }\n\n  let argObj: any = null;\n  if (field.arguments && field.arguments.length) {\n    argObj = {};\n    field.arguments.forEach(({ name, value }) =>\n      valueToObjectRepresentation(argObj, name, value, variables),\n    );\n  }\n\n  return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\n\nexport type Directives = {\n  [directiveName: string]: {\n    [argName: string]: any;\n  };\n};\n\nconst KNOWN_DIRECTIVES: string[] = [\n  'connection',\n  'include',\n  'skip',\n  'client',\n  'rest',\n  'export',\n];\n\nexport function getStoreKeyName(\n  fieldName: string,\n  args?: Record<string, any> | null,\n  directives?: Directives,\n): string {\n  if (\n    args &&\n    directives &&\n    directives['connection'] &&\n    directives['connection']['key']\n  ) {\n    if (\n      directives['connection']['filter'] &&\n      (directives['connection']['filter'] as string[]).length > 0\n    ) {\n      const filterKeys = directives['connection']['filter']\n        ? (directives['connection']['filter'] as string[])\n        : [];\n      filterKeys.sort();\n\n      const filteredArgs = {} as { [key: string]: any };\n      filterKeys.forEach(key => {\n        filteredArgs[key] = args[key];\n      });\n\n      return `${directives['connection']['key']}(${JSON.stringify(\n        filteredArgs,\n      )})`;\n    } else {\n      return directives['connection']['key'];\n    }\n  }\n\n  let completeFieldName: string = fieldName;\n\n  if (args) {\n    // We can't use `JSON.stringify` here since it's non-deterministic,\n    // and can lead to different store key names being created even though\n    // the `args` object used during creation has the same properties/values.\n    const stringifiedArgs: string = stringify(args);\n    completeFieldName += `(${stringifiedArgs})`;\n  }\n\n  if (directives) {\n    Object.keys(directives).forEach(key => {\n      if (KNOWN_DIRECTIVES.indexOf(key) !== -1) return;\n      if (directives[key] && Object.keys(directives[key]).length) {\n        completeFieldName += `@${key}(${JSON.stringify(directives[key])})`;\n      } else {\n        completeFieldName += `@${key}`;\n      }\n    });\n  }\n\n  return completeFieldName;\n}\n\nexport function argumentsObjectFromField(\n  field: FieldNode | DirectiveNode,\n  variables?: Record<string, any>,\n): Object | null {\n  if (field.arguments && field.arguments.length) {\n    const argObj: Object = {};\n    field.arguments.forEach(({ name, value }) =>\n      valueToObjectRepresentation(argObj, name, value, variables),\n    );\n    return argObj;\n  }\n  return null;\n}\n\nexport function resultKeyNameFromField(field: FieldNode): string {\n  return field.alias ? field.alias.value : field.name.value;\n}\n\nexport function getTypenameFromResult(\n  result: Record<string, any>,\n  selectionSet: SelectionSetNode,\n  fragmentMap?: FragmentMap,\n): string | undefined {\n  if (typeof result.__typename === 'string') {\n    return result.__typename;\n  }\n\n  for (const selection of selectionSet.selections) {\n    if (isField(selection)) {\n      if (selection.name.value === '__typename') {\n        return result[resultKeyNameFromField(selection)];\n      }\n    } else {\n      const typename = getTypenameFromResult(\n        result,\n        getFragmentFromSelection(selection, fragmentMap)!.selectionSet,\n        fragmentMap,\n      );\n      if (typeof typename === 'string') {\n        return typename;\n      }\n    }\n  }\n}\n\nexport function isField(selection: SelectionNode): selection is FieldNode {\n  return selection.kind === 'Field';\n}\n\nexport function isInlineFragment(\n  selection: SelectionNode,\n): selection is InlineFragmentNode {\n  return selection.kind === 'InlineFragment';\n}\n\nexport type VariableValue = (node: VariableNode) => any;\n", "import {\n  DocumentNode,\n  OperationDefinitionNode,\n  FragmentDefinitionNode,\n  ValueNode,\n} from 'graphql';\n\nimport { invariant, InvariantError } from 'ts-invariant';\n\nimport { valueToObjectRepresentation } from './storeUtils';\n\n// Checks the document for errors and throws an exception if there is an error.\nexport function checkDocument(doc: DocumentNode) {\n  invariant(\n    doc && doc.kind === 'Document',\n    `Expecting a parsed GraphQL document. Perhaps you need to wrap the query \\\nstring in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql`,\n  );\n\n  const operations = doc.definitions\n    .filter(d => d.kind !== 'FragmentDefinition')\n    .map(definition => {\n      if (definition.kind !== 'OperationDefinition') {\n        throw new InvariantError(\n          `Schema type definitions not allowed in queries. Found: \"${\n            definition.kind\n          }\"`,\n        );\n      }\n      return definition;\n    });\n\n  invariant(\n    operations.length <= 1,\n    `Ambiguous GraphQL document: contains ${operations.length} operations`,\n  );\n\n  return doc;\n}\n\nexport function getOperationDefinition(\n  doc: DocumentNode,\n): OperationDefinitionNode | undefined {\n  checkDocument(doc);\n  return doc.definitions.filter(\n    definition => definition.kind === 'OperationDefinition',\n  )[0] as OperationDefinitionNode;\n}\n\nexport function getOperationName(doc: DocumentNode): string | null {\n  return (\n    doc.definitions\n      .filter(\n        definition =>\n          definition.kind === 'OperationDefinition' && definition.name,\n      )\n      .map((x: OperationDefinitionNode) => x!.name!.value)[0] || null\n  );\n}\n\n// Returns the FragmentDefinitions from a particular document as an array\nexport function getFragmentDefinitions(\n  doc: DocumentNode,\n): FragmentDefinitionNode[] {\n  return doc.definitions.filter(\n    definition => definition.kind === 'FragmentDefinition',\n  ) as FragmentDefinitionNode[];\n}\n\nexport function getQueryDefinition(doc: DocumentNode): OperationDefinitionNode {\n  const queryDef = getOperationDefinition(doc) as OperationDefinitionNode;\n\n  invariant(\n    queryDef && queryDef.operation === 'query',\n    'Must contain a query definition.',\n  );\n\n  return queryDef;\n}\n\nexport function getFragmentDefinition(\n  doc: DocumentNode,\n): FragmentDefinitionNode {\n  invariant(\n    doc.kind === 'Document',\n    `Expecting a parsed GraphQL document. Perhaps you need to wrap the query \\\nstring in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql`,\n  );\n\n  invariant(\n    doc.definitions.length <= 1,\n    'Fragment must have exactly one definition.',\n  );\n\n  const fragmentDef = doc.definitions[0] as FragmentDefinitionNode;\n\n  invariant(\n    fragmentDef.kind === 'FragmentDefinition',\n    'Must be a fragment definition.',\n  );\n\n  return fragmentDef as FragmentDefinitionNode;\n}\n\n/**\n * Returns the first operation definition found in this document.\n * If no operation definition is found, the first fragment definition will be returned.\n * If no definitions are found, an error will be thrown.\n */\nexport function getMainDefinition(\n  queryDoc: DocumentNode,\n): OperationDefinitionNode | FragmentDefinitionNode {\n  checkDocument(queryDoc);\n\n  let fragmentDefinition;\n\n  for (let definition of queryDoc.definitions) {\n    if (definition.kind === 'OperationDefinition') {\n      const operation = (definition as OperationDefinitionNode).operation;\n      if (\n        operation === 'query' ||\n        operation === 'mutation' ||\n        operation === 'subscription'\n      ) {\n        return definition as OperationDefinitionNode;\n      }\n    }\n    if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n      // we do this because we want to allow multiple fragment definitions\n      // to precede an operation definition.\n      fragmentDefinition = definition as FragmentDefinitionNode;\n    }\n  }\n\n  if (fragmentDefinition) {\n    return fragmentDefinition;\n  }\n\n  throw new InvariantError(\n    'Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.',\n  );\n}\n\nexport function getDefaultValues(\n  definition: OperationDefinitionNode | undefined,\n): Record<string, any> {\n  const defaultValues = Object.create(null);\n  const defs = definition && definition.variableDefinitions;\n  if (defs && defs.length) {\n    defs.forEach(def => {\n      if (def.defaultValue) {\n        valueToObjectRepresentation(\n          defaultValues,\n          def.variable.name,\n          def.defaultValue as ValueNode,\n        );\n      }\n    });\n  }\n  return defaultValues;\n}\n", "export function filterInPlace<T>(\n  array: T[],\n  test: (elem: T) => boolean,\n  context?: any,\n): T[] {\n  let target = 0;\n  array.forEach(function (elem, i) {\n    if (test.call(this, elem, i, array)) {\n      array[target++] = elem;\n    }\n  }, context);\n  array.length = target;\n  return array;\n}\n", "import {\n  DocumentNode,\n  SelectionNode,\n  SelectionSetNode,\n  OperationDefinitionNode,\n  FieldNode,\n  DirectiveNode,\n  FragmentDefinitionNode,\n  ArgumentNode,\n  FragmentSpreadNode,\n  VariableDefinitionNode,\n  VariableNode,\n  visit,\n} from 'graphql';\nimport { invariant } from 'ts-invariant';\n\nimport {\n  checkDocument,\n  getOperationDefinition,\n  getFragmentDefinition,\n  getFragmentDefinitions,\n  getMainDefinition,\n} from './getFromAST';\nimport { filterInPlace } from '../common/filterInPlace';\nimport { isField, isInlineFragment } from './storeUtils';\nimport {\n  createFragmentMap,\n  FragmentMap,\n} from './fragments';\n\nexport type RemoveNodeConfig<N> = {\n  name?: string;\n  test?: (node: N) => boolean;\n  remove?: boolean;\n};\n\nexport type GetNodeConfig<N> = {\n  name?: string;\n  test?: (node: N) => boolean;\n};\n\nexport type RemoveDirectiveConfig = RemoveNodeConfig<DirectiveNode>;\nexport type GetDirectiveConfig = GetNodeConfig<DirectiveNode>;\nexport type RemoveArgumentsConfig = RemoveNodeConfig<ArgumentNode>;\nexport type GetFragmentSpreadConfig = GetNodeConfig<FragmentSpreadNode>;\nexport type RemoveFragmentSpreadConfig = RemoveNodeConfig<FragmentSpreadNode>;\nexport type RemoveFragmentDefinitionConfig = RemoveNodeConfig<\n  FragmentDefinitionNode\n>;\nexport type RemoveVariableDefinitionConfig = RemoveNodeConfig<\n  VariableDefinitionNode\n>;\n\nconst TYPENAME_FIELD: FieldNode = {\n  kind: 'Field',\n  name: {\n    kind: 'Name',\n    value: '__typename',\n  },\n};\n\nfunction isEmpty(\n  op: OperationDefinitionNode | FragmentDefinitionNode,\n  fragments: FragmentMap,\n): boolean {\n  return op.selectionSet.selections.every(\n    selection =>\n      selection.kind === 'FragmentSpread' &&\n      isEmpty(fragments[selection.name.value], fragments),\n  );\n}\n\nfunction nullIfDocIsEmpty(doc: DocumentNode) {\n  return isEmpty(\n    getOperationDefinition(doc) || getFragmentDefinition(doc),\n    createFragmentMap(getFragmentDefinitions(doc)),\n  )\n    ? null\n    : doc;\n}\n\nfunction getDirectiveMatcher(\n  directives: (RemoveDirectiveConfig | GetDirectiveConfig)[],\n) {\n  return function directiveMatcher(directive: DirectiveNode) {\n    return directives.some(\n      dir =>\n        (dir.name && dir.name === directive.name.value) ||\n        (dir.test && dir.test(directive)),\n    );\n  };\n}\n\nexport function removeDirectivesFromDocument(\n  directives: RemoveDirectiveConfig[],\n  doc: DocumentNode,\n): DocumentNode | null {\n  const variablesInUse: Record<string, boolean> = Object.create(null);\n  let variablesToRemove: RemoveArgumentsConfig[] = [];\n\n  const fragmentSpreadsInUse: Record<string, boolean> = Object.create(null);\n  let fragmentSpreadsToRemove: RemoveFragmentSpreadConfig[] = [];\n\n  let modifiedDoc = nullIfDocIsEmpty(\n    visit(doc, {\n      Variable: {\n        enter(node, _key, parent) {\n          // Store each variable that's referenced as part of an argument\n          // (excluding operation definition variables), so we know which\n          // variables are being used. If we later want to remove a variable\n          // we'll first check to see if it's being used, before continuing with\n          // the removal.\n          if (\n            (parent as VariableDefinitionNode).kind !== 'VariableDefinition'\n          ) {\n            variablesInUse[node.name.value] = true;\n          }\n        },\n      },\n\n      Field: {\n        enter(node) {\n          if (directives && node.directives) {\n            // If `remove` is set to true for a directive, and a directive match\n            // is found for a field, remove the field as well.\n            const shouldRemoveField = directives.some(\n              directive => directive.remove,\n            );\n\n            if (\n              shouldRemoveField &&\n              node.directives &&\n              node.directives.some(getDirectiveMatcher(directives))\n            ) {\n              if (node.arguments) {\n                // Store field argument variables so they can be removed\n                // from the operation definition.\n                node.arguments.forEach(arg => {\n                  if (arg.value.kind === 'Variable') {\n                    variablesToRemove.push({\n                      name: (arg.value as VariableNode).name.value,\n                    });\n                  }\n                });\n              }\n\n              if (node.selectionSet) {\n                // Store fragment spread names so they can be removed from the\n                // document.\n                getAllFragmentSpreadsFromSelectionSet(node.selectionSet).forEach(\n                  frag => {\n                    fragmentSpreadsToRemove.push({\n                      name: frag.name.value,\n                    });\n                  },\n                );\n              }\n\n              // Remove the field.\n              return null;\n            }\n          }\n        },\n      },\n\n      FragmentSpread: {\n        enter(node) {\n          // Keep track of referenced fragment spreads. This is used to\n          // determine if top level fragment definitions should be removed.\n          fragmentSpreadsInUse[node.name.value] = true;\n        },\n      },\n\n      Directive: {\n        enter(node) {\n          // If a matching directive is found, remove it.\n          if (getDirectiveMatcher(directives)(node)) {\n            return null;\n          }\n        },\n      },\n    }),\n  );\n\n  // If we've removed fields with arguments, make sure the associated\n  // variables are also removed from the rest of the document, as long as they\n  // aren't being used elsewhere.\n  if (\n    modifiedDoc &&\n    filterInPlace(variablesToRemove, v => !!v.name && !variablesInUse[v.name]).length\n  ) {\n    modifiedDoc = removeArgumentsFromDocument(variablesToRemove, modifiedDoc);\n  }\n\n  // If we've removed selection sets with fragment spreads, make sure the\n  // associated fragment definitions are also removed from the rest of the\n  // document, as long as they aren't being used elsewhere.\n  if (\n    modifiedDoc &&\n    filterInPlace(fragmentSpreadsToRemove, fs => !!fs.name && !fragmentSpreadsInUse[fs.name])\n      .length\n  ) {\n    modifiedDoc = removeFragmentSpreadFromDocument(\n      fragmentSpreadsToRemove,\n      modifiedDoc,\n    );\n  }\n\n  return modifiedDoc;\n}\n\nexport function addTypenameToDocument(doc: DocumentNode): DocumentNode {\n  return visit(checkDocument(doc), {\n    SelectionSet: {\n      enter(node, _key, parent) {\n        // Don't add __typename to OperationDefinitions.\n        if (\n          parent &&\n          (parent as OperationDefinitionNode).kind === 'OperationDefinition'\n        ) {\n          return;\n        }\n\n        // No changes if no selections.\n        const { selections } = node;\n        if (!selections) {\n          return;\n        }\n\n        // If selections already have a __typename, or are part of an\n        // introspection query, do nothing.\n        const skip = selections.some(selection => {\n          return (\n            isField(selection) &&\n            (selection.name.value === '__typename' ||\n              selection.name.value.lastIndexOf('__', 0) === 0)\n          );\n        });\n        if (skip) {\n          return;\n        }\n\n        // If this SelectionSet is @export-ed as an input variable, it should\n        // not have a __typename field (see issue #4691).\n        const field = parent as FieldNode;\n        if (\n          isField(field) &&\n          field.directives &&\n          field.directives.some(d => d.name.value === 'export')\n        ) {\n          return;\n        }\n\n        // Create and return a new SelectionSet with a __typename Field.\n        return {\n          ...node,\n          selections: [...selections, TYPENAME_FIELD],\n        };\n      },\n    },\n  });\n}\n\nexport interface addTypenameToDocument {\n  added(field: FieldNode): boolean;\n}\naddTypenameToDocument.added = function (field: FieldNode) {\n  return field === TYPENAME_FIELD;\n};\n\nconst connectionRemoveConfig = {\n  test: (directive: DirectiveNode) => {\n    const willRemove = directive.name.value === 'connection';\n    if (willRemove) {\n      if (\n        !directive.arguments ||\n        !directive.arguments.some(arg => arg.name.value === 'key')\n      ) {\n        invariant.warn(\n          'Removing an @connection directive even though it does not have a key. ' +\n            'You may want to use the key parameter to specify a store key.',\n        );\n      }\n    }\n\n    return willRemove;\n  },\n};\n\nexport function removeConnectionDirectiveFromDocument(doc: DocumentNode) {\n  return removeDirectivesFromDocument(\n    [connectionRemoveConfig],\n    checkDocument(doc),\n  );\n}\n\nfunction hasDirectivesInSelectionSet(\n  directives: GetDirectiveConfig[],\n  selectionSet: SelectionSetNode | undefined,\n  nestedCheck = true,\n): boolean {\n  return (\n    !!selectionSet &&\n    selectionSet.selections &&\n    selectionSet.selections.some(selection =>\n      hasDirectivesInSelection(directives, selection, nestedCheck),\n    )\n  );\n}\n\nfunction hasDirectivesInSelection(\n  directives: GetDirectiveConfig[],\n  selection: SelectionNode,\n  nestedCheck = true,\n): boolean {\n  if (!isField(selection)) {\n    return true;\n  }\n\n  if (!selection.directives) {\n    return false;\n  }\n\n  return (\n    selection.directives.some(getDirectiveMatcher(directives)) ||\n    (nestedCheck &&\n      hasDirectivesInSelectionSet(\n        directives,\n        selection.selectionSet,\n        nestedCheck,\n      ))\n  );\n}\n\nfunction getArgumentMatcher(config: RemoveArgumentsConfig[]) {\n  return function argumentMatcher(argument: ArgumentNode) {\n    return config.some(\n      (aConfig: RemoveArgumentsConfig) =>\n        argument.value &&\n        argument.value.kind === 'Variable' &&\n        argument.value.name &&\n        (aConfig.name === argument.value.name.value ||\n          (aConfig.test && aConfig.test(argument))),\n    );\n  };\n}\n\nexport function removeArgumentsFromDocument(\n  config: RemoveArgumentsConfig[],\n  doc: DocumentNode,\n): DocumentNode | null {\n  const argMatcher = getArgumentMatcher(config);\n\n  return nullIfDocIsEmpty(\n    visit(doc, {\n      OperationDefinition: {\n        enter(node) {\n          return {\n            ...node,\n            // Remove matching top level variables definitions.\n            variableDefinitions: node.variableDefinitions ? node.variableDefinitions.filter(\n              varDef =>\n                !config.some(arg => arg.name === varDef.variable.name.value),\n            ) : [],\n          };\n        },\n      },\n\n      Field: {\n        enter(node) {\n          // If `remove` is set to true for an argument, and an argument match\n          // is found for a field, remove the field as well.\n          const shouldRemoveField = config.some(argConfig => argConfig.remove);\n\n          if (shouldRemoveField) {\n            let argMatchCount = 0;\n            if (node.arguments) {\n              node.arguments.forEach(arg => {\n                if (argMatcher(arg)) {\n                  argMatchCount += 1;\n                }\n              });\n            }\n\n            if (argMatchCount === 1) {\n              return null;\n            }\n          }\n        },\n      },\n\n      Argument: {\n        enter(node) {\n          // Remove all matching arguments.\n          if (argMatcher(node)) {\n            return null;\n          }\n        },\n      },\n    }),\n  );\n}\n\nexport function removeFragmentSpreadFromDocument(\n  config: RemoveFragmentSpreadConfig[],\n  doc: DocumentNode,\n): DocumentNode | null {\n  function enter(\n    node: FragmentSpreadNode | FragmentDefinitionNode,\n  ): null | void {\n    if (config.some(def => def.name === node.name.value)) {\n      return null;\n    }\n  }\n\n  return nullIfDocIsEmpty(\n    visit(doc, {\n      FragmentSpread: { enter },\n      FragmentDefinition: { enter },\n    }),\n  );\n}\n\nfunction getAllFragmentSpreadsFromSelectionSet(\n  selectionSet: SelectionSetNode,\n): FragmentSpreadNode[] {\n  const allFragments: FragmentSpreadNode[] = [];\n\n  selectionSet.selections.forEach(selection => {\n    if (\n      (isField(selection) || isInlineFragment(selection)) &&\n      selection.selectionSet\n    ) {\n      getAllFragmentSpreadsFromSelectionSet(selection.selectionSet).forEach(\n        frag => allFragments.push(frag),\n      );\n    } else if (selection.kind === 'FragmentSpread') {\n      allFragments.push(selection);\n    }\n  });\n\n  return allFragments;\n}\n\n// If the incoming document is a query, return it as is. Otherwise, build a\n// new document containing a query operation based on the selection set\n// of the previous main operation.\nexport function buildQueryFromSelectionSet(\n  document: DocumentNode,\n): DocumentNode {\n  const definition = getMainDefinition(document);\n  const definitionOperation = (<OperationDefinitionNode>definition).operation;\n\n  if (definitionOperation === 'query') {\n    // Already a query, so return the existing document.\n    return document;\n  }\n\n  // Build a new query using the selection set of the main operation.\n  const modifiedDoc = visit(document, {\n    OperationDefinition: {\n      enter(node) {\n        return {\n          ...node,\n          operation: 'query',\n        };\n      },\n    },\n  });\n  return modifiedDoc;\n}\n\n// Remove fields / selection sets that include an @client directive.\nexport function removeClientSetsFromDocument(\n  document: DocumentNode,\n): DocumentNode | null {\n  checkDocument(document);\n\n  let modifiedDoc = removeDirectivesFromDocument(\n    [\n      {\n        test: (directive: DirectiveNode) => directive.name.value === 'client',\n        remove: true,\n      },\n    ],\n    document,\n  );\n\n  // After a fragment definition has had its @client related document\n  // sets removed, if the only field it has left is a __typename field,\n  // remove the entire fragment operation to prevent it from being fired\n  // on the server.\n  if (modifiedDoc) {\n    modifiedDoc = visit(modifiedDoc, {\n      FragmentDefinition: {\n        enter(node) {\n          if (node.selectionSet) {\n            const isTypenameOnly = node.selectionSet.selections.every(\n              selection =>\n                isField(selection) && selection.name.value === '__typename',\n            );\n            if (isTypenameOnly) {\n              return null;\n            }\n          }\n        },\n      },\n    });\n  }\n\n  return modifiedDoc;\n}\n", "const { hasOwnProperty } = Object.prototype;\n\n// These mergeDeep and mergeDeepArray utilities merge any number of objects\n// together, sharing as much memory as possible with the source objects, while\n// remaining careful to avoid modifying any source objects.\n\n// Logically, the return type of mergeDeep should be the intersection of\n// all the argument types. The binary call signature is by far the most\n// common, but we support 0- through 5-ary as well. After that, the\n// resulting type is just the inferred array element type. Note to nerds:\n// there is a more clever way of doing this that converts the tuple type\n// first to a union type (easy enough: T[number]) and then converts the\n// union to an intersection type using distributive conditional type\n// inference, but that approach has several fatal flaws (boolean becomes\n// true & false, and the inferred type ends up as unknown in many cases),\n// in addition to being nearly impossible to explain/understand.\nexport type TupleToIntersection<T extends any[]> =\n  T extends [infer A] ? A :\n  T extends [infer A, infer B] ? A & B :\n  T extends [infer A, infer B, infer C] ? A & B & C :\n  T extends [infer A, infer B, infer C, infer D] ? A & B & C & D :\n  T extends [infer A, infer B, infer C, infer D, infer E] ? A & B & C & D & E :\n  T extends (infer U)[] ? U : any;\n\nexport function mergeDeep<T extends any[]>(\n  ...sources: T\n): TupleToIntersection<T> {\n  return mergeDeepArray(sources);\n}\n\n// In almost any situation where you could succeed in getting the\n// TypeScript compiler to infer a tuple type for the sources array, you\n// could just use mergeDeep instead of mergeDeepArray, so instead of\n// trying to convert T[] to an intersection type we just infer the array\n// element type, which works perfectly when the sources array has a\n// consistent element type.\nexport function mergeDeepArray<T>(sources: T[]): T {\n  let target = sources[0] || ({} as T);\n  const count = sources.length;\n  if (count > 1) {\n    const merger = new DeepMerger();\n    for (let i = 1; i < count; ++i) {\n      target = merger.merge(target, sources[i]);\n    }\n  }\n  return target;\n}\n\nfunction isObject(obj: any): obj is Record<string | number, any> {\n  return obj !== null && typeof obj === 'object';\n}\n\nexport type ReconcilerFunction<TContextArgs extends any[]> = (\n  this: DeepMerger<TContextArgs>,\n  target: Record<string | number, any>,\n  source: Record<string | number, any>,\n  property: string | number,\n  ...context: TContextArgs\n) => any;\n\nconst defaultReconciler: ReconcilerFunction<any[]> =\n  function (target, source, property) {\n    return this.merge(target[property], source[property]);\n  };\n\nexport class DeepMerger<TContextArgs extends any[]> {\n  constructor(\n    private reconciler: ReconcilerFunction<TContextArgs> = defaultReconciler,\n  ) {}\n\n  public merge(target: any, source: any, ...context: TContextArgs): any {\n    if (isObject(source) && isObject(target)) {\n      Object.keys(source).forEach(sourceKey => {\n        if (hasOwnProperty.call(target, sourceKey)) {\n          const targetValue = target[sourceKey];\n          if (source[sourceKey] !== targetValue) {\n            const result = this.reconciler(target, source, sourceKey, ...context);\n            // A well-implemented reconciler may return targetValue to indicate\n            // the merge changed nothing about the structure of the target.\n            if (result !== targetValue) {\n              target = this.shallowCopyForMerge(target);\n              target[sourceKey] = result;\n            }\n          }\n        } else {\n          // If there is no collision, the target can safely share memory with\n          // the source, and the recursion can terminate here.\n          target = this.shallowCopyForMerge(target);\n          target[sourceKey] = source[sourceKey];\n        }\n      });\n\n      return target;\n    }\n\n    // If source (or target) is not an object, let source replace target.\n    return source;\n  }\n\n  public isObject = isObject;\n\n  private pastCopies = new Set<any>();\n\n  public shallowCopyForMerge<T>(value: T): T {\n    if (isObject(value) && !this.pastCopies.has(value)) {\n      if (Array.isArray(value)) {\n        value = (value as any).slice(0);\n      } else {\n        value = {\n          __proto__: Object.getPrototypeOf(value),\n          ...value,\n        };\n      }\n      this.pastCopies.add(value);\n    }\n    return value;\n  }\n}\n", "import Observable from 'zen-observable';\n\n// This simplified polyfill attempts to follow the ECMAScript Observable\n// proposal (https://github.com/zenparsing/es-observable)\nimport 'symbol-observable';\n\nexport type ObservableSubscription = ZenObservable.Subscription;\nexport type Observer<T> = ZenObservable.Observer<T>;\nexport type Subscriber<T> = ZenObservable.Subscriber<T>;\n\n// Use global module augmentation to add RxJS interop functionality. By\n// using this approach (instead of subclassing `Observable` and adding an\n// ['@@observable']() method), we ensure the exported `Observable` retains all\n// existing type declarations from `@types/zen-observable` (which is important\n// for projects like `apollo-link`).\ndeclare global {\n  interface Observable<T> {\n    ['@@observable'](): Observable<T>;\n  }\n}\n(Observable.prototype as any)['@@observable'] = function () { return this; };\nexport { Observable };\n", "export default function symbolObservablePonyfill(root) {\n\tvar result;\n\tvar Symbol = root.Symbol;\n\n\tif (typeof Symbol === 'function') {\n\t\tif (Symbol.observable) {\n\t\t\tresult = Symbol.observable;\n\t\t} else {\n\n\t\t\t// This just needs to be something that won't trample other user's Symbol.for use\n\t\t\t// It also will guide people to the source of their issues, if this is problematic.\n\t\t\t// META: It's a resource locator!\n\t\t\tresult = Symbol.for('https://github.com/benlesh/symbol-observable');\n\t\t\ttry {\n\t\t\t\tSymbol.observable = result;\n\t\t\t} catch (err) {\n\t\t\t\t// Do nothing. In some environments, users have frozen `Symbol` for security reasons,\n\t\t\t\t// if it is frozen assigning to it will throw. In this case, we don't care, because\n\t\t\t\t// they will need to use the returned value from the ponyfill.\n\t\t\t}\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};\n", "/* global window */\nimport ponyfill from './ponyfill.js';\n\nvar root;\n\nif (typeof self !== 'undefined') {\n  root = self;\n} else if (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n} else if (typeof module !== 'undefined') {\n  root = module;\n} else {\n  root = Function('return this')();\n}\n\nvar result = ponyfill(root);\nexport default result;\n", "const { toString } = Object.prototype;\n\n/**\n * Deeply clones a value to create a new instance.\n */\nexport function cloneDeep<T>(value: T): T {\n  return cloneDeepHelper(value);\n}\n\nfunction cloneDeepHelper<T>(val: T, seen?: Map<any, any>): T {\n  switch (toString.call(val)) {\n  case \"[object Array]\": {\n    seen = seen || new Map;\n    if (seen.has(val)) return seen.get(val);\n    const copy: T & any[] = (val as any).slice(0);\n    seen.set(val, copy);\n    copy.forEach(function (child, i) {\n      copy[i] = cloneDeepHelper(child, seen);\n    });\n    return copy;\n  }\n\n  case \"[object Object]\": {\n    seen = seen || new Map;\n    if (seen.has(val)) return seen.get(val);\n    // High fidelity polyfills of Object.create and Object.getPrototypeOf are\n    // possible in all JS environments, so we will assume they exist/work.\n    const copy = Object.create(Object.getPrototypeOf(val));\n    seen.set(val, copy);\n    Object.keys(val).forEach(key => {\n      copy[key] = cloneDeepHelper((val as any)[key], seen);\n    });\n    return copy;\n  }\n\n  default:\n    return val;\n  }\n}\n", "import { isDevelopment, isTest } from './environment';\n\nfunction isObject(value: any) {\n  return value !== null && typeof value === \"object\";\n}\n\nfunction deepFreeze(value: any) {\n  const workSet = new Set([value]);\n  workSet.forEach(obj => {\n    if (isObject(obj)) {\n      if (!Object.isFrozen(obj)) Object.freeze(obj);\n      Object.getOwnPropertyNames(obj).forEach(name => {\n        if (isObject(obj[name])) workSet.add(obj[name]);\n      });\n    }\n  });\n  return value;\n}\n\nexport function maybeDeepFreeze<T>(obj: T): T {\n  if (process.env.NODE_ENV !== \"production\" && (isDevelopment() || isTest())) {\n    deepFreeze(obj);\n  }\n  return obj;\n}\n", "import { Observer } from \"./Observable\";\n\nexport function iterateObserversSafely<E, A>(\n  observers: Set<Observer<E>>,\n  method: keyof Observer<E>,\n  argument?: A,\n) {\n  // In case observers is modified during iteration, we need to commit to the\n  // original elements, which also provides an opportunity to filter them down\n  // to just the observers with the given method.\n  const observersWithMethod: Observer<E>[] = [];\n  observers.forEach(obs => obs[method] && observersWithMethod.push(obs));\n  observersWithMethod.forEach(obs => (obs as any)[method](argument));\n}\n", "import { Observable, Observer } from \"./Observable\";\n\n// Like Observable.prototype.map, except that the mapping function can\n// optionally return a Promise (or be async).\nexport function asyncMap<V, R>(\n  observable: Observable<V>,\n  mapFn: (value: V) => R | PromiseLike<R>,\n  catchFn?: (error: any) => R | PromiseLike<R>,\n): Observable<R> {\n  return new Observable<R>(observer => {\n    const { next, error, complete } = observer;\n    let activeCallbackCount = 0;\n    let completed = false;\n\n    function makeCallback(\n      examiner: typeof mapFn | typeof catchFn,\n      delegate: typeof next | typeof error,\n    ): (arg: any) => void {\n      if (examiner) {\n        return arg => {\n          ++activeCallbackCount;\n          new Promise(resolve => resolve(examiner(arg))).then(\n            result => {\n              --activeCallbackCount;\n              next && next.call(observer, result);\n              if (completed) {\n                handler.complete!();\n              }\n            },\n            e => {\n              --activeCallbackCount;\n              error && error.call(observer, e);\n            },\n          );\n        };\n      } else {\n        return arg => delegate && delegate.call(observer, arg);\n      }\n    }\n\n    const handler: Observer<V> = {\n      next: makeCallback(mapFn, next),\n      error: makeCallback(catchFn, error),\n      complete() {\n        completed = true;\n        if (!activeCallbackCount) {\n          complete && complete.call(observer);\n        }\n      },\n    };\n\n    const sub = observable.subscribe(handler);\n    return () => sub.unsubscribe();\n  });\n}\n", "import { Observable } from \"./Observable\";\n\n// Generic implementations of Observable.prototype methods like map and\n// filter need to know how to create a new Observable from an Observable\n// subclass (like Concast or ObservableQuery). Those methods assume\n// (perhaps unwisely?) that they can call the subtype's constructor with a\n// Subscriber function, even though the subclass constructor might expect\n// different parameters. Defining this static Symbol.species property on\n// the subclass is a hint to generic Observable code to use the default\n// constructor instead of trying to do `new Subclass(observer => ...)`.\nexport function fixObservableSubclass<\n  S extends new (...args: any[]) => Observable<any>,\n>(subclass: S): S {\n  function set(key: symbol | string) {\n    // Object.defineProperty is necessary because the Symbol.species\n    // property is a getter by default in modern JS environments, so we\n    // can't assign to it with a normal assignment expression.\n    Object.defineProperty(subclass, key, { value: Observable });\n  }\n  if (typeof Symbol === \"function\" && Symbol.species) {\n    set(Symbol.species);\n  }\n  // The \"@@species\" string is used as a fake Symbol.species value in some\n  // polyfill systems (including the SymbolSpecies variable used by\n  // zen-observable), so we should set it as well, to be safe.\n  set(\"@@species\");\n  return subclass;\n}\n", "import { Observable, Observer, ObservableSubscription, Subscriber } from \"./Observable\";\nimport { iterateObserversSafely } from \"./iteration\";\nimport { fixObservableSubclass } from \"./subclassing\";\n\ntype MaybeAsync<T> = T | PromiseLike<T>;\n\nfunction isPromiseLike<T>(value: MaybeAsync<T>): value is PromiseLike<T> {\n  return value && typeof (value as any).then === \"function\";\n}\n\n// Any individual Source<T> can be an Observable<T> or a promise for one.\ntype Source<T> = MaybeAsync<Observable<T>>;\n\nexport type ConcastSourcesIterable<T> = Iterable<Source<T>>;\n\n// A Concast<T> observable concatenates the given sources into a single\n// non-overlapping sequence of Ts, automatically unwrapping any promises,\n// and broadcasts the T elements of that sequence to any number of\n// subscribers, all without creating a bunch of intermediary Observable\n// wrapper objects.\n//\n// Even though any number of observers can subscribe to the Concast, each\n// source observable is guaranteed to receive at most one subscribe call,\n// and the results are multicast to all observers.\n//\n// In addition to broadcasting every next/error message to this.observers,\n// the Concast stores the most recent message using this.latest, so any\n// new observers can immediately receive the latest message, even if it\n// was originally delivered in the past. This behavior means we can assume\n// every active observer in this.observers has received the same most\n// recent message.\n//\n// With the exception of this.latest replay, a Concast is a \"hot\"\n// observable in the sense that it does not replay past results from the\n// beginning of time for each new observer.\n//\n// Could we have used some existing RxJS class instead? Concast<T> is\n// similar to a BehaviorSubject<T>, because it is multicast and redelivers\n// the latest next/error message to new subscribers. Unlike Subject<T>,\n// Concast<T> does not expose an Observer<T> interface (this.handlers is\n// intentionally private), since Concast<T> gets its inputs from the\n// concatenated sources. If we ever switch to RxJS, there may be some\n// value in reusing their code, but for now we use zen-observable, which\n// does not contain any Subject implementations.\nexport class Concast<T> extends Observable<T> {\n  // Active observers receiving broadcast messages. Thanks to this.latest,\n  // we can assume all observers in this Set have received the same most\n  // recent message, though possibly at different times in the past.\n  private observers = new Set<Observer<T>>();\n\n  // This property starts off undefined to indicate the initial\n  // subscription has not yet begun, then points to each source\n  // subscription in turn, and finally becomes null after the sources have\n  // been exhausted. After that, it stays null.\n  private sub?: ObservableSubscription | null;\n\n  // Not only can the individual elements of the iterable be promises, but\n  // also the iterable itself can be wrapped in a promise.\n  constructor(sources: MaybeAsync<ConcastSourcesIterable<T>> | Subscriber<T>) {\n    super(observer => {\n      this.addObserver(observer);\n      return () => this.removeObserver(observer);\n    });\n\n    // Suppress rejection warnings for this.promise, since it's perfectly\n    // acceptable to pay no attention to this.promise if you're consuming\n    // the results through the normal observable API.\n    this.promise.catch(_ => {});\n\n    // If someone accidentally tries to create a Concast using a subscriber\n    // function, recover by creating an Observable from that subscriber and\n    // using it as the source.\n    if (typeof sources === \"function\") {\n      sources = [new Observable(sources)];\n    }\n\n    if (isPromiseLike(sources)) {\n      sources.then(\n        iterable => this.start(iterable),\n        this.handlers.error,\n      );\n    } else {\n      this.start(sources);\n    }\n  }\n\n  // A consumable array of source observables, incrementally consumed\n  // each time this.handlers.complete is called.\n  private sources: Source<T>[];\n\n  private start(sources: ConcastSourcesIterable<T>) {\n    if (this.sub !== void 0) return;\n\n    // In practice, sources is most often simply an Array of observables.\n    // TODO Consider using sources[Symbol.iterator]() to take advantage\n    // of the laziness of non-Array iterables.\n    this.sources = Array.from(sources);\n\n    // Calling this.handlers.complete() kicks off consumption of the first\n    // source observable. It's tempting to do this step lazily in\n    // addObserver, but this.promise can be accessed without calling\n    // addObserver, so consumption needs to begin eagerly.\n    this.handlers.complete();\n  }\n\n  private deliverLastMessage(observer: Observer<T>) {\n    if (this.latest) {\n      const nextOrError = this.latest[0];\n      const method = observer[nextOrError];\n      if (method) {\n        method.call(observer, this.latest[1]);\n      }\n      // If the subscription is already closed, and the last message was\n      // a 'next' message, simulate delivery of the final 'complete'\n      // message again.\n      if (this.sub === null &&\n          nextOrError === \"next\" &&\n          observer.complete) {\n        observer.complete();\n      }\n    }\n  }\n\n  // Note: cleanup observers do not count towards this total.\n  private addCount = 0;\n\n  public addObserver(observer: Observer<T>) {\n    if (!this.observers.has(observer)) {\n      // Immediately deliver the most recent message, so we can always\n      // be sure all observers have the latest information.\n      this.deliverLastMessage(observer);\n      this.observers.add(observer);\n      ++this.addCount;\n    }\n  }\n\n  public removeObserver(\n    observer: Observer<T>,\n    quietly?: boolean,\n  ) {\n    if (this.observers.delete(observer) &&\n        --this.addCount < 1 &&\n        !quietly) {\n      // In case there are still any cleanup observers in this.observers,\n      // and no error or completion has been broadcast yet, make sure\n      // those observers receive an error that terminates them.\n      this.handlers.error(new Error(\"Observable cancelled prematurely\"));\n    }\n  }\n\n  // Any Concast object can be trivially converted to a Promise, without\n  // having to create a new wrapper Observable. This promise provides an\n  // easy way to observe the final state of the Concast.\n  private resolve: (result?: T | PromiseLike<T>) => void;\n  private reject: (reason: any) => void;\n  public readonly promise = new Promise<T>((resolve, reject) => {\n    this.resolve = resolve;\n    this.reject = reject;\n  });\n\n  // Name and argument of the most recently invoked observer method, used\n  // to deliver latest results immediately to new observers.\n  private latest?: [\"next\" | \"error\", any];\n\n  // Bound handler functions that can be reused for every internal\n  // subscription.\n  private handlers = {\n    next: (result: T) => {\n      if (this.sub !== null) {\n        this.latest = [\"next\", result];\n        iterateObserversSafely(this.observers, \"next\", result);\n      }\n    },\n\n    error: (error: any) => {\n      const { sub } = this;\n      if (sub !== null) {\n        // Delay unsubscribing from the underlying subscription slightly,\n        // so that immediately subscribing another observer can keep the\n        // subscription active.\n        if (sub) Promise.resolve().then(() => sub.unsubscribe());\n        this.sub = null;\n        this.latest = [\"error\", error];\n        this.reject(error);\n        iterateObserversSafely(this.observers, \"error\", error);\n      }\n    },\n\n    complete: () => {\n      if (this.sub !== null) {\n        const value = this.sources.shift();\n        if (!value) {\n          this.sub = null;\n          if (this.latest &&\n              this.latest[0] === \"next\") {\n            this.resolve(this.latest[1]);\n          } else {\n            this.resolve();\n          }\n          // We do not store this.latest = [\"complete\"], because doing so\n          // discards useful information about the previous next (or\n          // error) message. Instead, if new observers subscribe after\n          // this Concast has completed, they will receive the final\n          // 'next' message (unless there was an error) immediately\n          // followed by a 'complete' message (see addObserver).\n          iterateObserversSafely(this.observers, \"complete\");\n        } else if (isPromiseLike(value)) {\n          value.then(obs => this.sub = obs.subscribe(this.handlers));\n        } else {\n          this.sub = value.subscribe(this.handlers);\n        }\n      }\n    },\n  };\n\n  public cleanup(callback: () => any) {\n    let called = false;\n    const once = () => {\n      if (!called) {\n        called = true;\n        // Removing a cleanup observer should not unsubscribe from the\n        // underlying Observable, so the only removeObserver behavior we\n        // need here is to delete observer from this.observers.\n        this.observers.delete(observer);\n        callback();\n      }\n    }\n    const observer = {\n      next: once,\n      error: once,\n      complete: once,\n    };\n    const count = this.addCount;\n    this.addObserver(observer);\n    // Normally addObserver increments this.addCount, but we can \"hide\"\n    // cleanup observers by restoring this.addCount to its previous value\n    // after adding any cleanup observer.\n    this.addCount = count;\n  }\n\n  // A public way to abort observation and broadcast.\n  public cancel = (reason: any) => {\n    this.reject(reason);\n    this.sources = [];\n    this.handlers.complete();\n  }\n}\n\n// Necessary because the Concast constructor has a different signature\n// than the Observable constructor.\nfixObservableSubclass(Concast);\n", "export function isNonEmptyArray<T>(value?: ArrayLike<T>): value is Array<T> {\n  return Array.isArray(value) && value.length > 0;\n}\n", "import { ExecutionResult } from 'graphql';\n\nexport function graphQLResultHasError(result: ExecutionResult): boolean {\n  return (result.errors && result.errors.length > 0) || false;\n}\n", "export const canUseWeakMap = typeof WeakMap === 'function' && !(\n  typeof navigator === 'object' &&\n  navigator.product === 'ReactNative'\n);\n", "import { TupleToIntersection } from './mergeDeep';\n\n/**\n * Merges the provided objects shallowly and removes\n * all properties with an `undefined` value\n */\nexport function compact<TArgs extends any[]>(\n  ...objects: TArgs\n): TupleToIntersection<TArgs> {\n  const result = Object.create(null);\n\n  objects.forEach(obj => {\n    if (!obj) return;\n    Object.keys(obj).forEach(key => {\n      const value = (obj as any)[key];\n      if (value !== void 0) {\n        result[key] = value;\n      }\n    });\n  });\n\n  return result;\n}\n", "import { Observable } from '../../utilities';\n\nexport function fromError<T>(errorValue: any): Observable<T> {\n  return new Observable<T>(observer => {\n    observer.error(errorValue);\n  });\n}\n", "export type ServerError = Error & {\n  response: Response;\n  result: Record<string, any>;\n  statusCode: number;\n};\n\nexport const throwServerError = (\n  response: Response,\n  result: any,\n  message: string\n) => {\n  const error = new Error(message) as ServerError;\n  error.name = 'ServerError';\n  error.response = response;\n  error.statusCode = response.status;\n  error.result = result;\n  throw error;\n};\n", "import { InvariantError } from 'ts-invariant';\n\nimport { GraphQLRequest } from '../core';\n\nexport function validateOperation(operation: GraphQLRequest): GraphQLRequest {\n  const OPERATION_FIELDS = [\n    'query',\n    'operationName',\n    'variables',\n    'extensions',\n    'context',\n  ];\n  for (let key of Object.keys(operation)) {\n    if (OPERATION_FIELDS.indexOf(key) < 0) {\n      throw new InvariantError(`illegal argument: ${key}`);\n    }\n  }\n\n  return operation;\n}\n", "import { GraphQLRequest, Operation } from '../core';\n\nexport function createOperation(\n  starting: any,\n  operation: GraphQLRequest,\n): Operation {\n  let context = { ...starting };\n  const setContext = (next: any) => {\n    if (typeof next === 'function') {\n      context = { ...context, ...next(context) };\n    } else {\n      context = { ...context, ...next };\n    }\n  };\n  const getContext = () => ({ ...context });\n\n  Object.defineProperty(operation, 'setContext', {\n    enumerable: false,\n    value: setContext,\n  });\n\n  Object.defineProperty(operation, 'getContext', {\n    enumerable: false,\n    value: getContext,\n  });\n\n  return operation as Operation;\n}\n", "import { GraphQLRequest, Operation } from '../core';\nimport { getOperationName } from '../../utilities';\n\nexport function transformOperation(operation: GraphQLRequest): GraphQLRequest {\n  const transformedOperation: GraphQLRequest = {\n    variables: operation.variables || {},\n    extensions: operation.extensions || {},\n    operationName: operation.operationName,\n    query: operation.query,\n  };\n\n  // Best guess at an operation name\n  if (!transformedOperation.operationName) {\n    transformedOperation.operationName =\n      typeof transformedOperation.query !== 'string'\n        ? getOperationName(transformedOperation.query) || undefined\n        : '';\n  }\n\n  return transformedOperation as Operation;\n}\n", "import { InvariantError, invariant } from 'ts-invariant';\n\nimport { Observable } from '../../utilities';\nimport {\n  NextLink,\n  Operation,\n  RequestHandler,\n  FetchResult,\n  GraphQLRequest\n} from './types';\nimport {\n  validateOperation,\n  createOperation,\n  transformOperation,\n} from '../utils';\n\nfunction passthrough(op: Operation, forward: NextLink) {\n  return (forward ? forward(op) : Observable.of()) as Observable<FetchResult>;\n}\n\nfunction toLink(handler: RequestHandler | ApolloLink) {\n  return typeof handler === 'function' ? new ApolloLink(handler) : handler;\n}\n\nfunction isTerminating(link: ApolloLink): boolean {\n  return link.request.length <= 1;\n}\n\nclass LinkError extends Error {\n  public link?: ApolloLink;\n  constructor(message?: string, link?: ApolloLink) {\n    super(message);\n    this.link = link;\n  }\n}\n\nexport class ApolloLink {\n  public static empty(): ApolloLink {\n    return new ApolloLink(() => Observable.of());\n  }\n\n  public static from(links: (ApolloLink | RequestHandler)[]): ApolloLink {\n    if (links.length === 0) return ApolloLink.empty();\n    return links.map(toLink).reduce((x, y) => x.concat(y)) as ApolloLink;\n  }\n\n  public static split(\n    test: (op: Operation) => boolean,\n    left: ApolloLink | RequestHandler,\n    right?: ApolloLink | RequestHandler,\n  ): ApolloLink {\n    const leftLink = toLink(left);\n    const rightLink = toLink(right || new ApolloLink(passthrough));\n\n    if (isTerminating(leftLink) && isTerminating(rightLink)) {\n      return new ApolloLink(operation => {\n        return test(operation)\n          ? leftLink.request(operation) || Observable.of()\n          : rightLink.request(operation) || Observable.of();\n      });\n    } else {\n      return new ApolloLink((operation, forward) => {\n        return test(operation)\n          ? leftLink.request(operation, forward) || Observable.of()\n          : rightLink.request(operation, forward) || Observable.of();\n      });\n    }\n  }\n\n  public static execute(\n    link: ApolloLink,\n    operation: GraphQLRequest,\n  ): Observable<FetchResult> {\n    return (\n      link.request(\n        createOperation(\n          operation.context,\n          transformOperation(validateOperation(operation)),\n        ),\n      ) || Observable.of()\n    );\n  }\n\n  public static concat(\n    first: ApolloLink | RequestHandler,\n    second: ApolloLink | RequestHandler,\n  ) {\n    const firstLink = toLink(first);\n    if (isTerminating(firstLink)) {\n      invariant.warn(\n        new LinkError(\n          `You are calling concat on a terminating link, which will have no effect`,\n          firstLink,\n        ),\n      );\n      return firstLink;\n    }\n    const nextLink = toLink(second);\n\n    if (isTerminating(nextLink)) {\n      return new ApolloLink(\n        operation =>\n          firstLink.request(\n            operation,\n            op => nextLink.request(op) || Observable.of(),\n          ) || Observable.of(),\n      );\n    } else {\n      return new ApolloLink((operation, forward) => {\n        return (\n          firstLink.request(operation, op => {\n            return nextLink.request(op, forward) || Observable.of();\n          }) || Observable.of()\n        );\n      });\n    }\n  }\n\n  constructor(request?: RequestHandler) {\n    if (request) this.request = request;\n  }\n\n  public split(\n    test: (op: Operation) => boolean,\n    left: ApolloLink | RequestHandler,\n    right?: ApolloLink | RequestHandler,\n  ): ApolloLink {\n    return this.concat(\n      ApolloLink.split(test, left, right || new ApolloLink(passthrough))\n    );\n  }\n\n  public concat(next: ApolloLink | RequestHandler): ApolloLink {\n    return ApolloLink.concat(this, next);\n  }\n\n  public request(\n    operation: Operation,\n    forward?: NextLink,\n  ): Observable<FetchResult> | null {\n    throw new InvariantError('request is not implemented');\n  }\n\n  protected onError(\n    error: any,\n    observer?: ZenObservable.Observer<FetchResult>,\n  ): false | void {\n    if (observer && observer.error) {\n      observer.error(error);\n      // Returning false indicates that observer.error does not need to be\n      // called again, since it was already called (on the previous line).\n      // Calling observer.error again would not cause any real problems,\n      // since only the first call matters, but custom onError functions\n      // might have other reasons for wanting to prevent the default\n      // behavior by returning false.\n      return false;\n    }\n    // Throw errors will be passed to observer.error.\n    throw error;\n  }\n\n  public setOnError(fn: ApolloLink[\"onError\"]): this {\n    this.onError = fn;\n    return this;\n  }\n}\n", "import { ApolloLink } from './ApolloLink';\n\nexport const empty = ApolloLink.empty;\n", "import { ApolloLink } from './ApolloLink';\n\nexport const from = ApolloLink.from;\n", "import { ApolloLink } from './ApolloLink';\n\nexport const split = ApolloLink.split;\n", "import { ApolloLink } from './ApolloLink';\n\nexport const concat = ApolloLink.concat;\n", "import { ApolloLink } from './ApolloLink';\n\nexport const execute = ApolloLink.execute;\n", "export const version = 'local';\n", "import { Operation } from '../core';\nimport { throwServerError } from '../utils';\n\nconst { hasOwnProperty } = Object.prototype;\n\nexport type ServerParseError = Error & {\n  response: Response;\n  statusCode: number;\n  bodyText: string;\n};\n\nexport function parseAndCheckHttpResponse(\n  operations: Operation | Operation[],\n) {\n  return (response: Response) => response\n    .text()\n    .then(bodyText => {\n      try {\n        return JSON.parse(bodyText);\n      } catch (err) {\n        const parseError = err as ServerParseError;\n        parseError.name = 'ServerParseError';\n        parseError.response = response;\n        parseError.statusCode = response.status;\n        parseError.bodyText = bodyText;\n        throw parseError;\n      }\n    })\n    .then((result: any) => {\n      if (response.status >= 300) {\n        // Network error\n        throwServerError(\n          response,\n          result,\n          `Response not successful: Received status code ${response.status}`,\n        );\n      }\n\n      if (\n        !Array.isArray(result) &&\n        !hasOwnProperty.call(result, 'data') &&\n        !hasOwnProperty.call(result, 'errors')\n      ) {\n        // Data error\n        throwServerError(\n          response,\n          result,\n          `Server response was missing for query '${\n            Array.isArray(operations)\n              ? operations.map(op => op.operationName)\n              : operations.operationName\n          }'.`,\n        );\n      }\n      return result;\n    });\n}\n", "import { InvariantError } from 'ts-invariant';\n\nexport type ClientParseError = InvariantError & {\n  parseError: Error;\n};\n\nexport const serializeFetchParameter = (p: any, label: string) => {\n  let serialized;\n  try {\n    serialized = JSON.stringify(p);\n  } catch (e) {\n    const parseError = new InvariantError(\n      `Network request failed. ${label} is not serializable: ${e.message}`,\n    ) as ClientParseError;\n    parseError.parseError = e;\n    throw parseError;\n  }\n  return serialized;\n};\n", "import { print } from 'graphql';\n\nimport { Operation } from '../core';\n\nexport interface UriFunction {\n  (operation: Operation): string;\n}\n\nexport interface Body {\n  query?: string;\n  operationName?: string;\n  variables?: Record<string, any>;\n  extensions?: Record<string, any>;\n}\n\nexport interface HttpOptions {\n  /**\n   * The URI to use when fetching operations.\n   *\n   * Defaults to '/graphql'.\n   */\n  uri?: string | UriFunction;\n\n  /**\n   * Passes the extensions field to your graphql server.\n   *\n   * Defaults to false.\n   */\n  includeExtensions?: boolean;\n\n  /**\n   * A `fetch`-compatible API to use when making requests.\n   */\n  fetch?: WindowOrWorkerGlobalScope['fetch'];\n\n  /**\n   * An object representing values to be sent as headers on the request.\n   */\n  headers?: any;\n\n  /**\n   * The credentials policy you want to use for the fetch call.\n   */\n  credentials?: string;\n\n  /**\n   * Any overrides of the fetch options argument to pass to the fetch call.\n   */\n  fetchOptions?: any;\n\n  /**\n   * If set to true, use the HTTP GET method for query operations. Mutations\n   * will still use the method specified in fetchOptions.method (which defaults\n   * to POST).\n   */\n  useGETForQueries?: boolean;\n\n  /**\n   * If set to true, the default behavior of stripping unused variables\n   * from the request will be disabled.\n   *\n   * Unused variables are likely to trigger server-side validation errors,\n   * per https://spec.graphql.org/draft/#sec-All-Variables-Used, but this\n   * includeUnusedVariables option can be useful if your server deviates\n   * from the GraphQL specification by not strictly enforcing that rule.\n   */\n  includeUnusedVariables?: boolean;\n}\n\nexport interface HttpQueryOptions {\n  includeQuery?: boolean;\n  includeExtensions?: boolean;\n}\n\nexport interface HttpConfig {\n  http?: HttpQueryOptions;\n  options?: any;\n  headers?: any;\n  credentials?: any;\n}\n\nconst defaultHttpOptions: HttpQueryOptions = {\n  includeQuery: true,\n  includeExtensions: false,\n};\n\nconst defaultHeaders = {\n  // headers are case insensitive (https://stackoverflow.com/a/5259004)\n  accept: '*/*',\n  'content-type': 'application/json',\n};\n\nconst defaultOptions = {\n  method: 'POST',\n};\n\nexport const fallbackHttpConfig = {\n  http: defaultHttpOptions,\n  headers: defaultHeaders,\n  options: defaultOptions,\n};\n\nexport const selectHttpOptionsAndBody = (\n  operation: Operation,\n  fallbackConfig: HttpConfig,\n  ...configs: Array<HttpConfig>\n) => {\n  let options: HttpConfig & Record<string, any> = {\n    ...fallbackConfig.options,\n    headers: fallbackConfig.headers,\n    credentials: fallbackConfig.credentials,\n  };\n  let http: HttpQueryOptions = fallbackConfig.http || {};\n\n  /*\n   * use the rest of the configs to populate the options\n   * configs later in the list will overwrite earlier fields\n   */\n  configs.forEach(config => {\n    options = {\n      ...options,\n      ...config.options,\n      headers: {\n        ...options.headers,\n        ...config.headers,\n      },\n    };\n    if (config.credentials) options.credentials = config.credentials;\n\n    http = {\n      ...http,\n      ...config.http,\n    };\n  });\n\n  //The body depends on the http options\n  const { operationName, extensions, variables, query } = operation;\n  const body: Body = { operationName, variables };\n\n  if (http.includeExtensions) (body as any).extensions = extensions;\n\n  // not sending the query (i.e persisted queries)\n  if (http.includeQuery) (body as any).query = print(query);\n\n  return {\n    options,\n    body,\n  };\n};\n", "import { InvariantError } from 'ts-invariant';\n\nexport const checkFetcher = (fetcher: WindowOrWorkerGlobalScope['fetch'] | undefined) => {\n  if (!fetcher && typeof fetch === 'undefined') {\n    throw new InvariantError(`\n\"fetch\" has not been found globally and no fetcher has been \\\nconfigured. To fix this, install a fetch package (like \\\nhttps://www.npmjs.com/package/cross-fetch), instantiate the \\\nfetcher, and pass it into your HttpLink constructor. For example:\n\nimport fetch from 'cross-fetch';\nimport { ApolloClient, HttpLink } from '@apollo/client';\nconst client = new ApolloClient({\n  link: new HttpLink({ uri: '/graphql', fetch })\n});\n    `);\n  }\n};\n", "export const createSignalIfSupported = () => {\n  if (typeof AbortController === 'undefined')\n    return { controller: false, signal: false };\n\n  const controller = new AbortController();\n  const signal = controller.signal;\n  return { controller, signal };\n};\n", "import { Operation } from '../core';\n\nexport const selectURI = (\n  operation: Operation,\n  fallbackURI?: string | ((operation: Operation) => string),\n) => {\n  const context = operation.getContext();\n  const contextURI = context.uri;\n\n  if (contextURI) {\n    return contextURI;\n  } else if (typeof fallbackURI === 'function') {\n    return fallbackURI(operation);\n  } else {\n    return (fallbackURI as string) || '/graphql';\n  }\n};\n", "import { DefinitionNode, VariableDefinitionNode } from 'graphql';\nimport { visit } from 'graphql/language/visitor';\n\nimport { ApolloLink } from '../core';\nimport { Observable } from '../../utilities';\nimport { serializeFetchParameter } from './serializeFetchParameter';\nimport { selectURI } from './selectURI';\nimport { parseAndCheckHttpResponse } from './parseAndCheckHttpResponse';\nimport { checkFetcher } from './checkFetcher';\nimport {\n  selectHttpOptionsAndBody,\n  fallbackHttpConfig,\n  HttpOptions\n} from './selectHttpOptionsAndBody';\nimport { createSignalIfSupported } from './createSignalIfSupported';\nimport { rewriteURIForGET } from './rewriteURIForGET';\nimport { fromError } from '../utils';\n\nexport const createHttpLink = (linkOptions: HttpOptions = {}) => {\n  let {\n    uri = '/graphql',\n    // use default global fetch if nothing passed in\n    fetch: fetcher,\n    includeExtensions,\n    useGETForQueries,\n    includeUnusedVariables = false,\n    ...requestOptions\n  } = linkOptions;\n\n  // dev warnings to ensure fetch is present\n  checkFetcher(fetcher);\n\n  //fetcher is set here rather than the destructuring to ensure fetch is\n  //declared before referencing it. Reference in the destructuring would cause\n  //a ReferenceError\n  if (!fetcher) {\n    fetcher = fetch;\n  }\n\n  const linkConfig = {\n    http: { includeExtensions },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers,\n  };\n\n  return new ApolloLink(operation => {\n    let chosenURI = selectURI(operation, uri);\n\n    const context = operation.getContext();\n\n    // `apollographql-client-*` headers are automatically set if a\n    // `clientAwareness` object is found in the context. These headers are\n    // set first, followed by the rest of the headers pulled from\n    // `context.headers`. If desired, `apollographql-client-*` headers set by\n    // the `clientAwareness` object can be overridden by\n    // `apollographql-client-*` headers set in `context.headers`.\n    const clientAwarenessHeaders: {\n      'apollographql-client-name'?: string;\n      'apollographql-client-version'?: string;\n    } = {};\n\n    if (context.clientAwareness) {\n      const { name, version } = context.clientAwareness;\n      if (name) {\n        clientAwarenessHeaders['apollographql-client-name'] = name;\n      }\n      if (version) {\n        clientAwarenessHeaders['apollographql-client-version'] = version;\n      }\n    }\n\n    const contextHeaders = { ...clientAwarenessHeaders, ...context.headers };\n\n    const contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders,\n    };\n\n    //uses fallback, link, and then context to build options\n    const { options, body } = selectHttpOptionsAndBody(\n      operation,\n      fallbackHttpConfig,\n      linkConfig,\n      contextConfig,\n    );\n\n    if (body.variables && !includeUnusedVariables) {\n      const unusedNames = new Set(Object.keys(body.variables));\n      visit(operation.query, {\n        Variable(node, _key, parent) {\n          // A variable type definition at the top level of a query is not\n          // enough to silence server-side errors about the variable being\n          // unused, so variable definitions do not count as usage.\n          // https://spec.graphql.org/draft/#sec-All-Variables-Used\n          if (parent && (parent as VariableDefinitionNode).kind !== 'VariableDefinition') {\n            unusedNames.delete(node.name.value);\n          }\n        },\n      });\n      if (unusedNames.size) {\n        // Make a shallow copy of body.variables (with keys in the same\n        // order) and then delete unused variables from the copy.\n        body.variables = { ...body.variables };\n        unusedNames.forEach(name => {\n          delete body.variables![name];\n        });\n      }\n    }\n\n    let controller: any;\n    if (!(options as any).signal) {\n      const { controller: _controller, signal } = createSignalIfSupported();\n      controller = _controller;\n      if (controller) (options as any).signal = signal;\n    }\n\n    // If requested, set method to GET if there are no mutations.\n    const definitionIsMutation = (d: DefinitionNode) => {\n      return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n    };\n    if (\n      useGETForQueries &&\n      !operation.query.definitions.some(definitionIsMutation)\n    ) {\n      options.method = 'GET';\n    }\n\n    if (options.method === 'GET') {\n      const { newURI, parseError } = rewriteURIForGET(chosenURI, body);\n      if (parseError) {\n        return fromError(parseError);\n      }\n      chosenURI = newURI;\n    } else {\n      try {\n        (options as any).body = serializeFetchParameter(body, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n\n    return new Observable(observer => {\n      fetcher!(chosenURI, options)\n        .then(response => {\n          operation.setContext({ response });\n          return response;\n        })\n        .then(parseAndCheckHttpResponse(operation))\n        .then(result => {\n          // we have data and can send it to back up the link chain\n          observer.next(result);\n          observer.complete();\n          return result;\n        })\n        .catch(err => {\n          // fetch was cancelled so it's already been cleaned up in the unsubscribe\n          if (err.name === 'AbortError') return;\n          // if it is a network error, BUT there is graphql result info\n          // fire the next observer before calling error\n          // this gives apollo-client (and react-apollo) the `graphqlErrors` and `networErrors`\n          // to pass to UI\n          // this should only happen if we *also* have data as part of the response key per\n          // the spec\n          if (err.result && err.result.errors && err.result.data) {\n            // if we don't call next, the UI can only show networkError because AC didn't\n            // get any graphqlErrors\n            // this is graphql execution result info (i.e errors and possibly data)\n            // this is because there is no formal spec how errors should translate to\n            // http status codes. So an auth error (401) could have both data\n            // from a public field, errors from a private field, and a status of 401\n            // {\n            //  user { // this will have errors\n            //    firstName\n            //  }\n            //  products { // this is public so will have data\n            //    cost\n            //  }\n            // }\n            //\n            // the result of above *could* look like this:\n            // {\n            //   data: { products: [{ cost: \"$10\" }] },\n            //   errors: [{\n            //      message: 'your session has timed out',\n            //      path: []\n            //   }]\n            // }\n            // status code of above would be a 401\n            // in the UI you want to show data where you can, errors as data where you can\n            // and use correct http status codes\n            observer.next(err.result);\n          }\n          observer.error(err);\n        });\n\n      return () => {\n        // XXX support canceling this request\n        // https://developers.google.com/web/updates/2017/09/abortable-fetch\n        if (controller) controller.abort();\n      };\n    });\n  });\n};\n", "import { serializeFetchParameter } from './serializeFetchParameter';\nimport { Body } from './selectHttpOptionsAndBody';\n\n// For GET operations, returns the given URI rewritten with parameters, or a\n// parse error.\nexport function rewriteURIForGET(chosenURI: string, body: Body) {\n  // Implement the standard HTTP GET serialization, plus 'extensions'. Note\n  // the extra level of JSON serialization!\n  const queryParams: string[] = [];\n  const addQueryParam = (key: string, value: string) => {\n    queryParams.push(`${key}=${encodeURIComponent(value)}`);\n  };\n\n  if ('query' in body) {\n    addQueryParam('query', body.query!);\n  }\n  if (body.operationName) {\n    addQueryParam('operationName', body.operationName);\n  }\n  if (body.variables) {\n    let serializedVariables;\n    try {\n      serializedVariables = serializeFetchParameter(\n        body.variables,\n        'Variables map',\n      );\n    } catch (parseError) {\n      return { parseError };\n    }\n    addQueryParam('variables', serializedVariables);\n  }\n  if (body.extensions) {\n    let serializedExtensions;\n    try {\n      serializedExtensions = serializeFetchParameter(\n        body.extensions,\n        'Extensions map',\n      );\n    } catch (parseError) {\n      return { parseError };\n    }\n    addQueryParam('extensions', serializedExtensions);\n  }\n\n  // Reconstruct the URI with added query params.\n  // XXX This assumes that the URI is well-formed and that it doesn't\n  //     already contain any of these query params. We could instead use the\n  //     URL API and take a polyfill (whatwg-url@6) for older browsers that\n  //     don't support URLSearchParams. Note that some browsers (and\n  //     versions of whatwg-url) support URL but not URLSearchParams!\n  let fragment = '',\n    preFragment = chosenURI;\n  const fragmentStart = chosenURI.indexOf('#');\n  if (fragmentStart !== -1) {\n    fragment = chosenURI.substr(fragmentStart);\n    preFragment = chosenURI.substr(0, fragmentStart);\n  }\n  const queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n  const newURI =\n    preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n  return { newURI };\n}\n", "import { ApolloLink, RequestHandler } from '../core';\nimport { HttpOptions } from './selectHttpOptionsAndBody';\nimport { createHttpLink } from './createHttpLink';\n\nexport class HttpLink extends ApolloLink {\n  public requester: RequestHandler;\n  constructor(public options: HttpOptions = {}) {\n    super(createHttpLink(options).request);\n  }\n}\n", "const { toString, hasOwnProperty } = Object.prototype;\nconst fnToStr = Function.prototype.toString;\nconst previousComparisons = new Map<object, Set<object>>();\n\n/**\n * Performs a deep equality check on two JavaScript values, tolerating cycles.\n */\nexport function equal(a: any, b: any): boolean {\n  try {\n    return check(a, b);\n  } finally {\n    previousComparisons.clear();\n  }\n}\n\n// Allow default imports as well.\nexport default equal;\n\nfunction check(a: any, b: any): boolean {\n  // If the two values are strictly equal, our job is easy.\n  if (a === b) {\n    return true;\n  }\n\n  // Object.prototype.toString returns a representation of the runtime type of\n  // the given value that is considerably more precise than typeof.\n  const aTag = toString.call(a);\n  const bTag = toString.call(b);\n\n  // If the runtime types of a and b are different, they could maybe be equal\n  // under some interpretation of equality, but for simplicity and performance\n  // we just return false instead.\n  if (aTag !== bTag) {\n    return false;\n  }\n\n  switch (aTag) {\n    case '[object Array]':\n      // Arrays are a lot like other objects, but we can cheaply compare their\n      // lengths as a short-cut before comparing their elements.\n      if (a.length !== b.length) return false;\n      // Fall through to object case...\n    case '[object Object]': {\n      if (previouslyCompared(a, b)) return true;\n\n      const aKeys = definedKeys(a);\n      const bKeys = definedKeys(b);\n\n      // If `a` and `b` have a different number of enumerable keys, they\n      // must be different.\n      const keyCount = aKeys.length;\n      if (keyCount !== bKeys.length) return false;\n\n      // Now make sure they have the same keys.\n      for (let k = 0; k < keyCount; ++k) {\n        if (!hasOwnProperty.call(b, aKeys[k])) {\n          return false;\n        }\n      }\n\n      // Finally, check deep equality of all child properties.\n      for (let k = 0; k < keyCount; ++k) {\n        const key = aKeys[k];\n        if (!check(a[key], b[key])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    case '[object Error]':\n      return a.name === b.name && a.message === b.message;\n\n    case '[object Number]':\n      // Handle NaN, which is !== itself.\n      if (a !== a) return b !== b;\n      // Fall through to shared +a === +b case...\n    case '[object Boolean]':\n    case '[object Date]':\n      return +a === +b;\n\n    case '[object RegExp]':\n    case '[object String]':\n      return a == `${b}`;\n\n    case '[object Map]':\n    case '[object Set]': {\n      if (a.size !== b.size) return false;\n      if (previouslyCompared(a, b)) return true;\n\n      const aIterator = a.entries();\n      const isMap = aTag === '[object Map]';\n\n      while (true) {\n        const info = aIterator.next();\n        if (info.done) break;\n\n        // If a instanceof Set, aValue === aKey.\n        const [aKey, aValue] = info.value;\n\n        // So this works the same way for both Set and Map.\n        if (!b.has(aKey)) {\n          return false;\n        }\n\n        // However, we care about deep equality of values only when dealing\n        // with Map structures.\n        if (isMap && !check(aValue, b.get(aKey))) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    case '[object AsyncFunction]':\n    case '[object GeneratorFunction]':\n    case '[object AsyncGeneratorFunction]':\n    case '[object Function]': {\n      const aCode = fnToStr.call(a);\n      if (aCode !== fnToStr.call(b)) {\n        return false;\n      }\n\n      // We consider non-native functions equal if they have the same code\n      // (native functions require === because their code is censored).\n      // Note that this behavior is not entirely sound, since !== function\n      // objects with the same code can behave differently depending on\n      // their closure scope. However, any function can behave differently\n      // depending on the values of its input arguments (including this)\n      // and its calling context (including its closure scope), even\n      // though the function object is === to itself; and it is entirely\n      // possible for functions that are not === to behave exactly the\n      // same under all conceivable circumstances. Because none of these\n      // factors are statically decidable in JavaScript, JS function\n      // equality is not well-defined. This ambiguity allows us to\n      // consider the best possible heuristic among various imperfect\n      // options, and equating non-native functions that have the same\n      // code has enormous practical benefits, such as when comparing\n      // functions that are repeatedly passed as fresh function\n      // expressions within objects that are otherwise deeply equal. Since\n      // any function created from the same syntactic expression (in the\n      // same code location) will always stringify to the same code\n      // according to fnToStr.call, we can reasonably expect these\n      // repeatedly passed function expressions to have the same code, and\n      // thus behave \"the same\" (with all the caveats mentioned above),\n      // even though the runtime function objects are !== to one another.\n      return !endsWith(aCode, nativeCodeSuffix);\n    }\n  }\n\n  // Otherwise the values are not equal.\n  return false;\n}\n\nfunction definedKeys<TObject extends object>(obj: TObject) {\n  // Remember that the second argument to Array.prototype.filter will be\n  // used as `this` within the callback function.\n  return Object.keys(obj).filter(isDefinedKey, obj);\n}\nfunction isDefinedKey<TObject extends object>(\n  this: TObject,\n  key: keyof TObject,\n) {\n  return this[key] !== void 0;\n}\n\nconst nativeCodeSuffix = \"{ [native code] }\";\n\nfunction endsWith(full: string, suffix: string) {\n  const fromIndex = full.length - suffix.length;\n  return fromIndex >= 0 &&\n    full.indexOf(suffix, fromIndex) === fromIndex;\n}\n\nfunction previouslyCompared(a: object, b: object): boolean {\n  // Though cyclic references can make an object graph appear infinite from the\n  // perspective of a depth-first traversal, the graph still contains a finite\n  // number of distinct object references. We use the previousComparisons cache\n  // to avoid comparing the same pair of object references more than once, which\n  // guarantees termination (even if we end up comparing every object in one\n  // graph to every object in the other graph, which is extremely unlikely),\n  // while still allowing weird isomorphic structures (like rings with different\n  // lengths) a chance to pass the equality test.\n  let bSet = previousComparisons.get(a);\n  if (bSet) {\n    // Return true here because we can be sure false will be returned somewhere\n    // else if the objects are not equivalent.\n    if (bSet.has(b)) return true;\n  } else {\n    previousComparisons.set(a, bSet = new Set);\n  }\n  bSet.add(b);\n  return false;\n}\n", "import { GraphQLError } from 'graphql';\n\nimport { isNonEmptyArray } from '../utilities';\nimport { ServerParseError } from '../link/http';\nimport { ServerError } from '../link/utils';\n\nexport function isApolloError(err: Error): err is ApolloError {\n  return err.hasOwnProperty('graphQLErrors');\n}\n\n// Sets the error message on this error according to the\n// the GraphQL and network errors that are present.\n// If the error message has already been set through the\n// constructor or otherwise, this function is a nop.\nconst generateErrorMessage = (err: ApolloError) => {\n  let message = '';\n  // If we have GraphQL errors present, add that to the error message.\n  if (isNonEmptyArray(err.graphQLErrors)) {\n    err.graphQLErrors.forEach((graphQLError: GraphQLError) => {\n      const errorMessage = graphQLError\n        ? graphQLError.message\n        : 'Error message not found.';\n      message += `${errorMessage}\\n`;\n    });\n  }\n\n  if (err.networkError) {\n    message += `${err.networkError.message}\\n`;\n  }\n\n  // strip newline from the end of the message\n  message = message.replace(/\\n$/, '');\n  return message;\n};\n\nexport class ApolloError extends Error {\n  public message: string;\n  public graphQLErrors: ReadonlyArray<GraphQLError>;\n  public networkError: Error | ServerParseError | ServerError | null;\n\n  // An object that can be used to provide some additional information\n  // about an error, e.g. specifying the type of error this is. Used\n  // internally within Apollo Client.\n  public extraInfo: any;\n\n  // Constructs an instance of ApolloError given a GraphQLError\n  // or a network error. Note that one of these has to be a valid\n  // value or the constructed error will be meaningless.\n  constructor({\n    graphQLErrors,\n    networkError,\n    errorMessage,\n    extraInfo,\n  }: {\n    graphQLErrors?: ReadonlyArray<GraphQLError>;\n    networkError?: Error | ServerParseError | ServerError | null;\n    errorMessage?: string;\n    extraInfo?: any;\n  }) {\n    super(errorMessage);\n    this.graphQLErrors = graphQLErrors || [];\n    this.networkError = networkError || null;\n    this.message = errorMessage || generateErrorMessage(this);\n    this.extraInfo = extraInfo;\n\n    // We're not using `Object.setPrototypeOf` here as it isn't fully\n    // supported on Android (see issue #3236).\n    (this as any).__proto__ = ApolloError.prototype;\n  }\n}\n", "/**\n * The current status of a query\u2019s execution in our system.\n */\nexport enum NetworkStatus {\n  /**\n   * The query has never been run before and the query is now currently running. A query will still\n   * have this network status even if a partial data result was returned from the cache, but a\n   * query was dispatched anyway.\n   */\n  loading = 1,\n\n  /**\n   * If `setVariables` was called and a query was fired because of that then the network status\n   * will be `setVariables` until the result of that query comes back.\n   */\n  setVariables = 2,\n\n  /**\n   * Indicates that `fetchMore` was called on this query and that the query created is currently in\n   * flight.\n   */\n  fetchMore = 3,\n\n  /**\n   * Similar to the `setVariables` network status. It means that `refetch` was called on a query\n   * and the refetch request is currently in flight.\n   */\n  refetch = 4,\n\n  /**\n   * Indicates that a polling query is currently in flight. So for example if you are polling a\n   * query every 10 seconds then the network status will switch to `poll` every 10 seconds whenever\n   * a poll request has been sent but not resolved.\n   */\n  poll = 6,\n\n  /**\n   * No request is in flight for this query, and no errors happened. Everything is OK.\n   */\n  ready = 7,\n\n  /**\n   * No request is in flight for this query, but one or more errors were detected.\n   */\n  error = 8,\n}\n\n/**\n * Returns true if there is currently a network request in flight according to a given network\n * status.\n */\nexport function isNetworkRequestInFlight(\n  networkStatus?: NetworkStatus,\n): boolean {\n  return networkStatus ? networkStatus < 7 : false;\n}\n", "import { WatchQueryOptions } from './watchQueryOptions';\nimport { NetworkStatus } from './networkStatus';\nimport { ApolloQueryResult } from './types';\nimport { Observer, Concast, compact } from '../utilities';\nimport { invariant } from 'ts-invariant';\n\n// Given that QueryManager#fetchQueryObservable returns only a single\n// query's worth of results, other code must be responsible for repeatedly\n// calling fetchQueryObservable, while ensuring that the ObservableQuery\n// consuming those results remains subscribed to the concatenation of all\n// the observables returned by fetchQueryObservable. That responsibility\n// falls to this Reobserver class. As a bonus, the Reobserver class is\n// perfectly poised to handle polling logic, since polling is essentially\n// repeated reobservation. In principle, this code could have remained in\n// the ObservableQuery class, but I felt it would be easier to explain and\n// understand reobservation if it was confined to a separate class.\nexport class Reobserver<TData, TVars> {\n  constructor(\n    private observer: Observer<ApolloQueryResult<TData>>,\n    private options: WatchQueryOptions<TVars, TData>,\n    // Almost certainly just a wrapper function around\n    // QueryManager#fetchQueryObservable, but this small dose of\n    // indirection means the Reobserver doesn't have to know/assume\n    // anything about the QueryManager class.\n    private fetch: (\n      options: WatchQueryOptions<TVars, TData>,\n      newNetworkStatus?: NetworkStatus,\n    ) => Concast<ApolloQueryResult<TData>>,\n    // If we're polling, there may be times when we should avoid fetching,\n    // such as when the query is already in flight, or polling has been\n    // completely disabled for server-side rendering. Passing false for\n    // this parameter disables polling completely, and passing a boolean\n    // function allows determining fetch safety dynamically.\n    private shouldFetch: false | (() => boolean),\n  ) {}\n\n  private concast?: Concast<ApolloQueryResult<TData>>;\n\n  public reobserve(\n    newOptions?: Partial<WatchQueryOptions<TVars, TData>>,\n    newNetworkStatus?: NetworkStatus,\n  ): Promise<ApolloQueryResult<TData>> {\n    if (newOptions) {\n      this.updateOptions(newOptions);\n    } else {\n      // When we call this.updateOptions(newOptions) in the branch above,\n      // it takes care of calling this.updatePolling(). In this branch, we\n      // still need to update polling, even if there were no newOptions.\n      this.updatePolling();\n    }\n\n    const concast = this.fetch(this.options, newNetworkStatus);\n\n    if (this.concast) {\n      // We use the {add,remove}Observer methods directly to avoid\n      // wrapping observer with an unnecessary SubscriptionObserver\n      // object, in part so that we can remove it here without triggering\n      // any unsubscriptions, because we just want to ignore the old\n      // observable, not prematurely shut it down, since other consumers\n      // may be awaiting this.concast.promise.\n      this.concast.removeObserver(this.observer, true);\n    }\n\n    concast.addObserver(this.observer);\n\n    return (this.concast = concast).promise;\n  }\n\n  public updateOptions(newOptions: Partial<WatchQueryOptions<TVars, TData>>) {\n    Object.assign(this.options, compact(newOptions));\n    this.updatePolling();\n    return this;\n  }\n\n  public stop() {\n    if (this.concast) {\n      this.concast.removeObserver(this.observer);\n      delete this.concast;\n    }\n\n    if (this.pollingInfo) {\n      clearTimeout(this.pollingInfo.timeout);\n      this.options.pollInterval = 0;\n      this.updatePolling();\n    }\n  }\n\n  private pollingInfo?: {\n    interval: number;\n    timeout: ReturnType<typeof setTimeout>;\n  };\n\n  // Turns polling on or off based on this.options.pollInterval.\n  private updatePolling() {\n    const {\n      pollingInfo,\n      options: {\n        pollInterval,\n      },\n    } = this;\n\n    if (!pollInterval) {\n      if (pollingInfo) {\n        clearTimeout(pollingInfo.timeout);\n        delete this.pollingInfo;\n      }\n      return;\n    }\n\n    if (pollingInfo &&\n        pollingInfo.interval === pollInterval) {\n      return;\n    }\n\n    invariant(\n      pollInterval,\n      'Attempted to start a polling query without a polling interval.',\n    );\n\n    // Go no further if polling is disabled.\n    if (this.shouldFetch === false) {\n      return;\n    }\n\n    const info = pollingInfo || (\n      this.pollingInfo = {} as Reobserver<TData, TVars>[\"pollingInfo\"]\n    )!;\n\n    info.interval = pollInterval;\n\n    const maybeFetch = () => {\n      if (this.pollingInfo) {\n        if (this.shouldFetch && this.shouldFetch()) {\n          this.reobserve({\n            fetchPolicy: \"network-only\",\n            nextFetchPolicy: this.options.fetchPolicy || \"cache-first\",\n          }, NetworkStatus.poll).then(poll, poll);\n        } else {\n          poll();\n        }\n      };\n    };\n\n    const poll = () => {\n      const info = this.pollingInfo;\n      if (info) {\n        clearTimeout(info.timeout);\n        info.timeout = setTimeout(maybeFetch, info.interval);\n      }\n    };\n\n    poll();\n  }\n}\n", "import { invariant } from 'ts-invariant';\nimport { equal } from '@wry/equality';\n\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport {\n  cloneDeep,\n  getOperationDefinition,\n  Observable,\n  Observer,\n  ObservableSubscription,\n  iterateObserversSafely,\n  isNonEmptyArray,\n  fixObservableSubclass,\n} from '../utilities';\nimport { ApolloError } from '../errors';\nimport { QueryManager } from './QueryManager';\nimport { ApolloQueryResult, OperationVariables } from './types';\nimport {\n  WatchQueryOptions,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n} from './watchQueryOptions';\nimport { Reobserver } from './Reobserver';\nimport { QueryInfo } from './QueryInfo';\n\nexport interface FetchMoreOptions<\n  TData = any,\n  TVariables = OperationVariables\n> {\n  updateQuery?: (\n    previousQueryResult: TData,\n    options: {\n      fetchMoreResult?: TData;\n      variables?: TVariables;\n    },\n  ) => TData;\n}\n\nexport interface UpdateQueryOptions<TVariables> {\n  variables?: TVariables;\n}\n\nlet warnedAboutUpdateQuery = false;\n\nexport class ObservableQuery<\n  TData = any,\n  TVariables = OperationVariables\n> extends Observable<ApolloQueryResult<TData>> {\n  public readonly options: WatchQueryOptions<TVariables, TData>;\n  public readonly queryId: string;\n  public readonly queryName?: string;\n\n  // Computed shorthand for this.options.variables, preserved for\n  // backwards compatibility.\n  public get variables(): TVariables | undefined {\n    return this.options.variables;\n  }\n\n  private isTornDown: boolean;\n  private queryManager: QueryManager<any>;\n  private observers = new Set<Observer<ApolloQueryResult<TData>>>();\n  private subscriptions = new Set<ObservableSubscription>();\n\n  private lastResult: ApolloQueryResult<TData>;\n  private lastResultSnapshot: ApolloQueryResult<TData>;\n  private lastError: ApolloError;\n  private queryInfo: QueryInfo;\n\n  constructor({\n    queryManager,\n    queryInfo,\n    options,\n  }: {\n    queryManager: QueryManager<any>;\n    queryInfo: QueryInfo;\n    options: WatchQueryOptions<TVariables, TData>;\n  }) {\n    super((observer: Observer<ApolloQueryResult<TData>>) =>\n      this.onSubscribe(observer),\n    );\n\n    // active state\n    this.isTornDown = false;\n\n    // query information\n    this.options = options;\n    this.queryId = queryManager.generateQueryId();\n\n    const opDef = getOperationDefinition(options.query);\n    this.queryName = opDef && opDef.name && opDef.name.value;\n\n    // related classes\n    this.queryManager = queryManager;\n\n    this.queryInfo = queryInfo;\n  }\n\n  public result(): Promise<ApolloQueryResult<TData>> {\n    return new Promise((resolve, reject) => {\n      const observer: Observer<ApolloQueryResult<TData>> = {\n        next: (result: ApolloQueryResult<TData>) => {\n          resolve(result);\n\n          // Stop the query within the QueryManager if we can before\n          // this function returns.\n          //\n          // We do this in order to prevent observers piling up within\n          // the QueryManager. Notice that we only fully unsubscribe\n          // from the subscription in a setTimeout(..., 0)  call. This call can\n          // actually be handled by the browser at a much later time. If queries\n          // are fired in the meantime, observers that should have been removed\n          // from the QueryManager will continue to fire, causing an unnecessary\n          // performance hit.\n          this.observers.delete(observer);\n          if (!this.observers.size) {\n            this.queryManager.removeQuery(this.queryId);\n          }\n\n          setTimeout(() => {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject,\n      };\n      const subscription = this.subscribe(observer);\n    });\n  }\n\n  public getCurrentResult(saveAsLastResult = true): ApolloQueryResult<TData> {\n    const { lastResult } = this;\n\n    const networkStatus =\n      this.queryInfo.networkStatus ||\n      (lastResult && lastResult.networkStatus) ||\n      NetworkStatus.ready;\n\n    const result: ApolloQueryResult<TData> = {\n      ...lastResult,\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus,\n    };\n\n    if (this.isTornDown) {\n      return result;\n    }\n\n    const { fetchPolicy = 'cache-first' } = this.options;\n    if (fetchPolicy === 'no-cache' ||\n        fetchPolicy === 'network-only') {\n      // Similar to setting result.partial to false, but taking advantage\n      // of the falsiness of missing fields.\n      delete result.partial;\n    } else if (\n      !result.data ||\n      // If this.options.query has @client(always: true) fields, we cannot\n      // trust result.data, since it was read from the cache without\n      // running local resolvers (and it's too late to run resolvers now,\n      // since we must return a result synchronously). TODO In the future\n      // (after Apollo Client 3.0), we should find a way to trust\n      // this.lastResult in more cases, and read from the cache only in\n      // cases when no result has been received yet.\n      !this.queryManager.transform(this.options.query).hasForcedResolvers\n    ) {\n      const diff = this.queryInfo.getDiff();\n      result.data = (\n        diff.complete ||\n        this.options.returnPartialData\n      ) ? diff.result : void 0;\n      if (diff.complete) {\n        // If the diff is complete, and we're using a FetchPolicy that\n        // terminates after a complete cache read, we can assume the next\n        // result we receive will have NetworkStatus.ready and !loading.\n        if (result.networkStatus === NetworkStatus.loading &&\n            (fetchPolicy === 'cache-first' ||\n             fetchPolicy === 'cache-only')) {\n          result.networkStatus = NetworkStatus.ready;\n          result.loading = false;\n        }\n        delete result.partial;\n      } else {\n        result.partial = true;\n      }\n    }\n\n    if (saveAsLastResult) {\n      this.updateLastResult(result);\n    }\n\n    return result;\n  }\n\n  // Compares newResult to the snapshot we took of this.lastResult when it was\n  // first received.\n  public isDifferentFromLastResult(newResult: ApolloQueryResult<TData>) {\n    return !equal(this.lastResultSnapshot, newResult);\n  }\n\n  // Returns the last result that observer.next was called with. This is not the same as\n  // getCurrentResult! If you're not sure which you need, then you probably need getCurrentResult.\n  public getLastResult(): ApolloQueryResult<TData> {\n    return this.lastResult;\n  }\n\n  public getLastError(): ApolloError {\n    return this.lastError;\n  }\n\n  public resetLastResults(): void {\n    delete this.lastResult;\n    delete this.lastResultSnapshot;\n    delete this.lastError;\n    this.isTornDown = false;\n  }\n\n  public resetQueryStoreErrors() {\n    this.queryManager.resetErrors(this.queryId);\n  }\n\n  /**\n   * Update the variables of this observable query, and fetch the new results.\n   * This method should be preferred over `setVariables` in most use cases.\n   *\n   * @param variables: The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public refetch(variables?: Partial<TVariables>): Promise<ApolloQueryResult<TData>> {\n    const reobserveOptions: Partial<WatchQueryOptions<TVariables, TData>> = {\n      // Always disable polling for refetches.\n      pollInterval: 0,\n    };\n\n    // Unless the provided fetchPolicy always consults the network\n    // (no-cache, network-only, or cache-and-network), override it with\n    // network-only to force the refetch for this fetchQuery call.\n    const { fetchPolicy } = this.options;\n    if (fetchPolicy !== 'no-cache' &&\n        fetchPolicy !== 'cache-and-network') {\n      reobserveOptions.fetchPolicy = 'network-only';\n      // Go back to the original options.fetchPolicy after this refetch.\n      reobserveOptions.nextFetchPolicy = fetchPolicy || \"cache-first\";\n    }\n\n    if (variables && !equal(this.options.variables, variables)) {\n      // Update the existing options with new variables\n      reobserveOptions.variables = this.options.variables = {\n        ...this.options.variables,\n        ...variables,\n      } as TVariables;\n    }\n\n    return this.newReobserver(false).reobserve(\n      reobserveOptions,\n      NetworkStatus.refetch,\n    );\n  }\n\n  public fetchMore<K extends keyof TVariables>(\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, K, TData> &\n      FetchMoreOptions<TData, TVariables>,\n  ): Promise<ApolloQueryResult<TData>> {\n    const combinedOptions = {\n      ...(fetchMoreOptions.query ? fetchMoreOptions : {\n        ...this.options,\n        ...fetchMoreOptions,\n        variables: {\n          ...this.options.variables,\n          ...fetchMoreOptions.variables,\n        },\n      }),\n      // The fetchMore request goes immediately to the network and does\n      // not automatically write its result to the cache (hence no-cache\n      // instead of network-only), because we allow the caller of\n      // fetchMore to provide an updateQuery callback that determines how\n      // the data gets written to the cache.\n      fetchPolicy: \"no-cache\",\n    } as WatchQueryOptions;\n\n    const qid = this.queryManager.generateQueryId();\n\n    // Simulate a loading result for the original query with\n    // result.networkStatus === NetworkStatus.fetchMore.\n    if (combinedOptions.notifyOnNetworkStatusChange) {\n      this.queryInfo.networkStatus = NetworkStatus.fetchMore;\n      this.observe();\n    }\n\n    return this.queryManager.fetchQuery(\n      qid,\n      combinedOptions,\n      NetworkStatus.fetchMore,\n    ).then(fetchMoreResult => {\n      const data = fetchMoreResult.data as TData;\n      const { updateQuery } = fetchMoreOptions;\n\n      if (updateQuery) {\n        if (process.env.NODE_ENV !== \"production\" &&\n            !warnedAboutUpdateQuery) {\n          invariant.warn(\n`The updateQuery callback for fetchMore is deprecated, and will be removed\nin the next major version of Apollo Client.\n\nPlease convert updateQuery functions to field policies with appropriate\nread and merge functions, or use/adapt a helper function (such as\nconcatPagination, offsetLimitPagination, or relayStylePagination) from\n@apollo/client/utilities.\n\nThe field policy system handles pagination more effectively than a\nhand-written updateQuery function, and you only need to define the policy\nonce, rather than every time you call fetchMore.`);\n          warnedAboutUpdateQuery = true;\n        }\n        this.updateQuery(previous => updateQuery(previous, {\n          fetchMoreResult: data,\n          variables: combinedOptions.variables as TVariables,\n        }));\n      } else {\n        // If we're using a field policy instead of updateQuery, the only\n        // thing we need to do is write the new data to the cache using\n        // combinedOptions.variables (instead of this.variables, which is\n        // what this.updateQuery uses, because it works by abusing the\n        // original field value, keyed by the original variables).\n        this.queryManager.cache.writeQuery({\n          query: combinedOptions.query,\n          variables: combinedOptions.variables,\n          data,\n        });\n      }\n\n      return fetchMoreResult as ApolloQueryResult<TData>;\n\n    }).finally(() => {\n      this.queryManager.stopQuery(qid);\n      this.reobserve();\n    });\n  }\n\n  // XXX the subscription variables are separate from the query variables.\n  // if you want to update subscription variables, right now you have to do that separately,\n  // and you can only do it by stopping the subscription and then subscribing again with new variables.\n  public subscribeToMore<\n    TSubscriptionData = TData,\n    TSubscriptionVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >,\n  ) {\n    const subscription = this.queryManager\n      .startGraphQLSubscription({\n        query: options.document,\n        variables: options.variables,\n        context: options.context,\n      })\n      .subscribe({\n        next: (subscriptionData: { data: TSubscriptionData }) => {\n          const { updateQuery } = options;\n          if (updateQuery) {\n            this.updateQuery<TSubscriptionVariables>(\n              (previous, { variables }) =>\n                updateQuery(previous, {\n                  subscriptionData,\n                  variables,\n                }),\n            );\n          }\n        },\n        error: (err: any) => {\n          if (options.onError) {\n            options.onError(err);\n            return;\n          }\n          invariant.error('Unhandled GraphQL subscription error', err);\n        },\n      });\n\n    this.subscriptions.add(subscription);\n\n    return () => {\n      if (this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  }\n\n  public setOptions(\n    newOptions: Partial<WatchQueryOptions<TVariables, TData>>,\n  ): Promise<ApolloQueryResult<TData>> {\n    return this.reobserve(newOptions);\n  }\n\n  /**\n   * This is for *internal* use only. Most users should instead use `refetch`\n   * in order to be properly notified of results even when they come from cache.\n   *\n   * Update the variables of this observable query, and fetch the new results\n   * if they've changed. If you want to force new results, use `refetch`.\n   *\n   * Note: the `next` callback will *not* fire if the variables have not changed\n   * or if the result is coming from cache.\n   *\n   * Note: the promise will return the old results immediately if the variables\n   * have not changed.\n   *\n   * Note: the promise will return null immediately if the query is not active\n   * (there are no subscribers).\n   *\n   * @private\n   *\n   * @param variables: The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   *\n   * @param tryFetch: Try and fetch new results even if the variables haven't\n   * changed (we may still just hit the store, but if there's nothing in there\n   * this will refetch)\n   */\n  public setVariables(\n    variables: TVariables,\n  ): Promise<ApolloQueryResult<TData> | void> {\n    if (equal(this.variables, variables)) {\n      // If we have no observers, then we don't actually want to make a network\n      // request. As soon as someone observes the query, the request will kick\n      // off. For now, we just store any changes. (See #1077)\n      return this.observers.size\n        ? this.result()\n        : Promise.resolve();\n    }\n\n    this.options.variables = variables;\n\n    // See comment above\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n\n    let { fetchPolicy = 'cache-first' } = this.options;\n    const reobserveOptions: Partial<WatchQueryOptions<TVariables, TData>> = {\n      fetchPolicy,\n      variables,\n    };\n\n    if (fetchPolicy !== 'cache-first' &&\n        fetchPolicy !== 'no-cache' &&\n        fetchPolicy !== 'network-only') {\n      reobserveOptions.fetchPolicy = 'cache-and-network';\n      reobserveOptions.nextFetchPolicy = fetchPolicy;\n    }\n\n    return this.reobserve(\n      reobserveOptions,\n      NetworkStatus.setVariables,\n    );\n  }\n\n  public updateQuery<TVars = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: Pick<WatchQueryOptions<TVars, TData>, \"variables\">,\n    ) => TData,\n  ): void {\n    const { queryManager } = this;\n    const { result } = queryManager.cache.diff<TData>({\n      query: this.options.query,\n      variables: this.variables,\n      previousResult: this.lastResult?.data,\n      returnPartialData: true,\n      optimistic: false,\n    });\n\n    const newResult = mapFn(result!, {\n      variables: (this as any).variables,\n    });\n\n    if (newResult) {\n      queryManager.cache.writeQuery({\n        query: this.options.query,\n        data: newResult,\n        variables: this.variables,\n      });\n\n      queryManager.broadcastQueries();\n    }\n  }\n\n  public startPolling(pollInterval: number) {\n    this.getReobserver().updateOptions({ pollInterval });\n  }\n\n  public stopPolling() {\n    if (this.reobserver) {\n      this.reobserver.updateOptions({ pollInterval: 0 });\n    }\n  }\n\n  private updateLastResult(newResult: ApolloQueryResult<TData>) {\n    const previousResult = this.lastResult;\n    this.lastResult = newResult;\n    this.lastResultSnapshot = this.queryManager.assumeImmutableResults\n      ? newResult\n      : cloneDeep(newResult);\n    if (!isNonEmptyArray(newResult.errors)) {\n      delete this.lastError;\n    }\n    return previousResult;\n  }\n\n  private onSubscribe(observer: Observer<ApolloQueryResult<TData>>) {\n    // Subscribing using this.observer will create an infinite notificaion\n    // loop, but the intent of broadcasting results to all the other\n    // this.observers can be satisfied without doing anything, which is\n    // why we do not bother throwing an error here.\n    if (observer === this.observer) {\n      return () => {};\n    }\n\n    // Zen Observable has its own error function, so in order to log correctly\n    // we need to provide a custom error callback.\n    try {\n      var subObserver = (observer as any)._subscription._observer;\n      if (subObserver && !subObserver.error) {\n        subObserver.error = defaultSubscriptionObserverErrorCallback;\n      }\n    } catch {}\n\n    const first = !this.observers.size;\n    this.observers.add(observer);\n\n    // Deliver most recent error or result.\n    if (this.lastError) {\n      observer.error && observer.error(this.lastError);\n    } else if (this.lastResult) {\n      observer.next && observer.next(this.lastResult);\n    }\n\n    // Initiate observation of this query if it hasn't been reported to\n    // the QueryManager yet.\n    if (first) {\n      this.reobserve().catch(_ => {\n        // Blindly catching here prevents unhandled promise rejections,\n        // and is safe because the ObservableQuery handles this error with\n        // this.observer.error, so we're not just swallowing the error by\n        // ignoring it here.\n      });\n    }\n\n    return () => {\n      if (this.observers.delete(observer) && !this.observers.size) {\n        this.tearDownQuery();\n      }\n    };\n  }\n\n  private reobserver?: Reobserver<TData, TVariables>;\n\n  private getReobserver(): Reobserver<TData, TVariables> {\n    return this.reobserver || (this.reobserver = this.newReobserver(true));\n  }\n\n  private newReobserver(shareOptions: boolean) {\n    const { queryManager, queryId } = this;\n    queryManager.setObservableQuery(this);\n    return new Reobserver<TData, TVariables>(\n      this.observer,\n      // Sharing options allows this.reobserver.options to be ===\n      // this.options, so we don't have to worry about synchronizing the\n      // properties of two distinct objects.\n      shareOptions ? this.options : { ...this.options },\n      (currentOptions, newNetworkStatus) => {\n        queryManager.setObservableQuery(this);\n        return queryManager.fetchQueryObservable(\n          queryId,\n          currentOptions,\n          newNetworkStatus,\n        );\n      },\n      // Avoid polling during SSR and when the query is already in flight.\n      !queryManager.ssrMode && (\n        () => !isNetworkRequestInFlight(this.queryInfo.networkStatus))\n    );\n  }\n\n  public reobserve(\n    newOptions?: Partial<WatchQueryOptions<TVariables, TData>>,\n    newNetworkStatus?: NetworkStatus,\n  ): Promise<ApolloQueryResult<TData>> {\n    this.isTornDown = false;\n    return this.getReobserver().reobserve(newOptions, newNetworkStatus);\n  }\n\n  // Pass the current result to this.observer.next without applying any\n  // fetch policies, bypassing the Reobserver.\n  private observe() {\n    // Passing false is important so that this.getCurrentResult doesn't\n    // save the fetchMore result as this.lastResult, causing it to be\n    // ignored due to the this.isDifferentFromLastResult check in\n    // this.observer.next.\n    this.observer.next(this.getCurrentResult(false));\n  }\n\n  private observer = {\n    next: (result: ApolloQueryResult<TData>) => {\n      if (this.lastError || this.isDifferentFromLastResult(result)) {\n        this.updateLastResult(result);\n        iterateObserversSafely(this.observers, 'next', result);\n      }\n    },\n\n    error: (error: ApolloError) => {\n      // Since we don't get the current result on errors, only the error, we\n      // must mirror the updates that occur in QueryStore.markQueryError here\n      this.updateLastResult({\n        ...this.lastResult,\n        error,\n        errors: error.graphQLErrors,\n        networkStatus: NetworkStatus.error,\n        loading: false,\n      });\n\n      iterateObserversSafely(this.observers, 'error', this.lastError = error);\n    },\n  };\n\n  public hasObservers() {\n    return this.observers.size > 0;\n  }\n\n  private tearDownQuery() {\n    if (this.isTornDown) return;\n\n    if (this.reobserver) {\n      this.reobserver.stop();\n      delete this.reobserver;\n    }\n\n    // stop all active GraphQL subscriptions\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n    this.subscriptions.clear();\n\n    this.queryManager.stopQuery(this.queryId);\n\n    this.observers.clear();\n\n    this.isTornDown = true;\n  }\n}\n\n// Necessary because the ObservableQuery constructor has a different\n// signature than the Observable constructor.\nfixObservableSubclass(ObservableQuery);\n\nfunction defaultSubscriptionObserverErrorCallback(error: ApolloError) {\n  invariant.error('Unhandled error', error.message, error.stack);\n}\n", "// A [trie](https://en.wikipedia.org/wiki/Trie) data structure that holds\n// object keys weakly, yet can also hold non-object keys, unlike the\n// native `WeakMap`.\n\n// If no makeData function is supplied, the looked-up data will be an empty,\n// null-prototype Object.\nconst defaultMakeData = () => Object.create(null);\n\n// Useful for processing arguments objects as well as arrays.\nconst { forEach, slice } = Array.prototype;\n\nexport class Trie<Data> {\n  // Since a `WeakMap` cannot hold primitive values as keys, we need a\n  // backup `Map` instance to hold primitive keys. Both `this._weakMap`\n  // and `this._strongMap` are lazily initialized.\n  private weak?: WeakMap<any, Trie<Data>>;\n  private strong?: Map<any, Trie<Data>>;\n  private data?: Data;\n\n  constructor(\n    private weakness = true,\n    private makeData: (array: any[]) => Data = defaultMakeData,\n  ) {}\n\n  public lookup<T extends any[]>(...array: T): Data {\n    return this.lookupArray(array);\n  }\n\n  public lookupArray<T extends IArguments | any[]>(array: T): Data {\n    let node: Trie<Data> = this;\n    forEach.call(array, key => node = node.getChildTrie(key));\n    return node.data || (node.data = this.makeData(slice.call(array)));\n  }\n\n  private getChildTrie(key: any) {\n    const map = this.weakness && isObjRef(key)\n      ? this.weak || (this.weak = new WeakMap<any, Trie<Data>>())\n      : this.strong || (this.strong = new Map<any, Trie<Data>>());\n    let child = map.get(key);\n    if (!child) map.set(key, child = new Trie<Data>(this.weakness, this.makeData));\n    return child;\n  }\n}\n\nfunction isObjRef(value: any) {\n  switch (typeof value) {\n  case \"object\":\n    if (value === null) break;\n    // Fall through to return true...\n  case \"function\":\n    return true;\n  }\n  return false;\n}\n", "type Context = {\n  parent: Context | null;\n  slots: { [slotId: string]: any };\n}\n\n// This currentContext variable will only be used if the makeSlotClass\n// function is called, which happens only if this is the first copy of the\n// @wry/context package to be imported.\nlet currentContext: Context | null = null;\n\n// This unique internal object is used to denote the absence of a value\n// for a given Slot, and is never exposed to outside code.\nconst MISSING_VALUE: any = {};\n\nlet idCounter = 1;\n\n// Although we can't do anything about the cost of duplicated code from\n// accidentally bundling multiple copies of the @wry/context package, we can\n// avoid creating the Slot class more than once using makeSlotClass.\nconst makeSlotClass = () => class Slot<TValue> {\n  // If you have a Slot object, you can find out its slot.id, but you cannot\n  // guess the slot.id of a Slot you don't have access to, thanks to the\n  // randomized suffix.\n  public readonly id = [\n    \"slot\",\n    idCounter++,\n    Date.now(),\n    Math.random().toString(36).slice(2),\n  ].join(\":\");\n\n  public hasValue() {\n    for (let context = currentContext; context; context = context.parent) {\n      // We use the Slot object iself as a key to its value, which means the\n      // value cannot be obtained without a reference to the Slot object.\n      if (this.id in context.slots) {\n        const value = context.slots[this.id];\n        if (value === MISSING_VALUE) break;\n        if (context !== currentContext) {\n          // Cache the value in currentContext.slots so the next lookup will\n          // be faster. This caching is safe because the tree of contexts and\n          // the values of the slots are logically immutable.\n          currentContext!.slots[this.id] = value;\n        }\n        return true;\n      }\n    }\n    if (currentContext) {\n      // If a value was not found for this Slot, it's never going to be found\n      // no matter how many times we look it up, so we might as well cache\n      // the absence of the value, too.\n      currentContext.slots[this.id] = MISSING_VALUE;\n    }\n    return false;\n  }\n\n  public getValue(): TValue | undefined {\n    if (this.hasValue()) {\n      return currentContext!.slots[this.id] as TValue;\n    }\n  }\n\n  public withValue<TResult, TArgs extends any[], TThis = any>(\n    value: TValue,\n    callback: (this: TThis, ...args: TArgs) => TResult,\n    // Given the prevalence of arrow functions, specifying arguments is likely\n    // to be much more common than specifying `this`, hence this ordering:\n    args?: TArgs,\n    thisArg?: TThis,\n  ): TResult {\n    const slots = {\n      __proto__: null,\n      [this.id]: value,\n    };\n    const parent = currentContext;\n    currentContext = { parent, slots };\n    try {\n      // Function.prototype.apply allows the arguments array argument to be\n      // omitted or undefined, so args! is fine here.\n      return callback.apply(thisArg!, args!);\n    } finally {\n      currentContext = parent;\n    }\n  }\n\n  // Capture the current context and wrap a callback function so that it\n  // reestablishes the captured context when called.\n  static bind<TArgs extends any[], TResult>(\n    callback: (...args: TArgs) => TResult,\n  ) {\n    const context = currentContext;\n    return function (this: any) {\n      const saved = currentContext;\n      try {\n        currentContext = context;\n        return callback.apply(this, arguments as any);\n      } finally {\n        currentContext = saved;\n      }\n    } as typeof callback;\n  }\n\n  // Immediately run a callback function without any captured context.\n  static noContext<TResult, TArgs extends any[], TThis = any>(\n    callback: (this: TThis, ...args: TArgs) => TResult,\n    // Given the prevalence of arrow functions, specifying arguments is likely\n    // to be much more common than specifying `this`, hence this ordering:\n    args?: TArgs,\n    thisArg?: TThis,\n  ) {\n    if (currentContext) {\n      const saved = currentContext;\n      try {\n        currentContext = null;\n        // Function.prototype.apply allows the arguments array argument to be\n        // omitted or undefined, so args! is fine here.\n        return callback.apply(thisArg!, args!);\n      } finally {\n        currentContext = saved;\n      }\n    } else {\n      return callback.apply(thisArg!, args!);\n    }\n  }\n};\n\n// We store a single global implementation of the Slot class as a permanent\n// non-enumerable symbol property of the Array constructor. This obfuscation\n// does nothing to prevent access to the Slot class, but at least it ensures\n// the implementation (i.e. currentContext) cannot be tampered with, and all\n// copies of the @wry/context package (hopefully just one) will share the\n// same Slot implementation. Since the first copy of the @wry/context package\n// to be imported wins, this technique imposes a very high cost for any\n// future breaking changes to the Slot class.\nconst globalKey = \"@wry/context:Slot\";\nconst host = Array as any;\n\nexport const Slot: ReturnType<typeof makeSlotClass> = host[globalKey] || function () {\n  const Slot = makeSlotClass();\n  try {\n    Object.defineProperty(host, globalKey, {\n      value: host[globalKey] = Slot,\n      enumerable: false,\n      writable: false,\n      configurable: false,\n    });\n  } finally {\n    return Slot;\n  }\n}();\n", "import { Slot } from \"./slot\";\nexport { Slot }\nexport const { bind, noContext } = Slot;\n\n// Relying on the @types/node declaration of global.setTimeout can make\n// things tricky for dowstream projects (see PR #7).\ndeclare function setTimeout(\n  callback: (...args: any[]) => any,\n  ms?: number,\n  ...args: any[]\n): any;\n\n// Like global.setTimeout, except the callback runs with captured context.\nexport { setTimeoutWithContext as setTimeout };\nfunction setTimeoutWithContext(callback: () => any, delay: number) {\n  return setTimeout(bind(callback), delay);\n}\n\n// Turn any generator function into an async function (using yield instead\n// of await), with context automatically preserved across yields.\nexport function asyncFromGen<TArgs extends any[]>(\n  genFn: (...args: TArgs) => any\n) {\n  return function (this: any) {\n    const gen = genFn.apply(this, arguments as any);\n    const boundNext = bind(gen.next);\n    const boundThrow = bind(gen.throw!);\n    type Method = typeof boundNext | typeof boundThrow;\n\n    return new Promise((resolve, reject) => {\n      function invoke(method: Method, argument: any) {\n        try {\n          var result: any = method.call(gen, argument);\n        } catch (error) {\n          return reject(error);\n        }\n        const next = result.done ? resolve : invokeNext;\n        if (isPromiseLike(result.value)) {\n          result.value.then(next, result.done ? reject : invokeThrow);\n        } else {\n          next(result.value);\n        }\n      }\n      const invokeNext = (value?: any) => invoke(boundNext, value);\n      const invokeThrow = (error: any) => invoke(boundThrow, error);\n      invokeNext();\n    });\n  } as (...args: TArgs) => Promise<any>;\n}\n\nfunction isPromiseLike(value: any): value is PromiseLike<any> {\n  return value && typeof value.then === \"function\";\n}\n\n// If you use the fibers npm package to implement coroutines in Node.js,\n// you should call this function at least once to ensure context management\n// remains coherent across any yields.\nconst wrappedFibers: Function[] = [];\nexport function wrapYieldingFiberMethods<F extends Function>(Fiber: F): F {\n  // There can be only one implementation of Fiber per process, so this array\n  // should never grow longer than one element.\n  if (wrappedFibers.indexOf(Fiber) < 0) {\n    const wrap = (obj: any, method: string) => {\n      const fn = obj[method];\n      obj[method] = function () {\n        return noContext(fn, arguments as any, this);\n      };\n    }\n    // These methods can yield, according to\n    // https://github.com/laverdet/node-fibers/blob/ddebed9b8ae3883e57f822e2108e6943e5c8d2a8/fibers.js#L97-L100\n    wrap(Fiber, \"yield\");\n    wrap(Fiber.prototype, \"run\");\n    wrap(Fiber.prototype, \"throwInto\");\n    wrappedFibers.push(Fiber);\n  }\n  return Fiber;\n}\n", "interface Node<K, V> {\n  key: K;\n  value: V;\n  newer: Node<K, V> | null;\n  older: Node<K, V> | null;\n}\n\nfunction defaultDispose() {}\n\nexport class Cache<K = any, V = any> {\n  private map = new Map<K, Node<K, V>>();\n  private newest: Node<K, V> | null = null;\n  private oldest: Node<K, V> | null = null;\n\n  constructor(\n    private max = Infinity,\n    public dispose: (value: V, key: K) => void = defaultDispose,\n  ) {}\n\n  public has(key: K): boolean {\n    return this.map.has(key);\n  }\n\n  public get(key: K): V | undefined {\n    const entry = this.getEntry(key);\n    return entry && entry.value;\n  }\n\n  private getEntry(key: K): Node<K, V> | undefined {\n    const entry = this.map.get(key);\n\n    if (entry && entry !== this.newest) {\n      const { older, newer } = entry;\n\n      if (newer) {\n        newer.older = older;\n      }\n\n      if (older) {\n        older.newer = newer;\n      }\n\n      entry.older = this.newest;\n      entry.older!.newer = entry;\n\n      entry.newer = null;\n      this.newest = entry;\n\n      if (entry === this.oldest) {\n        this.oldest = newer;\n      }\n    }\n\n    return entry;\n  }\n\n  public set(key: K, value: V): V {\n    let entry = this.getEntry(key);\n    if (entry) {\n      return entry.value = value;\n    }\n\n    entry = {\n      key: key,\n      value: value,\n      newer: null,\n      older: this.newest\n    };\n\n    if (this.newest) {\n      this.newest.newer = entry;\n    }\n\n    this.newest = entry;\n    this.oldest = this.oldest || entry;\n\n    this.map.set(key, entry);\n\n    return entry.value;\n  }\n\n  public clean() {\n    while (this.oldest && this.map.size > this.max) {\n      this.delete(this.oldest.key);\n    }\n  }\n\n  public delete(key: K): boolean {\n    const entry = this.map.get(key);\n    if (entry) {\n      if (entry === this.newest) {\n        this.newest = entry.older;\n      }\n\n      if (entry === this.oldest) {\n        this.oldest = entry.newer;\n      }\n\n      if (entry.newer) {\n        entry.newer.older = entry.older;\n      }\n\n      if (entry.older) {\n        entry.older.newer = entry.newer;\n      }\n\n      this.map.delete(key);\n      this.dispose(entry.value, key);\n\n      return true;\n    }\n\n    return false;\n  }\n}\n", "import { AnyEntry } from \"./entry\";\nimport { Slot } from \"@wry/context\";\n\nexport const parentEntrySlot = new Slot<AnyEntry>();\n\nexport {\n  bind as bindContext,\n  noContext,\n  setTimeout,\n  asyncFromGen,\n} from \"@wry/context\";\n", "export type Unsubscribable = {\n  unsubscribe?: void | (() => any);\n}\n\nexport function maybeUnsubscribe(entryOrDep: Unsubscribable) {\n  const { unsubscribe } = entryOrDep;\n  if (typeof unsubscribe === \"function\") {\n    entryOrDep.unsubscribe = void 0;\n    unsubscribe();\n  }\n}\n", "import { parentEntrySlot } from \"./context\";\nimport { OptimisticWrapOptions } from \"./index\";\nimport { Dep } from \"./dep\";\nimport { maybeUnsubscribe, Unsubscribable } from \"./helpers\";\n\nconst emptySetPool: Set<any>[] = [];\nconst POOL_TARGET_SIZE = 100;\n\n// Since this package might be used browsers, we should avoid using the\n// Node built-in assert module.\nfunction assert(condition: any, optionalMessage?: string) {\n  if (! condition) {\n    throw new Error(optionalMessage || \"assertion failure\");\n  }\n}\n\n// Since exceptions are cached just like normal values, we need an efficient\n// way of representing unknown, ordinary, and exceptional values.\ntype Value<T> =\n  | []           // unknown\n  | [T]          // known value\n  | [void, any]; // known exception\n\nfunction valueIs(a: Value<any>, b: Value<any>) {\n  const len = a.length;\n  return (\n    // Unknown values are not equal to each other.\n    len > 0 &&\n    // Both values must be ordinary (or both exceptional) to be equal.\n    len === b.length &&\n    // The underlying value or exception must be the same.\n    a[len - 1] === b[len - 1]\n  );\n}\n\nfunction valueGet<T>(value: Value<T>): T {\n  switch (value.length) {\n    case 0: throw new Error(\"unknown value\");\n    case 1: return value[0];\n    case 2: throw value[1];\n  }\n}\n\nfunction valueCopy<T>(value: Value<T>): Value<T> {\n  return value.slice(0) as Value<T>;\n}\n\nexport type AnyEntry = Entry<any, any>;\n\nexport class Entry<TArgs extends any[], TValue> {\n  public static count = 0;\n\n  public subscribe: OptimisticWrapOptions<TArgs>[\"subscribe\"];\n  public unsubscribe: Unsubscribable[\"unsubscribe\"];\n\n  public readonly parents = new Set<AnyEntry>();\n  public readonly childValues = new Map<AnyEntry, Value<any>>();\n\n  // When this Entry has children that are dirty, this property becomes\n  // a Set containing other Entry objects, borrowed from emptySetPool.\n  // When the set becomes empty, it gets recycled back to emptySetPool.\n  public dirtyChildren: Set<AnyEntry> | null = null;\n\n  public dirty = true;\n  public recomputing = false;\n  public readonly value: Value<TValue> = [];\n\n  constructor(\n    public readonly fn: (...args: TArgs) => TValue,\n  ) {\n    ++Entry.count;\n  }\n\n  public peek(): TValue | undefined {\n    if (this.value.length === 1 && !mightBeDirty(this)) {\n      return this.value[0];\n    }\n  }\n\n  // This is the most important method of the Entry API, because it\n  // determines whether the cached this.value can be returned immediately,\n  // or must be recomputed. The overall performance of the caching system\n  // depends on the truth of the following observations: (1) this.dirty is\n  // usually false, (2) this.dirtyChildren is usually null/empty, and thus\n  // (3) valueGet(this.value) is usually returned without recomputation.\n  public recompute(args: TArgs): TValue {\n    assert(! this.recomputing, \"already recomputing\");\n    rememberParent(this);\n    return mightBeDirty(this)\n      ? reallyRecompute(this, args)\n      : valueGet(this.value);\n  }\n\n  public setDirty() {\n    if (this.dirty) return;\n    this.dirty = true;\n    this.value.length = 0;\n    reportDirty(this);\n    forgetChildren(this);\n    // We can go ahead and unsubscribe here, since any further dirty\n    // notifications we receive will be redundant, and unsubscribing may\n    // free up some resources, e.g. file watchers.\n    maybeUnsubscribe(this);\n  }\n\n  public dispose() {\n    forgetChildren(this);\n    maybeUnsubscribe(this);\n\n    // Because this entry has been kicked out of the cache (in index.js),\n    // we've lost the ability to find out if/when this entry becomes dirty,\n    // whether that happens through a subscription, because of a direct call\n    // to entry.setDirty(), or because one of its children becomes dirty.\n    // Because of this loss of future information, we have to assume the\n    // worst (that this entry might have become dirty very soon), so we must\n    // immediately mark this entry's parents as dirty. Normally we could\n    // just call entry.setDirty() rather than calling parent.setDirty() for\n    // each parent, but that would leave this entry in parent.childValues\n    // and parent.dirtyChildren, which would prevent the child from being\n    // truly forgotten.\n    this.parents.forEach(parent => {\n      parent.setDirty();\n      forgetChild(parent, this);\n    });\n  }\n\n  private deps: Set<Dep<any>> | null = null;\n\n  public dependOn(dep: Dep<any>) {\n    dep.add(this);\n    if (! this.deps) {\n      this.deps = emptySetPool.pop() || new Set<Set<AnyEntry>>();\n    }\n    this.deps.add(dep);\n  }\n\n  public forgetDeps() {\n    if (this.deps) {\n      this.deps.forEach(dep => dep.delete(this));\n      this.deps.clear();\n      emptySetPool.push(this.deps);\n      this.deps = null;\n    }\n  }\n}\n\nfunction rememberParent(child: AnyEntry) {\n  const parent = parentEntrySlot.getValue();\n  if (parent) {\n    child.parents.add(parent);\n\n    if (! parent.childValues.has(child)) {\n      parent.childValues.set(child, []);\n    }\n\n    if (mightBeDirty(child)) {\n      reportDirtyChild(parent, child);\n    } else {\n      reportCleanChild(parent, child);\n    }\n\n    return parent;\n  }\n}\n\nfunction reallyRecompute(entry: AnyEntry, args: any[]) {\n  forgetChildren(entry);\n\n  // Set entry as the parent entry while calling recomputeNewValue(entry).\n  parentEntrySlot.withValue(entry, recomputeNewValue, [entry, args]);\n\n  if (maybeSubscribe(entry, args)) {\n    // If we successfully recomputed entry.value and did not fail to\n    // (re)subscribe, then this Entry is no longer explicitly dirty.\n    setClean(entry);\n  }\n\n  return valueGet(entry.value);\n}\n\nfunction recomputeNewValue(entry: AnyEntry, args: any[]) {\n  entry.recomputing = true;\n  // Set entry.value as unknown.\n  entry.value.length = 0;\n  try {\n    // If entry.fn succeeds, entry.value will become a normal Value.\n    entry.value[0] = entry.fn.apply(null, args);\n  } catch (e) {\n    // If entry.fn throws, entry.value will become exceptional.\n    entry.value[1] = e;\n  }\n  // Either way, this line is always reached.\n  entry.recomputing = false;\n}\n\nfunction mightBeDirty(entry: AnyEntry) {\n  return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);\n}\n\nfunction setClean(entry: AnyEntry) {\n  entry.dirty = false;\n\n  if (mightBeDirty(entry)) {\n    // This Entry may still have dirty children, in which case we can't\n    // let our parents know we're clean just yet.\n    return;\n  }\n\n  reportClean(entry);\n}\n\nfunction reportDirty(child: AnyEntry) {\n  child.parents.forEach(parent => reportDirtyChild(parent, child));\n}\n\nfunction reportClean(child: AnyEntry) {\n  child.parents.forEach(parent => reportCleanChild(parent, child));\n}\n\n// Let a parent Entry know that one of its children may be dirty.\nfunction reportDirtyChild(parent: AnyEntry, child: AnyEntry) {\n  // Must have called rememberParent(child) before calling\n  // reportDirtyChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(mightBeDirty(child));\n\n  if (! parent.dirtyChildren) {\n    parent.dirtyChildren = emptySetPool.pop() || new Set;\n\n  } else if (parent.dirtyChildren.has(child)) {\n    // If we already know this child is dirty, then we must have already\n    // informed our own parents that we are dirty, so we can terminate\n    // the recursion early.\n    return;\n  }\n\n  parent.dirtyChildren.add(child);\n  reportDirty(parent);\n}\n\n// Let a parent Entry know that one of its children is no longer dirty.\nfunction reportCleanChild(parent: AnyEntry, child: AnyEntry) {\n  // Must have called rememberChild(child) before calling\n  // reportCleanChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(! mightBeDirty(child));\n\n  const childValue = parent.childValues.get(child)!;\n  if (childValue.length === 0) {\n    parent.childValues.set(child, valueCopy(child.value));\n  } else if (! valueIs(childValue, child.value)) {\n    parent.setDirty();\n  }\n\n  removeDirtyChild(parent, child);\n\n  if (mightBeDirty(parent)) {\n    return;\n  }\n\n  reportClean(parent);\n}\n\nfunction removeDirtyChild(parent: AnyEntry, child: AnyEntry) {\n  const dc = parent.dirtyChildren;\n  if (dc) {\n    dc.delete(child);\n    if (dc.size === 0) {\n      if (emptySetPool.length < POOL_TARGET_SIZE) {\n        emptySetPool.push(dc);\n      }\n      parent.dirtyChildren = null;\n    }\n  }\n}\n\n// Removes all children from this entry and returns an array of the\n// removed children.\nfunction forgetChildren(parent: AnyEntry) {\n  if (parent.childValues.size > 0) {\n    parent.childValues.forEach((_value, child) => {\n      forgetChild(parent, child);\n    });\n  }\n\n  // Remove this parent Entry from any sets to which it was added by the\n  // addToSet method.\n  parent.forgetDeps();\n\n  // After we forget all our children, this.dirtyChildren must be empty\n  // and therefore must have been reset to null.\n  assert(parent.dirtyChildren === null);\n}\n\nfunction forgetChild(parent: AnyEntry, child: AnyEntry) {\n  child.parents.delete(parent);\n  parent.childValues.delete(child);\n  removeDirtyChild(parent, child);\n}\n\nfunction maybeSubscribe(entry: AnyEntry, args: any[]) {\n  if (typeof entry.subscribe === \"function\") {\n    try {\n      maybeUnsubscribe(entry); // Prevent double subscriptions.\n      entry.unsubscribe = entry.subscribe.apply(null, args);\n    } catch (e) {\n      // If this Entry has a subscribe function and it threw an exception\n      // (or an unsubscribe function it previously returned now throws),\n      // return false to indicate that we were not able to subscribe (or\n      // unsubscribe), and this Entry should remain dirty.\n      entry.setDirty();\n      return false;\n    }\n  }\n\n  // Returning true indicates either that there was no entry.subscribe\n  // function or that it succeeded.\n  return true;\n}\n", "import { AnyEntry } from \"./entry\";\nimport { OptimisticWrapOptions } from \"./index\";\nimport { parentEntrySlot } from \"./context\";\nimport { Unsubscribable, maybeUnsubscribe } from \"./helpers\";\n\nexport type OptimisticDependencyFunction<TKey> =\n  ((key: TKey) => void) & {\n    dirty: (key: TKey) => void;\n  };\n\nexport type Dep<TKey> = Set<AnyEntry> & {\n  subscribe: OptimisticWrapOptions<[TKey]>[\"subscribe\"];\n} & Unsubscribable;\n\nexport function dep<TKey>(options?: {\n  subscribe: Dep<TKey>[\"subscribe\"];\n}) {\n  const depsByKey = new Map<TKey, Dep<TKey>>();\n  const subscribe = options && options.subscribe;\n\n  function depend(key: TKey) {\n    const parent = parentEntrySlot.getValue();\n    if (parent) {\n      let dep = depsByKey.get(key);\n      if (!dep) {\n        depsByKey.set(key, dep = new Set as Dep<TKey>);\n      }\n      parent.dependOn(dep);\n      if (typeof subscribe === \"function\") {\n        maybeUnsubscribe(dep);\n        dep.unsubscribe = subscribe(key);\n      }\n    }\n  }\n\n  depend.dirty = function dirty(key: TKey) {\n    const dep = depsByKey.get(key);\n    if (dep) {\n      dep.forEach(entry => entry.setDirty());\n      depsByKey.delete(key);\n      maybeUnsubscribe(dep);\n    }\n  };\n\n  return depend as OptimisticDependencyFunction<TKey>;\n}\n", "import { Trie } from \"@wry/trie\";\n\nimport { Cache } from \"./cache\";\nimport { Entry, AnyEntry } from \"./entry\";\nimport { parentEntrySlot } from \"./context\";\n\n// These helper functions are important for making optimism work with\n// asynchronous code. In order to register parent-child dependencies,\n// optimism needs to know about any currently active parent computations.\n// In ordinary synchronous code, the parent context is implicit in the\n// execution stack, but asynchronous code requires some extra guidance in\n// order to propagate context from one async task segment to the next.\nexport {\n  bindContext,\n  noContext,\n  setTimeout,\n  asyncFromGen,\n} from \"./context\";\n\n// A lighter-weight dependency, similar to OptimisticWrapperFunction, except\n// with only one argument, no makeCacheKey, no wrapped function to recompute,\n// and no result value. Useful for representing dependency leaves in the graph\n// of computation. Subscriptions are supported.\nexport { dep, OptimisticDependencyFunction } from \"./dep\";\n\n// Since the Cache uses a Map internally, any value or object reference can\n// be safely used as a key, though common types include object and string.\nexport type TCacheKey = any;\n\n// The defaultMakeCacheKey function is remarkably powerful, because it gives\n// a unique object for any shallow-identical list of arguments. If you need\n// to implement a custom makeCacheKey function, you may find it helpful to\n// delegate the final work to defaultMakeCacheKey, which is why we export it\n// here. However, you may want to avoid defaultMakeCacheKey if your runtime\n// does not support WeakMap, or you have the ability to return a string key.\n// In those cases, just write your own custom makeCacheKey functions.\nconst keyTrie = new Trie<TCacheKey>(typeof WeakMap === \"function\");\nexport function defaultMakeCacheKey(...args: any[]) {\n  return keyTrie.lookupArray(args);\n}\n\n// If you're paranoid about memory leaks, or you want to avoid using WeakMap\n// under the hood, but you still need the behavior of defaultMakeCacheKey,\n// import this constructor to create your own tries.\nexport { Trie as KeyTrie }\n\nexport type OptimisticWrapperFunction<\n  TArgs extends any[],\n  TResult,\n  TKeyArgs extends any[] = TArgs,\n> = ((...args: TArgs) => TResult) & {\n  // The .dirty(...) method of an optimistic function takes exactly the\n  // same parameter types as the original function.\n  dirty: (...args: TKeyArgs) => void;\n  // Examine the current value without recomputing it.\n  peek: (...args: TKeyArgs) => TResult | undefined;\n  // Remove the entry from the cache, dirtying any parent entries.\n  forget: (...args: TKeyArgs) => boolean;\n};\n\nexport type OptimisticWrapOptions<\n  TArgs extends any[],\n  TKeyArgs extends any[] = TArgs,\n> = {\n  // The maximum number of cache entries that should be retained before the\n  // cache begins evicting the oldest ones.\n  max?: number;\n  // Transform the raw arguments to some other type of array, which will then\n  // be passed to makeCacheKey.\n  keyArgs?: (...args: TArgs) => TKeyArgs;\n  // The makeCacheKey function takes the same arguments that were passed to\n  // the wrapper function and returns a single value that can be used as a key\n  // in a Map to identify the cached result.\n  makeCacheKey?: (...args: TKeyArgs) => TCacheKey;\n  // If provided, the subscribe function should either return an unsubscribe\n  // function or return nothing.\n  subscribe?: (...args: TArgs) => void | (() => any);\n};\n\nconst caches = new Set<Cache<TCacheKey, AnyEntry>>();\n\nexport function wrap<\n  TArgs extends any[],\n  TResult,\n  TKeyArgs extends any[] = TArgs,\n>(\n  originalFunction: (...args: TArgs) => TResult,\n  options: OptimisticWrapOptions<TArgs, TKeyArgs> = Object.create(null),\n) {\n  const cache = new Cache<TCacheKey, Entry<TArgs, TResult>>(\n    options.max || Math.pow(2, 16),\n    entry => entry.dispose(),\n  );\n\n  const keyArgs = options.keyArgs || ((...args: TArgs): TKeyArgs => args as any);\n  const makeCacheKey = options.makeCacheKey || defaultMakeCacheKey;\n\n  function optimistic(): TResult {\n    const key = makeCacheKey.apply(null, keyArgs.apply(null, arguments as any));\n    if (key === void 0) {\n      return originalFunction.apply(null, arguments as any);\n    }\n\n    let entry = cache.get(key)!;\n    if (!entry) {\n      cache.set(key, entry = new Entry(originalFunction));\n      entry.subscribe = options.subscribe;\n    }\n\n    const value = entry.recompute(\n      Array.prototype.slice.call(arguments) as TArgs,\n    );\n\n    // Move this entry to the front of the least-recently used queue,\n    // since we just finished computing its value.\n    cache.set(key, entry);\n\n    caches.add(cache);\n\n    // Clean up any excess entries in the cache, but only if there is no\n    // active parent entry, meaning we're not in the middle of a larger\n    // computation that might be flummoxed by the cleaning.\n    if (! parentEntrySlot.hasValue()) {\n      caches.forEach(cache => cache.clean());\n      caches.clear();\n    }\n\n    return value;\n  }\n\n  function lookup(): Entry<TArgs, TResult> | undefined {\n    const key = makeCacheKey.apply(null, arguments as any);\n    if (key !== void 0) {\n      return cache.get(key);\n    }\n  }\n\n  optimistic.dirty = function () {\n    const entry = lookup.apply(null, arguments as any);\n    if (entry) {\n      entry.setDirty();\n    }\n  };\n\n  optimistic.peek = function () {\n    const entry = lookup.apply(null, arguments as any);\n    if (entry) {\n      return entry.peek();\n    }\n  };\n\n  optimistic.forget = function () {\n    const key = makeCacheKey.apply(null, arguments as any);\n    return key !== void 0 && cache.delete(key);\n  };\n\n  return optimistic as OptimisticWrapperFunction<TArgs, TResult, TKeyArgs>;\n}\n", "import { DocumentNode } from 'graphql';\nimport { wrap } from 'optimism';\n\nimport {\n  StoreObject,\n  Reference,\n  getFragmentQueryDocument,\n} from '../../utilities';\nimport { DataProxy } from './types/DataProxy';\nimport { Cache } from './types/Cache';\n\nexport type Transaction<T> = (c: ApolloCache<T>) => void;\n\nexport abstract class ApolloCache<TSerialized> implements DataProxy {\n  // required to implement\n  // core API\n  public abstract read<T, TVariables = any>(\n    query: Cache.ReadOptions<TVariables, T>,\n  ): T | null;\n  public abstract write<TResult = any, TVariables = any>(\n    write: Cache.WriteOptions<TResult, TVariables>,\n  ): Reference | undefined;\n  public abstract diff<T>(query: Cache.DiffOptions): Cache.DiffResult<T>;\n  public abstract watch(watch: Cache.WatchOptions): () => void;\n  public abstract reset(): Promise<void>;\n\n  // Remove whole objects from the cache by passing just options.id, or\n  // specific fields by passing options.field and/or options.args. If no\n  // options.args are provided, all fields matching options.field (even\n  // those with arguments) will be removed. Returns true iff any data was\n  // removed from the cache.\n  public abstract evict(options: Cache.EvictOptions): boolean;\n\n  // intializer / offline / ssr API\n  /**\n   * Replaces existing state in the cache (if any) with the values expressed by\n   * `serializedState`.\n   *\n   * Called when hydrating a cache (server side rendering, or offline storage),\n   * and also (potentially) during hot reloads.\n   */\n  public abstract restore(\n    serializedState: TSerialized,\n  ): ApolloCache<TSerialized>;\n\n  /**\n   * Exposes the cache's complete state, in a serializable format for later restoration.\n   */\n  public abstract extract(optimistic?: boolean): TSerialized;\n\n  // Optimistic API\n\n  public abstract removeOptimistic(id: string): void;\n\n  // Transactional API\n\n  public abstract performTransaction(\n    transaction: Transaction<TSerialized>,\n    // Although subclasses may implement recordOptimisticTransaction\n    // however they choose, the default implementation simply calls\n    // performTransaction with a string as the second argument, allowing\n    // performTransaction to handle both optimistic and non-optimistic\n    // (broadcast-batching) transactions. Passing null for optimisticId is\n    // also allowed, and indicates that performTransaction should apply\n    // the transaction non-optimistically (ignoring optimistic data).\n    optimisticId?: string | null,\n  ): void;\n\n  public recordOptimisticTransaction(\n    transaction: Transaction<TSerialized>,\n    optimisticId: string,\n  ) {\n    this.performTransaction(transaction, optimisticId);\n  }\n\n  // Optional API\n\n  public transformDocument(document: DocumentNode): DocumentNode {\n    return document;\n  }\n\n  public identify(object: StoreObject | Reference): string | undefined {\n    return;\n  }\n\n  public gc(): string[] {\n    return [];\n  }\n\n  public modify(options: Cache.ModifyOptions): boolean {\n    return false;\n  }\n\n  // Experimental API\n\n  public transformForLink(document: DocumentNode): DocumentNode {\n    return document;\n  }\n\n  // DataProxy API\n  /**\n   *\n   * @param options\n   * @param optimistic\n   */\n  public readQuery<QueryType, TVariables = any>(\n    options: Cache.ReadQueryOptions<QueryType, TVariables>,\n    optimistic = !!options.optimistic,\n  ): QueryType | null {\n    return this.read({\n      rootId: options.id || 'ROOT_QUERY',\n      query: options.query,\n      variables: options.variables,\n      returnPartialData: options.returnPartialData,\n      optimistic,\n    });\n  }\n\n  // Make sure we compute the same (===) fragment query document every\n  // time we receive the same fragment in readFragment.\n  private getFragmentDoc = wrap(getFragmentQueryDocument);\n\n  public readFragment<FragmentType, TVariables = any>(\n    options: Cache.ReadFragmentOptions<FragmentType, TVariables>,\n    optimistic = !!options.optimistic,\n  ): FragmentType | null {\n    return this.read({\n      query: this.getFragmentDoc(options.fragment, options.fragmentName),\n      variables: options.variables,\n      rootId: options.id,\n      returnPartialData: options.returnPartialData,\n      optimistic,\n    });\n  }\n\n  public writeQuery<TData = any, TVariables = any>(\n    options: Cache.WriteQueryOptions<TData, TVariables>,\n  ): Reference | undefined {\n    return this.write({\n      dataId: options.id || 'ROOT_QUERY',\n      result: options.data,\n      query: options.query,\n      variables: options.variables,\n      broadcast: options.broadcast,\n    });\n  }\n\n  public writeFragment<TData = any, TVariables = any>(\n    options: Cache.WriteFragmentOptions<TData, TVariables>,\n  ): Reference | undefined {\n    return this.write({\n      dataId: options.id,\n      result: options.data,\n      variables: options.variables,\n      query: this.getFragmentDoc(options.fragment, options.fragmentName),\n      broadcast: options.broadcast,\n    });\n  }\n}\n", "import { DataProxy } from './DataProxy';\nimport { Modifier, Modifiers } from './common';\n\nexport namespace Cache {\n  export type WatchCallback = (diff: Cache.DiffResult<any>) => void;\n\n  export interface ReadOptions<TVariables = any, TData = any>\n    extends DataProxy.Query<TVariables, TData> {\n    rootId?: string;\n    previousResult?: any;\n    optimistic: boolean;\n    returnPartialData?: boolean;\n  }\n\n  export interface WriteOptions<TResult = any, TVariables = any>\n    extends DataProxy.Query<TVariables, TResult> {\n    dataId?: string;\n    result: TResult;\n    broadcast?: boolean;\n  }\n\n  export interface DiffOptions extends ReadOptions {\n    // The DiffOptions interface is currently just an alias for\n    // ReadOptions, though DiffOptions used to be responsible for\n    // declaring the returnPartialData option.\n  }\n\n  export interface WatchOptions extends ReadOptions {\n    immediate?: boolean;\n    callback: WatchCallback;\n  }\n\n  export interface EvictOptions {\n    id?: string;\n    fieldName?: string;\n    args?: Record<string, any>;\n    broadcast?: boolean;\n  }\n\n  export interface ModifyOptions {\n    id?: string;\n    fields: Modifiers | Modifier<any>;\n    optimistic?: boolean;\n    broadcast?: boolean;\n  }\n\n  export import DiffResult = DataProxy.DiffResult;\n  export import ReadQueryOptions = DataProxy.ReadQueryOptions;\n  export import ReadFragmentOptions = DataProxy.ReadFragmentOptions;\n  export import WriteQueryOptions = DataProxy.WriteQueryOptions;\n  export import WriteFragmentOptions = DataProxy.WriteFragmentOptions;\n  export import Fragment = DataProxy.Fragment;\n}\n", "import { FieldNode } from 'graphql';\n\nimport {\n  Reference,\n  StoreObject,\n  StoreValue,\n  isReference,\n} from '../../../utilities';\n\nimport { StorageType } from '../../inmemory/policies';\n\n// The Readonly<T> type only really works for object types, since it marks\n// all of the object's properties as readonly, but there are many cases when\n// a generic type parameter like TExisting might be a string or some other\n// primitive type, in which case we need to avoid wrapping it with Readonly.\n// SafeReadonly<string> collapses to just string, which makes string\n// assignable to SafeReadonly<any>, whereas string is not assignable to\n// Readonly<any>, somewhat surprisingly.\nexport type SafeReadonly<T> = T extends object ? Readonly<T> : T;\n\nexport class MissingFieldError {\n  constructor(\n    public readonly message: string,\n    public readonly path: (string | number)[],\n    public readonly query: import('graphql').DocumentNode,\n    public readonly clientOnly: boolean,\n    public readonly variables?: Record<string, any>,\n  ) {}\n}\n\nexport interface FieldSpecifier {\n  typename?: string;\n  fieldName: string;\n  field?: FieldNode;\n  args?: Record<string, any>;\n  variables?: Record<string, any>;\n}\n\nexport interface ReadFieldOptions extends FieldSpecifier {\n  from?: StoreObject | Reference;\n}\n\nexport interface ReadFieldFunction {\n  <V = StoreValue>(options: ReadFieldOptions): SafeReadonly<V> | undefined;\n  <V = StoreValue>(\n    fieldName: string,\n    from?: StoreObject | Reference,\n  ): SafeReadonly<V> | undefined;\n}\n\nexport type ToReferenceFunction = (\n  objOrIdOrRef: StoreObject | string | Reference,\n  mergeIntoStore?: boolean,\n) => Reference | undefined;\n\nexport type CanReadFunction = (value: StoreValue) => boolean;\n\nexport type Modifier<T> = (value: T, details: {\n  DELETE: any;\n  INVALIDATE: any;\n  fieldName: string;\n  storeFieldName: string;\n  readField: ReadFieldFunction;\n  canRead: CanReadFunction;\n  isReference: typeof isReference;\n  toReference: ToReferenceFunction;\n  storage: StorageType;\n}) => T;\n\nexport type Modifiers = {\n  [fieldName: string]: Modifier<any>;\n};\n", "import { SelectionSetNode } from 'graphql';\n\nimport { NormalizedCache } from './types';\nimport {\n  Reference,\n  isReference,\n  StoreValue,\n  StoreObject,\n  isField,\n  DeepMerger,\n  resultKeyNameFromField,\n  shouldInclude,\n} from '../../utilities';\n\nexport const hasOwn = Object.prototype.hasOwnProperty;\n\nexport function getTypenameFromStoreObject(\n  store: NormalizedCache,\n  objectOrReference: StoreObject | Reference,\n): string | undefined {\n  return isReference(objectOrReference)\n    ? store.get(objectOrReference.__ref, \"__typename\") as string\n    : objectOrReference && objectOrReference.__typename;\n}\n\nexport const TypeOrFieldNameRegExp = /^[_a-z][_0-9a-z]*/i;\n\nexport function fieldNameFromStoreName(storeFieldName: string): string {\n  const match = storeFieldName.match(TypeOrFieldNameRegExp);\n  return match ? match[0] : storeFieldName;\n}\n\nexport function selectionSetMatchesResult(\n  selectionSet: SelectionSetNode,\n  result: Record<string, any>,\n  variables?: Record<string, any>,\n): boolean {\n  if (result && typeof result === \"object\") {\n    return Array.isArray(result)\n      ? result.every(item => selectionSetMatchesResult(selectionSet, item, variables))\n      : selectionSet.selections.every(field => {\n        if (isField(field) && shouldInclude(field, variables)) {\n          const key = resultKeyNameFromField(field);\n          return hasOwn.call(result, key) &&\n            (!field.selectionSet ||\n             selectionSetMatchesResult(field.selectionSet, result[key], variables));\n        }\n        // If the selection has been skipped with @skip(true) or\n        // @include(false), it should not count against the matching. If\n        // the selection is not a field, it must be a fragment (inline or\n        // named). We will determine if selectionSetMatchesResult for that\n        // fragment when we get to it, so for now we return true.\n        return true;\n      });\n  }\n  return false;\n}\n\nexport function storeValueIsStoreObject(\n  value: StoreValue,\n): value is StoreObject {\n  return value !== null &&\n    typeof value === \"object\" &&\n    !isReference(value) &&\n    !Array.isArray(value);\n}\n\nexport function makeProcessedFieldsMerger() {\n  return new DeepMerger;\n}\n", "import { dep, OptimisticDependencyFunction, KeyTrie } from 'optimism';\nimport { equal } from '@wry/equality';\n\nimport {\n  isReference,\n  StoreValue,\n  StoreObject,\n  Reference,\n  makeReference,\n  DeepMerger,\n  maybeDeepFreeze,\n  canUseWeakMap,\n} from '../../utilities';\nimport { NormalizedCache, NormalizedCacheObject } from './types';\nimport { hasOwn, fieldNameFromStoreName } from './helpers';\nimport { Policies, StorageType } from './policies';\nimport { Cache } from '../core/types/Cache';\nimport {\n  SafeReadonly,\n  Modifier,\n  Modifiers,\n  ReadFieldOptions,\n  ToReferenceFunction,\n  CanReadFunction,\n} from '../core/types/common';\n\nconst DELETE: any = Object.create(null);\nconst delModifier: Modifier<any> = () => DELETE;\nconst INVALIDATE: any = Object.create(null);\n\nexport abstract class EntityStore implements NormalizedCache {\n  protected data: NormalizedCacheObject = Object.create(null);\n\n  constructor(\n    public readonly policies: Policies,\n    public readonly group: CacheGroup,\n  ) {}\n\n  public abstract addLayer(\n    layerId: string,\n    replay: (layer: EntityStore) => any,\n  ): Layer;\n\n  public abstract removeLayer(layerId: string): EntityStore;\n\n  // Although the EntityStore class is abstract, it contains concrete\n  // implementations of the various NormalizedCache interface methods that\n  // are inherited by the Root and Layer subclasses.\n\n  public toObject(): NormalizedCacheObject {\n    return { ...this.data };\n  }\n\n  public has(dataId: string): boolean {\n    return this.lookup(dataId, true) !== void 0;\n  }\n\n  public get(dataId: string, fieldName: string): StoreValue {\n    this.group.depend(dataId, fieldName);\n    if (hasOwn.call(this.data, dataId)) {\n      const storeObject = this.data[dataId];\n      if (storeObject && hasOwn.call(storeObject, fieldName)) {\n        return storeObject[fieldName];\n      }\n    }\n    if (fieldName === \"__typename\" &&\n        hasOwn.call(this.policies.rootTypenamesById, dataId)) {\n      return this.policies.rootTypenamesById[dataId];\n    }\n    if (this instanceof Layer) {\n      return this.parent.get(dataId, fieldName);\n    }\n  }\n\n  protected lookup(dataId: string, dependOnExistence?: boolean): StoreObject | undefined {\n    // The has method (above) calls lookup with dependOnExistence = true, so\n    // that it can later be invalidated when we add or remove a StoreObject for\n    // this dataId. Any consumer who cares about the contents of the StoreObject\n    // should not rely on this dependency, since the contents could change\n    // without the object being added or removed.\n    if (dependOnExistence) this.group.depend(dataId, \"__exists\");\n\n    if (hasOwn.call(this.data, dataId)) {\n      return this.data[dataId];\n    }\n\n    if (this instanceof Layer) {\n      return this.parent.lookup(dataId, dependOnExistence);\n    }\n\n    if (this.policies.rootTypenamesById[dataId]) {\n      return Object.create(null);\n    }\n  }\n\n  public merge(dataId: string, incoming: StoreObject): void {\n    const existing = this.lookup(dataId);\n    const merged: StoreObject =\n      new DeepMerger(storeObjectReconciler).merge(existing, incoming);\n    // Even if merged === existing, existing may have come from a lower\n    // layer, so we always need to set this.data[dataId] on this level.\n    this.data[dataId] = merged;\n    if (merged !== existing) {\n      delete this.refs[dataId];\n      if (this.group.caching) {\n        const fieldsToDirty: Record<string, 1> = Object.create(null);\n\n        // If we added a new StoreObject where there was previously none, dirty\n        // anything that depended on the existence of this dataId, such as the\n        // EntityStore#has method.\n        if (!existing) fieldsToDirty.__exists = 1;\n\n        // Now invalidate dependents who called getFieldValue for any fields\n        // that are changing as a result of this merge.\n        Object.keys(incoming).forEach(storeFieldName => {\n          if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {\n            // Always dirty the full storeFieldName, which may include\n            // serialized arguments following the fieldName prefix.\n            fieldsToDirty[storeFieldName] = 1;\n\n            // Also dirty fieldNameFromStoreName(storeFieldName) if it's\n            // different from storeFieldName and this field does not have\n            // keyArgs configured, because that means the cache can't make\n            // any assumptions about how field values with the same field\n            // name but different arguments might be interrelated, so it\n            // must err on the side of invalidating all field values that\n            // share the same short fieldName, regardless of arguments.\n            const fieldName = fieldNameFromStoreName(storeFieldName);\n            if (fieldName !== storeFieldName &&\n                !this.policies.hasKeyArgs(merged.__typename, fieldName)) {\n              fieldsToDirty[fieldName] = 1;\n            }\n\n            // If merged[storeFieldName] has become undefined, and this is the\n            // Root layer, actually delete the property from the merged object,\n            // which is guaranteed to have been created fresh in this method.\n            if (merged[storeFieldName] === void 0 && !(this instanceof Layer)) {\n              delete merged[storeFieldName];\n            }\n          }\n        });\n\n        Object.keys(fieldsToDirty).forEach(\n          fieldName => this.group.dirty(dataId, fieldName));\n      }\n    }\n  }\n\n  public modify(\n    dataId: string,\n    fields: Modifier<any> | Modifiers,\n  ): boolean {\n    const storeObject = this.lookup(dataId);\n\n    if (storeObject) {\n      const changedFields: Record<string, any> = Object.create(null);\n      let needToMerge = false;\n      let allDeleted = true;\n\n      const sharedDetails = {\n        DELETE,\n        INVALIDATE,\n        isReference,\n        toReference: this.toReference,\n        canRead: this.canRead,\n        readField: <V = StoreValue>(\n          fieldNameOrOptions: string | ReadFieldOptions,\n          from?: StoreObject | Reference,\n        ) => this.policies.readField<V>(\n          typeof fieldNameOrOptions === \"string\" ? {\n            fieldName: fieldNameOrOptions,\n            from: from || makeReference(dataId),\n          } : fieldNameOrOptions,\n          { store: this },\n        ),\n      };\n\n      Object.keys(storeObject).forEach(storeFieldName => {\n        const fieldName = fieldNameFromStoreName(storeFieldName);\n        let fieldValue = storeObject[storeFieldName];\n        if (fieldValue === void 0) return;\n        const modify: Modifier<StoreValue> = typeof fields === \"function\"\n          ? fields\n          : fields[storeFieldName] || fields[fieldName];\n        if (modify) {\n          let newValue = modify === delModifier ? DELETE :\n            modify(maybeDeepFreeze(fieldValue), {\n              ...sharedDetails,\n              fieldName,\n              storeFieldName,\n              storage: this.getStorage(dataId, storeFieldName),\n            });\n          if (newValue === INVALIDATE) {\n            this.group.dirty(dataId, storeFieldName);\n          } else {\n            if (newValue === DELETE) newValue = void 0;\n            if (newValue !== fieldValue) {\n              changedFields[storeFieldName] = newValue;\n              needToMerge = true;\n              fieldValue = newValue;\n            }\n          }\n        }\n        if (fieldValue !== void 0) {\n          allDeleted = false;\n        }\n      });\n\n      if (needToMerge) {\n        this.merge(dataId, changedFields);\n\n        if (allDeleted) {\n          if (this instanceof Layer) {\n            this.data[dataId] = void 0;\n          } else {\n            delete this.data[dataId];\n          }\n          this.group.dirty(dataId, \"__exists\");\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  // If called with only one argument, removes the entire entity\n  // identified by dataId. If called with a fieldName as well, removes all\n  // fields of that entity whose names match fieldName according to the\n  // fieldNameFromStoreName helper function. If called with a fieldName\n  // and variables, removes all fields of that entity whose names match fieldName\n  // and whose arguments when cached exactly match the variables passed.\n  public delete(\n    dataId: string,\n    fieldName?: string,\n    args?: Record<string, any>,\n  ) {\n    const storeObject = this.lookup(dataId);\n    if (storeObject) {\n      const typename = this.getFieldValue<string>(storeObject, \"__typename\");\n      const storeFieldName = fieldName && args\n        ? this.policies.getStoreFieldName({ typename, fieldName, args })\n        : fieldName;\n      return this.modify(dataId, storeFieldName ? {\n        [storeFieldName]: delModifier,\n      } : delModifier);\n    }\n    return false;\n  }\n\n  public evict(options: Cache.EvictOptions): boolean {\n    let evicted = false;\n    if (options.id) {\n      if (hasOwn.call(this.data, options.id)) {\n        evicted = this.delete(options.id, options.fieldName, options.args);\n      }\n      if (this instanceof Layer) {\n        evicted = this.parent.evict(options) || evicted;\n      }\n      // Always invalidate the field to trigger rereading of watched\n      // queries, even if no cache data was modified by the eviction,\n      // because queries may depend on computed fields with custom read\n      // functions, whose values are not stored in the EntityStore.\n      if (options.fieldName || evicted) {\n        this.group.dirty(options.id, options.fieldName || \"__exists\");\n      }\n    }\n    return evicted;\n  }\n\n  public clear(): void {\n    this.replace(null);\n  }\n\n  public extract(): NormalizedCacheObject {\n    const obj = this.toObject();\n    const extraRootIds: string[] = [];\n    this.getRootIdSet().forEach(id => {\n      if (!hasOwn.call(this.policies.rootTypenamesById, id)) {\n        extraRootIds.push(id);\n      }\n    });\n    if (extraRootIds.length) {\n      obj.__META = { extraRootIds: extraRootIds.sort() };\n    }\n    return obj;\n  }\n\n  public replace(newData: NormalizedCacheObject | null): void {\n    Object.keys(this.data).forEach(dataId => {\n      if (!(newData && hasOwn.call(newData, dataId))) {\n        this.delete(dataId);\n      }\n    });\n    if (newData) {\n      const { __META, ...rest } = newData;\n      Object.keys(rest).forEach(dataId => {\n        this.merge(dataId, rest[dataId] as StoreObject);\n      });\n      if (__META) {\n        __META.extraRootIds.forEach(this.retain, this);\n      }\n    }\n  }\n\n  public abstract getStorage(\n    idOrObj: string | StoreObject,\n    ...storeFieldNames: (string | number)[]\n  ): StorageType;\n\n  // Maps root entity IDs to the number of times they have been retained, minus\n  // the number of times they have been released. Retained entities keep other\n  // entities they reference (even indirectly) from being garbage collected.\n  private rootIds: {\n    [rootId: string]: number;\n  } = Object.create(null);\n\n  public retain(rootId: string): number {\n    return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;\n  }\n\n  public release(rootId: string): number {\n    if (this.rootIds[rootId] > 0) {\n      const count = --this.rootIds[rootId];\n      if (!count) delete this.rootIds[rootId];\n      return count;\n    }\n    return 0;\n  }\n\n  // Return a Set<string> of all the ID strings that have been retained by\n  // this layer/root *and* any layers/roots beneath it.\n  public getRootIdSet(ids = new Set<string>()) {\n    Object.keys(this.rootIds).forEach(ids.add, ids);\n    if (this instanceof Layer) {\n      this.parent.getRootIdSet(ids);\n    } else {\n      // Official singleton IDs like ROOT_QUERY and ROOT_MUTATION are\n      // always considered roots for garbage collection, regardless of\n      // their retainment counts in this.rootIds.\n      Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);\n    }\n    return ids;\n  }\n\n  // The goal of garbage collection is to remove IDs from the Root layer of the\n  // store that are no longer reachable starting from any IDs that have been\n  // explicitly retained (see retain and release, above). Returns an array of\n  // dataId strings that were removed from the store.\n  public gc() {\n    const ids = this.getRootIdSet();\n    const snapshot = this.toObject();\n    ids.forEach(id => {\n      if (hasOwn.call(snapshot, id)) {\n        // Because we are iterating over an ECMAScript Set, the IDs we add here\n        // will be visited in later iterations of the forEach loop only if they\n        // were not previously contained by the Set.\n        Object.keys(this.findChildRefIds(id)).forEach(ids.add, ids);\n        // By removing IDs from the snapshot object here, we protect them from\n        // getting removed from the root store layer below.\n        delete snapshot[id];\n      }\n    });\n    const idsToRemove = Object.keys(snapshot);\n    if (idsToRemove.length) {\n      let root: EntityStore = this;\n      while (root instanceof Layer) root = root.parent;\n      idsToRemove.forEach(id => root.delete(id));\n    }\n    return idsToRemove;\n  }\n\n  // Lazily tracks { __ref: <dataId> } strings contained by this.data[dataId].\n  private refs: {\n    [dataId: string]: Record<string, true>;\n  } = Object.create(null);\n\n  public findChildRefIds(dataId: string): Record<string, true> {\n    if (!hasOwn.call(this.refs, dataId)) {\n      const found = this.refs[dataId] = Object.create(null);\n      const workSet = new Set([this.data[dataId]]);\n      // Within the store, only arrays and objects can contain child entity\n      // references, so we can prune the traversal using this predicate:\n      const canTraverse = (obj: any) => obj !== null && typeof obj === 'object';\n      workSet.forEach(obj => {\n        if (isReference(obj)) {\n          found[obj.__ref] = true;\n        } else if (canTraverse(obj)) {\n          Object.values(obj!)\n            // No need to add primitive values to the workSet, since they cannot\n            // contain reference objects.\n            .filter(canTraverse)\n            .forEach(workSet.add, workSet);\n        }\n      });\n    }\n    return this.refs[dataId];\n  }\n\n  // Used to compute cache keys specific to this.group.\n  public makeCacheKey(...args: any[]) {\n    return this.group.keyMaker.lookupArray(args);\n  }\n\n  // Bound function that can be passed around to provide easy access to fields\n  // of Reference objects as well as ordinary objects.\n  public getFieldValue = <T = StoreValue>(\n    objectOrReference: StoreObject | Reference | undefined,\n    storeFieldName: string,\n  ) => maybeDeepFreeze(\n    isReference(objectOrReference)\n      ? this.get(objectOrReference.__ref, storeFieldName)\n      : objectOrReference && objectOrReference[storeFieldName]\n  ) as SafeReadonly<T>;\n\n  // Returns true for non-normalized StoreObjects and non-dangling\n  // References, indicating that readField(name, objOrRef) has a chance of\n  // working. Useful for filtering out dangling references from lists.\n  public canRead: CanReadFunction = objOrRef => {\n    return isReference(objOrRef)\n      ? this.has(objOrRef.__ref)\n      : typeof objOrRef === \"object\";\n  };\n\n  // Bound function that converts an id or an object with a __typename and\n  // primary key fields to a Reference object. If called with a Reference object,\n  // that same Reference object is returned. Pass true for mergeIntoStore to persist\n  // an object into the store.\n  public toReference: ToReferenceFunction = (\n    objOrIdOrRef,\n    mergeIntoStore,\n  ) => {\n    if (typeof objOrIdOrRef === \"string\") {\n      return makeReference(objOrIdOrRef);\n    }\n\n    if (isReference(objOrIdOrRef)) {\n      return objOrIdOrRef;\n    }\n\n    const [id] = this.policies.identify(objOrIdOrRef);\n\n    if (id) {\n      const ref = makeReference(id);\n      if (mergeIntoStore) {\n        this.merge(id, objOrIdOrRef);\n      }\n      return ref;\n    }\n  };\n}\n\nexport type FieldValueGetter = EntityStore[\"getFieldValue\"];\n\n// A single CacheGroup represents a set of one or more EntityStore objects,\n// typically the Root store in a CacheGroup by itself, and all active Layer\n// stores in a group together. A single EntityStore object belongs to only\n// one CacheGroup, store.group. The CacheGroup is responsible for tracking\n// dependencies, so store.group is helpful for generating unique keys for\n// cached results that need to be invalidated when/if those dependencies\n// change. If we used the EntityStore objects themselves as cache keys (that\n// is, store rather than store.group), the cache would become unnecessarily\n// fragmented by all the different Layer objects. Instead, the CacheGroup\n// approach allows all optimistic Layer objects in the same linked list to\n// belong to one CacheGroup, with the non-optimistic Root object belonging\n// to another CacheGroup, allowing resultCaching dependencies to be tracked\n// separately for optimistic and non-optimistic entity data.\nclass CacheGroup {\n  private d: OptimisticDependencyFunction<string> | null = null;\n\n  constructor(public readonly caching: boolean) {\n    this.d = caching ? dep<string>() : null;\n  }\n\n  public depend(dataId: string, storeFieldName: string) {\n    if (this.d) {\n      this.d(makeDepKey(dataId, storeFieldName));\n      const fieldName = fieldNameFromStoreName(storeFieldName);\n      if (fieldName !== storeFieldName) {\n        // Fields with arguments that contribute extra identifying\n        // information to the fieldName (thus forming the storeFieldName)\n        // depend not only on the full storeFieldName but also on the\n        // short fieldName, so the field can be invalidated using either\n        // level of specificity.\n        this.d(makeDepKey(dataId, fieldName));\n      }\n    }\n  }\n\n  public dirty(dataId: string, storeFieldName: string) {\n    if (this.d) {\n      this.d.dirty(makeDepKey(dataId, storeFieldName));\n    }\n  }\n\n  // Used by the EntityStore#makeCacheKey method to compute cache keys\n  // specific to this CacheGroup.\n  public readonly keyMaker = new KeyTrie<object>(canUseWeakMap);\n}\n\nfunction makeDepKey(dataId: string, storeFieldName: string) {\n  // Since field names cannot have '#' characters in them, this method\n  // of joining the field name and the ID should be unambiguous, and much\n  // cheaper than JSON.stringify([dataId, fieldName]).\n  return storeFieldName + '#' + dataId;\n}\n\nexport namespace EntityStore {\n  // Refer to this class as EntityStore.Root outside this namespace.\n  export class Root extends EntityStore {\n    // Although each Root instance gets its own unique CacheGroup object,\n    // any Layer instances created by calling addLayer need to share a\n    // single distinct CacheGroup object. Since this shared object must\n    // outlast the Layer instances themselves, it needs to be created and\n    // owned by the Root instance.\n    private sharedLayerGroup: CacheGroup;\n\n    constructor({\n      policies,\n      resultCaching = true,\n      seed,\n    }: {\n      policies: Policies;\n      resultCaching?: boolean;\n      seed?: NormalizedCacheObject;\n    }) {\n      super(policies, new CacheGroup(resultCaching));\n      this.sharedLayerGroup = new CacheGroup(resultCaching);\n      if (seed) this.replace(seed);\n    }\n\n    public addLayer(\n      layerId: string,\n      replay: (layer: EntityStore) => any,\n    ): Layer {\n      // The replay function will be called in the Layer constructor.\n      return new Layer(layerId, this, replay, this.sharedLayerGroup);\n    }\n\n    public removeLayer(): Root {\n      // Never remove the root layer.\n      return this;\n    }\n\n    public readonly storageTrie = new KeyTrie<StorageType>(canUseWeakMap);\n    public getStorage(): StorageType {\n      return this.storageTrie.lookupArray(arguments);\n    }\n  }\n}\n\n// Not exported, since all Layer instances are created by the addLayer method\n// of the EntityStore.Root class.\nclass Layer extends EntityStore {\n  constructor(\n    public readonly id: string,\n    public readonly parent: EntityStore,\n    public readonly replay: (layer: EntityStore) => any,\n    public readonly group: CacheGroup,\n  ) {\n    super(parent.policies, group);\n    replay(this);\n  }\n\n  public addLayer(\n    layerId: string,\n    replay: (layer: EntityStore) => any,\n  ): Layer {\n    return new Layer(layerId, this, replay, this.group);\n  }\n\n  public removeLayer(layerId: string): EntityStore {\n    // Remove all instances of the given id, not just the first one.\n    const parent = this.parent.removeLayer(layerId);\n\n    if (layerId === this.id) {\n      // Dirty every ID we're removing.\n      if (this.group.caching) {\n        Object.keys(this.data).forEach(dataId => {\n          // If this.data[dataId] contains nothing different from what\n          // lies beneath, we can avoid dirtying this dataId and all of\n          // its fields, and simply discard this Layer. The only reason we\n          // call this.delete here is to dirty the removed fields.\n          if (this.data[dataId] !== (parent as Layer).lookup(dataId)) {\n            this.delete(dataId);\n          }\n        });\n      }\n      return parent;\n    }\n\n    // No changes are necessary if the parent chain remains identical.\n    if (parent === this.parent) return this;\n\n    // Recreate this layer on top of the new parent.\n    return parent.addLayer(this.id, this.replay);\n  }\n\n  public toObject(): NormalizedCacheObject {\n    return {\n      ...this.parent.toObject(),\n      ...this.data,\n    };\n  }\n\n  public findChildRefIds(dataId: string): Record<string, true> {\n    const fromParent = this.parent.findChildRefIds(dataId);\n    return hasOwn.call(this.data, dataId) ? {\n      ...fromParent,\n      ...super.findChildRefIds(dataId),\n    } : fromParent;\n  }\n\n  public getStorage(): StorageType {\n    let p: EntityStore = this.parent;\n    while ((p as Layer).parent) p = (p as Layer).parent;\n    return p.getStorage.apply(p, arguments);\n  }\n}\n\nfunction storeObjectReconciler(\n  existingObject: StoreObject,\n  incomingObject: StoreObject,\n  property: string,\n): StoreValue {\n  const existingValue = existingObject[property];\n  const incomingValue = incomingObject[property];\n  // Wherever there is a key collision, prefer the incoming value, unless\n  // it is deeply equal to the existing value. It's worth checking deep\n  // equality here (even though blindly returning incoming would be\n  // logically correct) because preserving the referential identity of\n  // existing data can prevent needless rereading and rerendering.\n  return equal(existingValue, incomingValue) ? existingValue : incomingValue;\n}\n\nexport function supportsResultCaching(store: any): store is EntityStore {\n  // When result caching is disabled, store.depend will be null.\n  return !!(store instanceof EntityStore && store.group.caching);\n}\n", "import {\n  DocumentNode,\n  FieldNode,\n  SelectionSetNode,\n} from 'graphql';\nimport { wrap, OptimisticWrapperFunction } from 'optimism';\nimport { invariant, InvariantError } from 'ts-invariant';\n\nimport {\n  isField,\n  resultKeyNameFromField,\n  Reference,\n  isReference,\n  makeReference,\n  StoreObject,\n  createFragmentMap,\n  FragmentMap,\n  shouldInclude,\n  addTypenameToDocument,\n  getDefaultValues,\n  getFragmentDefinitions,\n  getMainDefinition,\n  getQueryDefinition,\n  maybeDeepFreeze,\n  mergeDeepArray,\n  getFragmentFromSelection,\n} from '../../utilities';\nimport { Cache } from '../core/types/Cache';\nimport {\n  DiffQueryAgainstStoreOptions,\n  NormalizedCache,\n  ReadMergeModifyContext,\n} from './types';\nimport { supportsResultCaching } from './entityStore';\nimport { getTypenameFromStoreObject } from './helpers';\nimport { Policies } from './policies';\nimport { InMemoryCache } from './inMemoryCache';\nimport { MissingFieldError } from '../core/types/common';\n\nexport type VariableMap = { [name: string]: any };\n\ninterface ReadContext extends ReadMergeModifyContext {\n  query: DocumentNode;\n  policies: Policies;\n  fragmentMap: FragmentMap;\n  path: (string | number)[];\n  clientOnly: boolean;\n};\n\nexport type ExecResult<R = any> = {\n  result: R;\n  missing?: MissingFieldError[];\n};\n\nfunction missingFromInvariant(\n  err: InvariantError,\n  context: ReadContext,\n) {\n  return new MissingFieldError(\n    err.message,\n    context.path.slice(),\n    context.query,\n    context.clientOnly,\n    context.variables,\n  );\n}\n\ntype ExecSelectionSetOptions = {\n  selectionSet: SelectionSetNode;\n  objectOrReference: StoreObject | Reference;\n  context: ReadContext;\n};\n\ntype ExecSubSelectedArrayOptions = {\n  field: FieldNode;\n  array: any[];\n  context: ReadContext;\n};\n\nexport interface StoreReaderConfig {\n  cache: InMemoryCache,\n  addTypename?: boolean;\n}\n\nexport class StoreReader {\n  constructor(private config: StoreReaderConfig) {\n    this.config = { addTypename: true, ...config };\n  }\n\n  /**\n   * Given a store and a query, return as much of the result as possible and\n   * identify if any data was missing from the store.\n   * @param  {DocumentNode} query A parsed GraphQL query document\n   * @param  {Store} store The Apollo Client store object\n   * @return {result: Object, complete: [boolean]}\n   */\n  public diffQueryAgainstStore<T>({\n    store,\n    query,\n    rootId = 'ROOT_QUERY',\n    variables,\n    returnPartialData = true,\n  }: DiffQueryAgainstStoreOptions): Cache.DiffResult<T> {\n    const policies = this.config.cache.policies;\n\n    variables = {\n      ...getDefaultValues(getQueryDefinition(query)),\n      ...variables,\n    };\n\n    const execResult = this.executeSelectionSet({\n      selectionSet: getMainDefinition(query).selectionSet,\n      objectOrReference: makeReference(rootId),\n      context: {\n        store,\n        query,\n        policies,\n        variables,\n        varString: JSON.stringify(variables),\n        fragmentMap: createFragmentMap(getFragmentDefinitions(query)),\n        path: [],\n        clientOnly: false,\n      },\n    });\n\n    const hasMissingFields =\n      execResult.missing && execResult.missing.length > 0;\n    if (hasMissingFields && !returnPartialData) {\n      throw execResult.missing![0];\n    }\n\n    return {\n      result: execResult.result,\n      missing: execResult.missing,\n      complete: !hasMissingFields,\n    };\n  }\n\n  public isFresh(\n    result: Record<string, any>,\n    parent: StoreObject | Reference,\n    selectionSet: SelectionSetNode,\n    context: ReadMergeModifyContext,\n  ): boolean {\n    if (supportsResultCaching(context.store) &&\n        this.knownResults.get(result) === selectionSet) {\n      const latest = this.executeSelectionSet.peek(selectionSet, parent, context);\n      if (latest && result === latest.result) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Cached version of execSelectionSetImpl.\n  private executeSelectionSet: OptimisticWrapperFunction<\n    [ExecSelectionSetOptions], // Actual arguments tuple type.\n    ExecResult, // Actual return type.\n    // Arguments type after keyArgs translation.\n    [SelectionSetNode, StoreObject | Reference, ReadMergeModifyContext]\n  > = wrap(options => this.execSelectionSetImpl(options), {\n    keyArgs(options) {\n      return [\n        options.selectionSet,\n        options.objectOrReference,\n        options.context,\n      ];\n    },\n    // Note that the parameters of makeCacheKey are determined by the\n    // array returned by keyArgs.\n    makeCacheKey(selectionSet, parent, context) {\n      if (supportsResultCaching(context.store)) {\n        return context.store.makeCacheKey(\n          selectionSet,\n          isReference(parent) ? parent.__ref : parent,\n          context.varString,\n        );\n      }\n    }\n  });\n\n  // Uncached version of executeSelectionSet.\n  private execSelectionSetImpl({\n    selectionSet,\n    objectOrReference,\n    context,\n  }: ExecSelectionSetOptions): ExecResult {\n    if (isReference(objectOrReference) &&\n        !context.policies.rootTypenamesById[objectOrReference.__ref] &&\n        !context.store.has(objectOrReference.__ref)) {\n      return {\n        result: {},\n        missing: [missingFromInvariant(\n          new InvariantError(\n            `Dangling reference to missing ${objectOrReference.__ref} object`\n          ),\n          context,\n        )],\n      };\n    }\n\n    const { variables, policies, store } = context;\n    const objectsToMerge: { [key: string]: any }[] = [];\n    const finalResult: ExecResult = { result: null };\n    const typename = store.getFieldValue<string>(objectOrReference, \"__typename\");\n\n    if (this.config.addTypename &&\n        typeof typename === \"string\" &&\n        !policies.rootIdsByTypename[typename]) {\n      // Ensure we always include a default value for the __typename\n      // field, if we have one, and this.config.addTypename is true. Note\n      // that this field can be overridden by other merged objects.\n      objectsToMerge.push({ __typename: typename });\n    }\n\n    function getMissing() {\n      return finalResult.missing || (finalResult.missing = []);\n    }\n\n    function handleMissing<T>(result: ExecResult<T>): T {\n      if (result.missing) getMissing().push(...result.missing);\n      return result.result;\n    }\n\n    const workSet = new Set(selectionSet.selections);\n\n    workSet.forEach(selection => {\n      // Omit fields with directives @skip(if: <truthy value>) or\n      // @include(if: <falsy value>).\n      if (!shouldInclude(selection, variables)) return;\n\n      if (isField(selection)) {\n        let fieldValue = policies.readField({\n          fieldName: selection.name.value,\n          field: selection,\n          variables: context.variables,\n          from: objectOrReference,\n        }, context);\n\n        const resultName = resultKeyNameFromField(selection);\n        context.path.push(resultName);\n\n        // If this field has an @client directive, then the field and\n        // everything beneath it is client-only, meaning it will never be\n        // sent to the server.\n        const wasClientOnly = context.clientOnly;\n        // Once we enter a client-only subtree of the query, we can avoid\n        // repeatedly checking selection.directives.\n        context.clientOnly = wasClientOnly || !!(\n          // We don't use the hasDirectives helper here, because it looks\n          // for directives anywhere inside the AST node, whereas we only\n          // care about directives directly attached to this field.\n          selection.directives &&\n          selection.directives.some(d => d.name.value === \"client\")\n        );\n\n        if (fieldValue === void 0) {\n          if (!addTypenameToDocument.added(selection)) {\n            getMissing().push(\n              missingFromInvariant(\n                new InvariantError(`Can't find field '${\n                  selection.name.value\n                }' on ${\n                  isReference(objectOrReference)\n                    ? objectOrReference.__ref + \" object\"\n                    : \"object \" + JSON.stringify(objectOrReference, null, 2)\n                }`),\n                context,\n              ),\n            );\n          }\n\n        } else if (Array.isArray(fieldValue)) {\n          fieldValue = handleMissing(this.executeSubSelectedArray({\n            field: selection,\n            array: fieldValue,\n            context,\n          }));\n\n        } else if (!selection.selectionSet) {\n          // If the field does not have a selection set, then we handle it\n          // as a scalar value. However, that value should not contain any\n          // Reference objects, and should be frozen in development, if it\n          // happens to be an object that is mutable.\n          if (process.env.NODE_ENV !== 'production') {\n            assertSelectionSetForIdValue(\n              context.store,\n              selection,\n              fieldValue,\n            );\n            maybeDeepFreeze(fieldValue);\n          }\n\n        } else if (fieldValue != null) {\n          // In this case, because we know the field has a selection set,\n          // it must be trying to query a GraphQLObjectType, which is why\n          // fieldValue must be != null.\n          fieldValue = handleMissing(this.executeSelectionSet({\n            selectionSet: selection.selectionSet,\n            objectOrReference: fieldValue as StoreObject | Reference,\n            context,\n          }));\n        }\n\n        if (fieldValue !== void 0) {\n          objectsToMerge.push({ [resultName]: fieldValue });\n        }\n\n        context.clientOnly = wasClientOnly;\n\n        invariant(context.path.pop() === resultName);\n\n      } else {\n        const fragment = getFragmentFromSelection(\n          selection,\n          context.fragmentMap,\n        );\n\n        if (fragment && policies.fragmentMatches(fragment, typename)) {\n          fragment.selectionSet.selections.forEach(workSet.add, workSet);\n        }\n      }\n    });\n\n    // Perform a single merge at the end so that we can avoid making more\n    // defensive shallow copies than necessary.\n    finalResult.result = mergeDeepArray(objectsToMerge);\n\n    if (process.env.NODE_ENV !== 'production') {\n      Object.freeze(finalResult.result);\n    }\n\n    // Store this result with its selection set so that we can quickly\n    // recognize it again in the StoreReader#isFresh method.\n    this.knownResults.set(finalResult.result, selectionSet);\n\n    return finalResult;\n  }\n\n  private knownResults = new WeakMap<Record<string, any>, SelectionSetNode>();\n\n  // Cached version of execSubSelectedArrayImpl.\n  private executeSubSelectedArray = wrap((options: ExecSubSelectedArrayOptions) => {\n    return this.execSubSelectedArrayImpl(options);\n  }, {\n    makeCacheKey({ field, array, context }) {\n      if (supportsResultCaching(context.store)) {\n        return context.store.makeCacheKey(\n          field,\n          array,\n          context.varString,\n        );\n      }\n    }\n  });\n\n  // Uncached version of executeSubSelectedArray.\n  private execSubSelectedArrayImpl({\n    field,\n    array,\n    context,\n  }: ExecSubSelectedArrayOptions): ExecResult {\n    let missing: MissingFieldError[] | undefined;\n\n    function handleMissing<T>(childResult: ExecResult<T>, i: number): T {\n      if (childResult.missing) {\n        missing = missing || [];\n        missing.push(...childResult.missing);\n      }\n\n      invariant(context.path.pop() === i);\n\n      return childResult.result;\n    }\n\n    if (field.selectionSet) {\n      array = array.filter(context.store.canRead);\n    }\n\n    array = array.map((item, i) => {\n      // null value in array\n      if (item === null) {\n        return null;\n      }\n\n      context.path.push(i);\n\n      // This is a nested array, recurse\n      if (Array.isArray(item)) {\n        return handleMissing(this.executeSubSelectedArray({\n          field,\n          array: item,\n          context,\n        }), i);\n      }\n\n      // This is an object, run the selection set on it\n      if (field.selectionSet) {\n        return handleMissing(this.executeSelectionSet({\n          selectionSet: field.selectionSet,\n          objectOrReference: item,\n          context,\n        }), i);\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        assertSelectionSetForIdValue(context.store, field, item);\n      }\n\n      invariant(context.path.pop() === i);\n\n      return item;\n    });\n\n    if (process.env.NODE_ENV !== 'production') {\n      Object.freeze(array);\n    }\n\n    return { result: array, missing };\n  }\n}\n\nfunction assertSelectionSetForIdValue(\n  store: NormalizedCache,\n  field: FieldNode,\n  fieldValue: any,\n) {\n  if (!field.selectionSet) {\n    const workSet = new Set([fieldValue]);\n    workSet.forEach(value => {\n      if (value && typeof value === \"object\") {\n        invariant(\n          !isReference(value),\n          `Missing selection set for object of type ${\n            getTypenameFromStoreObject(store, value)\n          } returned for query field ${field.name.value}`,\n        );\n        Object.values(value).forEach(workSet.add, workSet);\n      }\n    });\n  }\n}\n", "import { SelectionSetNode, FieldNode, DocumentNode } from 'graphql';\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { equal } from '@wry/equality';\n\nimport {\n  createFragmentMap,\n  FragmentMap,\n  getFragmentFromSelection,\n  getDefaultValues,\n  getFragmentDefinitions,\n  getOperationDefinition,\n  getTypenameFromResult,\n  makeReference,\n  isField,\n  resultKeyNameFromField,\n  StoreValue,\n  StoreObject,\n  Reference,\n  isReference,\n  shouldInclude,\n  hasDirectives,\n  cloneDeep,\n} from '../../utilities';\n\nimport { NormalizedCache, ReadMergeModifyContext, MergeTree } from './types';\nimport { makeProcessedFieldsMerger, fieldNameFromStoreName, storeValueIsStoreObject } from './helpers';\nimport { StoreReader } from './readFromStore';\nimport { InMemoryCache } from './inMemoryCache';\nimport { EntityStore } from './entityStore';\n\nexport interface WriteContext extends ReadMergeModifyContext {\n  readonly written: {\n    [dataId: string]: SelectionSetNode[];\n  };\n  readonly fragmentMap?: FragmentMap;\n  // General-purpose deep-merge function for use during writes.\n  merge<T>(existing: T, incoming: T): T;\n};\n\ninterface ProcessSelectionSetOptions {\n  dataId?: string,\n  result: Record<string, any>;\n  selectionSet: SelectionSetNode;\n  context: WriteContext;\n  mergeTree: MergeTree;\n}\n\nexport interface WriteToStoreOptions {\n  query: DocumentNode;\n  result: Object;\n  dataId?: string;\n  store: NormalizedCache;\n  variables?: Object;\n}\n\nexport class StoreWriter {\n  constructor(\n    public readonly cache: InMemoryCache,\n    private reader?: StoreReader,\n  ) {}\n\n  /**\n   * Writes the result of a query to the store.\n   *\n   * @param result The result object returned for the query document.\n   *\n   * @param query The query document whose result we are writing to the store.\n   *\n   * @param store The {@link NormalizedCache} used by Apollo for the `data` portion of the store.\n   *\n   * @param variables A map from the name of a variable to its value. These variables can be\n   * referenced by the query document.\n   *\n   * @return A `Reference` to the written object.\n   */\n  public writeToStore({\n    query,\n    result,\n    dataId,\n    store,\n    variables,\n  }: WriteToStoreOptions): Reference | undefined {\n    const operationDefinition = getOperationDefinition(query)!;\n    const merger = makeProcessedFieldsMerger();\n\n    variables = {\n      ...getDefaultValues(operationDefinition),\n      ...variables,\n    };\n\n    const ref = this.processSelectionSet({\n      result: result || Object.create(null),\n      dataId,\n      selectionSet: operationDefinition.selectionSet,\n      mergeTree: { map: new Map },\n      context: {\n        store,\n        written: Object.create(null),\n        merge<T>(existing: T, incoming: T) {\n          return merger.merge(existing, incoming) as T;\n        },\n        variables,\n        varString: JSON.stringify(variables),\n        fragmentMap: createFragmentMap(getFragmentDefinitions(query)),\n      },\n    });\n\n    if (!isReference(ref)) {\n      throw new InvariantError(`Could not identify object ${JSON.stringify(result)}`);\n    }\n\n    // Any IDs written explicitly to the cache will be retained as\n    // reachable root IDs for garbage collection purposes. Although this\n    // logic includes root IDs like ROOT_QUERY and ROOT_MUTATION, their\n    // retainment counts are effectively ignored because cache.gc() always\n    // includes them in its root ID set.\n    store.retain(ref.__ref);\n\n    return ref;\n  }\n\n  private processSelectionSet({\n    dataId,\n    result,\n    selectionSet,\n    context,\n    // This object allows processSelectionSet to report useful information\n    // to its callers without explicitly returning that information.\n    mergeTree,\n  }: ProcessSelectionSetOptions): StoreObject | Reference {\n    const { policies } = this.cache;\n\n    // Identify the result object, even if dataId was already provided,\n    // since we always need keyObject below.\n    const [id, keyObject] = policies.identify(\n      result, selectionSet, context.fragmentMap);\n\n    // If dataId was not provided, fall back to the id just generated by\n    // policies.identify.\n    dataId = dataId || id;\n\n    if (\"string\" === typeof dataId) {\n      // Avoid processing the same entity object using the same selection\n      // set more than once. We use an array instead of a Set since most\n      // entity IDs will be written using only one selection set, so the\n      // size of this array is likely to be very small, meaning indexOf is\n      // likely to be faster than Set.prototype.has.\n      const sets = context.written[dataId] || (context.written[dataId] = []);\n      const ref = makeReference(dataId);\n      if (sets.indexOf(selectionSet) >= 0) return ref;\n      sets.push(selectionSet);\n\n      // If we're about to write a result object into the store, but we\n      // happen to know that the exact same (===) result object would be\n      // returned if we were to reread the result with the same inputs,\n      // then we can skip the rest of the processSelectionSet work for\n      // this object, and immediately return a Reference to it.\n      if (this.reader && this.reader.isFresh(\n        result,\n        ref,\n        selectionSet,\n        context,\n      )) {\n        return ref;\n      }\n    }\n\n    // This variable will be repeatedly updated using context.merge to\n    // accumulate all fields that need to be written into the store.\n    let incomingFields: StoreObject = Object.create(null);\n\n    // Write any key fields that were used during identification, even if\n    // they were not mentioned in the original query.\n    if (keyObject) {\n      incomingFields = context.merge(incomingFields, keyObject);\n    }\n\n    // If typename was not passed in, infer it. Note that typename is\n    // always passed in for tricky-to-infer cases such as \"Query\" for\n    // ROOT_QUERY.\n    const typename =\n      (dataId && policies.rootTypenamesById[dataId]) ||\n      getTypenameFromResult(result, selectionSet, context.fragmentMap) ||\n      (dataId && context.store.get(dataId, \"__typename\") as string);\n\n    if (\"string\" === typeof typename) {\n      incomingFields.__typename = typename;\n    }\n\n    const workSet = new Set(selectionSet.selections);\n\n    workSet.forEach(selection => {\n      if (!shouldInclude(selection, context.variables)) return;\n\n      if (isField(selection)) {\n        const resultFieldKey = resultKeyNameFromField(selection);\n        const value = result[resultFieldKey];\n\n        if (typeof value !== 'undefined') {\n          const storeFieldName = policies.getStoreFieldName({\n            typename,\n            fieldName: selection.name.value,\n            field: selection,\n            variables: context.variables,\n          });\n\n          const childTree = getChildMergeTree(mergeTree, storeFieldName);\n\n          let incomingValue =\n            this.processFieldValue(value, selection, context, childTree);\n\n          const childTypename = selection.selectionSet\n            && context.store.getFieldValue<string>(incomingValue as StoreObject, \"__typename\")\n            || void 0;\n\n          const merge = policies.getMergeFunction(\n            typename,\n            selection.name.value,\n            childTypename,\n          );\n\n          if (merge) {\n            childTree.info = {\n              // TODO Check compatibility against any existing\n              // childTree.field?\n              field: selection,\n              typename,\n              merge,\n            };\n          } else {\n            maybeRecycleChildMergeTree(mergeTree, storeFieldName);\n          }\n\n          incomingFields = context.merge(incomingFields, {\n            [storeFieldName]: incomingValue,\n          });\n\n        } else if (\n          policies.usingPossibleTypes &&\n          !hasDirectives([\"defer\", \"client\"], selection)\n        ) {\n          throw new InvariantError(\n            `Missing field '${resultFieldKey}' in ${JSON.stringify(\n              result,\n              null,\n              2,\n            ).substring(0, 100)}`,\n          );\n        }\n      } else {\n        // This is not a field, so it must be a fragment, either inline or named\n        const fragment = getFragmentFromSelection(\n          selection,\n          context.fragmentMap,\n        );\n\n        if (fragment &&\n            // By passing result and context.variables, we enable\n            // policies.fragmentMatches to bend the rules when typename is\n            // not a known subtype of the fragment type condition, but the\n            // result object contains all the keys requested by the\n            // fragment, which strongly suggests the fragment probably\n            // matched. This fuzzy matching behavior must be enabled by\n            // including a regular expression string (such as \".*\" or\n            // \"Prefix.*\" or \".*Suffix\") in the possibleTypes array for\n            // specific supertypes; otherwise, all matching remains exact.\n            // Fuzzy matches are remembered by the Policies object and\n            // later used when reading from the cache. Since there is no\n            // incoming result object to check when reading, reading does\n            // not involve the same fuzzy inference, so the StoreReader\n            // class calls policies.fragmentMatches without passing result\n            // or context.variables. The flexibility of fuzzy matching\n            // allows existing clients to accommodate previously unknown\n            // __typename strings produced by server/schema changes, which\n            // would otherwise be breaking changes.\n            policies.fragmentMatches(fragment, typename, result, context.variables)) {\n          fragment.selectionSet.selections.forEach(workSet.add, workSet);\n        }\n      }\n    });\n\n    if (\"string\" === typeof dataId) {\n      const entityRef = makeReference(dataId);\n\n      if (mergeTree.map.size) {\n        incomingFields = this.applyMerges(mergeTree, entityRef, incomingFields, context);\n      }\n\n      if (process.env.NODE_ENV !== \"production\") {\n        const hasSelectionSet = (storeFieldName: string) =>\n          fieldsWithSelectionSets.has(fieldNameFromStoreName(storeFieldName));\n        const fieldsWithSelectionSets = new Set<string>();\n        workSet.forEach(selection => {\n          if (isField(selection) && selection.selectionSet) {\n            fieldsWithSelectionSets.add(selection.name.value);\n          }\n        });\n\n        const hasMergeFunction = (storeFieldName: string) => {\n          const childTree = mergeTree.map.get(storeFieldName);\n          return Boolean(childTree && childTree.info && childTree.info.merge);\n        };\n\n        Object.keys(incomingFields).forEach(storeFieldName => {\n          // If a merge function was defined for this field, trust that it\n          // did the right thing about (not) clobbering data. If the field\n          // has no selection set, it's a scalar field, so it doesn't need\n          // a merge function (even if it's an object, like JSON data).\n          if (hasSelectionSet(storeFieldName) &&\n              !hasMergeFunction(storeFieldName)) {\n            warnAboutDataLoss(\n              entityRef,\n              incomingFields,\n              storeFieldName,\n              context.store,\n            );\n          }\n        });\n      }\n\n      context.store.merge(dataId, incomingFields);\n\n      return entityRef;\n    }\n\n    return incomingFields;\n  }\n\n  private processFieldValue(\n    value: any,\n    field: FieldNode,\n    context: WriteContext,\n    mergeTree: MergeTree,\n  ): StoreValue {\n    if (!field.selectionSet || value === null) {\n      // In development, we need to clone scalar values so that they can be\n      // safely frozen with maybeDeepFreeze in readFromStore.ts. In production,\n      // it's cheaper to store the scalar values directly in the cache.\n      return process.env.NODE_ENV === 'production' ? value : cloneDeep(value);\n    }\n\n    if (Array.isArray(value)) {\n      return value.map((item, i) => {\n        const value = this.processFieldValue(\n          item, field, context, getChildMergeTree(mergeTree, i));\n        maybeRecycleChildMergeTree(mergeTree, i);\n        return value;\n      });\n    }\n\n    return this.processSelectionSet({\n      result: value,\n      selectionSet: field.selectionSet,\n      context,\n      mergeTree,\n    });\n  }\n\n  private applyMerges<T extends StoreValue>(\n    mergeTree: MergeTree,\n    existing: StoreValue,\n    incoming: T,\n    context: ReadMergeModifyContext,\n    getStorageArgs?: Parameters<EntityStore[\"getStorage\"]>,\n  ): T {\n    if (mergeTree.map.size && !isReference(incoming)) {\n      const e: StoreObject | Reference | undefined = (\n        // Items in the same position in different arrays are not\n        // necessarily related to each other, so when incoming is an array\n        // we process its elements as if there was no existing data.\n        !Array.isArray(incoming) &&\n        // Likewise, existing must be either a Reference or a StoreObject\n        // in order for its fields to be safe to merge with the fields of\n        // the incoming object.\n        (isReference(existing) || storeValueIsStoreObject(existing))\n      ) ? existing : void 0;\n\n      // This narrowing is implied by mergeTree.map.size > 0 and\n      // !isReference(incoming), though TypeScript understandably cannot\n      // hope to infer this type.\n      const i = incoming as StoreObject | StoreValue[];\n\n      // The options.storage objects provided to read and merge functions\n      // are derived from the identity of the parent object plus a\n      // sequence of storeFieldName strings/numbers identifying the nested\n      // field name path of each field value to be merged.\n      if (e && !getStorageArgs) {\n        getStorageArgs = [isReference(e) ? e.__ref : e];\n      }\n\n      // It's possible that applying merge functions to this subtree will\n      // not change the incoming data, so this variable tracks the fields\n      // that did change, so we can create a new incoming object when (and\n      // only when) at least one incoming field has changed. We use a Map\n      // to preserve the type of numeric keys.\n      let changedFields: Map<string | number, StoreValue> | undefined;\n\n      const getValue = (\n        from: typeof e | typeof i,\n        name: string | number,\n      ): StoreValue => {\n        return Array.isArray(from)\n          ? (typeof name === \"number\" ? from[name] : void 0)\n          : context.store.getFieldValue(from, String(name))\n      };\n\n      mergeTree.map.forEach((childTree, storeFieldName) => {\n        if (getStorageArgs) {\n          getStorageArgs.push(storeFieldName);\n        }\n        const eVal = getValue(e, storeFieldName);\n        const iVal = getValue(i, storeFieldName);\n        const aVal = this.applyMerges(\n          childTree,\n          eVal,\n          iVal,\n          context,\n          getStorageArgs,\n        );\n        if (aVal !== iVal) {\n          changedFields = changedFields || new Map;\n          changedFields.set(storeFieldName, aVal);\n        }\n        if (getStorageArgs) {\n          invariant(getStorageArgs.pop() === storeFieldName);\n        }\n      });\n\n      if (changedFields) {\n        // Shallow clone i so we can add changed fields to it.\n        incoming = (Array.isArray(i) ? i.slice(0) : { ...i }) as T;\n        changedFields.forEach((value, name) => {\n          (incoming as any)[name] = value;\n        });\n      }\n    }\n\n    if (mergeTree.info) {\n      return this.cache.policies.runMergeFunction(\n        existing,\n        incoming,\n        mergeTree.info,\n        context,\n        getStorageArgs && context.store.getStorage(...getStorageArgs),\n      );\n    }\n\n    return incoming;\n  }\n}\n\nconst emptyMergeTreePool: MergeTree[] = [];\n\nfunction getChildMergeTree(\n  { map }: MergeTree,\n  name: string | number,\n): MergeTree {\n  if (!map.has(name)) {\n    map.set(name, emptyMergeTreePool.pop() || { map: new Map });\n  }\n  return map.get(name)!;\n}\n\nfunction maybeRecycleChildMergeTree(\n  { map }: MergeTree,\n  name: string | number,\n) {\n  const childTree = map.get(name);\n  if (childTree &&\n      !childTree.info &&\n      !childTree.map.size) {\n    emptyMergeTreePool.push(childTree);\n    map.delete(name);\n  }\n}\n\nconst warnings = new Set<string>();\n\n// Note that this function is unused in production, and thus should be\n// pruned by any well-configured minifier.\nfunction warnAboutDataLoss(\n  existingRef: Reference,\n  incomingObj: StoreObject,\n  storeFieldName: string,\n  store: NormalizedCache,\n) {\n  const getChild = (objOrRef: StoreObject | Reference): StoreObject | false => {\n    const child = store.getFieldValue<StoreObject>(objOrRef, storeFieldName);\n    return typeof child === \"object\" && child;\n  };\n\n  const existing = getChild(existingRef);\n  if (!existing) return;\n\n  const incoming = getChild(incomingObj);\n  if (!incoming) return;\n\n  // It's always safe to replace a reference, since it refers to data\n  // safely stored elsewhere.\n  if (isReference(existing)) return;\n\n  // If the values are structurally equivalent, we do not need to worry\n  // about incoming replacing existing.\n  if (equal(existing, incoming)) return;\n\n  // If we're replacing every key of the existing object, then the\n  // existing data would be overwritten even if the objects were\n  // normalized, so warning would not be helpful here.\n  if (Object.keys(existing).every(\n    key => store.getFieldValue(incoming, key) !== void 0)) {\n    return;\n  }\n\n  const parentType =\n    store.getFieldValue<string>(existingRef, \"__typename\") ||\n    store.getFieldValue<string>(incomingObj, \"__typename\");\n  const fieldName = fieldNameFromStoreName(storeFieldName);\n  const typeDotName = `${parentType}.${fieldName}`;\n  // Avoid warning more than once for the same type and field name.\n  if (warnings.has(typeDotName)) return;\n  warnings.add(typeDotName);\n\n  const childTypenames: string[] = [];\n  // Arrays do not have __typename fields, and always need a custom merge\n  // function, even if their elements are normalized entities.\n  if (!Array.isArray(existing) &&\n      !Array.isArray(incoming)) {\n    [existing, incoming].forEach(child => {\n      const typename = store.getFieldValue(child, \"__typename\");\n      if (typeof typename === \"string\" &&\n          !childTypenames.includes(typename)) {\n        childTypenames.push(typename);\n      }\n    });\n  }\n\n  invariant.warn(\n`Cache data may be lost when replacing the ${fieldName} field of a ${parentType} object.\n\nTo address this problem (which is not a bug in Apollo Client), ${\n  childTypenames.length\n    ? \"either ensure all objects of type \" +\n        childTypenames.join(\" and \") + \" have an ID or a custom merge function, or \"\n    : \"\"\n}define a custom merge function for the ${\n  typeDotName\n} field, so InMemoryCache can safely merge these objects:\n\n  existing: ${JSON.stringify(existing).slice(0, 1000)}\n  incoming: ${JSON.stringify(incoming).slice(0, 1000)}\n\nFor more information about these options, please refer to the documentation:\n\n  * Ensuring entity objects have IDs: https://go.apollo.dev/c/generating-unique-identifiers\n  * Defining custom merge functions: https://go.apollo.dev/c/merging-non-normalized-objects\n`);\n}\n", "import { dep, OptimisticDependencyFunction } from \"optimism\";\nimport { Slot } from \"@wry/context\";\nimport { InMemoryCache } from \"./inMemoryCache\";\nimport { ApolloCache } from '../../core';\n\nexport interface ReactiveVar<T> {\n  (newValue?: T): T;\n  onNextChange(listener: ReactiveListener<T>): () => void;\n  attachCache(cache: ApolloCache<any>): this;\n  forgetCache(cache: ApolloCache<any>): boolean;\n}\n\nexport type ReactiveListener<T> = (value: T) => any;\n\n// Contextual Slot that acquires its value when custom read functions are\n// called in Policies#readField.\nexport const cacheSlot = new Slot<ApolloCache<any>>();\n\n// A listener function could in theory cause another listener to be added\n// to the set while we're iterating over it, so it's important to commit\n// to the original elements of the set before we begin iterating. See\n// iterateObserversSafely for another example of this pattern.\nfunction consumeAndIterate<T>(set: Set<T>, callback: (item: T) => any) {\n  if (set.size) {\n    const items: T[] = [];\n    set.forEach(item => items.push(item));\n    set.clear();\n    items.forEach(callback);\n  }\n}\n\nconst cacheInfoMap = new WeakMap<ApolloCache<any>, {\n  vars: Set<ReactiveVar<any>>;\n  dep: OptimisticDependencyFunction<ReactiveVar<any>>;\n}>();\n\nfunction getCacheInfo(cache: ApolloCache<any>) {\n  let info = cacheInfoMap.get(cache)!;\n  if (!info) {\n    cacheInfoMap.set(cache, info = {\n      vars: new Set,\n      dep: dep(),\n    });\n  }\n  return info;\n}\n\nexport function forgetCache(cache: ApolloCache<any>) {\n  getCacheInfo(cache).vars.forEach(rv => rv.forgetCache(cache));\n}\n\n// Calling forgetCache(cache) serves to silence broadcasts and allows the\n// cache to be garbage collected. However, the varsByCache WeakMap\n// preserves the set of reactive variables that were previously associated\n// with this cache, which makes it possible to \"recall\" the cache at a\n// later time, by reattaching it to those variables. If the cache has been\n// garbage collected in the meantime, because it is no longer reachable,\n// you won't be able to call recallCache(cache), and the cache will\n// automatically disappear from the varsByCache WeakMap.\nexport function recallCache(cache: ApolloCache<any>) {\n  getCacheInfo(cache).vars.forEach(rv => rv.attachCache(cache));\n}\n\nexport function makeVar<T>(value: T): ReactiveVar<T> {\n  const caches = new Set<ApolloCache<any>>();\n  const listeners = new Set<ReactiveListener<T>>();\n\n  const rv: ReactiveVar<T> = function (newValue) {\n    if (arguments.length > 0) {\n      if (value !== newValue) {\n        value = newValue!;\n        caches.forEach(cache => {\n          // Invalidate any fields with custom read functions that\n          // consumed this variable, so query results involving those\n          // fields will be recomputed the next time we read them.\n          getCacheInfo(cache).dep.dirty(rv);\n          // Broadcast changes to any caches that have previously read\n          // from this variable.\n          broadcast(cache);\n        });\n        // Finally, notify any listeners added via rv.onNextChange.\n        consumeAndIterate(listeners, listener => listener(value));\n      }\n    } else {\n      // When reading from the variable, obtain the current cache from\n      // context via cacheSlot. This isn't entirely foolproof, but it's\n      // the same system that powers varDep.\n      const cache = cacheSlot.getValue();\n      if (cache) {\n        attach(cache);\n        getCacheInfo(cache).dep(rv);\n      }\n    }\n\n    return value;\n  };\n\n  rv.onNextChange = listener => {\n    listeners.add(listener);\n    return () => {\n      listeners.delete(listener);\n    };\n  };\n\n  const attach = rv.attachCache = cache => {\n    caches.add(cache);\n    getCacheInfo(cache).vars.add(rv);\n    return rv;\n  };\n\n  rv.forgetCache = cache => caches.delete(cache);\n\n  return rv;\n}\n\ntype Broadcastable = ApolloCache<any> & {\n  // This method is protected in InMemoryCache, which we are ignoring, but\n  // we still want some semblance of type safety when we call it.\n  broadcastWatches?: InMemoryCache[\"broadcastWatches\"];\n};\n\nfunction broadcast(cache: Broadcastable) {\n  if (cache.broadcastWatches) {\n    cache.broadcastWatches();\n  }\n}\n", "import {\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n  SelectionSetNode,\n  FieldNode,\n} from 'graphql';\n\nimport { KeyTrie } from 'optimism';\nimport { invariant, InvariantError } from 'ts-invariant';\n\nimport {\n  FragmentMap,\n  getFragmentFromSelection,\n  isField,\n  getTypenameFromResult,\n  storeKeyNameFromField,\n  StoreValue,\n  StoreObject,\n  argumentsObjectFromField,\n  Reference,\n  isReference,\n  getStoreKeyName,\n  canUseWeakMap,\n  compact,\n} from '../../utilities';\nimport { IdGetter, ReadMergeModifyContext, MergeInfo } from \"./types\";\nimport {\n  hasOwn,\n  fieldNameFromStoreName,\n  storeValueIsStoreObject,\n  selectionSetMatchesResult,\n  TypeOrFieldNameRegExp,\n} from './helpers';\nimport { cacheSlot } from './reactiveVars';\nimport { InMemoryCache } from './inMemoryCache';\nimport {\n  SafeReadonly,\n  FieldSpecifier,\n  ToReferenceFunction,\n  ReadFieldFunction,\n  ReadFieldOptions,\n  CanReadFunction,\n} from '../core/types/common';\nimport { FieldValueGetter } from './entityStore';\n\nexport type TypePolicies = {\n  [__typename: string]: TypePolicy;\n}\n\n// TypeScript 3.7 will allow recursive type aliases, so this should work:\n// type KeySpecifier = (string | KeySpecifier)[]\ntype KeySpecifier = (string | any[])[];\n\ntype KeyFieldsContext = {\n  typename?: string;\n  selectionSet?: SelectionSetNode;\n  fragmentMap?: FragmentMap;\n  // May be set by the KeyFieldsFunction to report fields that were involved\n  // in computing the ID. Never passed in by the caller.\n  keyObject?: Record<string, any>;\n};\n\nexport type KeyFieldsFunction = (\n  object: Readonly<StoreObject>,\n  context: KeyFieldsContext,\n) => KeySpecifier | ReturnType<IdGetter>;\n\n// TODO Should TypePolicy be a generic type, with a TObject or TEntity\n// type parameter?\nexport type TypePolicy = {\n  // Allows defining the primary key fields for this type, either using an\n  // array of field names or a function that returns an arbitrary string.\n  keyFields?: KeySpecifier | KeyFieldsFunction | false;\n\n  // Allows defining a merge function (or merge:true/false shorthand) to\n  // be used for merging objects of this type wherever they appear, unless\n  // the parent field also defines a merge function/boolean (that is,\n  // parent field merge functions take precedence over type policy merge\n  // functions). In many cases, defining merge:true for a given type\n  // policy can save you from specifying merge:true for all the field\n  // policies where that type might be encountered.\n  merge?: FieldMergeFunction | boolean;\n\n  // In the rare event that your schema happens to use a different\n  // __typename for the root Query, Mutation, and/or Schema types, you can\n  // express your deviant preferences by enabling one of these options.\n  queryType?: true,\n  mutationType?: true,\n  subscriptionType?: true,\n\n  fields?: {\n    [fieldName: string]:\n      | FieldPolicy<any>\n      | FieldReadFunction<any>;\n  }\n};\n\nexport type KeyArgsFunction = (\n  args: Record<string, any> | null,\n  context: {\n    typename: string;\n    fieldName: string;\n    field: FieldNode | null;\n    variables?: Record<string, any>;\n  },\n) => KeySpecifier | ReturnType<IdGetter>;\n\nexport type FieldPolicy<\n  // The internal representation used to store the field's data in the\n  // cache. Must be JSON-serializable if you plan to serialize the result\n  // of cache.extract() using JSON.\n  TExisting = any,\n  // The type of the incoming parameter passed to the merge function,\n  // typically matching the GraphQL response format, but with Reference\n  // objects substituted for any identifiable child objects. Often the\n  // same as TExisting, but not necessarily.\n  TIncoming = TExisting,\n  // The type that the read function actually returns, using TExisting\n  // data and options.args as input. Usually the same as TIncoming.\n  TReadResult = TIncoming,\n> = {\n  keyArgs?: KeySpecifier | KeyArgsFunction | false;\n  read?: FieldReadFunction<TExisting, TReadResult>;\n  merge?: FieldMergeFunction<TExisting, TIncoming> | boolean;\n};\n\nexport type StorageType = Record<string, any>;\n\nfunction argsFromFieldSpecifier(spec: FieldSpecifier) {\n  return spec.args !== void 0 ? spec.args :\n    spec.field ? argumentsObjectFromField(spec.field, spec.variables) : null;\n}\n\nexport interface FieldFunctionOptions<\n  TArgs = Record<string, any>,\n  TVars = Record<string, any>,\n> {\n  args: TArgs | null;\n\n  // The name of the field, equal to options.field.name.value when\n  // options.field is available. Useful if you reuse the same function for\n  // multiple fields, and you need to know which field you're currently\n  // processing. Always a string, even when options.field is null.\n  fieldName: string;\n\n  // The full field key used internally, including serialized key arguments.\n  storeFieldName: string;\n\n  // The FieldNode object used to read this field. Useful if you need to\n  // know about other attributes of the field, such as its directives. This\n  // option will be null when a string was passed to options.readField.\n  field: FieldNode | null;\n\n  variables?: TVars;\n\n  // Utilities for dealing with { __ref } objects.\n  isReference: typeof isReference;\n  toReference: ToReferenceFunction;\n\n  // A handy place to put field-specific data that you want to survive\n  // across multiple read function calls. Useful for field-level caching,\n  // if your read function does any expensive work.\n  storage: StorageType;\n\n  cache: InMemoryCache;\n\n  // Helper function for reading other fields within the current object.\n  // If a foreign object or reference is provided, the field will be read\n  // from that object instead of the current object, so this function can\n  // be used (together with isReference) to examine the cache outside the\n  // current object. If a FieldNode is passed instead of a string, and\n  // that FieldNode has arguments, the same options.variables will be used\n  // to compute the argument values. Note that this function will invoke\n  // custom read functions for other fields, if defined. Always returns\n  // immutable data (enforced with Object.freeze in development).\n  readField: ReadFieldFunction;\n\n  // Returns true for non-normalized StoreObjects and non-dangling\n  // References, indicating that readField(name, objOrRef) has a chance of\n  // working. Useful for filtering out dangling references from lists.\n  canRead: CanReadFunction;\n\n  // Instead of just merging objects with { ...existing, ...incoming }, this\n  // helper function can be used to merge objects in a way that respects any\n  // custom merge functions defined for their fields.\n  mergeObjects: MergeObjectsFunction;\n}\n\ntype MergeObjectsFunction = <T extends StoreObject | Reference>(\n  existing: T,\n  incoming: T,\n) => T;\n\nexport type FieldReadFunction<TExisting = any, TReadResult = TExisting> = (\n  // When reading a field, one often needs to know about any existing\n  // value stored for that field. If the field is read before any value\n  // has been written to the cache, this existing parameter will be\n  // undefined, which makes it easy to use a default parameter expression\n  // to supply the initial value. This parameter is positional (rather\n  // than one of the named options) because that makes it possible for the\n  // developer to annotate it with a type, without also having to provide\n  // a whole new type for the options object.\n  existing: SafeReadonly<TExisting> | undefined,\n  options: FieldFunctionOptions,\n) => TReadResult | undefined;\n\nexport type FieldMergeFunction<TExisting = any, TIncoming = TExisting> = (\n  existing: SafeReadonly<TExisting> | undefined,\n  // The incoming parameter needs to be positional as well, for the same\n  // reasons discussed in FieldReadFunction above.\n  incoming: SafeReadonly<TIncoming>,\n  options: FieldFunctionOptions,\n) => SafeReadonly<TExisting>;\n\nexport const defaultDataIdFromObject = (\n  { __typename, id, _id }: Readonly<StoreObject>,\n  context?: KeyFieldsContext,\n) => {\n  if (typeof __typename === \"string\") {\n    if (context) {\n      context.keyObject =\n         id !== void 0 ? {  id } :\n        _id !== void 0 ? { _id } :\n        void 0;\n    }\n    // If there is no object.id, fall back to object._id.\n    if (id === void 0) id = _id;\n    if (id !== void 0) {\n      return `${__typename}:${(\n        typeof id === \"number\" ||\n        typeof id === \"string\"\n      ) ? id : JSON.stringify(id)}`;\n    }\n  }\n};\n\nconst nullKeyFieldsFn: KeyFieldsFunction = () => void 0;\nconst simpleKeyArgsFn: KeyArgsFunction = (_args, context) => context.fieldName;\n\n// These merge functions can be selected by specifying merge:true or\n// merge:false in a field policy.\nconst mergeTrueFn: FieldMergeFunction<any> =\n  (existing, incoming, { mergeObjects }) => mergeObjects(existing, incoming);\nconst mergeFalseFn: FieldMergeFunction<any> = (_, incoming) => incoming;\n\nexport type PossibleTypesMap = {\n  [supertype: string]: string[];\n};\n\nexport class Policies {\n  private typePolicies: {\n    [__typename: string]: {\n      keyFn?: KeyFieldsFunction;\n      merge?: FieldMergeFunction<any>;\n      fields: {\n        [fieldName: string]: {\n          keyFn?: KeyArgsFunction;\n          read?: FieldReadFunction<any>;\n          merge?: FieldMergeFunction<any>;\n        };\n      };\n    };\n  } = Object.create(null);\n\n  private toBeAdded: {\n    [__typename: string]: TypePolicy[];\n  } = Object.create(null);\n\n  // Map from subtype names to sets of supertype names. Note that this\n  // representation inverts the structure of possibleTypes (whose keys are\n  // supertypes and whose values are arrays of subtypes) because it tends\n  // to be much more efficient to search upwards than downwards.\n  private supertypeMap = new Map<string, Set<string>>();\n\n  // Any fuzzy subtypes specified by possibleTypes will be converted to\n  // RegExp objects and recorded here. Every key of this map can also be\n  // found in supertypeMap. In many cases this Map will be empty, which\n  // means no fuzzy subtype checking will happen in fragmentMatches.\n  private fuzzySubtypes = new Map<string, RegExp>();\n\n  public readonly cache: InMemoryCache;\n\n  public readonly rootIdsByTypename: Record<string, string> = Object.create(null);\n  public readonly rootTypenamesById: Record<string, string> = Object.create(null);\n\n  public readonly usingPossibleTypes = false;\n\n  constructor(private config: {\n    cache: InMemoryCache;\n    dataIdFromObject?: KeyFieldsFunction;\n    possibleTypes?: PossibleTypesMap;\n    typePolicies?: TypePolicies;\n  }) {\n    this.config = {\n      dataIdFromObject: defaultDataIdFromObject,\n      ...config,\n    };\n\n    this.cache = this.config.cache;\n\n    this.setRootTypename(\"Query\");\n    this.setRootTypename(\"Mutation\");\n    this.setRootTypename(\"Subscription\");\n\n    if (config.possibleTypes) {\n      this.addPossibleTypes(config.possibleTypes);\n    }\n\n    if (config.typePolicies) {\n      this.addTypePolicies(config.typePolicies);\n    }\n  }\n\n  public identify(\n    object: StoreObject,\n    selectionSet?: SelectionSetNode,\n    fragmentMap?: FragmentMap,\n  ): [string?, StoreObject?] {\n    // TODO Use an AliasMap here?\n    const typename = selectionSet && fragmentMap\n      ? getTypenameFromResult(object, selectionSet, fragmentMap)\n      : object.__typename;\n\n    // It should be possible to write root Query fields with\n    // writeFragment, using { __typename: \"Query\", ... } as the data, but\n    // it does not make sense to allow the same identification behavior\n    // for the Mutation and Subscription types, since application code\n    // should never be writing directly to (or reading directly from)\n    // those root objects.\n    if (typename === this.rootTypenamesById.ROOT_QUERY) {\n      return [\"ROOT_QUERY\"];\n    }\n\n    const context: KeyFieldsContext = {\n      typename,\n      selectionSet,\n      fragmentMap,\n    };\n\n    let id: string | undefined;\n\n    const policy = typename && this.getTypePolicy(typename);\n    let keyFn = policy && policy.keyFn || this.config.dataIdFromObject;\n    while (keyFn) {\n      const specifierOrId = keyFn(object, context);\n      if (Array.isArray(specifierOrId)) {\n        keyFn = keyFieldsFnFromSpecifier(specifierOrId);\n      } else {\n        id = specifierOrId;\n        break;\n      }\n    }\n\n    id = id && String(id);\n\n    return context.keyObject ? [id, context.keyObject] : [id];\n  }\n\n  public addTypePolicies(typePolicies: TypePolicies) {\n    Object.keys(typePolicies).forEach(typename => {\n      const {\n        queryType,\n        mutationType,\n        subscriptionType,\n        ...incoming\n      } = typePolicies[typename];\n\n      // Though {query,mutation,subscription}Type configurations are rare,\n      // it's important to call setRootTypename as early as possible,\n      // since these configurations should apply consistently for the\n      // entire lifetime of the cache. Also, since only one __typename can\n      // qualify as one of these root types, these three properties cannot\n      // be inherited, unlike the rest of the incoming properties. That\n      // restriction is convenient, because the purpose of this.toBeAdded\n      // is to delay the processing of type/field policies until the first\n      // time they're used, allowing policies to be added in any order as\n      // long as all relevant policies (including policies for supertypes)\n      // have been added by the time a given policy is used for the first\n      // time. In other words, since inheritance doesn't matter for these\n      // properties, there's also no need to delay their processing using\n      // the this.toBeAdded queue.\n      if (queryType) this.setRootTypename(\"Query\", typename);\n      if (mutationType) this.setRootTypename(\"Mutation\", typename);\n      if (subscriptionType) this.setRootTypename(\"Subscription\", typename);\n\n      if (hasOwn.call(this.toBeAdded, typename)) {\n        this.toBeAdded[typename].push(incoming);\n      } else {\n        this.toBeAdded[typename] = [incoming];\n      }\n    });\n  }\n\n  private updateTypePolicy(typename: string, incoming: TypePolicy) {\n    const existing = this.getTypePolicy(typename);\n    const { keyFields, fields } = incoming;\n\n    function setMerge(\n      existing: { merge?: FieldMergeFunction | boolean; },\n      merge?: FieldMergeFunction | boolean,\n    ) {\n      existing.merge =\n        typeof merge === \"function\" ? merge :\n        // Pass merge:true as a shorthand for a merge implementation\n        // that returns options.mergeObjects(existing, incoming).\n        merge === true ? mergeTrueFn :\n        // Pass merge:false to make incoming always replace existing\n        // without any warnings about data clobbering.\n        merge === false ? mergeFalseFn :\n        existing.merge;\n    }\n\n    // Type policies can define merge functions, as an alternative to\n    // using field policies to merge child objects.\n    setMerge(existing, incoming.merge);\n\n    existing.keyFn =\n      // Pass false to disable normalization for this typename.\n      keyFields === false ? nullKeyFieldsFn :\n      // Pass an array of strings to use those fields to compute a\n      // composite ID for objects of this typename.\n      Array.isArray(keyFields) ? keyFieldsFnFromSpecifier(keyFields) :\n      // Pass a function to take full control over identification.\n      typeof keyFields === \"function\" ? keyFields :\n      // Leave existing.keyFn unchanged if above cases fail.\n      existing.keyFn;\n\n    if (fields) {\n      Object.keys(fields).forEach(fieldName => {\n        const existing = this.getFieldPolicy(typename, fieldName, true)!;\n        const incoming = fields[fieldName];\n\n        if (typeof incoming === \"function\") {\n          existing.read = incoming;\n        } else {\n          const { keyArgs, read, merge } = incoming;\n\n          existing.keyFn =\n            // Pass false to disable argument-based differentiation of\n            // field identities.\n            keyArgs === false ? simpleKeyArgsFn :\n            // Pass an array of strings to use named arguments to\n            // compute a composite identity for the field.\n            Array.isArray(keyArgs) ? keyArgsFnFromSpecifier(keyArgs) :\n            // Pass a function to take full control over field identity.\n            typeof keyArgs === \"function\" ? keyArgs :\n            // Leave existing.keyFn unchanged if above cases fail.\n            existing.keyFn;\n\n          if (typeof read === \"function\") {\n            existing.read = read;\n          }\n\n          setMerge(existing, merge);\n        }\n\n        if (existing.read && existing.merge) {\n          // If we have both a read and a merge function, assume\n          // keyArgs:false, because read and merge together can take\n          // responsibility for interpreting arguments in and out. This\n          // default assumption can always be overridden by specifying\n          // keyArgs explicitly in the FieldPolicy.\n          existing.keyFn = existing.keyFn || simpleKeyArgsFn;\n        }\n      });\n    }\n  }\n\n  private setRootTypename(\n    which: \"Query\" | \"Mutation\" | \"Subscription\",\n    typename: string = which,\n  ) {\n    const rootId = \"ROOT_\" + which.toUpperCase();\n    const old = this.rootTypenamesById[rootId];\n    if (typename !== old) {\n      invariant(!old || old === which, `Cannot change root ${which} __typename more than once`);\n      // First, delete any old __typename associated with this rootId from\n      // rootIdsByTypename.\n      if (old) delete this.rootIdsByTypename[old];\n      // Now make this the only __typename that maps to this rootId.\n      this.rootIdsByTypename[typename] = rootId;\n      // Finally, update the __typename associated with this rootId.\n      this.rootTypenamesById[rootId] = typename;\n    }\n  }\n\n  public addPossibleTypes(possibleTypes: PossibleTypesMap) {\n    (this.usingPossibleTypes as boolean) = true;\n    Object.keys(possibleTypes).forEach(supertype => {\n      // Make sure all types have an entry in this.supertypeMap, even if\n      // their supertype set is empty, so we can return false immediately\n      // from policies.fragmentMatches for unknown supertypes.\n      this.getSupertypeSet(supertype, true);\n\n      possibleTypes[supertype].forEach(subtype => {\n        this.getSupertypeSet(subtype, true)!.add(supertype);\n        const match = subtype.match(TypeOrFieldNameRegExp);\n        if (!match || match[0] !== subtype) {\n          // TODO Don't interpret just any invalid typename as a RegExp.\n          this.fuzzySubtypes.set(subtype, new RegExp(subtype));\n        }\n      });\n    });\n  }\n\n  private getTypePolicy(typename: string): Policies[\"typePolicies\"][string] {\n    if (!hasOwn.call(this.typePolicies, typename)) {\n      const policy: Policies[\"typePolicies\"][string] =\n        this.typePolicies[typename] = Object.create(null);\n      policy.fields = Object.create(null);\n\n      // When the TypePolicy for typename is first accessed, instead of\n      // starting with an empty policy object, inherit any properties or\n      // fields from the type policies of the supertypes of typename.\n      //\n      // Any properties or fields defined explicitly within the TypePolicy\n      // for typename will take precedence, and if there are multiple\n      // supertypes, the properties of policies whose types were added\n      // later via addPossibleTypes will take precedence over those of\n      // earlier supertypes. TODO Perhaps we should warn about these\n      // conflicts in development, and recommend defining the property\n      // explicitly in the subtype policy?\n      //\n      // Field policy inheritance is atomic/shallow: you can't inherit a\n      // field policy and then override just its read function, since read\n      // and merge functions often need to cooperate, so changing only one\n      // of them would be a recipe for inconsistency.\n      //\n      // Once the TypePolicy for typename has been accessed, its\n      // properties can still be updated directly using addTypePolicies,\n      // but future changes to supertype policies will not be reflected in\n      // this policy, because this code runs at most once per typename.\n      const supertypes = this.supertypeMap.get(typename);\n      if (supertypes && supertypes.size) {\n        supertypes.forEach(supertype => {\n          const { fields, ...rest } = this.getTypePolicy(supertype);\n          Object.assign(policy, rest);\n          Object.assign(policy.fields, fields);\n        });\n      }\n    }\n\n    const inbox = this.toBeAdded[typename];\n    if (inbox && inbox.length) {\n      this.updateTypePolicy(typename, compact(...inbox.splice(0)));\n    }\n\n    return this.typePolicies[typename];\n  }\n\n  private getFieldPolicy(\n    typename: string | undefined,\n    fieldName: string,\n    createIfMissing: boolean,\n  ): {\n    keyFn?: KeyArgsFunction;\n    read?: FieldReadFunction<any>;\n    merge?: FieldMergeFunction<any>;\n  } | undefined {\n    if (typename) {\n      const fieldPolicies = this.getTypePolicy(typename).fields;\n      return fieldPolicies[fieldName] || (\n        createIfMissing && (fieldPolicies[fieldName] = Object.create(null)));\n    }\n  }\n\n  private getSupertypeSet(\n    subtype: string,\n    createIfMissing: boolean,\n  ): Set<string> | undefined {\n    let supertypeSet = this.supertypeMap.get(subtype);\n    if (!supertypeSet && createIfMissing) {\n      this.supertypeMap.set(subtype, supertypeSet = new Set<string>());\n    }\n    return supertypeSet;\n  }\n\n  public fragmentMatches(\n    fragment: InlineFragmentNode | FragmentDefinitionNode,\n    typename: string | undefined,\n    result?: Record<string, any>,\n    variables?: Record<string, any>,\n  ): boolean {\n    if (!fragment.typeCondition) return true;\n\n    // If the fragment has a type condition but the object we're matching\n    // against does not have a __typename, the fragment cannot match.\n    if (!typename) return false;\n\n    const supertype = fragment.typeCondition.name.value;\n    // Common case: fragment type condition and __typename are the same.\n    if (typename === supertype) return true;\n\n    if (this.usingPossibleTypes &&\n        this.supertypeMap.has(supertype)) {\n      const typenameSupertypeSet = this.getSupertypeSet(typename, true)!;\n      const workQueue = [typenameSupertypeSet];\n      const maybeEnqueue = (subtype: string) => {\n        const supertypeSet = this.getSupertypeSet(subtype, false);\n        if (supertypeSet &&\n            supertypeSet.size &&\n            workQueue.indexOf(supertypeSet) < 0) {\n          workQueue.push(supertypeSet);\n        }\n      };\n\n      // We need to check fuzzy subtypes only if we encountered fuzzy\n      // subtype strings in addPossibleTypes, and only while writing to\n      // the cache, since that's when selectionSetMatchesResult gives a\n      // strong signal of fragment matching. The StoreReader class calls\n      // policies.fragmentMatches without passing a result object, so\n      // needToCheckFuzzySubtypes is always false while reading.\n      let needToCheckFuzzySubtypes = !!(result && this.fuzzySubtypes.size);\n      let checkingFuzzySubtypes = false;\n\n      // It's important to keep evaluating workQueue.length each time through\n      // the loop, because the queue can grow while we're iterating over it.\n      for (let i = 0; i < workQueue.length; ++i) {\n        const supertypeSet = workQueue[i];\n\n        if (supertypeSet.has(supertype)) {\n          if (!typenameSupertypeSet.has(supertype)) {\n            if (checkingFuzzySubtypes) {\n              invariant.warn(`Inferring subtype ${typename} of supertype ${supertype}`);\n            }\n            // Record positive results for faster future lookup.\n            // Unfortunately, we cannot safely cache negative results,\n            // because new possibleTypes data could always be added to the\n            // Policies class.\n            typenameSupertypeSet.add(supertype);\n          }\n          return true;\n        }\n\n        supertypeSet.forEach(maybeEnqueue);\n\n        if (needToCheckFuzzySubtypes &&\n            // Start checking fuzzy subtypes only after exhausting all\n            // non-fuzzy subtypes (after the final iteration of the loop).\n            i === workQueue.length - 1 &&\n            // We could wait to compare fragment.selectionSet to result\n            // after we verify the supertype, but this check is often less\n            // expensive than that search, and we will have to do the\n            // comparison anyway whenever we find a potential match.\n            selectionSetMatchesResult(fragment.selectionSet, result!, variables)) {\n          // We don't always need to check fuzzy subtypes (if no result\n          // was provided, or !this.fuzzySubtypes.size), but, when we do,\n          // we only want to check them once.\n          needToCheckFuzzySubtypes = false;\n          checkingFuzzySubtypes = true;\n\n          // If we find any fuzzy subtypes that match typename, extend the\n          // workQueue to search through the supertypes of those fuzzy\n          // subtypes. Otherwise the for-loop will terminate and we'll\n          // return false below.\n          this.fuzzySubtypes.forEach((regExp, fuzzyString) => {\n            const match = typename.match(regExp);\n            if (match && match[0] === typename) {\n              maybeEnqueue(fuzzyString);\n            }\n          });\n        }\n      }\n    }\n\n    return false;\n  }\n\n  public hasKeyArgs(typename: string | undefined, fieldName: string) {\n    const policy = this.getFieldPolicy(typename, fieldName, false);\n    return !!(policy && policy.keyFn);\n  }\n\n  public getStoreFieldName(fieldSpec: FieldSpecifier): string {\n    const { typename, fieldName } = fieldSpec;\n    const policy = this.getFieldPolicy(typename, fieldName, false);\n    let storeFieldName: string | undefined;\n\n    let keyFn = policy && policy.keyFn;\n    if (keyFn && typename) {\n      const context: Parameters<KeyArgsFunction>[1] = {\n        typename,\n        fieldName,\n        field: fieldSpec.field || null,\n        variables: fieldSpec.variables,\n      };\n      const args = argsFromFieldSpecifier(fieldSpec);\n      while (keyFn) {\n        const specifierOrString = keyFn(args, context);\n        if (Array.isArray(specifierOrString)) {\n          keyFn = keyArgsFnFromSpecifier(specifierOrString);\n        } else {\n          // If the custom keyFn returns a falsy value, fall back to\n          // fieldName instead.\n          storeFieldName = specifierOrString || fieldName;\n          break;\n        }\n      }\n    }\n\n    if (storeFieldName === void 0) {\n      storeFieldName = fieldSpec.field\n        ? storeKeyNameFromField(fieldSpec.field, fieldSpec.variables)\n        : getStoreKeyName(fieldName, argsFromFieldSpecifier(fieldSpec));\n    }\n\n    // Make sure custom field names start with the actual field.name.value\n    // of the field, so we can always figure out which properties of a\n    // StoreObject correspond to which original field names.\n    return fieldName === fieldNameFromStoreName(storeFieldName)\n      ? storeFieldName\n      : fieldName + \":\" + storeFieldName;\n  }\n\n  public readField<V = StoreValue>(\n    options: ReadFieldOptions,\n    context: ReadMergeModifyContext,\n  ): SafeReadonly<V> | undefined {\n    const objectOrReference = options.from;\n    if (!objectOrReference) return;\n\n    const nameOrField = options.field || options.fieldName;\n    if (!nameOrField) return;\n\n    if (options.typename === void 0) {\n      const typename = context.store.getFieldValue<string>(objectOrReference, \"__typename\");\n      if (typename) options.typename = typename;\n    }\n\n    const storeFieldName = this.getStoreFieldName(options);\n    const fieldName = fieldNameFromStoreName(storeFieldName);\n    const existing = context.store.getFieldValue<V>(objectOrReference, storeFieldName);\n    const policy = this.getFieldPolicy(options.typename, fieldName, false);\n    const read = policy && policy.read;\n\n    if (read) {\n      const readOptions = makeFieldFunctionOptions(\n        this,\n        objectOrReference,\n        options,\n        context,\n        context.store.getStorage(\n          isReference(objectOrReference)\n            ? objectOrReference.__ref\n            : objectOrReference,\n          storeFieldName,\n        ),\n      );\n\n      // Call read(existing, readOptions) with cacheSlot holding this.cache.\n      return cacheSlot.withValue(\n        this.cache,\n        read,\n        [existing, readOptions],\n      ) as SafeReadonly<V>;\n    }\n\n    return existing;\n  }\n\n  public getMergeFunction(\n    parentTypename: string | undefined,\n    fieldName: string,\n    childTypename: string | undefined,\n  ): FieldMergeFunction | undefined {\n    let policy:\n      | Policies[\"typePolicies\"][string]\n      | Policies[\"typePolicies\"][string][\"fields\"][string]\n      | undefined =\n      this.getFieldPolicy(parentTypename, fieldName, false);\n    let merge = policy && policy.merge;\n    if (!merge && childTypename) {\n      policy = this.getTypePolicy(childTypename);\n      merge = policy && policy.merge;\n    }\n    return merge;\n  }\n\n  public runMergeFunction(\n    existing: StoreValue,\n    incoming: StoreValue,\n    { field, typename, merge }: MergeInfo,\n    context: ReadMergeModifyContext,\n    storage?: StorageType,\n  ) {\n    if (merge === mergeTrueFn) {\n      // Instead of going to the trouble of creating a full\n      // FieldFunctionOptions object and calling mergeTrueFn, we can\n      // simply call mergeObjects, as mergeTrueFn would.\n      return makeMergeObjectsFunction(\n        context.store.getFieldValue\n      )(existing as StoreObject,\n        incoming as StoreObject);\n    }\n\n    if (merge === mergeFalseFn) {\n      // Likewise for mergeFalseFn, whose implementation is even simpler.\n      return incoming;\n    }\n\n    return merge(existing, incoming, makeFieldFunctionOptions(\n      this,\n      // Unlike options.readField for read functions, we do not fall\n      // back to the current object if no foreignObjOrRef is provided,\n      // because it's not clear what the current object should be for\n      // merge functions: the (possibly undefined) existing object, or\n      // the incoming object? If you think your merge function needs\n      // to read sibling fields in order to produce a new value for\n      // the current field, you might want to rethink your strategy,\n      // because that's a recipe for making merge behavior sensitive\n      // to the order in which fields are written into the cache.\n      // However, readField(name, ref) is useful for merge functions\n      // that need to deduplicate child objects and references.\n      void 0,\n      { typename,\n        fieldName: field.name.value,\n        field,\n        variables: context.variables },\n      context,\n      storage || Object.create(null),\n    ));\n  }\n}\n\nfunction makeFieldFunctionOptions(\n  policies: Policies,\n  objectOrReference: StoreObject | Reference | undefined,\n  fieldSpec: FieldSpecifier,\n  context: ReadMergeModifyContext,\n  storage: StorageType,\n): FieldFunctionOptions {\n  const storeFieldName = policies.getStoreFieldName(fieldSpec);\n  const fieldName = fieldNameFromStoreName(storeFieldName);\n  const variables = fieldSpec.variables || context.variables;\n  const { getFieldValue, toReference, canRead } = context.store;\n\n  return {\n    args: argsFromFieldSpecifier(fieldSpec),\n    field: fieldSpec.field || null,\n    fieldName,\n    storeFieldName,\n    variables,\n    isReference,\n    toReference,\n    storage,\n    cache: policies.cache,\n    canRead,\n\n    readField<T>(\n      fieldNameOrOptions: string | ReadFieldOptions,\n      from?: StoreObject | Reference,\n    ) {\n      const options: ReadFieldOptions =\n        typeof fieldNameOrOptions === \"string\" ? {\n          fieldName: fieldNameOrOptions,\n          from,\n        } : { ...fieldNameOrOptions };\n\n      if (void 0 === options.from) {\n        options.from = objectOrReference;\n      }\n\n      if (void 0 === options.variables) {\n        options.variables = variables;\n      }\n\n      return policies.readField<T>(options, context);\n    },\n\n    mergeObjects: makeMergeObjectsFunction(getFieldValue),\n  };\n}\n\nfunction makeMergeObjectsFunction(\n  getFieldValue: FieldValueGetter,\n): MergeObjectsFunction {\n  return function mergeObjects(existing, incoming) {\n    if (Array.isArray(existing) || Array.isArray(incoming)) {\n      throw new InvariantError(\"Cannot automatically merge arrays\");\n    }\n\n    // These dynamic checks are necessary because the parameters of a\n    // custom merge function can easily have the any type, so the type\n    // system cannot always enforce the StoreObject | Reference parameter\n    // types of options.mergeObjects.\n    if (existing && typeof existing === \"object\" &&\n        incoming && typeof incoming === \"object\") {\n      const eType = getFieldValue(existing, \"__typename\");\n      const iType = getFieldValue(incoming, \"__typename\");\n      const typesDiffer = eType && iType && eType !== iType;\n\n      if (typesDiffer ||\n          !storeValueIsStoreObject(existing) ||\n          !storeValueIsStoreObject(incoming)) {\n        return incoming;\n      }\n\n      return { ...existing, ...incoming };\n    }\n\n    return incoming;\n  };\n}\n\nfunction keyArgsFnFromSpecifier(\n  specifier: KeySpecifier,\n): KeyArgsFunction {\n  return (args, context) => {\n    return args ? `${context.fieldName}:${\n      JSON.stringify(computeKeyObject(args, specifier, false))\n    }` : context.fieldName;\n  };\n}\n\nfunction keyFieldsFnFromSpecifier(\n  specifier: KeySpecifier,\n): KeyFieldsFunction {\n  const trie = new KeyTrie<{\n    aliasMap?: AliasMap;\n  }>(canUseWeakMap);\n\n  return (object, context) => {\n    let aliasMap: AliasMap | undefined;\n    if (context.selectionSet && context.fragmentMap) {\n      const info = trie.lookupArray([\n        context.selectionSet,\n        context.fragmentMap,\n      ]);\n      aliasMap = info.aliasMap || (\n        info.aliasMap = makeAliasMap(context.selectionSet, context.fragmentMap)\n      );\n    }\n\n    const keyObject = context.keyObject =\n      computeKeyObject(object, specifier, true, aliasMap);\n\n    return `${context.typename}:${JSON.stringify(keyObject)}`;\n  };\n}\n\ntype AliasMap = {\n  // Map from store key to corresponding response key. Undefined when there are\n  // no aliased fields in this selection set.\n  aliases?: Record<string, string>;\n  // Map from store key to AliasMap correponding to a child selection set.\n  // Undefined when there are no child selection sets.\n  subsets?: Record<string, AliasMap>;\n};\n\nfunction makeAliasMap(\n  selectionSet: SelectionSetNode,\n  fragmentMap: FragmentMap,\n): AliasMap {\n  let map: AliasMap = Object.create(null);\n  // TODO Cache this work, perhaps by storing selectionSet._aliasMap?\n  const workQueue = new Set([selectionSet]);\n  workQueue.forEach(selectionSet => {\n    selectionSet.selections.forEach(selection => {\n      if (isField(selection)) {\n        if (selection.alias) {\n          const responseKey = selection.alias.value;\n          const storeKey = selection.name.value;\n          if (storeKey !== responseKey) {\n            const aliases = map.aliases || (map.aliases = Object.create(null));\n            aliases[storeKey] = responseKey;\n          }\n        }\n        if (selection.selectionSet) {\n          const subsets = map.subsets || (map.subsets = Object.create(null));\n          subsets[selection.name.value] =\n            makeAliasMap(selection.selectionSet, fragmentMap);\n        }\n      } else {\n        const fragment = getFragmentFromSelection(selection, fragmentMap);\n        if (fragment) {\n          workQueue.add(fragment.selectionSet);\n        }\n      }\n    });\n  });\n  return map;\n}\n\nfunction computeKeyObject(\n  response: Record<string, any>,\n  specifier: KeySpecifier,\n  strict: boolean,\n  aliasMap?: AliasMap,\n): Record<string, any> {\n  // The order of adding properties to keyObj affects its JSON serialization,\n  // so we are careful to build keyObj in the order of keys given in\n  // specifier.\n  const keyObj = Object.create(null);\n  let prevKey: string | undefined;\n  specifier.forEach(s => {\n    if (Array.isArray(s)) {\n      if (typeof prevKey === \"string\") {\n        const subsets = aliasMap && aliasMap.subsets;\n        const subset = subsets && subsets[prevKey];\n        keyObj[prevKey] = computeKeyObject(response[prevKey], s, strict, subset);\n      }\n    } else {\n      const aliases = aliasMap && aliasMap.aliases;\n      const responseName = aliases && aliases[s] || s;\n      if (hasOwn.call(response, responseName)) {\n        keyObj[prevKey = s] = response[responseName];\n      } else {\n        invariant(!strict, `Missing field '${responseName}' while computing key fields`);\n        prevKey = void 0;\n      }\n    }\n  });\n  return keyObj;\n}\n", "// Make builtins like Map and Set safe to use with non-extensible objects.\nimport './fixPolyfills';\n\nimport { DocumentNode } from 'graphql';\nimport { dep, wrap } from 'optimism';\n\nimport { ApolloCache } from '../core/cache';\nimport { Cache } from '../core/types/Cache';\nimport { MissingFieldError } from '../core/types/common';\nimport {\n  addTypenameToDocument,\n  StoreObject,\n  Reference,\n  isReference,\n} from '../../utilities';\nimport {\n  ApolloReducerConfig,\n  NormalizedCacheObject,\n} from './types';\nimport { StoreReader } from './readFromStore';\nimport { StoreWriter } from './writeToStore';\nimport { EntityStore, supportsResultCaching } from './entityStore';\nimport { makeVar, forgetCache, recallCache } from './reactiveVars';\nimport {\n  defaultDataIdFromObject,\n  PossibleTypesMap,\n  Policies,\n  TypePolicies,\n} from './policies';\nimport { hasOwn } from './helpers';\n\nexport interface InMemoryCacheConfig extends ApolloReducerConfig {\n  resultCaching?: boolean;\n  possibleTypes?: PossibleTypesMap;\n  typePolicies?: TypePolicies;\n}\n\nconst defaultConfig: InMemoryCacheConfig = {\n  dataIdFromObject: defaultDataIdFromObject,\n  addTypename: true,\n  resultCaching: true,\n  typePolicies: {},\n};\n\nexport class InMemoryCache extends ApolloCache<NormalizedCacheObject> {\n  private data: EntityStore;\n  private optimisticData: EntityStore;\n\n  protected config: InMemoryCacheConfig;\n  private watches = new Set<Cache.WatchOptions>();\n  private addTypename: boolean;\n\n  private typenameDocumentCache = new Map<DocumentNode, DocumentNode>();\n  private storeReader: StoreReader;\n  private storeWriter: StoreWriter;\n\n  // Dynamically imported code can augment existing typePolicies or\n  // possibleTypes by calling cache.policies.addTypePolicies or\n  // cache.policies.addPossibletypes.\n  public readonly policies: Policies;\n\n  public readonly makeVar = makeVar;\n\n  constructor(config: InMemoryCacheConfig = {}) {\n    super();\n    this.config = { ...defaultConfig, ...config };\n    this.addTypename = !!this.config.addTypename;\n\n    this.policies = new Policies({\n      cache: this,\n      dataIdFromObject: this.config.dataIdFromObject,\n      possibleTypes: this.config.possibleTypes,\n      typePolicies: this.config.typePolicies,\n    });\n\n    // Passing { resultCaching: false } in the InMemoryCache constructor options\n    // will completely disable dependency tracking, which will improve memory\n    // usage but worsen the performance of repeated reads.\n    this.data = new EntityStore.Root({\n      policies: this.policies,\n      resultCaching: this.config.resultCaching,\n    });\n\n    // When no optimistic writes are currently active, cache.optimisticData ===\n    // cache.data, so there are no additional layers on top of the actual data.\n    // When an optimistic update happens, this.optimisticData will become a\n    // linked list of OptimisticCacheLayer objects that terminates with the\n    // original this.data cache object.\n    this.optimisticData = this.data;\n\n    this.storeWriter = new StoreWriter(\n      this,\n      this.storeReader = new StoreReader({\n        cache: this,\n        addTypename: this.addTypename,\n      }),\n    );\n  }\n\n  public restore(data: NormalizedCacheObject): this {\n    if (data) this.data.replace(data);\n    return this;\n  }\n\n  public extract(optimistic: boolean = false): NormalizedCacheObject {\n    return (optimistic ? this.optimisticData : this.data).extract();\n  }\n\n  public read<T>(options: Cache.ReadOptions): T | null {\n    const {\n      // Since read returns data or null, without any additional metadata\n      // about whether/where there might have been missing fields, the\n      // default behavior cannot be returnPartialData = true (like it is\n      // for the diff method), since defaulting to true would violate the\n      // integrity of the T in the return type. However, partial data may\n      // be useful in some cases, so returnPartialData:true may be\n      // specified explicitly.\n      returnPartialData = false,\n    } = options;\n    try {\n      return this.storeReader.diffQueryAgainstStore<T>({\n        store: options.optimistic ? this.optimisticData : this.data,\n        query: options.query,\n        variables: options.variables,\n        rootId: options.rootId,\n        config: this.config,\n        returnPartialData,\n      }).result || null;\n    } catch (e) {\n      if (e instanceof MissingFieldError) {\n        // Swallow MissingFieldError and return null, so callers do not\n        // need to worry about catching \"normal\" exceptions resulting from\n        // incomplete cache data. Unexpected errors will be re-thrown. If\n        // you need more information about which fields were missing, use\n        // cache.diff instead, and examine diffResult.missing.\n        return null;\n      }\n      throw e;\n    }\n  }\n\n  public write(options: Cache.WriteOptions): Reference | undefined {\n    try {\n      ++this.txCount;\n      return this.storeWriter.writeToStore({\n        store: this.data,\n        query: options.query,\n        result: options.result,\n        dataId: options.dataId,\n        variables: options.variables,\n      });\n    } finally {\n      if (!--this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  }\n\n  public modify(options: Cache.ModifyOptions): boolean {\n    if (hasOwn.call(options, \"id\") && !options.id) {\n      // To my knowledge, TypeScript does not currently provide a way to\n      // enforce that an optional property?:type must *not* be undefined\n      // when present. That ability would be useful here, because we want\n      // options.id to default to ROOT_QUERY only when no options.id was\n      // provided. If the caller attempts to pass options.id with a\n      // falsy/undefined value (perhaps because cache.identify failed), we\n      // should not assume the goal was to modify the ROOT_QUERY object.\n      // We could throw, but it seems natural to return false to indicate\n      // that nothing was modified.\n      return false;\n    }\n    const store = options.optimistic // Defaults to false.\n      ? this.optimisticData\n      : this.data;\n    try {\n      ++this.txCount;\n      return store.modify(options.id || \"ROOT_QUERY\", options.fields);\n    } finally {\n      if (!--this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  }\n\n  public diff<T>(options: Cache.DiffOptions): Cache.DiffResult<T> {\n    return this.storeReader.diffQueryAgainstStore({\n      store: options.optimistic ? this.optimisticData : this.data,\n      rootId: options.id || \"ROOT_QUERY\",\n      query: options.query,\n      variables: options.variables,\n      returnPartialData: options.returnPartialData,\n      config: this.config,\n    });\n  }\n\n  public watch(watch: Cache.WatchOptions): () => void {\n    if (!this.watches.size) {\n      // In case we previously called forgetCache(this) because\n      // this.watches became empty (see below), reattach this cache to any\n      // reactive variables on which it previously depended. It might seem\n      // paradoxical that we're able to recall something we supposedly\n      // forgot, but the point of calling forgetCache(this) is to silence\n      // useless broadcasts while this.watches is empty, and to allow the\n      // cache to be garbage collected. If, however, we manage to call\n      // recallCache(this) here, this cache object must not have been\n      // garbage collected yet, and should resume receiving updates from\n      // reactive variables, now that it has a watcher to notify.\n      recallCache(this);\n    }\n    this.watches.add(watch);\n    if (watch.immediate) {\n      this.maybeBroadcastWatch(watch);\n    }\n    return () => {\n      // Once we remove the last watch from this.watches, cache.broadcastWatches\n      // no longer does anything, so we preemptively tell the reactive variable\n      // system to exclude this cache from future broadcasts.\n      if (this.watches.delete(watch) && !this.watches.size) {\n        forgetCache(this);\n      }\n      this.watchDep.dirty(watch);\n      // Remove this watch from the LRU cache managed by the\n      // maybeBroadcastWatch OptimisticWrapperFunction, to prevent memory\n      // leaks involving the closure of watch.callback.\n      this.maybeBroadcastWatch.forget(watch);\n    };\n  }\n\n  // Request garbage collection of unreachable normalized entities.\n  public gc() {\n    return this.optimisticData.gc();\n  }\n\n  // Call this method to ensure the given root ID remains in the cache after\n  // garbage collection, along with its transitive child entities. Note that\n  // the cache automatically retains all directly written entities. By default,\n  // the retainment persists after optimistic updates are removed. Pass true\n  // for the optimistic argument if you would prefer for the retainment to be\n  // discarded when the top-most optimistic layer is removed. Returns the\n  // resulting (non-negative) retainment count.\n  public retain(rootId: string, optimistic?: boolean): number {\n    return (optimistic ? this.optimisticData : this.data).retain(rootId);\n  }\n\n  // Call this method to undo the effect of the retain method, above. Once the\n  // retainment count falls to zero, the given ID will no longer be preserved\n  // during garbage collection, though it may still be preserved by other safe\n  // entities that refer to it. Returns the resulting (non-negative) retainment\n  // count, in case that's useful.\n  public release(rootId: string, optimistic?: boolean): number {\n    return (optimistic ? this.optimisticData : this.data).release(rootId);\n  }\n\n  // Returns the canonical ID for a given StoreObject, obeying typePolicies\n  // and keyFields (and dataIdFromObject, if you still use that). At minimum,\n  // the object must contain a __typename and any primary key fields required\n  // to identify entities of that type. If you pass a query result object, be\n  // sure that none of the primary key fields have been renamed by aliasing.\n  // If you pass a Reference object, its __ref ID string will be returned.\n  public identify(object: StoreObject | Reference): string | undefined {\n    return isReference(object) ? object.__ref :\n      this.policies.identify(object)[0];\n  }\n\n  public evict(options: Cache.EvictOptions): boolean {\n    if (!options.id) {\n      if (hasOwn.call(options, \"id\")) {\n        // See comment in modify method about why we return false when\n        // options.id exists but is falsy/undefined.\n        return false;\n      }\n      options = { ...options, id: \"ROOT_QUERY\" };\n    }\n    try {\n      // It's unlikely that the eviction will end up invoking any other\n      // cache update operations while it's running, but {in,de}crementing\n      // this.txCount still seems like a good idea, for uniformity with\n      // the other update methods.\n      ++this.txCount;\n      return this.optimisticData.evict(options);\n    } finally {\n      if (!--this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  }\n\n  public reset(): Promise<void> {\n    this.data.clear();\n    this.optimisticData = this.data;\n    this.broadcastWatches();\n    return Promise.resolve();\n  }\n\n  public removeOptimistic(idToRemove: string) {\n    const newOptimisticData = this.optimisticData.removeLayer(idToRemove);\n    if (newOptimisticData !== this.optimisticData) {\n      this.optimisticData = newOptimisticData;\n      this.broadcastWatches();\n    }\n  }\n\n  private txCount = 0;\n\n  public performTransaction(\n    transaction: (cache: InMemoryCache) => any,\n    optimisticId?: string | null,\n  ) {\n    const perform = (layer?: EntityStore) => {\n      const { data, optimisticData } = this;\n      ++this.txCount;\n      if (layer) {\n        this.data = this.optimisticData = layer;\n      }\n      try {\n        transaction(this);\n      } finally {\n        --this.txCount;\n        this.data = data;\n        this.optimisticData = optimisticData;\n      }\n    };\n\n    let fromOptimisticTransaction = false;\n\n    if (typeof optimisticId === 'string') {\n      // Note that there can be multiple layers with the same optimisticId.\n      // When removeOptimistic(id) is called for that id, all matching layers\n      // will be removed, and the remaining layers will be reapplied.\n      this.optimisticData = this.optimisticData.addLayer(optimisticId, perform);\n      fromOptimisticTransaction = true;\n    } else if (optimisticId === null) {\n      // Ensure both this.data and this.optimisticData refer to the root\n      // (non-optimistic) layer of the cache during the transaction. Note\n      // that this.data could be a Layer if we are currently executing an\n      // optimistic transaction function, but otherwise will always be an\n      // EntityStore.Root instance.\n      perform(this.data);\n    } else {\n      // Otherwise, leave this.data and this.optimisticData unchanged and\n      // run the transaction with broadcast batching.\n      perform();\n    }\n\n    // This broadcast does nothing if this.txCount > 0.\n    this.broadcastWatches(fromOptimisticTransaction);\n  }\n\n  public transformDocument(document: DocumentNode): DocumentNode {\n    if (this.addTypename) {\n      let result = this.typenameDocumentCache.get(document);\n      if (!result) {\n        result = addTypenameToDocument(document);\n        this.typenameDocumentCache.set(document, result);\n        // If someone calls transformDocument and then mistakenly passes the\n        // result back into an API that also calls transformDocument, make sure\n        // we don't keep creating new query documents.\n        this.typenameDocumentCache.set(result, result);\n      }\n      return result;\n    }\n    return document;\n  }\n\n  protected broadcastWatches(fromOptimisticTransaction?: boolean) {\n    if (!this.txCount) {\n      this.watches.forEach(c => this.maybeBroadcastWatch(c, fromOptimisticTransaction));\n    }\n  }\n\n  private maybeBroadcastWatch = wrap((\n    c: Cache.WatchOptions,\n    fromOptimisticTransaction?: boolean,\n  ) => {\n    return this.broadcastWatch.call(this, c, !!fromOptimisticTransaction);\n  }, {\n    makeCacheKey: (c: Cache.WatchOptions) => {\n      // Return a cache key (thus enabling result caching) only if we're\n      // currently using a data store that can track cache dependencies.\n      const store = c.optimistic ? this.optimisticData : this.data;\n      if (supportsResultCaching(store)) {\n        const { optimistic, rootId, variables } = c;\n        return store.makeCacheKey(\n          c.query,\n          // Different watches can have the same query, optimistic\n          // status, rootId, and variables, but if their callbacks are\n          // different, the (identical) result needs to be delivered to\n          // each distinct callback. The easiest way to achieve that\n          // separation is to include c.callback in the cache key for\n          // maybeBroadcastWatch calls. See issue #5733.\n          c.callback,\n          JSON.stringify({ optimistic, rootId, variables }),\n        );\n      }\n    }\n  });\n\n  private watchDep = dep<Cache.WatchOptions>();\n\n  // This method is wrapped by maybeBroadcastWatch, which is called by\n  // broadcastWatches, so that we compute and broadcast results only when\n  // the data that would be broadcast might have changed. It would be\n  // simpler to check for changes after recomputing a result but before\n  // broadcasting it, but this wrapping approach allows us to skip both\n  // the recomputation and the broadcast, in most cases.\n  private broadcastWatch(\n    c: Cache.WatchOptions,\n    fromOptimisticTransaction: boolean,\n  ) {\n    // First, invalidate any other maybeBroadcastWatch wrapper functions\n    // currently depending on this Cache.WatchOptions object (including\n    // the one currently calling broadcastWatch), so they will be included\n    // in the next broadcast, even if the result they receive is the same\n    // as the previous result they received. This is important because we\n    // are about to deliver a different result to c.callback, so any\n    // previous results should have a chance to be redelivered.\n    this.watchDep.dirty(c);\n\n    // Next, re-depend on this.watchDep for just this invocation of\n    // maybeBroadcastWatch (this is a no-op if broadcastWatch was not\n    // called by maybeBroadcastWatch). This allows only the most recent\n    // maybeBroadcastWatch invocation for this watcher to remain cached,\n    // enabling re-broadcast of previous results even if they have not\n    // changed since they were previously delivered.\n    this.watchDep(c);\n\n    const diff = this.diff<any>({\n      query: c.query,\n      variables: c.variables,\n      optimistic: c.optimistic,\n    });\n\n    if (c.optimistic && fromOptimisticTransaction) {\n      diff.fromOptimisticTransaction = true;\n    }\n\n    c.callback(diff);\n  }\n}\n", "import {\n  DocumentNode,\n  OperationDefinitionNode,\n  SelectionSetNode,\n  SelectionNode,\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n  FieldNode,\n  ASTNode,\n  visit,\n  BREAK,\n} from 'graphql';\nimport { invariant } from 'ts-invariant';\n\nimport { ApolloCache } from '../cache';\nimport {\n  FragmentMap,\n  StoreObject,\n  argumentsObjectFromField,\n  buildQueryFromSelectionSet,\n  createFragmentMap,\n  getFragmentDefinitions,\n  getMainDefinition,\n  hasDirectives,\n  isField,\n  isInlineFragment,\n  mergeDeep,\n  mergeDeepArray,\n  removeClientSetsFromDocument,\n  resultKeyNameFromField,\n  shouldInclude,\n} from '../utilities';\nimport { ApolloClient } from './ApolloClient';\nimport { Resolvers, OperationVariables } from './types';\nimport { FetchResult } from '../link/core';\nimport { cacheSlot } from '../cache';\n\nexport type Resolver = (\n  rootValue?: any,\n  args?: any,\n  context?: any,\n  info?: {\n    field: FieldNode;\n    fragmentMap: FragmentMap;\n  },\n) => any;\n\nexport type VariableMap = { [name: string]: any };\n\nexport type FragmentMatcher = (\n  rootValue: any,\n  typeCondition: string,\n  context: any,\n) => boolean;\n\nexport type ExecContext = {\n  fragmentMap: FragmentMap;\n  context: any;\n  variables: VariableMap;\n  fragmentMatcher: FragmentMatcher;\n  defaultOperationType: string;\n  exportedVariables: Record<string, any>;\n  onlyRunForcedResolvers: boolean;\n};\n\nexport type LocalStateOptions<TCacheShape> = {\n  cache: ApolloCache<TCacheShape>;\n  client?: ApolloClient<TCacheShape>;\n  resolvers?: Resolvers | Resolvers[];\n  fragmentMatcher?: FragmentMatcher;\n};\n\nexport class LocalState<TCacheShape> {\n  private cache: ApolloCache<TCacheShape>;\n  private client: ApolloClient<TCacheShape>;\n  private resolvers?: Resolvers;\n  private fragmentMatcher: FragmentMatcher;\n\n  constructor({\n    cache,\n    client,\n    resolvers,\n    fragmentMatcher,\n  }: LocalStateOptions<TCacheShape>) {\n    this.cache = cache;\n\n    if (client) {\n      this.client = client;\n    }\n\n    if (resolvers) {\n      this.addResolvers(resolvers);\n    }\n\n    if (fragmentMatcher) {\n      this.setFragmentMatcher(fragmentMatcher);\n    }\n  }\n\n  public addResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.resolvers = this.resolvers || {};\n    if (Array.isArray(resolvers)) {\n      resolvers.forEach(resolverGroup => {\n        this.resolvers = mergeDeep(this.resolvers, resolverGroup);\n      });\n    } else {\n      this.resolvers = mergeDeep(this.resolvers, resolvers);\n    }\n  }\n\n  public setResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.resolvers = {};\n    this.addResolvers(resolvers);\n  }\n\n  public getResolvers() {\n    return this.resolvers || {};\n  }\n\n  // Run local client resolvers against the incoming query and remote data.\n  // Locally resolved field values are merged with the incoming remote data,\n  // and returned. Note that locally resolved fields will overwrite\n  // remote data using the same field name.\n  public async runResolvers<TData>({\n    document,\n    remoteResult,\n    context,\n    variables,\n    onlyRunForcedResolvers = false,\n  }: {\n    document: DocumentNode | null;\n    remoteResult: FetchResult<TData>;\n    context?: Record<string, any>;\n    variables?: Record<string, any>;\n    onlyRunForcedResolvers?: boolean;\n  }): Promise<FetchResult<TData>> {\n    if (document) {\n      return this.resolveDocument(\n        document,\n        remoteResult.data,\n        context,\n        variables,\n        this.fragmentMatcher,\n        onlyRunForcedResolvers,\n      ).then(localResult => ({\n        ...remoteResult,\n        data: localResult.result,\n      }));\n    }\n\n    return remoteResult;\n  }\n\n  public setFragmentMatcher(fragmentMatcher: FragmentMatcher) {\n    this.fragmentMatcher = fragmentMatcher;\n  }\n\n  public getFragmentMatcher(): FragmentMatcher {\n    return this.fragmentMatcher;\n  }\n\n  // Client queries contain everything in the incoming document (if a @client\n  // directive is found).\n  public clientQuery(document: DocumentNode) {\n    if (hasDirectives(['client'], document)) {\n      if (this.resolvers) {\n        return document;\n      }\n    }\n    return null;\n  }\n\n  // Server queries are stripped of all @client based selection sets.\n  public serverQuery(document: DocumentNode) {\n    return removeClientSetsFromDocument(document);\n  }\n\n  public prepareContext(context?: Record<string, any>) {\n    const { cache } = this;\n    return {\n      ...context,\n      cache,\n      // Getting an entry's cache key is useful for local state resolvers.\n      getCacheKey(obj: StoreObject) {\n        return cache.identify(obj);\n      },\n    };\n  }\n\n  // To support `@client @export(as: \"someVar\")` syntax, we'll first resolve\n  // @client @export fields locally, then pass the resolved values back to be\n  // used alongside the original operation variables.\n  public async addExportedVariables(\n    document: DocumentNode,\n    variables: OperationVariables = {},\n    context = {},\n  ) {\n    if (document) {\n      return this.resolveDocument(\n        document,\n        this.buildRootValueFromCache(document, variables) || {},\n        this.prepareContext(context),\n        variables,\n      ).then(data => ({\n        ...variables,\n        ...data.exportedVariables,\n      }));\n    }\n\n    return {\n      ...variables,\n    };\n  }\n\n  public shouldForceResolvers(document: ASTNode) {\n    let forceResolvers = false;\n    visit(document, {\n      Directive: {\n        enter(node) {\n          if (node.name.value === 'client' && node.arguments) {\n            forceResolvers = node.arguments.some(\n              arg =>\n                arg.name.value === 'always' &&\n                arg.value.kind === 'BooleanValue' &&\n                arg.value.value === true,\n            );\n            if (forceResolvers) {\n              return BREAK;\n            }\n          }\n        },\n      },\n    });\n    return forceResolvers;\n  }\n\n  // Query the cache and return matching data.\n  private buildRootValueFromCache(\n    document: DocumentNode,\n    variables?: Record<string, any>,\n  ) {\n    return this.cache.diff({\n      query: buildQueryFromSelectionSet(document),\n      variables,\n      returnPartialData: true,\n      optimistic: false,\n    }).result;\n  }\n\n  private async resolveDocument<TData>(\n    document: DocumentNode,\n    rootValue: TData,\n    context: any = {},\n    variables: VariableMap = {},\n    fragmentMatcher: FragmentMatcher = () => true,\n    onlyRunForcedResolvers: boolean = false,\n  ) {\n    const mainDefinition = getMainDefinition(document);\n    const fragments = getFragmentDefinitions(document);\n    const fragmentMap = createFragmentMap(fragments);\n\n    const definitionOperation = (mainDefinition as OperationDefinitionNode)\n      .operation;\n\n    const defaultOperationType = definitionOperation\n      ? definitionOperation.charAt(0).toUpperCase() +\n        definitionOperation.slice(1)\n      : 'Query';\n\n    const { cache, client } = this;\n    const execContext: ExecContext = {\n      fragmentMap,\n      context: {\n        ...context,\n        cache,\n        client,\n      },\n      variables,\n      fragmentMatcher,\n      defaultOperationType,\n      exportedVariables: {},\n      onlyRunForcedResolvers,\n    };\n\n    return this.resolveSelectionSet(\n      mainDefinition.selectionSet,\n      rootValue,\n      execContext,\n    ).then(result => ({\n      result,\n      exportedVariables: execContext.exportedVariables,\n    }));\n  }\n\n  private async resolveSelectionSet<TData>(\n    selectionSet: SelectionSetNode,\n    rootValue: TData,\n    execContext: ExecContext,\n  ) {\n    const { fragmentMap, context, variables } = execContext;\n    const resultsToMerge: TData[] = [rootValue];\n\n    const execute = async (selection: SelectionNode): Promise<void> => {\n      if (!shouldInclude(selection, variables)) {\n        // Skip this entirely.\n        return;\n      }\n\n      if (isField(selection)) {\n        return this.resolveField(selection, rootValue, execContext).then(\n          fieldResult => {\n            if (typeof fieldResult !== 'undefined') {\n              resultsToMerge.push({\n                [resultKeyNameFromField(selection)]: fieldResult,\n              } as TData);\n            }\n          },\n        );\n      }\n\n      let fragment: InlineFragmentNode | FragmentDefinitionNode;\n\n      if (isInlineFragment(selection)) {\n        fragment = selection;\n      } else {\n        // This is a named fragment.\n        fragment = fragmentMap[selection.name.value];\n        invariant(fragment, `No fragment named ${selection.name.value}`);\n      }\n\n      if (fragment && fragment.typeCondition) {\n        const typeCondition = fragment.typeCondition.name.value;\n        if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n          return this.resolveSelectionSet(\n            fragment.selectionSet,\n            rootValue,\n            execContext,\n          ).then(fragmentResult => {\n            resultsToMerge.push(fragmentResult);\n          });\n        }\n      }\n    };\n\n    return Promise.all(selectionSet.selections.map(execute)).then(function() {\n      return mergeDeepArray(resultsToMerge);\n    });\n  }\n\n  private async resolveField(\n    field: FieldNode,\n    rootValue: any,\n    execContext: ExecContext,\n  ): Promise<any> {\n    const { variables } = execContext;\n    const fieldName = field.name.value;\n    const aliasedFieldName = resultKeyNameFromField(field);\n    const aliasUsed = fieldName !== aliasedFieldName;\n    const defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n    let resultPromise = Promise.resolve(defaultResult);\n\n    // Usually all local resolvers are run when passing through here, but\n    // if we've specifically identified that we only want to run forced\n    // resolvers (that is, resolvers for fields marked with\n    // `@client(always: true)`), then we'll skip running non-forced resolvers.\n    if (\n      !execContext.onlyRunForcedResolvers ||\n      this.shouldForceResolvers(field)\n    ) {\n      const resolverType =\n        rootValue.__typename || execContext.defaultOperationType;\n      const resolverMap = this.resolvers && this.resolvers[resolverType];\n      if (resolverMap) {\n        const resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n        if (resolve) {\n          resultPromise = Promise.resolve(\n            // In case the resolve function accesses reactive variables,\n            // set cacheSlot to the current cache instance.\n            cacheSlot.withValue(this.cache, resolve, [\n              rootValue,\n              argumentsObjectFromField(field, variables),\n              execContext.context,\n              { field, fragmentMap: execContext.fragmentMap },\n            ])\n          );\n        }\n      }\n    }\n\n    return resultPromise.then((result = defaultResult) => {\n      // If an @export directive is associated with the current field, store\n      // the `as` export variable name and current result for later use.\n      if (field.directives) {\n        field.directives.forEach(directive => {\n          if (directive.name.value === 'export' && directive.arguments) {\n            directive.arguments.forEach(arg => {\n              if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {\n                execContext.exportedVariables[arg.value.value] = result;\n              }\n            });\n          }\n        });\n      }\n\n      // Handle all scalar types here.\n      if (!field.selectionSet) {\n        return result;\n      }\n\n      // From here down, the field has a selection set, which means it's trying\n      // to query a GraphQLObjectType.\n      if (result == null) {\n        // Basically any field in a GraphQL response can be null, or missing\n        return result;\n      }\n\n      if (Array.isArray(result)) {\n        return this.resolveSubSelectedArray(field, result, execContext);\n      }\n\n      // Returned value is an object, and the query has a sub-selection. Recurse.\n      if (field.selectionSet) {\n        return this.resolveSelectionSet(\n          field.selectionSet,\n          result,\n          execContext,\n        );\n      }\n    });\n  }\n\n  private resolveSubSelectedArray(\n    field: FieldNode,\n    result: any[],\n    execContext: ExecContext,\n  ): any {\n    return Promise.all(\n      result.map(item => {\n        if (item === null) {\n          return null;\n        }\n\n        // This is a nested array, recurse.\n        if (Array.isArray(item)) {\n          return this.resolveSubSelectedArray(field, item, execContext);\n        }\n\n        // This is an object, run the selection set on it.\n        if (field.selectionSet) {\n          return this.resolveSelectionSet(field.selectionSet, item, execContext);\n        }\n      }),\n    );\n  }\n}\n", "import { DocumentNode, GraphQLError } from 'graphql';\nimport { equal } from \"@wry/equality\";\n\nimport { Cache, ApolloCache } from '../cache';\nimport { WatchQueryOptions, ErrorPolicy } from './watchQueryOptions';\nimport { ObservableQuery } from './ObservableQuery';\nimport { QueryListener } from './types';\nimport { FetchResult } from '../link/core';\nimport {\n  ObservableSubscription,\n  isNonEmptyArray,\n  graphQLResultHasError,\n  canUseWeakMap,\n} from '../utilities';\nimport {\n  NetworkStatus,\n  isNetworkRequestInFlight,\n} from './networkStatus';\nimport { ApolloError } from '../errors';\n\nexport type QueryStoreValue = Pick<QueryInfo,\n  | \"variables\"\n  | \"networkStatus\"\n  | \"networkError\"\n  | \"graphQLErrors\"\n  >;\n\nconst destructiveMethodCounts = new (\n  canUseWeakMap ? WeakMap : Map\n)<ApolloCache<any>, number>();\n\nfunction wrapDestructiveCacheMethod(\n  cache: ApolloCache<any>,\n  methodName: keyof ApolloCache<any>,\n) {\n  const original = cache[methodName];\n  if (typeof original === \"function\") {\n    cache[methodName] = function () {\n      destructiveMethodCounts.set(\n        cache,\n        // The %1e15 allows the count to wrap around to 0 safely every\n        // quadrillion evictions, so there's no risk of overflow. To be\n        // clear, this is more of a pedantic principle than something\n        // that matters in any conceivable practical scenario.\n        (destructiveMethodCounts.get(cache)! + 1) % 1e15,\n      );\n      return original.apply(this, arguments);\n    };\n  }\n}\n\nfunction cancelNotifyTimeout(info: QueryInfo) {\n  if (info[\"notifyTimeout\"]) {\n    clearTimeout(info[\"notifyTimeout\"]);\n    info[\"notifyTimeout\"] = void 0;\n  }\n}\n\n// A QueryInfo object represents a single query managed by the\n// QueryManager, which tracks all QueryInfo objects by queryId in its\n// this.queries Map. QueryInfo objects store the latest results and errors\n// for the given query, and are responsible for reporting those results to\n// the corresponding ObservableQuery, via the QueryInfo.notify method.\n// Results are reported asynchronously whenever setDiff marks the\n// QueryInfo object as dirty, though a call to the QueryManager's\n// broadcastQueries method may trigger the notification before it happens\n// automatically. This class used to be a simple interface type without\n// any field privacy or meaningful methods, which is why it still has so\n// many public fields. The effort to lock down and simplify the QueryInfo\n// interface is ongoing, and further improvements are welcome.\nexport class QueryInfo {\n  listeners = new Set<QueryListener>();\n  document: DocumentNode | null = null;\n  lastRequestId = 1;\n  subscriptions = new Set<ObservableSubscription>();\n  variables?: Record<string, any>;\n  networkStatus?: NetworkStatus;\n  networkError?: Error | null;\n  graphQLErrors?: ReadonlyArray<GraphQLError>;\n  stopped = false;\n\n  constructor(private cache: ApolloCache<any>) {\n    // Track how often cache.evict is called, since we want eviction to\n    // override the feud-stopping logic in the markResult method, by\n    // causing shouldWrite to return true. Wrapping the cache.evict method\n    // is a bit of a hack, but it saves us from having to make eviction\n    // counting an official part of the ApolloCache API.\n    if (!destructiveMethodCounts.has(cache)) {\n      destructiveMethodCounts.set(cache, 0);\n      wrapDestructiveCacheMethod(cache, \"evict\");\n      wrapDestructiveCacheMethod(cache, \"modify\");\n      wrapDestructiveCacheMethod(cache, \"reset\");\n    }\n  }\n\n  public init(query: {\n    document: DocumentNode;\n    variables: Record<string, any> | undefined,\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus?: NetworkStatus,\n    observableQuery?: ObservableQuery<any>;\n    lastRequestId?: number;\n  }): this {\n    let networkStatus = query.networkStatus || NetworkStatus.loading;\n    if (this.variables &&\n        this.networkStatus !== NetworkStatus.loading &&\n        !equal(this.variables, query.variables)) {\n      networkStatus = NetworkStatus.setVariables;\n    }\n\n    if (!equal(query.variables, this.variables)) {\n      this.diff = null;\n    }\n\n    Object.assign(this, {\n      document: query.document,\n      variables: query.variables,\n      networkError: null,\n      graphQLErrors: this.graphQLErrors || [],\n      networkStatus,\n    });\n\n    if (query.observableQuery) {\n      this.setObservableQuery(query.observableQuery);\n    }\n\n    if (query.lastRequestId) {\n      this.lastRequestId = query.lastRequestId;\n    }\n\n    return this;\n  }\n\n  private dirty: boolean = false;\n\n  private notifyTimeout?: ReturnType<typeof setTimeout>;\n\n  private diff: Cache.DiffResult<any> | null = null;\n\n  reset() {\n    cancelNotifyTimeout(this);\n    this.diff = null;\n    this.dirty = false;\n  }\n\n  getDiff(variables = this.variables): Cache.DiffResult<any> {\n    if (this.diff && equal(variables, this.variables)) {\n      return this.diff;\n    }\n\n    this.updateWatch(this.variables = variables);\n\n    return this.diff = this.cache.diff({\n      query: this.document!,\n      variables,\n      returnPartialData: true,\n      optimistic: true,\n    });\n  }\n\n  setDiff(diff: Cache.DiffResult<any> | null) {\n    const oldDiff = this.diff;\n    this.diff = diff;\n    if (!this.dirty &&\n        (diff && diff.result) !== (oldDiff && oldDiff.result)) {\n      this.dirty = true;\n      if (!this.notifyTimeout) {\n        this.notifyTimeout = setTimeout(() => this.notify(), 0);\n      }\n    }\n  }\n\n  public readonly observableQuery: ObservableQuery<any> | null = null;\n  private oqListener?: QueryListener;\n\n  setObservableQuery(oq: ObservableQuery<any> | null) {\n    if (oq === this.observableQuery) return;\n\n    if (this.oqListener) {\n      this.listeners.delete(this.oqListener);\n    }\n\n    (this as any).observableQuery = oq;\n\n    if (oq) {\n      oq[\"queryInfo\"] = this;\n      this.listeners.add(this.oqListener = () => {\n        // If this.diff came from an optimistic transaction, deliver the\n        // current cache data to the ObservableQuery, but don't perform a\n        // full reobservation, since oq.reobserve might make a network\n        // request, and we don't want to trigger network requests for\n        // optimistic updates.\n        if (this.getDiff().fromOptimisticTransaction) {\n          oq[\"observe\"]();\n        } else {\n          oq.reobserve();\n        }\n      });\n    } else {\n      delete this.oqListener;\n    }\n  }\n\n  notify() {\n    cancelNotifyTimeout(this);\n\n    if (this.shouldNotify()) {\n      this.listeners.forEach(listener => listener(this));\n    }\n\n    this.dirty = false;\n  }\n\n  private shouldNotify() {\n    if (!this.dirty || !this.listeners.size) {\n      return false;\n    }\n\n    if (isNetworkRequestInFlight(this.networkStatus) &&\n        this.observableQuery) {\n      const { fetchPolicy } = this.observableQuery.options;\n      if (fetchPolicy !== \"cache-only\" &&\n          fetchPolicy !== \"cache-and-network\") {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public stop() {\n    if (!this.stopped) {\n      this.stopped = true;\n\n      this.cancel();\n      // Revert back to the no-op version of cancel inherited from\n      // QueryInfo.prototype.\n      delete this.cancel;\n\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n\n      const oq = this.observableQuery;\n      if (oq) oq.stopPolling();\n    }\n  }\n\n  // This method is a no-op by default, until/unless overridden by the\n  // updateWatch method.\n  private cancel() {}\n\n  private lastWatch?: Cache.WatchOptions;\n\n  private updateWatch(variables = this.variables) {\n    const oq = this.observableQuery;\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return;\n    }\n    if (!this.lastWatch ||\n        this.lastWatch.query !== this.document ||\n        !equal(variables, this.lastWatch.variables)) {\n      this.cancel();\n      this.cancel = this.cache.watch(this.lastWatch = {\n        query: this.document!,\n        variables,\n        optimistic: true,\n        callback: diff => this.setDiff(diff),\n      });\n    }\n  }\n\n  private lastWrite?: {\n    result: FetchResult<any>;\n    variables: WatchQueryOptions[\"variables\"];\n    dmCount: number | undefined;\n  };\n\n  private shouldWrite(\n    result: FetchResult<any>,\n    variables: WatchQueryOptions[\"variables\"],\n  ) {\n    const { lastWrite } = this;\n    return !(\n      lastWrite &&\n      // If cache.evict has been called since the last time we wrote this\n      // data into the cache, there's a chance writing this result into\n      // the cache will repair what was evicted.\n      lastWrite.dmCount === destructiveMethodCounts.get(this.cache) &&\n      equal(variables, lastWrite.variables) &&\n      equal(result.data, lastWrite.result.data)\n    );\n  }\n\n  public markResult<T>(\n    result: FetchResult<T>,\n    options: Pick<WatchQueryOptions,\n      | \"variables\"\n      | \"fetchPolicy\"\n      | \"errorPolicy\">,\n    allowCacheWrite: boolean,\n  ) {\n    this.graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];\n\n    // Cancel the pending notify timeout (if it exists) to prevent extraneous network\n    // requests. To allow future notify timeouts, diff and dirty are reset as well.\n    this.reset();\n\n    if (options.fetchPolicy === 'no-cache') {\n      this.diff = { result: result.data, complete: true };\n\n    } else if (!this.stopped && allowCacheWrite) {\n      if (shouldWriteResult(result, options.errorPolicy)) {\n        // Using a transaction here so we have a chance to read the result\n        // back from the cache before the watch callback fires as a result\n        // of writeQuery, so we can store the new diff quietly and ignore\n        // it when we receive it redundantly from the watch callback.\n        this.cache.performTransaction(cache => {\n          if (this.shouldWrite(result, options.variables)) {\n            cache.writeQuery({\n              query: this.document!,\n              data: result.data as T,\n              variables: options.variables,\n            });\n\n            this.lastWrite = {\n              result,\n              variables: options.variables,\n              dmCount: destructiveMethodCounts.get(this.cache),\n            };\n          } else {\n            // If result is the same as the last result we received from\n            // the network (and the variables match too), avoid writing\n            // result into the cache again. The wisdom of skipping this\n            // cache write is far from obvious, since any cache write\n            // could be the one that puts the cache back into a desired\n            // state, fixing corruption or missing data. However, if we\n            // always write every network result into the cache, we enable\n            // feuds between queries competing to update the same data in\n            // incompatible ways, which can lead to an endless cycle of\n            // cache broadcasts and useless network requests. As with any\n            // feud, eventually one side must step back from the brink,\n            // letting the other side(s) have the last word(s). There may\n            // be other points where we could break this cycle, such as\n            // silencing the broadcast for cache.writeQuery (not a good\n            // idea, since it just delays the feud a bit) or somehow\n            // avoiding the network request that just happened (also bad,\n            // because the server could return useful new data). All\n            // options considered, skipping this cache write seems to be\n            // the least damaging place to break the cycle, because it\n            // reflects the intuition that we recently wrote this exact\n            // result into the cache, so the cache *should* already/still\n            // contain this data. If some other query has clobbered that\n            // data in the meantime, that's too bad, but there will be no\n            // winners if every query blindly reverts to its own version\n            // of the data. This approach also gives the network a chance\n            // to return new data, which will be written into the cache as\n            // usual, notifying only those queries that are directly\n            // affected by the cache updates, as usual. In the future, an\n            // even more sophisticated cache could perhaps prevent or\n            // mitigate the clobbering somehow, but that would make this\n            // particular cache write even less important, and thus\n            // skipping it would be even safer than it is today.\n            if (this.diff && this.diff.complete) {\n              // Reuse data from the last good (complete) diff that we\n              // received, when possible.\n              result.data = this.diff.result;\n              return;\n            }\n            // If the previous this.diff was incomplete, fall through to\n            // re-reading the latest data with cache.diff, below.\n          }\n\n          const diff = cache.diff<T>({\n            query: this.document!,\n            variables: options.variables,\n            returnPartialData: true,\n            optimistic: true,\n          });\n\n          // In case the QueryManager stops this QueryInfo before its\n          // results are delivered, it's important to avoid restarting the\n          // cache watch when markResult is called.\n          if (!this.stopped) {\n            // Any time we're about to update this.diff, we need to make\n            // sure we've started watching the cache.\n            this.updateWatch(options.variables);\n          }\n\n          // If we're allowed to write to the cache, and we can read a\n          // complete result from the cache, update result.data to be the\n          // result from the cache, rather than the raw network result.\n          // Set without setDiff to avoid triggering a notify call, since\n          // we have other ways of notifying for this result.\n          this.diff = diff;\n          if (diff.complete) {\n            result.data = diff.result;\n          }\n        });\n\n      } else {\n        this.lastWrite = void 0;\n      }\n    }\n  }\n\n  public markReady() {\n    this.networkError = null;\n    return this.networkStatus = NetworkStatus.ready;\n  }\n\n  public markError(error: ApolloError) {\n    this.networkStatus = NetworkStatus.error;\n    this.lastWrite = void 0;\n\n    this.reset();\n\n    if (error.graphQLErrors) {\n      this.graphQLErrors = error.graphQLErrors;\n    }\n\n    if (error.networkError) {\n      this.networkError = error.networkError;\n    }\n\n    return error;\n  }\n}\n\nexport function shouldWriteResult<T>(\n  result: FetchResult<T>,\n  errorPolicy: ErrorPolicy = \"none\",\n) {\n  const ignoreErrors =\n    errorPolicy === \"ignore\" ||\n    errorPolicy === \"all\";\n  let writeWithErrors = !graphQLResultHasError(result);\n  if (!writeWithErrors && ignoreErrors && result.data) {\n    writeWithErrors = true;\n  }\n  return writeWithErrors;\n}\n", "import { DocumentNode } from 'graphql';\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { equal } from '@wry/equality';\n\nimport { ApolloLink, execute, FetchResult } from '../link/core';\nimport { Cache, ApolloCache } from '../cache';\n\nimport {\n  getDefaultValues,\n  getOperationDefinition,\n  getOperationName,\n  hasClientExports,\n  graphQLResultHasError,\n  removeConnectionDirectiveFromDocument,\n  canUseWeakMap,\n  ObservableSubscription,\n  Observable,\n  asyncMap,\n  isNonEmptyArray,\n  Concast,\n  ConcastSourcesIterable,\n} from '../utilities';\nimport { ApolloError, isApolloError } from '../errors';\nimport {\n  QueryOptions,\n  WatchQueryOptions,\n  SubscriptionOptions,\n  MutationOptions,\n  WatchQueryFetchPolicy,\n  ErrorPolicy,\n} from './watchQueryOptions';\nimport { ObservableQuery } from './ObservableQuery';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport {\n  ApolloQueryResult,\n  OperationVariables,\n} from './types';\nimport { LocalState } from './LocalState';\n\nimport { QueryInfo, QueryStoreValue, shouldWriteResult } from './QueryInfo';\n\nconst { hasOwnProperty } = Object.prototype;\n\ninterface MutationStoreValue {\n  mutation: DocumentNode;\n  variables: Record<string, any>;\n  loading: boolean;\n  error: Error | null;\n}\n\nexport class QueryManager<TStore> {\n  public cache: ApolloCache<TStore>;\n  public link: ApolloLink;\n  public readonly assumeImmutableResults: boolean;\n  public readonly ssrMode: boolean;\n\n  private queryDeduplication: boolean;\n  private clientAwareness: Record<string, string> = {};\n  private localState: LocalState<TStore>;\n\n  private onBroadcast?: () => void;\n  public mutationStore?: {\n    [mutationId: string]: MutationStoreValue;\n  };\n\n  // All the queries that the QueryManager is currently managing (not\n  // including mutations and subscriptions).\n  private queries = new Map<string, QueryInfo>();\n\n  // Maps from queryId strings to Promise rejection functions for\n  // currently active queries and fetches.\n  private fetchCancelFns = new Map<string, (error: any) => any>();\n\n  constructor({\n    cache,\n    link,\n    queryDeduplication = false,\n    onBroadcast,\n    ssrMode = false,\n    clientAwareness = {},\n    localState,\n    assumeImmutableResults,\n  }: {\n    cache: ApolloCache<TStore>;\n    link: ApolloLink;\n    queryDeduplication?: boolean;\n    onBroadcast?: () => void;\n    ssrMode?: boolean;\n    clientAwareness?: Record<string, string>;\n    localState?: LocalState<TStore>;\n    assumeImmutableResults?: boolean;\n  }) {\n    this.cache = cache;\n    this.link = link;\n    this.queryDeduplication = queryDeduplication;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({ cache });\n    this.ssrMode = ssrMode;\n    this.assumeImmutableResults = !!assumeImmutableResults;\n    if ((this.onBroadcast = onBroadcast)) {\n      this.mutationStore = Object.create(null);\n    }\n  }\n\n  /**\n   * Call this method to terminate any active query processes, making it safe\n   * to dispose of this QueryManager instance.\n   */\n  public stop() {\n    this.queries.forEach((_info, queryId) => {\n      this.stopQueryNoBroadcast(queryId);\n    });\n\n    this.cancelPendingFetches(\n      new InvariantError('QueryManager stopped while query was in flight'),\n    );\n  }\n\n  private cancelPendingFetches(error: Error) {\n    this.fetchCancelFns.forEach(cancel => cancel(error));\n    this.fetchCancelFns.clear();\n  }\n\n  public async mutate<T>({\n    mutation,\n    variables,\n    optimisticResponse,\n    updateQueries,\n    refetchQueries = [],\n    awaitRefetchQueries = false,\n    update: updateWithProxyFn,\n    errorPolicy = 'none',\n    fetchPolicy,\n    context = {},\n  }: MutationOptions): Promise<FetchResult<T>> {\n    invariant(\n      mutation,\n      'mutation option is required. You must specify your GraphQL document in the mutation option.',\n    );\n\n    invariant(\n      !fetchPolicy || fetchPolicy === 'no-cache',\n      \"Mutations only support a 'no-cache' fetchPolicy. If you don't want to disable the cache, remove your fetchPolicy setting to proceed with the default mutation behavior.\"\n    );\n\n    const mutationId = this.generateMutationId();\n    mutation = this.transform(mutation).document;\n\n    variables = this.getVariables(mutation, variables);\n\n    if (this.transform(mutation).hasClientExports) {\n      variables = await this.localState.addExportedVariables(mutation, variables, context);\n    }\n\n    const mutationStoreValue =\n      this.mutationStore &&\n      (this.mutationStore[mutationId] = {\n        mutation,\n        variables,\n        loading: true,\n        error: null,\n      } as MutationStoreValue);\n\n    if (optimisticResponse) {\n      this.markMutationOptimistic<T>(optimisticResponse, {\n        mutationId,\n        document: mutation,\n        variables,\n        errorPolicy,\n        updateQueries,\n        update: updateWithProxyFn,\n      });\n    }\n\n    this.broadcastQueries();\n\n    const self = this;\n\n    return new Promise((resolve, reject) => {\n      let storeResult: FetchResult<T> | null;\n      let error: ApolloError;\n\n      self.getObservableFromLink(\n        mutation,\n        {\n          ...context,\n          optimisticResponse,\n        },\n        variables,\n        false,\n      ).subscribe({\n        next(result: FetchResult<T>) {\n          if (graphQLResultHasError(result) && errorPolicy === 'none') {\n            error = new ApolloError({\n              graphQLErrors: result.errors,\n            });\n            return;\n          }\n\n          if (mutationStoreValue) {\n            mutationStoreValue.loading = false;\n            mutationStoreValue.error = null;\n          }\n\n          if (fetchPolicy !== 'no-cache') {\n            try {\n              self.markMutationResult<T>({\n                mutationId,\n                result,\n                document: mutation,\n                variables,\n                errorPolicy,\n                updateQueries,\n                update: updateWithProxyFn,\n              });\n            } catch (e) {\n              error = new ApolloError({\n                networkError: e,\n              });\n              return;\n            }\n          }\n\n          storeResult = result;\n        },\n\n        error(err: Error) {\n          if (mutationStoreValue) {\n            mutationStoreValue.loading = false;\n            mutationStoreValue.error = err;\n          }\n          if (optimisticResponse) {\n            self.cache.removeOptimistic(mutationId);\n          }\n          self.broadcastQueries();\n          reject(\n            new ApolloError({\n              networkError: err,\n            }),\n          );\n        },\n\n        complete() {\n          if (error && mutationStoreValue) {\n            mutationStoreValue.loading = false;\n            mutationStoreValue.error = error;\n          }\n\n          if (optimisticResponse) {\n            self.cache.removeOptimistic(mutationId);\n          }\n\n          self.broadcastQueries();\n\n          if (error) {\n            reject(error);\n            return;\n          }\n\n          // allow for conditional refetches\n          // XXX do we want to make this the only API one day?\n          if (typeof refetchQueries === 'function') {\n            refetchQueries = refetchQueries(storeResult!);\n          }\n\n          const refetchQueryPromises: Promise<\n            ApolloQueryResult<any>[] | ApolloQueryResult<{}>\n          >[] = [];\n\n          if (isNonEmptyArray(refetchQueries)) {\n            refetchQueries.forEach(refetchQuery => {\n              if (typeof refetchQuery === 'string') {\n                self.queries.forEach(({ observableQuery }) => {\n                  if (observableQuery &&\n                      observableQuery.queryName === refetchQuery) {\n                    refetchQueryPromises.push(observableQuery.refetch());\n                  }\n                });\n              } else {\n                const queryOptions: QueryOptions = {\n                  query: refetchQuery.query,\n                  variables: refetchQuery.variables,\n                  fetchPolicy: 'network-only',\n                };\n\n                if (refetchQuery.context) {\n                  queryOptions.context = refetchQuery.context;\n                }\n\n                refetchQueryPromises.push(self.query(queryOptions));\n              }\n            });\n          }\n\n          Promise.all(\n            awaitRefetchQueries ? refetchQueryPromises : [],\n          ).then(() => {\n            if (\n              errorPolicy === 'ignore' &&\n              storeResult &&\n              graphQLResultHasError(storeResult)\n            ) {\n              delete storeResult.errors;\n            }\n\n            resolve(storeResult!);\n          }, reject);\n        },\n      });\n    });\n  }\n\n  public markMutationResult<TData>(\n    mutation: {\n      mutationId: string;\n      result: FetchResult<TData>;\n      document: DocumentNode;\n      variables?: OperationVariables;\n      errorPolicy: ErrorPolicy;\n      updateQueries: MutationOptions<TData>[\"updateQueries\"],\n      update?: (\n        cache: ApolloCache<TStore>,\n        result: FetchResult<TData>,\n      ) => void;\n    },\n    cache = this.cache,\n  ) {\n    if (shouldWriteResult(mutation.result, mutation.errorPolicy)) {\n      const cacheWrites: Cache.WriteOptions[] = [{\n        result: mutation.result.data,\n        dataId: 'ROOT_MUTATION',\n        query: mutation.document,\n        variables: mutation.variables,\n      }];\n\n      const { updateQueries } = mutation;\n      if (updateQueries) {\n        this.queries.forEach(({ observableQuery }, queryId) => {\n          const queryName = observableQuery && observableQuery.queryName;\n          if (!queryName || !hasOwnProperty.call(updateQueries, queryName)) {\n            return;\n          }\n          const updater = updateQueries[queryName];\n          const { document, variables } = this.queries.get(queryId)!;\n\n          // Read the current query result from the store.\n          const { result: currentQueryResult, complete } = cache.diff<TData>({\n            query: document!,\n            variables,\n            returnPartialData: true,\n            optimistic: false,\n          });\n\n          if (complete && currentQueryResult) {\n            // Run our reducer using the current query result and the mutation result.\n            const nextQueryResult = updater(currentQueryResult, {\n              mutationResult: mutation.result,\n              queryName: document && getOperationName(document) || void 0,\n              queryVariables: variables!,\n            });\n\n            // Write the modified result back into the store if we got a new result.\n            if (nextQueryResult) {\n              cacheWrites.push({\n                result: nextQueryResult,\n                dataId: 'ROOT_QUERY',\n                query: document!,\n                variables,\n              });\n            }\n          }\n        });\n      }\n\n      cache.performTransaction(c => {\n        cacheWrites.forEach(write => c.write(write));\n\n        // If the mutation has some writes associated with it then we need to\n        // apply those writes to the store by running this reducer again with a\n        // write action.\n        const { update } = mutation;\n        if (update) {\n          update(c, mutation.result);\n        }\n      }, /* non-optimistic transaction: */ null);\n    }\n  }\n\n  public markMutationOptimistic<TData>(\n    optimisticResponse: any,\n    mutation: {\n      mutationId: string;\n      document: DocumentNode;\n      variables?: OperationVariables;\n      errorPolicy: ErrorPolicy;\n      updateQueries: MutationOptions<TData>[\"updateQueries\"],\n      update?: (\n        cache: ApolloCache<TStore>,\n        result: FetchResult<TData>,\n      ) => void;\n    },\n  ) {\n    const data = typeof optimisticResponse === \"function\"\n      ? optimisticResponse(mutation.variables)\n      : optimisticResponse;\n\n    return this.cache.recordOptimisticTransaction(cache => {\n      try {\n        this.markMutationResult<TData>({\n          ...mutation,\n          result: { data },\n        }, cache);\n      } catch (error) {\n        invariant.error(error);\n      }\n    }, mutation.mutationId);\n  }\n\n  public fetchQuery<TData, TVars>(\n    queryId: string,\n    options: WatchQueryOptions<TVars, TData>,\n    networkStatus?: NetworkStatus,\n  ): Promise<ApolloQueryResult<TData>> {\n    return this.fetchQueryObservable<TData, TVars>(\n      queryId,\n      options,\n      networkStatus,\n    ).promise;\n  }\n\n  public getQueryStore() {\n    const store: Record<string, QueryStoreValue> = Object.create(null);\n    this.queries.forEach((info, queryId) => {\n      store[queryId] = {\n        variables: info.variables,\n        networkStatus: info.networkStatus,\n        networkError: info.networkError,\n        graphQLErrors: info.graphQLErrors,\n      };\n    });\n    return store;\n  }\n\n  public resetErrors(queryId: string) {\n    const queryInfo = this.queries.get(queryId);\n    if (queryInfo) {\n      queryInfo.networkError = undefined;\n      queryInfo.graphQLErrors = [];\n    }\n  }\n\n  private transformCache = new (canUseWeakMap ? WeakMap : Map)<\n    DocumentNode,\n    Readonly<{\n      document: Readonly<DocumentNode>;\n      hasClientExports: boolean;\n      hasForcedResolvers: boolean;\n      clientQuery: Readonly<DocumentNode> | null;\n      serverQuery: Readonly<DocumentNode> | null;\n      defaultVars: Readonly<OperationVariables>;\n    }>\n  >();\n\n  public transform(document: DocumentNode) {\n    const { transformCache } = this;\n\n    if (!transformCache.has(document)) {\n      const transformed = this.cache.transformDocument(document);\n      const forLink = removeConnectionDirectiveFromDocument(\n        this.cache.transformForLink(transformed));\n\n      const clientQuery = this.localState.clientQuery(transformed);\n      const serverQuery = forLink && this.localState.serverQuery(forLink);\n\n      const cacheEntry = {\n        document: transformed,\n        // TODO These two calls (hasClientExports and shouldForceResolvers)\n        // could probably be merged into a single traversal.\n        hasClientExports: hasClientExports(transformed),\n        hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n        clientQuery,\n        serverQuery,\n        defaultVars: getDefaultValues(\n          getOperationDefinition(transformed)\n        ) as OperationVariables,\n      };\n\n      const add = (doc: DocumentNode | null) => {\n        if (doc && !transformCache.has(doc)) {\n          transformCache.set(doc, cacheEntry);\n        }\n      }\n      // Add cacheEntry to the transformCache using several different keys,\n      // since any one of these documents could end up getting passed to the\n      // transform method again in the future.\n      add(document);\n      add(transformed);\n      add(clientQuery);\n      add(serverQuery);\n    }\n\n    return transformCache.get(document)!;\n  }\n\n  private getVariables(\n    document: DocumentNode,\n    variables?: OperationVariables,\n  ): OperationVariables {\n    return {\n      ...this.transform(document).defaultVars,\n      ...variables,\n    };\n  }\n\n  public watchQuery<T, TVariables = OperationVariables>(\n    options: WatchQueryOptions<TVariables, T>,\n  ): ObservableQuery<T, TVariables> {\n    // assign variable default values if supplied\n    options = {\n      ...options,\n      variables: this.getVariables(\n        options.query,\n        options.variables,\n      ) as TVariables,\n    };\n\n    if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n      options.notifyOnNetworkStatusChange = false;\n    }\n\n    const queryInfo = new QueryInfo(this.cache);\n    const observable = new ObservableQuery<T, TVariables>({\n      queryManager: this,\n      queryInfo,\n      options,\n    });\n\n    this.queries.set(observable.queryId, queryInfo);\n\n    queryInfo.init({\n      document: options.query,\n      observableQuery: observable,\n      variables: options.variables,\n    });\n\n    return observable;\n  }\n\n  public query<TData, TVars = OperationVariables>(\n    options: QueryOptions<TVars, TData>,\n  ): Promise<ApolloQueryResult<TData>> {\n    invariant(\n      options.query,\n      'query option is required. You must specify your GraphQL document ' +\n        'in the query option.',\n    );\n\n    invariant(\n      options.query.kind === 'Document',\n      'You must wrap the query string in a \"gql\" tag.',\n    );\n\n    invariant(\n      !(options as any).returnPartialData,\n      'returnPartialData option only supported on watchQuery.',\n    );\n\n    invariant(\n      !(options as any).pollInterval,\n      'pollInterval option only supported on watchQuery.',\n    );\n\n    const queryId = this.generateQueryId();\n    return this.fetchQuery<TData, TVars>(\n      queryId,\n      options,\n    ).finally(() => this.stopQuery(queryId));\n  }\n\n  private queryIdCounter = 1;\n  public generateQueryId() {\n    return String(this.queryIdCounter++);\n  }\n\n  private requestIdCounter = 1;\n  public generateRequestId() {\n    return this.requestIdCounter++;\n  }\n\n  private mutationIdCounter = 1;\n  public generateMutationId() {\n    return String(this.mutationIdCounter++);\n  }\n\n  public stopQueryInStore(queryId: string) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  }\n\n  private stopQueryInStoreNoBroadcast(queryId: string) {\n    const queryInfo = this.queries.get(queryId);\n    if (queryInfo) queryInfo.stop();\n  }\n\n  public clearStore(): Promise<void> {\n    // Before we have sent the reset action to the store, we can no longer\n    // rely on the results returned by in-flight requests since these may\n    // depend on values that previously existed in the data portion of the\n    // store. So, we cancel the promises and observers that we have issued\n    // so far and not yet resolved (in the case of queries).\n    this.cancelPendingFetches(new InvariantError(\n      'Store reset while query was in flight (not completed in link chain)',\n    ));\n\n    this.queries.forEach(queryInfo => {\n      if (queryInfo.observableQuery) {\n        // Set loading to true so listeners don't trigger unless they want\n        // results with partial data.\n        queryInfo.networkStatus = NetworkStatus.loading;\n      } else {\n        queryInfo.stop();\n      }\n    });\n\n    if (this.mutationStore) {\n      this.mutationStore = Object.create(null);\n    }\n\n    // begin removing data from the store\n    return this.cache.reset();\n  }\n\n  public resetStore(): Promise<ApolloQueryResult<any>[]> {\n    // Similarly, we have to have to refetch each of the queries currently being\n    // observed. We refetch instead of error'ing on these since the assumption is that\n    // resetting the store doesn't eliminate the need for the queries currently being\n    // watched. If there is an existing query in flight when the store is reset,\n    // the promise for it will be rejected and its results will not be written to the\n    // store.\n    return this.clearStore().then(() => {\n      return this.reFetchObservableQueries();\n    });\n  }\n\n  public reFetchObservableQueries(\n    includeStandby: boolean = false,\n  ): Promise<ApolloQueryResult<any>[]> {\n    const observableQueryPromises: Promise<ApolloQueryResult<any>>[] = [];\n\n    this.queries.forEach(({ observableQuery }, queryId) => {\n      if (observableQuery && observableQuery.hasObservers()) {\n        const fetchPolicy = observableQuery.options.fetchPolicy;\n\n        observableQuery.resetLastResults();\n        if (\n          fetchPolicy !== 'cache-only' &&\n          (includeStandby || fetchPolicy !== 'standby')\n        ) {\n          observableQueryPromises.push(observableQuery.refetch());\n        }\n\n        this.getQuery(queryId).setDiff(null);\n      }\n    });\n\n    this.broadcastQueries();\n\n    return Promise.all(observableQueryPromises);\n  }\n\n  public setObservableQuery(observableQuery: ObservableQuery<any, any>) {\n    this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n  }\n\n  public startGraphQLSubscription<T = any>({\n    query,\n    fetchPolicy,\n    errorPolicy,\n    variables,\n    context = {},\n  }: SubscriptionOptions): Observable<FetchResult<T>> {\n    query = this.transform(query).document;\n    variables = this.getVariables(query, variables);\n\n    const makeObservable = (variables: OperationVariables) =>\n      this.getObservableFromLink<T>(\n        query,\n        context,\n        variables,\n        false,\n      ).map(result => {\n        if (fetchPolicy !== 'no-cache') {\n          // the subscription interface should handle not sending us results we no longer subscribe to.\n          // XXX I don't think we ever send in an object with errors, but we might in the future...\n          if (shouldWriteResult(result, errorPolicy)) {\n            this.cache.write({\n              query,\n              result: result.data,\n              dataId: 'ROOT_SUBSCRIPTION',\n              variables: variables,\n            });\n          }\n\n          this.broadcastQueries();\n        }\n\n        if (graphQLResultHasError(result)) {\n          throw new ApolloError({\n            graphQLErrors: result.errors,\n          });\n        }\n\n        return result;\n      });\n\n    if (this.transform(query).hasClientExports) {\n      const observablePromise = this.localState.addExportedVariables(\n        query,\n        variables,\n        context,\n      ).then(makeObservable);\n\n      return new Observable<FetchResult<T>>(observer => {\n        let sub: ObservableSubscription | null = null;\n        observablePromise.then(\n          observable => sub = observable.subscribe(observer),\n          observer.error,\n        );\n        return () => sub && sub.unsubscribe();\n      });\n    }\n\n    return makeObservable(variables);\n  }\n\n  public stopQuery(queryId: string) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  }\n\n  private stopQueryNoBroadcast(queryId: string) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  }\n\n  public removeQuery(queryId: string) {\n    // teardown all links\n    // Both `QueryManager.fetchRequest` and `QueryManager.query` create separate promises\n    // that each add their reject functions to fetchCancelFns.\n    // A query created with `QueryManager.query()` could trigger a `QueryManager.fetchRequest`.\n    // The same queryId could have two rejection fns for two promises\n    this.fetchCancelFns.delete(queryId);\n    this.getQuery(queryId).stop();\n    this.queries.delete(queryId);\n  }\n\n  public broadcastQueries() {\n    if (this.onBroadcast) this.onBroadcast();\n    this.queries.forEach(info => info.notify());\n  }\n\n  public getLocalState(): LocalState<TStore> {\n    return this.localState;\n  }\n\n  private inFlightLinkObservables = new Map<\n    DocumentNode,\n    Map<string, Observable<FetchResult>>\n  >();\n\n  private getObservableFromLink<T = any>(\n    query: DocumentNode,\n    context: any,\n    variables?: OperationVariables,\n    deduplication: boolean =\n      // Prefer context.queryDeduplication if specified.\n      context?.queryDeduplication ??\n      this.queryDeduplication,\n  ): Observable<FetchResult<T>> {\n    let observable: Observable<FetchResult<T>>;\n\n    const { serverQuery } = this.transform(query);\n    if (serverQuery) {\n      const { inFlightLinkObservables, link } = this;\n\n      const operation = {\n        query: serverQuery,\n        variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext({\n          ...context,\n          forceFetch: !deduplication\n        }),\n      };\n\n      context = operation.context;\n\n      if (deduplication) {\n        const byVariables = inFlightLinkObservables.get(serverQuery) || new Map();\n        inFlightLinkObservables.set(serverQuery, byVariables);\n\n        const varJson = JSON.stringify(variables);\n        observable = byVariables.get(varJson);\n\n        if (!observable) {\n          const concast = new Concast([\n            execute(link, operation) as Observable<FetchResult<T>>\n          ]);\n\n          byVariables.set(varJson, observable = concast);\n\n          concast.cleanup(() => {\n            if (byVariables.delete(varJson) &&\n                byVariables.size < 1) {\n              inFlightLinkObservables.delete(serverQuery);\n            }\n          });\n        }\n\n      } else {\n        observable = new Concast([\n          execute(link, operation) as Observable<FetchResult<T>>\n        ]);\n      }\n    } else {\n      observable = new Concast([\n        Observable.of({ data: {} } as FetchResult<T>)\n      ]);\n      context = this.prepareContext(context);\n    }\n\n    const { clientQuery } = this.transform(query);\n    if (clientQuery) {\n      observable = asyncMap(observable, result => {\n        return this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context,\n          variables,\n        });\n      });\n    }\n\n    return observable;\n  }\n\n  private getResultsFromLink<TData, TVars>(\n    queryInfo: QueryInfo,\n    allowCacheWrite: boolean,\n    options: Pick<WatchQueryOptions<TVars, TData>,\n      | \"variables\"\n      | \"context\"\n      | \"fetchPolicy\"\n      | \"errorPolicy\">,\n  ): Observable<ApolloQueryResult<TData>> {\n    const { lastRequestId } = queryInfo;\n\n    return asyncMap(\n      this.getObservableFromLink(\n        queryInfo.document!,\n        options.context,\n        options.variables,\n      ),\n\n      result => {\n        const hasErrors = isNonEmptyArray(result.errors);\n\n        if (lastRequestId >= queryInfo.lastRequestId) {\n          if (hasErrors && options.errorPolicy === \"none\") {\n            // Throwing here effectively calls observer.error.\n            throw queryInfo.markError(new ApolloError({\n              graphQLErrors: result.errors,\n            }));\n          }\n          queryInfo.markResult(result, options, allowCacheWrite);\n          queryInfo.markReady();\n        }\n\n        const aqr: ApolloQueryResult<TData> = {\n          data: result.data,\n          loading: false,\n          networkStatus: queryInfo.networkStatus || NetworkStatus.ready,\n        };\n\n        if (hasErrors && options.errorPolicy !== \"ignore\") {\n          aqr.errors = result.errors;\n        }\n\n        return aqr;\n      },\n\n      networkError => {\n        const error = isApolloError(networkError)\n          ? networkError\n          : new ApolloError({ networkError });\n\n        if (lastRequestId >= queryInfo.lastRequestId) {\n          queryInfo.markError(error);\n        }\n\n        throw error;\n      },\n    );\n  }\n\n  public fetchQueryObservable<TData, TVars>(\n    queryId: string,\n    options: WatchQueryOptions<TVars, TData>,\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus = NetworkStatus.loading,\n  ): Concast<ApolloQueryResult<TData>> {\n    const query = this.transform(options.query).document;\n    const variables = this.getVariables(query, options.variables) as TVars;\n    const queryInfo = this.getQuery(queryId);\n    const oldNetworkStatus = queryInfo.networkStatus;\n\n    let {\n      fetchPolicy = \"cache-first\" as WatchQueryFetchPolicy,\n      errorPolicy = \"none\" as ErrorPolicy,\n      returnPartialData = false,\n      notifyOnNetworkStatusChange = false,\n      context = {},\n    } = options;\n\n    const mightUseNetwork =\n      fetchPolicy === \"cache-first\" ||\n      fetchPolicy === \"cache-and-network\" ||\n      fetchPolicy === \"network-only\" ||\n      fetchPolicy === \"no-cache\";\n\n    if (mightUseNetwork &&\n        notifyOnNetworkStatusChange &&\n        typeof oldNetworkStatus === \"number\" &&\n        oldNetworkStatus !== networkStatus &&\n        isNetworkRequestInFlight(networkStatus)) {\n      // In order to force delivery of an incomplete cache result with\n      // loading:true, we tweak the fetchPolicy to include the cache, and\n      // pretend that returnPartialData was enabled.\n      if (fetchPolicy !== \"cache-first\") {\n        fetchPolicy = \"cache-and-network\";\n      }\n      returnPartialData = true;\n    }\n\n    const normalized = Object.assign({}, options, {\n      query,\n      variables,\n      fetchPolicy,\n      errorPolicy,\n      returnPartialData,\n      notifyOnNetworkStatusChange,\n      context,\n    });\n\n    const fromVariables = (variables: TVars) => {\n      // Since normalized is always a fresh copy of options, it's safe to\n      // modify its properties here, rather than creating yet another new\n      // WatchQueryOptions object.\n      normalized.variables = variables;\n      return this.fetchQueryByPolicy<TData, TVars>(\n        queryInfo,\n        normalized,\n        networkStatus,\n      );\n    };\n\n    // This cancel function needs to be set before the concast is created,\n    // in case concast creation synchronously cancels the request.\n    this.fetchCancelFns.set(queryId, reason => {\n      // Delaying the cancellation using a Promise ensures that the\n      // concast variable has been initialized.\n      Promise.resolve().then(() => concast.cancel(reason));\n    });\n\n    // A Concast<T> can be created either from an Iterable<Observable<T>>\n    // or from a PromiseLike<Iterable<Observable<T>>>, where T in this\n    // case is ApolloQueryResult<TData>.\n    const concast = new Concast(\n      // If the query has @export(as: ...) directives, then we need to\n      // process those directives asynchronously. When there are no\n      // @export directives (the common case), we deliberately avoid\n      // wrapping the result of this.fetchQueryByPolicy in a Promise,\n      // since the timing of result delivery is (unfortunately) important\n      // for backwards compatibility. TODO This code could be simpler if\n      // we deprecated and removed LocalState.\n      this.transform(normalized.query).hasClientExports\n        ? this.localState.addExportedVariables(\n          normalized.query,\n          normalized.variables,\n          normalized.context,\n        ).then(fromVariables)\n        : fromVariables(normalized.variables!)\n    );\n\n    concast.cleanup(() => {\n      this.fetchCancelFns.delete(queryId);\n\n      const { nextFetchPolicy } = options;\n      if (nextFetchPolicy) {\n        // The options.nextFetchPolicy transition should happen only once,\n        // but it should be possible for a nextFetchPolicy function to set\n        // this.nextFetchPolicy to perform an additional transition.\n        options.nextFetchPolicy = void 0;\n\n        // When someone chooses cache-and-network or network-only as their\n        // initial FetchPolicy, they often do not want future cache updates to\n        // trigger unconditional network requests, which is what repeatedly\n        // applying the cache-and-network or network-only policies would seem\n        // to imply. Instead, when the cache reports an update after the\n        // initial network request, it may be desirable for subsequent network\n        // requests to be triggered only if the cache result is incomplete.\n        // The options.nextFetchPolicy option provides an easy way to update\n        // options.fetchPolicy after the intial network request, without\n        // having to call observableQuery.setOptions.\n        options.fetchPolicy = typeof nextFetchPolicy === \"function\"\n          ? nextFetchPolicy.call(options, options.fetchPolicy || \"cache-first\")\n          : nextFetchPolicy;\n      }\n    });\n\n    return concast;\n  }\n\n  private fetchQueryByPolicy<TData, TVars>(\n    queryInfo: QueryInfo,\n    options: WatchQueryOptions<TVars, TData>,\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus: NetworkStatus,\n  ): ConcastSourcesIterable<ApolloQueryResult<TData>> {\n    const {\n      query,\n      variables,\n      fetchPolicy,\n      errorPolicy,\n      returnPartialData,\n      context,\n    } = options;\n\n    queryInfo.init({\n      document: query,\n      variables,\n      lastRequestId: this.generateRequestId(),\n      networkStatus,\n    });\n\n    const readCache = () => queryInfo.getDiff(variables);\n\n    const resultsFromCache = (\n      diff: Cache.DiffResult<TData>,\n      networkStatus = queryInfo.networkStatus || NetworkStatus.loading,\n    ) => {\n      const data = diff.result as TData;\n\n      if (process.env.NODE_ENV !== 'production' &&\n          isNonEmptyArray(diff.missing) &&\n          !equal(data, {}) &&\n          !returnPartialData) {\n        invariant.warn(`Missing cache result fields: ${\n          diff.missing.map(m => m.path.join('.')).join(', ')\n        }`, diff.missing);\n      }\n\n      const fromData = (data: TData) => Observable.of({\n        data,\n        loading: isNetworkRequestInFlight(networkStatus),\n        networkStatus,\n        ...(diff.complete ? null : { partial: true }),\n      } as ApolloQueryResult<TData>);\n\n      if (this.transform(query).hasForcedResolvers) {\n        return this.localState.runResolvers({\n          document: query,\n          remoteResult: { data },\n          context,\n          variables,\n          onlyRunForcedResolvers: true,\n        }).then(resolved => fromData(resolved.data!));\n      }\n\n      return fromData(data);\n    };\n\n    const resultsFromLink = (allowCacheWrite: boolean) =>\n      this.getResultsFromLink<TData, TVars>(queryInfo, allowCacheWrite, {\n        variables,\n        context,\n        fetchPolicy,\n        errorPolicy,\n      });\n\n    switch (fetchPolicy) {\n    default: case \"cache-first\": {\n      const diff = readCache();\n\n      if (diff.complete) {\n        return [\n          resultsFromCache(diff, queryInfo.markReady()),\n        ];\n      }\n\n      if (returnPartialData) {\n        return [\n          resultsFromCache(diff),\n          resultsFromLink(true),\n        ];\n      }\n\n      return [\n        resultsFromLink(true),\n      ];\n    }\n\n    case \"cache-and-network\": {\n      const diff = readCache();\n\n      if (diff.complete || returnPartialData) {\n        return [\n          resultsFromCache(diff),\n          resultsFromLink(true),\n        ];\n      }\n\n      return [\n        resultsFromLink(true),\n      ];\n    }\n\n    case \"cache-only\":\n      return [\n        resultsFromCache(readCache(), queryInfo.markReady()),\n      ];\n\n    case \"network-only\":\n      return [resultsFromLink(true)];\n\n    case \"no-cache\":\n      return [resultsFromLink(false)];\n\n    case \"standby\":\n      return [];\n    }\n  }\n\n  private getQuery(queryId: string): QueryInfo {\n    if (queryId && !this.queries.has(queryId)) {\n      this.queries.set(queryId, new QueryInfo(this.cache));\n    }\n    return this.queries.get(queryId)!;\n  }\n\n  private prepareContext(context = {}) {\n    const newContext = this.localState.prepareContext(context);\n    return {\n      ...newContext,\n      clientAwareness: this.clientAwareness,\n    };\n  }\n}\n", "import { ExecutionResult, DocumentNode } from 'graphql';\nimport { invariant, InvariantError } from 'ts-invariant';\n\nimport { ApolloLink, FetchResult, GraphQLRequest, execute } from '../link/core';\nimport { ApolloCache, DataProxy } from '../cache';\nimport { Observable, compact } from '../utilities';\nimport { version } from '../version';\nimport { HttpLink, UriFunction } from '../link/http';\n\nimport { QueryManager } from './QueryManager';\nimport { ObservableQuery } from './ObservableQuery';\n\nimport {\n  ApolloQueryResult,\n  OperationVariables,\n  Resolvers,\n} from './types';\n\nimport {\n  QueryOptions,\n  WatchQueryOptions,\n  MutationOptions,\n  SubscriptionOptions,\n  WatchQueryFetchPolicy,\n} from './watchQueryOptions';\n\nimport {\n  LocalState,\n  FragmentMatcher,\n} from './LocalState';\n\nexport interface DefaultOptions {\n  watchQuery?: Partial<WatchQueryOptions<any, any>>;\n  query?: Partial<QueryOptions<any, any>>;\n  mutate?: Partial<MutationOptions<any, any>>;\n}\n\nlet hasSuggestedDevtools = false;\n\nexport type ApolloClientOptions<TCacheShape> = {\n  uri?: string | UriFunction;\n  credentials?: string;\n  headers?: Record<string, string>;\n  link?: ApolloLink;\n  cache: ApolloCache<TCacheShape>;\n  ssrForceFetchDelay?: number;\n  ssrMode?: boolean;\n  connectToDevTools?: boolean;\n  queryDeduplication?: boolean;\n  defaultOptions?: DefaultOptions;\n  assumeImmutableResults?: boolean;\n  resolvers?: Resolvers | Resolvers[];\n  typeDefs?: string | string[] | DocumentNode | DocumentNode[];\n  fragmentMatcher?: FragmentMatcher;\n  name?: string;\n  version?: string;\n};\n\ntype OptionsUnion<TData, TVariables> =\n  | WatchQueryOptions<TVariables, TData>\n  | QueryOptions<TVariables, TData>\n  | MutationOptions<TData, TVariables>;\n\nexport function mergeOptions<\n  TOptions extends OptionsUnion<any, any>\n>(\n  defaults: Partial<TOptions>,\n  options: TOptions,\n): TOptions {\n  return compact(defaults, options, options.variables && {\n    variables: {\n      ...defaults.variables,\n      ...options.variables,\n    },\n  });\n}\n\n/**\n * This is the primary Apollo Client class. It is used to send GraphQL documents (i.e. queries\n * and mutations) to a GraphQL spec-compliant server over a {@link NetworkInterface} instance,\n * receive results from the server and cache the results in a store. It also delivers updates\n * to GraphQL queries through {@link Observable} instances.\n */\nexport class ApolloClient<TCacheShape> implements DataProxy {\n  public link: ApolloLink;\n  public cache: ApolloCache<TCacheShape>;\n  public disableNetworkFetches: boolean;\n  public version: string;\n  public queryDeduplication: boolean;\n  public defaultOptions: DefaultOptions = {};\n  public readonly typeDefs: ApolloClientOptions<TCacheShape>['typeDefs'];\n\n  private queryManager: QueryManager<TCacheShape>;\n  private devToolsHookCb: Function;\n  private resetStoreCallbacks: Array<() => Promise<any>> = [];\n  private clearStoreCallbacks: Array<() => Promise<any>> = [];\n  private localState: LocalState<TCacheShape>;\n\n  /**\n   * Constructs an instance of {@link ApolloClient}.\n   *\n   * @param uri The GraphQL endpoint that Apollo Client will connect to. If\n   *            `link` is configured, this option is ignored.\n   * @param link The {@link ApolloLink} over which GraphQL documents will be resolved into a response.\n   *\n   * @param cache The initial cache to use in the data store.\n   *\n   * @param ssrMode Determines whether this is being run in Server Side Rendering (SSR) mode.\n   *\n   * @param ssrForceFetchDelay Determines the time interval before we force fetch queries for a\n   * server side render.\n   *\n   * @param queryDeduplication If set to false, a query will still be sent to the server even if a query\n   * with identical parameters (query, variables, operationName) is already in flight.\n   *\n   * @param defaultOptions Used to set application wide defaults for the\n   *                       options supplied to `watchQuery`, `query`, or\n   *                       `mutate`.\n   *\n   * @param assumeImmutableResults When this option is true, the client will assume results\n   *                               read from the cache are never mutated by application code,\n   *                               which enables substantial performance optimizations. Passing\n   *                               `{ freezeResults: true }` to the `InMemoryCache` constructor\n   *                               can help enforce this immutability.\n   *\n   * @param name A custom name that can be used to identify this client, when\n   *             using Apollo client awareness features. E.g. \"iOS\".\n   *\n   * @param version A custom version that can be used to identify this client,\n   *                when using Apollo client awareness features. This is the\n   *                version of your client, which you may want to increment on\n   *                new builds. This is NOT the version of Apollo Client that\n   *                you are using.\n   */\n  constructor(options: ApolloClientOptions<TCacheShape>) {\n    const {\n      uri,\n      credentials,\n      headers,\n      cache,\n      ssrMode = false,\n      ssrForceFetchDelay = 0,\n      connectToDevTools =\n        // Expose the client instance as window.__APOLLO_CLIENT__ and call\n        // onBroadcast in queryManager.broadcastQueries to enable browser\n        // devtools, but disable them by default in production.\n        typeof window === 'object' &&\n        !(window as any).__APOLLO_CLIENT__ &&\n        process.env.NODE_ENV !== 'production',\n      queryDeduplication = true,\n      defaultOptions,\n      assumeImmutableResults = false,\n      resolvers,\n      typeDefs,\n      fragmentMatcher,\n      name: clientAwarenessName,\n      version: clientAwarenessVersion,\n    } = options;\n\n    let { link } = options;\n\n    if (!link) {\n      link = uri\n        ? new HttpLink({ uri, credentials, headers })\n        : ApolloLink.empty();\n    }\n\n    if (!cache) {\n      throw new InvariantError(\n        \"To initialize Apollo Client, you must specify a 'cache' property \" +\n        \"in the options object. \\n\" +\n        \"For more information, please visit: https://go.apollo.dev/c/docs\"\n      );\n    }\n\n    this.link = link;\n    this.cache = cache;\n    this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n    this.queryDeduplication = queryDeduplication;\n    this.defaultOptions = defaultOptions || {};\n    this.typeDefs = typeDefs;\n\n    if (ssrForceFetchDelay) {\n      setTimeout(\n        () => (this.disableNetworkFetches = false),\n        ssrForceFetchDelay,\n      );\n    }\n\n    this.watchQuery = this.watchQuery.bind(this);\n    this.query = this.query.bind(this);\n    this.mutate = this.mutate.bind(this);\n    this.resetStore = this.resetStore.bind(this);\n    this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n\n    if (connectToDevTools && typeof window === 'object') {\n      (window as any).__APOLLO_CLIENT__ = this;\n    }\n\n    /**\n     * Suggest installing the devtools for developers who don't have them\n     */\n    if (!hasSuggestedDevtools && process.env.NODE_ENV !== 'production') {\n      hasSuggestedDevtools = true;\n      if (\n        typeof window !== 'undefined' &&\n        window.document &&\n        window.top === window.self &&\n        !(window as any).__APOLLO_DEVTOOLS_GLOBAL_HOOK__\n      ) {\n        const nav = window.navigator;\n        const ua = nav && nav.userAgent;\n        let url: string | undefined;\n        if (typeof ua === \"string\") {\n          if (ua.indexOf(\"Chrome/\") > -1) {\n            url = \"https://chrome.google.com/webstore/detail/\" +\n              \"apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm\";\n          } else if (ua.indexOf(\"Firefox/\") > -1) {\n            url = \"https://addons.mozilla.org/en-US/firefox/addon/apollo-developer-tools/\";\n          }\n        }\n        if (url) {\n          invariant.log(\n            \"Download the Apollo DevTools for a better development \" +\n              \"experience: \" + url\n          );\n        }\n      }\n    }\n\n    this.version = version;\n\n    this.localState = new LocalState({\n      cache,\n      client: this,\n      resolvers,\n      fragmentMatcher,\n    });\n\n    this.queryManager = new QueryManager({\n      cache: this.cache,\n      link: this.link,\n      queryDeduplication,\n      ssrMode,\n      clientAwareness: {\n        name: clientAwarenessName!,\n        version: clientAwarenessVersion!,\n      },\n      localState: this.localState,\n      assumeImmutableResults,\n      onBroadcast: connectToDevTools ? () => {\n        if (this.devToolsHookCb) {\n          this.devToolsHookCb({\n            action: {},\n            state: {\n              queries: this.queryManager.getQueryStore(),\n              mutations: this.queryManager.mutationStore || {},\n            },\n            dataWithOptimisticResults: this.cache.extract(true),\n          });\n        }\n      } : void 0,\n    });\n  }\n\n  /**\n   * Call this method to terminate any active client processes, making it safe\n   * to dispose of this `ApolloClient` instance.\n   */\n  public stop() {\n    this.queryManager.stop();\n  }\n\n  /**\n   * This watches the cache store of the query according to the options specified and\n   * returns an {@link ObservableQuery}. We can subscribe to this {@link ObservableQuery} and\n   * receive updated results through a GraphQL observer when the cache store changes.\n   * <p /><p />\n   * Note that this method is not an implementation of GraphQL subscriptions. Rather,\n   * it uses Apollo's store in order to reactively deliver updates to your query results.\n   * <p /><p />\n   * For example, suppose you call watchQuery on a GraphQL query that fetches a person's\n   * first and last name and this person has a particular object identifer, provided by\n   * dataIdFromObject. Later, a different query fetches that same person's\n   * first and last name and the first name has now changed. Then, any observers associated\n   * with the results of the first query will be updated with a new result object.\n   * <p /><p />\n   * Note that if the cache does not change, the subscriber will *not* be notified.\n   * <p /><p />\n   * See [here](https://medium.com/apollo-stack/the-concepts-of-graphql-bc68bd819be3#.3mb0cbcmc) for\n   * a description of store reactivity.\n   */\n  public watchQuery<T = any, TVariables = OperationVariables>(\n    options: WatchQueryOptions<TVariables, T>,\n  ): ObservableQuery<T, TVariables> {\n    if (this.defaultOptions.watchQuery) {\n      options = mergeOptions(this.defaultOptions.watchQuery, options);\n    }\n\n    // XXX Overwriting options is probably not the best way to do this long term...\n    if (\n      this.disableNetworkFetches &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options = { ...options, fetchPolicy: 'cache-first' };\n    }\n\n    return this.queryManager.watchQuery<T, TVariables>(options);\n  }\n\n  /**\n   * This resolves a single query according to the options specified and\n   * returns a {@link Promise} which is either resolved with the resulting data\n   * or rejected with an error.\n   *\n   * @param options An object of type {@link QueryOptions} that allows us to\n   * describe how this query should be treated e.g. whether it should hit the\n   * server at all or just resolve from the cache, etc.\n   */\n  public query<T = any, TVariables = OperationVariables>(\n    options: QueryOptions<TVariables, T>,\n  ): Promise<ApolloQueryResult<T>> {\n    if (this.defaultOptions.query) {\n      options = mergeOptions(this.defaultOptions.query, options);\n    }\n\n    invariant(\n      (options.fetchPolicy as WatchQueryFetchPolicy) !== 'cache-and-network',\n      'The cache-and-network fetchPolicy does not work with client.query, because ' +\n      'client.query can only return a single result. Please use client.watchQuery ' +\n      'to receive multiple results from the cache and the network, or consider ' +\n      'using a different fetchPolicy, such as cache-first or network-only.'\n    );\n\n    if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {\n      options = { ...options, fetchPolicy: 'cache-first' };\n    }\n\n    return this.queryManager.query<T, TVariables>(options);\n  }\n\n  /**\n   * This resolves a single mutation according to the options specified and returns a\n   * {@link Promise} which is either resolved with the resulting data or rejected with an\n   * error.\n   *\n   * It takes options as an object with the following keys and values:\n   */\n  public mutate<T = any, TVariables = OperationVariables>(\n    options: MutationOptions<T, TVariables>,\n  ): Promise<FetchResult<T>> {\n    if (this.defaultOptions.mutate) {\n      options = mergeOptions(this.defaultOptions.mutate, options);\n    }\n    return this.queryManager.mutate<T>(options);\n  }\n\n  /**\n   * This subscribes to a graphql subscription according to the options specified and returns an\n   * {@link Observable} which either emits received data or an error.\n   */\n  public subscribe<T = any, TVariables = OperationVariables>(\n    options: SubscriptionOptions<TVariables, T>,\n  ): Observable<FetchResult<T>> {\n    return this.queryManager.startGraphQLSubscription<T>(options);\n  }\n\n  /**\n   * Tries to read some data from the store in the shape of the provided\n   * GraphQL query without making a network request. This method will start at\n   * the root query. To start at a specific id returned by `dataIdFromObject`\n   * use `readFragment`.\n   *\n   * @param optimistic Set to `true` to allow `readQuery` to return\n   * optimistic results. Is `false` by default.\n   */\n  public readQuery<T = any, TVariables = OperationVariables>(\n    options: DataProxy.Query<TVariables, T>,\n    optimistic: boolean = false,\n  ): T | null {\n    return this.cache.readQuery<T, TVariables>(options, optimistic);\n  }\n\n  /**\n   * Tries to read some data from the store in the shape of the provided\n   * GraphQL fragment without making a network request. This method will read a\n   * GraphQL fragment from any arbitrary id that is currently cached, unlike\n   * `readQuery` which will only read from the root query.\n   *\n   * You must pass in a GraphQL document with a single fragment or a document\n   * with multiple fragments that represent what you are reading. If you pass\n   * in a document with multiple fragments then you must also specify a\n   * `fragmentName`.\n   *\n   * @param optimistic Set to `true` to allow `readFragment` to return\n   * optimistic results. Is `false` by default.\n   */\n  public readFragment<T = any, TVariables = OperationVariables>(\n    options: DataProxy.Fragment<TVariables, T>,\n    optimistic: boolean = false,\n  ): T | null {\n    return this.cache.readFragment<T, TVariables>(options, optimistic);\n  }\n\n  /**\n   * Writes some data in the shape of the provided GraphQL query directly to\n   * the store. This method will start at the root query. To start at a\n   * specific id returned by `dataIdFromObject` then use `writeFragment`.\n   */\n  public writeQuery<TData = any, TVariables = OperationVariables>(\n    options: DataProxy.WriteQueryOptions<TData, TVariables>,\n  ): void {\n    this.cache.writeQuery<TData, TVariables>(options);\n    this.queryManager.broadcastQueries();\n  }\n\n  /**\n   * Writes some data in the shape of the provided GraphQL fragment directly to\n   * the store. This method will write to a GraphQL fragment from any arbitrary\n   * id that is currently cached, unlike `writeQuery` which will only write\n   * from the root query.\n   *\n   * You must pass in a GraphQL document with a single fragment or a document\n   * with multiple fragments that represent what you are writing. If you pass\n   * in a document with multiple fragments then you must also specify a\n   * `fragmentName`.\n   */\n  public writeFragment<TData = any, TVariables = OperationVariables>(\n    options: DataProxy.WriteFragmentOptions<TData, TVariables>,\n  ): void {\n    this.cache.writeFragment<TData, TVariables>(options);\n    this.queryManager.broadcastQueries();\n  }\n\n  public __actionHookForDevTools(cb: () => any) {\n    this.devToolsHookCb = cb;\n  }\n\n  public __requestRaw(payload: GraphQLRequest): Observable<ExecutionResult> {\n    return execute(this.link, payload);\n  }\n\n  /**\n   * Resets your entire store by clearing out your cache and then re-executing\n   * all of your active queries. This makes it so that you may guarantee that\n   * there is no data left in your store from a time before you called this\n   * method.\n   *\n   * `resetStore()` is useful when your user just logged out. You\u2019ve removed the\n   * user session, and you now want to make sure that any references to data you\n   * might have fetched while the user session was active is gone.\n   *\n   * It is important to remember that `resetStore()` *will* refetch any active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   */\n  public resetStore(): Promise<ApolloQueryResult<any>[] | null> {\n    return Promise.resolve()\n      .then(() => this.queryManager.clearStore())\n      .then(() => Promise.all(this.resetStoreCallbacks.map(fn => fn())))\n      .then(() => this.reFetchObservableQueries());\n  }\n\n  /**\n   * Remove all data from the store. Unlike `resetStore`, `clearStore` will\n   * not refetch any active queries.\n   */\n  public clearStore(): Promise<any[]> {\n    return Promise.resolve()\n      .then(() => this.queryManager.clearStore())\n      .then(() => Promise.all(this.clearStoreCallbacks.map(fn => fn())));\n  }\n\n  /**\n   * Allows callbacks to be registered that are executed when the store is\n   * reset. `onResetStore` returns an unsubscribe function that can be used\n   * to remove registered callbacks.\n   */\n  public onResetStore(cb: () => Promise<any>): () => void {\n    this.resetStoreCallbacks.push(cb);\n    return () => {\n      this.resetStoreCallbacks = this.resetStoreCallbacks.filter(c => c !== cb);\n    };\n  }\n\n  /**\n   * Allows callbacks to be registered that are executed when the store is\n   * cleared. `onClearStore` returns an unsubscribe function that can be used\n   * to remove registered callbacks.\n   */\n  public onClearStore(cb: () => Promise<any>): () => void {\n    this.clearStoreCallbacks.push(cb);\n    return () => {\n      this.clearStoreCallbacks = this.clearStoreCallbacks.filter(c => c !== cb);\n    };\n  }\n\n  /**\n   * Refetches all of your active queries.\n   *\n   * `reFetchObservableQueries()` is useful if you want to bring the client back to proper state in case of a network outage\n   *\n   * It is important to remember that `reFetchObservableQueries()` *will* refetch any active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   * Takes optional parameter `includeStandby` which will include queries in standby-mode when refetching.\n   */\n  public reFetchObservableQueries(\n    includeStandby?: boolean,\n  ): Promise<ApolloQueryResult<any>[]> {\n    return this.queryManager.reFetchObservableQueries(includeStandby);\n  }\n\n  /**\n   * Exposes the cache's complete state, in a serializable format for later restoration.\n   */\n  public extract(optimistic?: boolean): TCacheShape {\n    return this.cache.extract(optimistic);\n  }\n\n  /**\n   * Replaces existing state in the cache (if any) with the values expressed by\n   * `serializedState`.\n   *\n   * Called when hydrating a cache (server side rendering, or offline storage),\n   * and also (potentially) during hot reloads.\n   */\n  public restore(serializedState: TCacheShape): ApolloCache<TCacheShape> {\n    return this.cache.restore(serializedState);\n  }\n\n  /**\n   * Add additional local resolvers.\n   */\n  public addResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.localState.addResolvers(resolvers);\n  }\n\n  /**\n   * Set (override existing) local resolvers.\n   */\n  public setResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.localState.setResolvers(resolvers);\n  }\n\n  /**\n   * Get all registered local resolvers.\n   */\n  public getResolvers() {\n    return this.localState.getResolvers();\n  }\n\n  /**\n   * Set a custom local state fragment matcher.\n   */\n  public setLocalStateFragmentMatcher(fragmentMatcher: FragmentMatcher) {\n    this.localState.setFragmentMatcher(fragmentMatcher);\n  }\n\n  /**\n   * Define a new ApolloLink (or link chain) that Apollo Client will use.\n   */\n  public setLink(newLink: ApolloLink) {\n    this.link = this.queryManager.link = newLink;\n  }\n}\n", "import tslib from '../tslib.js';\r\nconst {\r\n    __extends,\r\n    __assign,\r\n    __rest,\r\n    __decorate,\r\n    __param,\r\n    __metadata,\r\n    __awaiter,\r\n    __generator,\r\n    __exportStar,\r\n    __createBinding,\r\n    __values,\r\n    __read,\r\n    __spread,\r\n    __spreadArrays,\r\n    __await,\r\n    __asyncGenerator,\r\n    __asyncDelegator,\r\n    __asyncValues,\r\n    __makeTemplateObject,\r\n    __importStar,\r\n    __importDefault,\r\n    __classPrivateFieldGet,\r\n    __classPrivateFieldSet,\r\n} = tslib;\r\nexport {\r\n    __extends,\r\n    __assign,\r\n    __rest,\r\n    __decorate,\r\n    __param,\r\n    __metadata,\r\n    __awaiter,\r\n    __generator,\r\n    __exportStar,\r\n    __createBinding,\r\n    __values,\r\n    __read,\r\n    __spread,\r\n    __spreadArrays,\r\n    __await,\r\n    __asyncGenerator,\r\n    __asyncDelegator,\r\n    __asyncValues,\r\n    __makeTemplateObject,\r\n    __importStar,\r\n    __importDefault,\r\n    __classPrivateFieldGet,\r\n    __classPrivateFieldSet,\r\n};\r\n", null, "/* Core */\n\nexport {\n  ApolloClient,\n  ApolloClientOptions,\n  DefaultOptions,\n  mergeOptions,\n} from './ApolloClient';\nexport {\n  ObservableQuery,\n  FetchMoreOptions,\n  UpdateQueryOptions,\n} from './ObservableQuery';\nexport {\n  QueryOptions,\n  WatchQueryOptions,\n  MutationOptions,\n  SubscriptionOptions,\n  FetchPolicy,\n  WatchQueryFetchPolicy,\n  ErrorPolicy,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  MutationUpdaterFn,\n} from './watchQueryOptions';\nexport { NetworkStatus } from './networkStatus';\nexport * from './types';\nexport {\n  Resolver,\n  FragmentMatcher,\n} from './LocalState';\nexport { isApolloError, ApolloError } from '../errors';\n\n/* Cache */\n\nexport {\n  // All the exports (types and values) from ../cache, minus cacheSlot,\n  // which we want to keep semi-private.\n  Cache,\n  ApolloCache,\n  Transaction,\n  DataProxy,\n  InMemoryCache,\n  InMemoryCacheConfig,\n  MissingFieldError,\n  defaultDataIdFromObject,\n  ReactiveVar,\n  makeVar,\n  TypePolicies,\n  TypePolicy,\n  FieldPolicy,\n  FieldReadFunction,\n  FieldMergeFunction,\n  FieldFunctionOptions,\n  PossibleTypesMap,\n} from '../cache';\n\nexport * from '../cache/inmemory/types';\n\n/* Link */\n\nexport * from '../link/core';\nexport * from '../link/http';\nexport {\n  fromError,\n  toPromise,\n  fromPromise,\n  ServerError,\n  throwServerError,\n} from '../link/utils';\n\n/* Utilities */\n\nexport {\n  Observable,\n  Observer,\n  ObservableSubscription,\n  Reference,\n  isReference,\n  makeReference,\n  StoreObject,\n} from '../utilities';\n\n/* Supporting */\n\n// The verbosity of invariant.{log,warn,error} can be controlled globally\n// (for anyone using the same ts-invariant package) by passing \"log\",\n// \"warn\", \"error\", or \"silent\" to setVerbosity (\"log\" is the default).\n// Note that all invariant.* logging is hidden in production.\nimport { setVerbosity } from \"ts-invariant\";\nexport { setVerbosity as setLogVerbosity }\nsetVerbosity(\"log\");\n\n// Note that importing `gql` by itself, then destructuring\n// additional properties separately before exporting, is intentional.\n// Due to the way the `graphql-tag` library is setup, certain bundlers\n// can't find the properties added to the exported `gql` function without\n// additional guidance (e.g. Rollup - see\n// https://rollupjs.org/guide/en/#error-name-is-not-exported-by-module).\n// Instead of having people that are using bundlers with `@apollo/client` add\n// extra bundler config to help `graphql-tag` exports be found (which would be\n// awkward since they aren't importing `graphql-tag` themselves), this\n// workaround of pulling the extra properties off the `gql` function,\n// then re-exporting them separately, helps keeps bundlers happy without any\n// additional config changes.\nimport gql from 'graphql-tag';\nexport const {\n  resetCaches,\n  disableFragmentWarnings,\n  enableExperimentalFragmentVariables,\n  disableExperimentalFragmentVariables\n} = gql;\nexport { gql };\n", "const appliedClassMixins = new WeakMap();\n\n/** Vefify if the Mixin was previously applyed\n * @private\n * @param {function} mixin      Mixin being applyed\n * @param {object} superClass   Class receiving the new mixin\n * @returns {boolean}\n */\nfunction wasMixinPreviouslyApplied(mixin, superClass) {\n  let klass = superClass;\n  while (klass) {\n    if (appliedClassMixins.get(klass) === mixin) {\n      return true;\n    }\n    klass = Object.getPrototypeOf(klass);\n  }\n  return false;\n}\n\n/** Apply each mixin in the chain to make sure they are not applied more than once to the final class.\n * @export\n * @param {function} mixin      Mixin to be applyed\n * @returns {object}            Mixed class with mixin applied\n */\nexport function dedupeMixin(mixin) {\n  return superClass => {\n    if (wasMixinPreviouslyApplied(mixin, superClass)) {\n      return superClass;\n    }\n    const mixedClass = mixin(superClass);\n    appliedClassMixins.set(mixedClass, mixin);\n    return mixedClass;\n  };\n}\n", "import type { DocumentNode } from '@apollo/client/core';\n\n/**\n * Validates a graphql document node.\n *\n * ```haskell\n * isValidGql :: DocumentNode a => a -> Bool\n * ```\n * @param doc Maybe a DocumentNode\n * @return Whether the argument is a DocumentNode\n */\nexport function isValidGql(doc: any): doc is DocumentNode {\n  return !!(\n    doc &&\n    typeof doc === 'object' &&\n    'kind' in doc &&\n    'definitions' in doc\n  );\n}\n", "import type { ApolloElementInterface } from '@apollo-elements/interfaces/apollo-element';\nimport type { DocumentNode } from '@apollo/client/core';\n\ninterface PropertyEffectOptions<C extends ApolloElementInterface> {\n  /** Name of the property. */\n  name: keyof C,\n  /** The property's initial value. */\n  init?: C[keyof C];\n  /**\n   * Side effect to run when setting the property.\n   *\n   * @this bound to the element instance.\n   * @param value The new value.\n   */\n  onSet(this: C, value: C[keyof C]): void;\n}\n\n/**\n * Creates a `PropertyDescriptor` for a boolean property that reflects to a boolean attribute\n *\n * @param  attr Attribute name\n */\nexport function booleanAttr<C extends ApolloElementInterface>(attr: string): PropertyDescriptor {\n  return {\n    configurable: true,\n    enumerable: true,\n\n    get(this: C): boolean {\n      return this.hasAttribute(attr);\n    },\n\n    set(this: C, v: boolean) {\n      if (v)\n        this.setAttribute(attr, '');\n      else\n        this.removeAttribute(attr);\n    },\n\n  };\n}\n\n/**\n * Creates a `PropertyDescriptor` for a property that runs a given side effect when set.\n *\n * @param options Configuration for the property: it's name, initial value, and setter side-effect.\n */\nexport function effect<C extends ApolloElementInterface>(\n  options: PropertyEffectOptions<C>\n): PropertyDescriptor {\n  const { name, init, onSet } = options;\n  const privateName = `_${name}` as typeof name; // little white lies\n  return {\n    configurable: true,\n    enumerable: true,\n\n    get(this: C) {\n      return this[privateName] ?? init;\n    },\n\n    set(this: C, value) {\n      this[privateName] = value;\n      onSet.call(this, value);\n    },\n  };\n}\n\n/**\n * Creates a `PropertyDescriptor` for an `ApolloElement`'s `document` property.\n */\nexport function gqlDocument<C extends ApolloElementInterface>(): PropertyDescriptor {\n  return {\n    configurable: true,\n    enumerable: true,\n\n    get(this: C): DocumentNode | null {\n      return this.document;\n    },\n\n    set(this: C, document) {\n      this.document = document;\n    },\n\n  };\n}\n\n/**\n * Creates a `PropertyDescriptor` for a writable property.\n *\n * @param  init The property's initial value.\n */\nexport function writable(init?: unknown): PropertyDescriptor {\n  return {\n    configurable: true,\n    enumerable: true,\n    writable: true,\n    value: init,\n  };\n}\n", "/** Splits a string by `,` then trims each of the results */\nexport function splitCommasAndTrim(value: string): string[] {\n  return value\n    .split(',')\n    .map(x => x.trim())\n    .filter(Boolean);\n}\n\nexport function stripHTMLComments(string: string): string {\n  return string.replace?.(/<!---->/g, '');\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isEmpty(x: object | Array<unknown>): boolean {\n  const { length } = Array.isArray(x) ? x : Object.keys(x);\n  return !length;\n}\n", "import type {\n  ApolloClient,\n  ApolloError,\n  DocumentNode,\n  NormalizedCacheObject,\n  TypedDocumentNode,\n} from '@apollo/client/core';\n\nimport type {\n  ApolloElementElement,\n  ApolloElementInterface,\n  Constructor,\n  GraphQLError,\n} from '@apollo-elements/interfaces';\n\nimport { gql } from '@apollo/client/core';\n\nimport { isValidGql } from '@apollo-elements/lib/is-valid-gql';\nimport { dedupeMixin } from '@open-wc/dedupe-mixin';\nimport { effect, writable } from '@apollo-elements/lib/descriptors';\nimport { stripHTMLComments } from '@apollo-elements/lib/helpers';\n\ndeclare global {\n  interface WindowEventMap {\n    'apollo-element-disconnected': ApolloElementEvent;\n  }\n  interface HTMLElementEventMap {\n    'apollo-element-connected': ApolloElementEvent;\n    'apollo-element-disconnected': ApolloElementEvent;\n    'apollo-error': CustomEvent<ApolloError>;\n  }\n}\n\nconst SCRIPT_SELECTOR =\n  'script[type=\"application/graphql\"]';\n\nfunction capital(string: string): string {\n  return `${string.substr(0, 1).toUpperCase()}${string.substr(1)}`;\n}\n\n/**\n * Fired when an element connects to or disconnects from the DOM\n */\nexport class ApolloElementEvent<T = ApolloElementElement> extends CustomEvent<T> {\n  declare type: 'apollo-element-connected'|'apollo-element-disconnected';\n\n  constructor(type: 'apollo-element-connected'|'apollo-element-disconnected', detail: T) {\n    super(type, {\n      bubbles: true,\n      composed: true,\n      detail,\n    });\n  }\n}\n\ntype MixinInstance =\n  Constructor<ApolloElementInterface> &\n  Pick<typeof ApolloElementInterface, keyof typeof ApolloElementInterface> & {\n    observedAttributes?: string[];\n  };\n\nfunction ApolloElementMixinImplementation<B extends Constructor>(superclass: B): MixinInstance & B {\n  abstract class ApolloElement extends superclass implements Omit<ApolloElementInterface, 'mo'> {\n    static documentType: 'document'|'query'|'mutation'|'subscription' = 'document';\n\n    /** The Apollo Client instance. */\n    client: ApolloClient<NormalizedCacheObject> | null = window.__APOLLO_CLIENT__ ?? null; /* c8 ignore next */ // covered\n\n    /** Latest data */\n    declare abstract data: unknown | null;\n\n    /**\n     * An object that maps from the name of a variable as used in the operation's GraphQL document to that variable's value.\n     */\n    declare abstract variables: unknown | null;\n\n    /** Latest error. */\n    declare error: Error | ApolloError | null;\n\n    /** Latest errors. */\n    declare errors: readonly GraphQLError[] | null;\n\n    /** Whether a request is in-flight. */\n    declare loading: boolean;\n\n    /** Context passed to the link execution chain. */\n    declare context?: Record<string, unknown>;\n\n    private _document: this['document'] = null;\n\n    private _documentSetByJS = false;\n\n    private _variables: this['variables'] = null;\n\n    private _variablesSetByJS = false;\n\n    protected mo?: MutationObserver;\n\n    /**\n     * A GraphQL document containing a single query, mutation, or subscription.\n     * You can set it as a JavaScript property or by appending a GraphQL script to the element (light DOM).\n     */\n    get document(): DocumentNode | TypedDocumentNode | null {\n      return this._document ?? this.getDOMGraphQLDocument();\n    }\n\n    set document(document) {\n      this._documentSetByJS = false;\n      if (!document)\n        this._document = null;\n      else if (!isValidGql(document))\n        throw new TypeError(`${capital((this.constructor as typeof ApolloElementInterface).documentType ?? 'document')} must be a gql-parsed DocumentNode`); /* c8 ignore next */\n      else {\n        this._document = document;\n        this._documentSetByJS = true;\n        if (this.mo) // `isConnected` is unreliable in this case\n          this.documentChanged?.(document);\n      }\n    }\n\n    constructor(...a: any[]) { super(...a); }\n\n    connectedCallback(): void {\n      super.connectedCallback?.();\n\n      this.mo = new MutationObserver(this.onDOMMutation.bind(this));\n\n      this.mo.observe(this, { characterData: true, childList: true, subtree: true });\n\n      this._document = this._document ?? this.getDOMGraphQLDocument();\n      this._variables = this._variables ?? this.getDOMVariables();\n\n      this.dispatchEvent(new ApolloElementEvent('apollo-element-connected', this));\n    }\n\n    disconnectedCallback(): void {\n      this.dispatchEvent(new ApolloElementEvent('apollo-element-disconnected', this));\n      window.dispatchEvent(new ApolloElementEvent('apollo-element-disconnected', this));\n      this.mo?.disconnect();\n      super.disconnectedCallback?.();\n    }\n\n    /**\n     * Lifecycle callback that reacts to changes in the GraphQL document.\n     * @param document The GraphQL document.\n     */\n    protected documentChanged?(document: this['document']): void\n\n    /**\n     * Lifecycle callback that reacts to changes in the operation variables.\n     * @param variables The variables.\n     */\n    protected variablesChanged?(variables: this['variables']): void\n\n    private onDOMMutation(records: MutationRecord[]): void {\n      const isGQLScriptChanged = (record: MutationRecord) =>\n        [...record?.addedNodes].some(node =>\n          node === this.querySelector(SCRIPT_SELECTOR));\n\n      if (!this._documentSetByJS) {\n        this._document = this.getDOMGraphQLDocument();\n        // notify when the first script child element changes\n        if (records.some(isGQLScriptChanged))\n          this.documentChanged?.(this.document);\n      }\n\n      if (!this._variablesSetByJS)\n        this._variables = this.getDOMVariables();\n    }\n\n    /**\n     * Get a GraphQL DocumentNode from the element's GraphQL script child\n     */\n    protected getDOMGraphQLDocument(): this['document'] {\n      const script = this.querySelector<HTMLScriptElement>(SCRIPT_SELECTOR);\n      const text = script?.innerText;\n      if (!text)\n        return null; /* c8 ignore next */ // covered\n      else {\n        try {\n          // admittedly, we have to trust the user here.\n          return gql(stripHTMLComments(text)) as this['document']; /* c8 ignore next */ // covered\n        } catch (err) {\n          this.error = err;\n          return null;\n        }\n      }\n    }\n\n    /**\n     * Gets operation variables from the element's JSON script child\n     */\n    protected getDOMVariables(): this['variables'] {\n      const script = this.querySelector<HTMLScriptElement>('script[type=\"application/json\"]');\n      if (!script) return null; /* c8 ignore next */ // covered\n      try {\n        return JSON.parse(script.innerText); /* c8 ignore next */ // covered\n      } catch {\n        return null;\n      }\n    }\n  }\n\n  Object.defineProperties(ApolloElement.prototype, {\n    data: writable(null),\n    error: writable(null),\n    errors: writable(null),\n    loading: writable(false),\n    variables: effect({\n      name: 'variables',\n      init: null,\n      onSet(variables: unknown) {\n        // @ts-expect-error: This is essentially a class accessor, I'm working around some TS limitations\n        if (this.mo) // element is connected\n        // @ts-expect-error: This is essentially a class accessor, I'm working around some TS limitations\n          this.variablesChanged?.(variables);\n      },\n    }),\n  });\n\n  // @ts-expect-error: let's pretend it is\n  return ApolloElement;\n}\n\n/**\n * `ApolloElementMixin`: class mixin for apollo custom elements.\n */\nexport const ApolloElementMixin =\n  dedupeMixin(ApolloElementMixinImplementation);\n", "import type {\n  ApolloError,\n  ApolloQueryResult,\n  DocumentNode,\n  ErrorPolicy,\n  FetchPolicy,\n  ObservableQuery,\n  OperationVariables,\n  QueryOptions,\n  SubscribeToMoreOptions,\n  SubscriptionOptions,\n  WatchQueryOptions,\n} from '@apollo/client/core';\n\nimport type {\n  ApolloQueryInterface,\n  ComponentDocument,\n  Constructor,\n  Data,\n  FetchMoreParams,\n  RefetchQueriesType,\n  Variables,\n} from '@apollo-elements/interfaces';\n\nimport { NetworkStatus } from '@apollo/client/core';\n\nimport { dedupeMixin } from '@open-wc/dedupe-mixin';\n\nimport { ApolloElementMixin } from './apollo-element-mixin';\n\nimport { booleanAttr, effect, gqlDocument, writable } from '@apollo-elements/lib/descriptors';\n\ntype ApolloQueryResultEvent<TData = unknown> =\n  CustomEvent<ApolloQueryResult<TData>>;\n\ndeclare global {\n  interface HTMLElementEventMap {\n    'apollo-query-result': ApolloQueryResultEvent;\n  }\n}\n\ntype MixinInstance = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  new <D = unknown, V = Record<string, any>>(...a: any[]): ApolloQueryInterface<D, V>;\n  documentType: 'query',\n}\n\nfunction ApolloQueryMixinImpl<B extends Constructor>(superclass: B): MixinInstance & B {\n  class ApolloQueryElement<D = unknown, V = OperationVariables>\n    extends ApolloElementMixin(superclass)\n    implements Omit<ApolloQueryInterface<D, V>, 'shouldSubscribe'> {\n    static documentType = 'query' as const;\n\n    static get observedAttributes(): string[] {\n      return [...new Set([\n        ...super.observedAttributes ?? [],\n        'fetch-policy',\n        'next-fetch-policy',\n      ])];\n    }\n\n    /**\n     * The latest query data.\n     */\n    declare data: Data<D> | null;\n\n    /**\n     * An object map from variable name to variable value, where the variables are used within the GraphQL query.\n     *\n     * Setting variables will initiate the query, unless [`noAutoSubscribe`](#noautosubscribe) is also set.\n     *\n     * @summary Query variables.\n     */\n    declare variables: Variables<D, V> | null;\n\n    declare query: DocumentNode | ComponentDocument<D> | null;\n\n    declare fetchPolicy?: FetchPolicy;\n\n    declare partial?: boolean;\n\n    declare partialRefetch?: boolean;\n\n    declare refetchQueries: RefetchQueriesType<D> | null;\n\n    declare returnPartialData?: boolean;\n\n    declare nextFetchPolicy?: FetchPolicy;\n\n    declare networkStatus: NetworkStatus;\n\n    declare observableQuery?: ObservableQuery<Data<D>, Variables<D, V>>;\n\n    declare options: Partial<WatchQueryOptions<Variables<D, V>, Data<D>>> | null;\n\n    declare noAutoSubscribe: boolean;\n\n    declare notifyOnNetworkStatusChange: boolean;\n\n    declare pollInterval?: number;\n\n    onData?(_result: ApolloQueryResult<Data<D>>): void\n\n    onError?(_error: Error): void\n\n    errorPolicy: ErrorPolicy = 'none';\n\n    /** @private */\n    __options: Partial<WatchQueryOptions> | null = null;\n\n    /** @private */\n    __networkStatus = NetworkStatus.ready;\n\n    public get canAutoSubscribe() {\n      return (\n        !!this.client &&\n        !this.noAutoSubscribe &&\n        this.shouldSubscribe()\n      );\n    }\n\n    constructor(...a: any[]) { super(...a); }\n\n    attributeChangedCallback(name: string, oldVal: string, newVal: string): void {\n      super.attributeChangedCallback?.(name, oldVal, newVal);\n      // @ts-expect-error: ts is not tracking the static side\n      if (super.constructor?.observedAttributes?.includes?.(name))\n        return;\n\n      switch (name) {\n        case 'fetch-policy':\n          this.fetchPolicy = newVal as ApolloQueryElement<D, V>['fetchPolicy'];\n          break;\n\n        case 'next-fetch-policy':\n          this.nextFetchPolicy = newVal as ApolloQueryElement<D, V>['nextFetchPolicy'];\n          break;\n      }\n    }\n\n    connectedCallback(): void {\n      super.connectedCallback();\n      this.documentChanged(this.query);\n    }\n\n    documentChanged(query: DocumentNode | ComponentDocument<D> | null): void {\n      if (!query) return; /* c8 ignore next */ // all covered\n      if (this.canSubscribe({ query }) && this.shouldSubscribe({ query })) /* c8 ignore next */ // all covered\n        this.subscribe({ query }); /* c8 ignore next */ // all covered\n    }\n\n    variablesChanged(variables: Variables<D, V>): void {\n      if (this.observableQuery)\n        this.refetch(variables);\n      else if (this.canSubscribe({ variables }) && this.shouldSubscribe({ variables }))\n        this.subscribe({ variables });\n      else\n        return;\n    }\n\n    /**\n     * Exposes the [`ObservableQuery#refetch`](https://www.apollographql.com/docs/react/api/apollo-client.html#ObservableQuery.refetch) method.\n     *\n     * @param variables The new set of variables. If there are missing variables, the previous values of those variables will be used..\n     */\n    async refetch(variables: Variables<D, V>): Promise<ApolloQueryResult<Data<D>>> {\n      if (!this.observableQuery)\n        throw new Error('Cannot refetch without an ObservableQuery');\n      return this.observableQuery.refetch(variables);\n    }\n\n    /**\n     * Determines whether the element is able to automatically subscribe\n     * @private\n     */\n    canSubscribe(options?: Partial<SubscriptionOptions<Variables<D, V> | null, Data<D>>>): boolean {\n      /* c8 ignore next 4 */\n      return (\n        !this.noAutoSubscribe &&\n        !!this.client &&\n        !!(options?.query ?? this.document)\n      );\n    }\n\n    /**\n     * Determines whether the element should attempt to automatically subscribe i.e. begin querying\n     *\n     * Override to prevent subscribing unless your conditions are met.\n     */\n    shouldSubscribe(options?: Partial<SubscriptionOptions<Variables<D, V>, Data<D>>>): boolean {\n      return (void options, true);\n    }\n\n    /**\n     * Resets the observableQuery and subscribes.\n     * @param params options for controlling how the subscription subscribes\n     */\n    subscribe(\n      params?: Partial<SubscriptionOptions<Variables<D, V>, Data<D>>>\n    ): ZenObservable.Subscription {\n      const options: SubscriptionOptions<Variables<D, V>, Data<D>> = {\n        // It's better to let Apollo client throw this error\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        query: params?.query ?? this.query!,\n        context: params?.context ?? this.context,\n        fetchPolicy: params?.fetchPolicy ?? this.fetchPolicy,\n        variables: params?.variables ?? this.variables ?? undefined,\n      };\n\n      if (this.observableQuery)\n        this.observableQuery.stopPolling(); /* c8 ignore next */ // covered\n\n      this.observableQuery = this.watchQuery(options);\n\n      this.loading = true;\n\n      return this.observableQuery?.subscribe({\n        next: this.nextData.bind(this),\n        error: this.nextError.bind(this),\n      });\n    }\n\n    /**\n     * Lets you pass a GraphQL subscription and updateQuery function\n     * to subscribe to more updates for your query.\n     *\n     * The `updateQuery` parameter is a function that takes the previous query data,\n     * then a `{ subscriptionData: TSubscriptionResult }` object,\n     * and returns an object with updated query data based on the new results.\n     */\n    subscribeToMore(\n      options: SubscribeToMoreOptions<Data<D>, Variables<D, V>>\n    ): (() => void) | void {\n      return this.observableQuery?.subscribeToMore(options);\n    }\n\n    /**\n     * Executes a Query once and updates the component with the result\n     */\n    async executeQuery(\n      params?: Partial<QueryOptions<Variables<D, V>>>\n    ): Promise<ApolloQueryResult<Data<D>>> {\n      if (!this.client)\n        throw new TypeError('No Apollo client. See https://apolloelements.dev/guides/getting-started/apollo-client/'); /* c8 ignore next */ // it's covered\n\n      const { context, errorPolicy, fetchPolicy } = this;\n\n      const options: QueryOptions<Variables<D, V>> = {\n        context, errorPolicy, fetchPolicy,\n        ...params,\n        // It's better to let Apollo client throw this error\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        query: params?.query ?? this.query!,\n        variables: params?.variables ?? this.variables ?? undefined,\n      };\n\n      this.loading = true;\n\n      try {\n        const result = await this.client.query(options);\n        this.nextData(result);\n        return result;\n      } catch (error) {\n        this.nextError(error);\n        throw error;\n      }\n    }\n\n    /**\n     * Exposes the `ObservableQuery#fetchMore` method.\n     * https://www.apollographql.com/docs/react/api/core/ObservableQuery/#ObservableQuery.fetchMore\n     *\n     * The optional `updateQuery` parameter is a function that takes the previous query data,\n     * then a `{ subscriptionData: TSubscriptionResult }` object,\n     * and returns an object with updated query data based on the new results.\n     *\n     * The optional `variables` parameter is an optional new variables object.\n     */\n    fetchMore(params?: Partial<FetchMoreParams<D, V>>): Promise<ApolloQueryResult<Data<D>>> {\n      const options: typeof params = {\n        // It's better to let Apollo client throw this error\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        query: params?.query ?? this.query!,\n        updateQuery: params?.updateQuery,\n        variables: params?.variables ?? this.variables ?? undefined,\n        context: params?.context ?? this.context,\n      };\n\n      this.loading = true;\n\n      this.observableQuery ??=\n        this.watchQuery(options as WatchQueryOptions<Variables<D, V>, Data<V>>);\n\n      return this.observableQuery?.fetchMore(options).then(x => {\n        this.loading = false;\n        return x;\n      });\n    }\n\n    /**\n     * Creates an instance of ObservableQuery with the options provided by the element.\n     * - `context` Context to be passed to link execution chain\n     * - `errorPolicy` Specifies the ErrorPolicy to be used for this query\n     * - `fetchPolicy` Specifies the FetchPolicy to be used for this query\n     * - `fetchResults` Whether or not to fetch results\n     * - `metadata` Arbitrary metadata stored in the store with this query. Designed for debugging, developer tools, etc.\n     * - `notifyOnNetworkStatusChange` Whether or not updates to the network status should trigger next on the observer of this query\n     * - `pollInterval` The time interval (in milliseconds) on which this query should be refetched from the server.\n     * - `query` A GraphQL document that consists of a single query to be sent down to the server.\n     * - `variables` A map going from variable name to variable value, where the variables are used within the GraphQL query.\n     */\n    watchQuery(\n      params?: Partial<WatchQueryOptions<Variables<D, V>, Data<D>>>\n    ): ObservableQuery<Data<D>, Variables<D, V>> {\n      if (!this.client)\n        throw new TypeError('No Apollo client. See https://apolloelements.dev/guides/getting-started/apollo-client/'); /* c8 ignore next */ // it's covered\n\n      const options: WatchQueryOptions<Variables<D, V>, Data<D>> = {\n        context: this.context,\n        errorPolicy: this.errorPolicy,\n        fetchPolicy: this.fetchPolicy,\n        notifyOnNetworkStatusChange: this.notifyOnNetworkStatusChange,\n        partialRefetch: this.partialRefetch,\n        pollInterval: this.pollInterval,\n        returnPartialData: this.returnPartialData,\n        nextFetchPolicy: this.nextFetchPolicy,\n        ...params,\n        // It's better to let Apollo client throw this error\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        query: params?.query ?? this.query!, /* c8 ignore next */ // it's covered\n        variables: params?.variables ?? this.variables ?? undefined,\n      };\n\n      return this.client.watchQuery(options);\n    }\n\n    /**\n     * Sets `data`, `loading`, and `error` on the instance when new subscription results arrive.\n     * @private\n     */\n    nextData(result: ApolloQueryResult<Data<D>>): void {\n      this.dispatchEvent(new CustomEvent('apollo-query-result', { detail: result }));\n      this.data = result.data;\n      this.error = result.error ?? null;\n      this.errors = result.errors ?? null;\n      this.loading = result.loading;\n      this.networkStatus = result.networkStatus;\n      this.partial = result.partial;\n      this.onData?.(result); /* c8 ignore next */ // it's covered\n    }\n\n    /**\n     * Sets `error` and `loading` on the instance when the subscription errors.\n     * @private\n     */\n    nextError(error: ApolloError): void {\n      this.dispatchEvent(new CustomEvent('apollo-error', { detail: error }));\n      this.error = error;\n      this.loading = false;\n      this.onError?.(error);\n    }\n  }\n\n  Object.defineProperties(ApolloQueryElement.prototype, {\n    query: gqlDocument(),\n    networkStatus: writable(NetworkStatus.ready),\n    noAutoSubscribe: booleanAttr('no-auto-subscribe'),\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n    options: effect<ApolloQueryElement<any, any>>({\n      name: 'options',\n      init: null,\n      onSet(options: ApolloQueryElement<any, any>['options']) {\n        if (!options) return;\n        this.observableQuery?.setOptions(options);\n      },\n    }),\n    /* eslint-enable @typescript-eslint/no-explicit-any */\n  });\n\n  return ApolloQueryElement;\n}\n\n\n/**\n * `ApolloQueryMixin`: class mixin for apollo-query elements.\n */\nexport const ApolloQueryMixin =\n  dedupeMixin(ApolloQueryMixinImpl);\n", "import type {\n  ApolloQueryResult,\n  DocumentNode,\n  ErrorPolicy,\n  FetchPolicy,\n  FetchMoreOptions,\n  FetchMoreQueryOptions,\n  NetworkStatus,\n  ObservableQuery,\n  OperationVariables,\n  QueryOptions,\n  SubscribeToMoreOptions,\n  SubscriptionOptions,\n  WatchQueryOptions,\n} from '@apollo/client/core';\n\nimport type { ComponentDocument, Data, Variables } from './operation';\nimport type { ApolloElementInterface } from './apollo-element';\n\nimport { ApolloQueryMixin } from '@apollo-elements/mixins/apollo-query-mixin';\n\nexport type FetchMoreParams<D, V> =\n  FetchMoreQueryOptions<Variables<D, V>, keyof Variables<D, V>, Data<D>> &\n  FetchMoreOptions<Data<D>, Variables<D, V>>\n\n/**\n * Common interface for query elements\n *\n * See [`ApolloElementInterface`](https://apolloelements.dev/api/interfaces/element) for more information on events\n *\n * @element\n *\n * @fires 'apollo-query-result' when the query resolves\n * @fires 'apollo-error' when the query rejects\n */\nexport declare class ApolloQueryInterface<D, V = OperationVariables>\n  extends ApolloElementInterface\n  implements ApolloQueryInterface<D, V> {\n  static documentType: 'query';\n\n  /**\n   * The latest query data.\n   */\n  declare data: Data<D> | null;\n\n  /**\n   * A GraphQL document containing a single query.\n   */\n  declare query: DocumentNode | ComponentDocument<D> | null;\n\n  /**\n   * An object map from variable name to variable value, where the variables are used within the GraphQL query.\n   *\n   * Setting variables will initiate the query, unless [`noAutoSubscribe`](#noautosubscribe) is also set.\n   *\n   * @summary Query variables.\n   */\n  declare variables: Variables<D, V> | null;\n\n  /**\n   * Determines where the client may return a result from. The options are:\n   *\n   * - `cache-first` (default): return result from cache, fetch from network if cached result is not available.\n   * - `cache-and-network`: return result from cache first (if it exists), then return network result once it's available.\n   * - `cache-only`: return result from cache if available, fail otherwise.\n   * - `no-cache`: return result from network, fail if network call doesn't succeed, don't save to cache\n   * - `network-only`: return result from network, fail if network call doesn't succeed, save to cache\n   * - `standby`: only for queries that aren't actively watched, but should be available for refetch and updateQueries.\n   *\n   * @summary The [fetchPolicy](https://www.apollographql.com/docs/react/api/core/ApolloClient/#FetchPolicy) for the query.\n   */\n  declare fetchPolicy?: FetchPolicy;\n\n  /**\n   * When someone chooses cache-and-network or network-only as their\n   * initial FetchPolicy, they often do not want future cache updates to\n   * trigger unconditional network requests, which is what repeatedly\n   * applying the cache-and-network or network-only policies would seem\n   * to imply. Instead, when the cache reports an update after the\n   * initial network request, it may be desirable for subsequent network\n   * requests to be triggered only if the cache result is incomplete.\n   * The nextFetchPolicy option provides a way to update\n   * options.fetchPolicy after the intial network request, without\n   * having to set options.\n   *\n   * @summary Set to prevent subsequent network requests when the fetch policy is `cache-and-network` or `network-only`.\n   */\n  declare nextFetchPolicy?: FetchPolicy;\n\n  /**\n   * If data was read from the cache with missing fields,\n   * partial will be true. Otherwise, partial will be falsy.\n   *\n   * @summary True when the query returned partial data.\n   */\n  declare partial?: boolean;\n\n  /**\n   * If true, perform a query refetch if the query result is marked as being partial,\n   * and the returned data is reset to an empty Object by the Apollo Client QueryManager\n   * (due to a cache miss).\n   *\n   * The default value is false for backwards-compatibility's sake,\n   * but should be changed to true for most use-cases.\n   *\n   * @summary Set to retry any partial query results.\n   */\n  declare partialRefetch?: boolean;\n\n  /**\n   * Opt into receiving partial results from the cache for queries\n   * that are not fully satisfied by the cache.\n   */\n  declare returnPartialData?: boolean;\n\n  /**\n   * `networkStatus` is useful if you want to display a different loading indicator (or no indicator at all)\n   * depending on your network status as it provides a more detailed view into the state of a network request\n   * on your component than `loading` does. `networkStatus` is an enum with different number values between 1 and 8.\n   * These number values each represent a different network state.\n   *\n   * 1. `loading`: The query has never been run before and the request is now pending. A query will still have this network status even if a result was returned from the cache, but a query was dispatched anyway.\n   * 2. `setVariables`: If a query\u2019s variables change and a network request was fired then the network status will be setVariables until the result of that query comes back. React users will see this when options.variables changes on their queries.\n   * 3. `fetchMore`: Indicates that fetchMore was called on this query and that the network request created is currently in flight.\n   * 4. `refetch`: It means that refetch was called on a query and the refetch request is currently in flight.\n   * 5. Unused.\n   * 6. `poll`: Indicates that a polling query is currently in flight. So for example if you are polling a query every 10 seconds then the network status will switch to poll every 10 seconds whenever a poll request has been sent but not resolved.\n   * 7. `ready`: No request is in flight for this query, and no errors happened. Everything is OK.\n   * 8. `error`: No request is in flight for this query, but one or more errors were detected.\n   *\n   * If the network status is less then 7 then it is equivalent to `loading` being true. In fact you could\n   * replace all of your `loading` checks with `networkStatus < 7` and you would not see a difference.\n   * It is recommended that you use `loading`, however.\n   */\n  declare networkStatus: NetworkStatus;\n\n  /**\n   * The Apollo `ObservableQuery` watching this element's query.\n   */\n  declare observableQuery?: ObservableQuery<Data<D>, Variables<D, V>>;\n\n  /**\n   * Set to reobserve the `ObservableQuery`\n   */\n  declare options: Partial<WatchQueryOptions<Variables<D, V>, Data<D>>> | null;\n\n  /**\n   * Whether or not updates to the network status should trigger next on the observer of this query.\n   */\n  declare notifyOnNetworkStatusChange?: boolean;\n\n  /**\n   * The time interval (in milliseconds) on which this query should be refetched from the server.\n   */\n  declare pollInterval?: number;\n\n  /**\n   * errorPolicy determines the level of events for errors in the execution result. The options are:\n   * - `none` (default): any errors from the request are treated like runtime errors and the observable is stopped (XXX this is default to lower breaking changes going from AC 1.0 => 2.0)\n   * - `ignore`: errors from the request do not stop the observable, but also don't call `next`\n   * - `all`: errors are treated like data and will notify observables\n   */\n  declare errorPolicy: ErrorPolicy;\n\n  /**\n   * When true, the component will not automatically subscribe to new data.\n   * Call the `subscribe()` method to do so.\n   */\n  declare noAutoSubscribe: boolean;\n\n  /** Flags an element that's ready and able to auto subscribe */\n  public get canAutoSubscribe(): boolean;\n\n  constructor(...a: any[]);\n\n  /**\n   * Optional callback for when a query is completed.\n   */\n  onData?(_result: ApolloQueryResult<Data<D>>): void\n\n  /**\n   * Optional callback for when an error occurs.\n   */\n  onError?(_error: Error): void\n\n  /**\n   * Update the variables of this observable query, and fetch the new results.\n   * @param variables The new set of variables. If there are missing variables, the previous values of those variables will be used..\n   */\n  refetch(variables: Variables<D, V>): Promise<ApolloQueryResult<Data<D>>>;\n\n  /**\n   * Determines whether the element should attempt to subscribe i.e. begin querying\n   * Override to prevent subscribing unless your conditions are met\n   * @override\n   */\n  shouldSubscribe(\n    options?: Partial<SubscriptionOptions<Variables<D, V>, Data<D>>>\n  ): boolean\n\n  /**\n   * Resets the observableQuery and subscribes.\n   */\n  subscribe(\n    params?: Partial<SubscriptionOptions<Variables<D, V>, Data<D>>>\n  ): ZenObservable.Subscription;\n\n  /**\n   * Lets you pass a GraphQL subscription and updateQuery function\n   * to subscribe to more updates for your query.\n   *\n   * The `updateQuery` parameter is a function that takes the previous query data,\n   * then a `{ subscriptionData: TSubscriptionResult }` object,\n   * and returns an object with updated query data based on the new results.\n   */\n  subscribeToMore(options: SubscribeToMoreOptions<Data<D>, Variables<D, V>>): (() => void) | void;\n\n  /**\n   * Executes a Query once and updates the component with the result\n   */\n  executeQuery(\n    params?: Partial<QueryOptions<Variables<D, V>>>\n  ): Promise<ApolloQueryResult<Data<D>> | void>;\n\n  /**\n   * Exposes the `ObservableQuery#fetchMore` method.\n   * https://www.apollographql.com/docs/react/api/core/ObservableQuery/#ObservableQuery.fetchMore\n   *\n   * The optional `updateQuery` parameter is a function that takes the previous query data,\n   * then a `{ subscriptionData: TSubscriptionResult }` object,\n   * and returns an object with updated query data based on the new results.\n   *\n   * The optional `variables` parameter is an optional new variables object.\n   */\n  fetchMore(params?: Partial<FetchMoreParams<D, V>>): Promise<ApolloQueryResult<Data<D>>>;\n\n  /**\n   * Creates an instance of ObservableQuery with the options provided by the element.\n   * - `context` Context to be passed to link execution chain\n   * - `errorPolicy` Specifies the ErrorPolicy to be used for this query\n   * - `fetchPolicy` Specifies the FetchPolicy to be used for this query\n   * - `fetchResults` Whether or not to fetch results\n   * - `metadata` Arbitrary metadata stored in the store with this query. Designed for debugging, developer tools, etc.\n   * - `notifyOnNetworkStatusChange` Whether or not updates to the network status should trigger next on the observer of this query\n   * - `pollInterval` The time interval (in milliseconds) on which this query should be refetched from the server.\n   * - `query` A GraphQL document that consists of a single query to be sent down to the server.\n   * - `variables` A map going from variable name to variable value, where the variables are used within the GraphQL query.\n   */\n  watchQuery(\n    options?: Partial<WatchQueryOptions<Variables<D, V>, Data<D>>>\n  ): ObservableQuery<Data<D>, Variables<D, V>>;\n}\n\nexport class ApolloQueryElement<D = unknown, V = OperationVariables>\n  extends ApolloQueryMixin(HTMLElement)<D, V> {\n}\n", "import type { GraphQLError } from '@apollo-elements/interfaces';\n\nimport type {\n  ApolloClient,\n  ApolloError,\n  DocumentNode,\n  NormalizedCacheObject,\n  OperationVariables,\n  TypedDocumentNode,\n} from '@apollo/client/core';\n\nimport type { CustomElement } from './constructor';\nimport type { Data, Variables } from './operation';\n\nimport { ApolloElementMixin } from '@apollo-elements/mixins/apollo-element-mixin';\n\n/**\n * Common base interface for apollo elements\n *\n * @element\n *\n * @fires 'apollo-element-connected' when the element connects to the dom\n * @fires 'apollo-element-disconnected' when the element disconnects from the dom\n */\nexport declare abstract class ApolloElementInterface extends CustomElement {\n  declare static documentType: 'document'|'query'|'mutation'|'subscription';\n\n  /** data */\n  abstract data: unknown | null;\n\n  /** Operation variables */\n  abstract variables: unknown | null;\n\n  /** The Apollo Client instance. */\n  declare client: ApolloClient<NormalizedCacheObject> | null;\n\n  /**\n   * GraphQL operation document i.e. query, subscription, or mutation.\n   * Must be a parsed GraphQL DocumentNode, so use `graphql-tag`.\n   * If unset, the element can derive the document from the first\n   * light-DOM `<script type=\"application/graphql\">` child.\n   */\n  declare document: DocumentNode | TypedDocumentNode | null;\n\n  /** Context passed to the link execution chain. */\n  declare context?: Record<string, unknown>;\n\n  /** Latest error */\n  declare error: Error | ApolloError | null;\n\n  /** Latest errors */\n  declare errors: readonly GraphQLError[] | null;\n\n  /** Whether a request is in flight. */\n  declare loading: boolean;\n\n  constructor(...a: any[]);\n\n  connectedCallback(): void;\n\n  declare protected mo?: MutationObserver;\n\n  /**\n   * Lifecycle callback that reacts to changes in the GraphQL document\n   */\n  protected documentChanged?(document: this['document']): void;\n\n  /**\n   * Lifecycle callback that reacts to changes in the operation variables\n   */\n  protected variablesChanged?(variables: this['variables']): void;\n\n  /**\n   * Gets operation variables from the element's JSON script child\n   */\n  protected getDOMVariables(): this['variables'];\n\n  /**\n   * Get a GraphQL DocumentNode from the element's GraphQL script child\n   */\n  protected getDOMGraphQLDocument(): this['document'];\n\n  private onDOMMutation(records: MutationRecord[]): void;\n}\n\nexport class ApolloElementElement<D = unknown, V = OperationVariables>\n  extends ApolloElementMixin(HTMLElement) {\n    /** data */\n    declare data: Data<D> | null;\n\n    /** Operation variables */\n    declare variables: Variables<D, V> | null;\n}\n", "/**\n * cuid.js\n * Collision-resistant UID generator for browsers and node.\n * Sequential for fast db lookups and recency sorting.\n * Safe for element IDs and server-side lookups.\n *\n * Extracted from CLCTR\n *\n * Copyright (c) Eric Elliott 2012\n * MIT License\n */\n\nexport function pad(num: string, size: number): string {\n  const s = `000000000${num}`;\n  return s.substr(s.length - size);\n}\n\nconst globalCount = Object.keys(window).length;\nconst mimeTypesLength = navigator.mimeTypes ? navigator.mimeTypes.length : 0;\nconst clientId = pad((mimeTypesLength +\n  navigator.userAgent.length).toString(36) +\n  globalCount.toString(36), 4);\n\nexport function fingerprint(): string {\n  return clientId;\n}\n\nlet getRandomValue: typeof Math.random;\nif (window.crypto) {\n  const lim = Math.pow(2, 32) - 1;\n  getRandomValue = function() {\n    return Math.abs(crypto.getRandomValues(new Uint32Array(1))[0] / lim);\n  };\n} else\n  getRandomValue = Math.random;\n\n\nlet c = 0;\nconst blockSize = 4;\nconst base = 36;\nconst discreteValues = Math.pow(base, blockSize);\n\nfunction randomBlock() {\n  return pad((getRandomValue() *\n    discreteValues << 0)\n    .toString(base), blockSize);\n}\n\nfunction safeCounter() {\n  c = c < discreteValues ? c : 0;\n  c++; // this is not subliminal\n  return c - 1;\n}\n\nexport function cuid(): string {\n  // Starting with a lowercase letter makes\n  // it HTML element ID friendly.\n  const letter = 'c'; // hard-coded allows for sequential access\n\n  // timestamp\n  // warning: this exposes the exact date and time\n  // that the uid was created.\n  const timestamp = (new Date().getTime()).toString(base);\n\n  // Prevent same-machine collisions.\n  const counter = pad(safeCounter().toString(base), blockSize);\n\n  // A few chars to generate distinct ids for different\n  // clients (so different computers are far less\n  // likely to generate the same id)\n  const print = fingerprint();\n\n  // Grab some more chars from Math.random()\n  const random = randomBlock() + randomBlock();\n\n  return letter + timestamp + counter + print + random;\n}\n\ncuid.slug = function slug() {\n  const date = new Date().getTime().toString(36);\n  const counter = safeCounter().toString(36).slice(-4);\n  const print = fingerprint().slice(0, 1) +\n      fingerprint().slice(-1);\n  const random = randomBlock().slice(-2);\n\n  return date.slice(-2) +\n    counter + print + random;\n};\n\ncuid.isCuid = function isCuid(stringToCheck: string) {\n  if (typeof stringToCheck !== 'string') return false;\n  if (stringToCheck.startsWith('c')) return true;\n  return false;\n};\n\ncuid.isSlug = function isSlug(stringToCheck: string) {\n  if (typeof stringToCheck !== 'string') return false;\n  const stringLength = stringToCheck.length;\n  if (stringLength >= 7 && stringLength <= 10) return true;\n  return false;\n};\n\ncuid.fingerprint = fingerprint;\n", "import type { Constructor } from '@apollo-elements/interfaces';\nimport { ApolloElementElement } from '@apollo-elements/interfaces/apollo-element';\n\nimport { cuid } from './cuid';\n\ntype Type = 'client' | 'subscription' | 'mutation' | 'query';\n\nconst noop = () => void null;\n\nconst INSTANCES = new WeakMap();\n\nconst DESCRIPTORS = new WeakMap();\n\nconst ELEMENT_APPLIED = new WeakMap();\n\nfunction isElementApplied<T extends HTMLElement>(host: T): boolean {\n  return ELEMENT_APPLIED.has(host);\n}\n\nfunction getElementDescriptor<T extends HTMLElement>(host: T): PropertyDescriptorMap {\n  return ELEMENT_APPLIED.get(host);\n}\n\nexport function getDescriptor<T extends HTMLElement>(host: T): PropertyDescriptorMap {\n  return DESCRIPTORS.get(host);\n}\n\nfunction getPrototypeDescriptor<S extends HTMLElement>(\n  source: Constructor<S>,\n): PropertyDescriptorMap {\n  /** Properties to not redefine */\n  const exclude = ['client', 'data', 'error', 'errors', 'loading', 'networkStatus'];\n\n  // class fields need a real instance in order to get their descriptors.\n  if (!INSTANCES.get(source)) {\n    customElements.define(`apollo-elements-intermediate-element-${cuid()}`, source);\n    INSTANCES.set(source, new source());\n  }\n\n  const { constructor, ...descriptors } = {\n    ...Object.getOwnPropertyDescriptors(INSTANCES.get(source)),\n    ...Object.getOwnPropertyDescriptors(Object.getPrototypeOf(source.prototype)),\n  };\n\n  exclude.forEach(key => delete descriptors[key]);\n\n  return descriptors;\n}\n\nfunction unsafeApplyPrototype<S extends HTMLElement>(\n  target: S,\n  source: Constructor<S>,\n): PropertyDescriptorMap {\n  const descriptors =\n    getPrototypeDescriptor(source);\n\n  const propertiesToAssign =\n    Object.fromEntries(Object.entries(descriptors).map(([key, descriptor]) => {\n      if (typeof descriptor?.value === 'function')\n        return [key, { ...descriptor, value: descriptor.value.bind(target) }];\n      else\n        return [key, descriptor];\n    }));\n\n\n  Object.defineProperties(target, propertiesToAssign);\n\n  return propertiesToAssign;\n}\n\nfunction unsafeApply<T extends ApolloElementElement>(\n  host: T,\n  klass: Constructor<T>,\n  type: Type,\n): void {\n  // @ts-expect-error: can't be helped.\n  host.constructor.documentType = type === 'client' ? 'document' : type; /* c8 ignore next */ // covered\n\n  DESCRIPTORS.set(host, {\n    ...getElementDescriptor(host),\n    ...unsafeApplyPrototype(host, klass),\n  });\n}\n\nfunction unsafeApplyElement<T extends ApolloElementElement>(\n  host: T,\n  effects: (host: T) => void\n): void {\n  effects(host);\n  ELEMENT_APPLIED\n    .set(host, unsafeApplyPrototype(host, ApolloElementElement));\n}\n\n/**\n * Applies a class' prototype to an element, mixing in the class' properties and methods to the element instance.\n *\n * @param  host Element to apply prototype properties to.\n * @param  klass Class whose prototype to apply to the host element.\n * @param  type Hint about what kind of class/host pair is in question.\n * @param  effects function that will run the first time this element has a class prototype mixed in via this helper.\n * @return Combined `PropertyDescriptorMap` for the instance.\n */\nexport function applyPrototype<T extends ApolloElementElement<any, any>>( // eslint-disable-line @typescript-eslint/no-explicit-any\n  host: T,\n  klass: Constructor<T> | typeof ApolloElementElement,\n  type: Type,\n  effects: (host: T) => void = noop,\n): PropertyDescriptorMap {\n  if (!isElementApplied(host) || klass === ApolloElementElement) /* c8 ignore next */ // covered\n    unsafeApplyElement(host, effects);\n\n  if (!getDescriptor(host) || klass !== ApolloElementElement) /* c8 ignore next */ // covered\n    unsafeApply(host, klass, type);\n\n  return getDescriptor(host);\n}\n", "import type { ApolloClient, DocumentNode, NormalizedCacheObject } from '@apollo/client/core';\n\nimport type {\n  ApolloElementElement,\n  ComponentDocument,\n  Constructor,\n} from '@apollo-elements/interfaces';\n\nimport type { State } from 'haunted';\n\nimport { applyPrototype } from '@apollo-elements/lib/prototypes';\n\nimport { Hook } from 'haunted';\n\nconst PRIVATE: Record<string, WeakMap<ApolloElementElement, unknown>> = { };\n\nconst DEFAULTS = {\n  data: null,\n  error: null,\n  errors: null,\n  loading: false,\n};\n\nexport abstract class ApolloHook<\n  D,\n  V,\n  OptionsType extends { client?: ApolloClient<NormalizedCacheObject> },\n  ReturnType extends unknown,\n  ComponentClass extends ApolloElementElement<D, V>\n> extends Hook<[DocumentNode, OptionsType], ReturnType, ComponentClass> {\n  abstract readonly type: 'query'|'mutation'|'subscription';\n\n  abstract readonly componentClass: Constructor<ComponentClass>;\n\n  protected abstract optionsToProperties(): Partial<ComponentClass>;\n\n  protected abstract optionsToOptionalMethods(): Partial<ComponentClass>;\n\n  abstract defaults: Partial<ComponentClass>;\n\n  readonly reactiveProps: (keyof ComponentClass)[] = [];\n\n  protected disconnected = true;\n\n  constructor(\n    public id: number,\n    public state: State<ComponentClass>,\n    public document: DocumentNode | ComponentDocument<D>,\n    public options: OptionsType = {} as OptionsType,\n  ) {\n    super(id, state);\n  }\n\n  protected init(): void {\n    this.defaults = { ...DEFAULTS, ...this.defaults };\n    this.initListeners();\n    this.initHost();\n    this.initReactiveProps();\n    this.initMethods();\n    this.connect();\n  }\n\n  private initListeners() {\n    const update = () => this.update(this.document, this.options);\n    this.state.host.addEventListener(`apollo-${this.type}-result`, update);\n    this.state.host.addEventListener('apollo-error', update);\n  }\n\n  private initHost(): void {\n    applyPrototype(this.state.host, this.componentClass, this.type);\n    Object.assign(this.state.host, {\n      ...this.defaults,\n      ...this.optionsToProperties(),\n      client: this.options.client ?? window.__APOLLO_CLIENT__ ?? null,\n    });\n  }\n\n  /** directly assigning breaks sinon spies, so we'll take the long way around. */\n  private initMethods(): void {\n    const configurable = true;\n    const enumerable = false;\n\n    Object.entries(this.optionsToOptionalMethods()).forEach(([key, value]) => {\n      if (typeof value === 'function')\n        Object.defineProperty(this.state.host, key, { configurable, enumerable, value }); /* c8 ignore next */ // I'm certain this is being called\n    });\n  }\n\n  private initReactiveProps(): void {\n    const { state: { host } } = this;\n\n    const props = ['loading', ...this.reactiveProps];\n\n    props.forEach((key: string | keyof ComponentClass) => {\n      PRIVATE[key as string] ??= new WeakMap();\n      PRIVATE[key as string].set(host, this.defaults[key as keyof ComponentClass]);\n      Object.defineProperty(host, key, {\n        configurable: true,\n        enumerable: true,\n        get() {\n          return PRIVATE[key as string].get(host);\n        },\n        set(value: boolean) {\n          PRIVATE[key as string].set(host, value);\n          // @ts-expect-error: borrowing a private API in order to set up reactivity\n          host._scheduler.update();\n        },\n      });\n    });\n  }\n\n  protected connect(): void {\n    const { connectedCallback, disconnectedCallback } = this.componentClass.prototype;\n    Object.assign(this.state.host, { connectedCallback, disconnectedCallback });\n    this.state.host.connectedCallback?.();\n    this.disconnected = false;\n  }\n\n  teardown(): void {\n    this.state.host.disconnectedCallback?.();\n    this.disconnected = true;\n  }\n}\n", "import type {\n  ApolloClient,\n  DocumentNode,\n  NormalizedCacheObject,\n  OperationVariables,\n  TypedDocumentNode,\n} from '@apollo/client/core';\n\nimport type { State } from 'haunted';\n\nimport type { ApolloQueryInterface } from '@apollo-elements/interfaces';\n\nimport { NetworkStatus } from '@apollo/client/core';\n\nimport { ApolloQueryElement } from '@apollo-elements/interfaces/apollo-query';\n\nimport { hook } from 'haunted';\n\nimport { ApolloHook } from './ApolloHook';\n\nexport type QueryHookOptions<D, V> = Partial<Pick<ApolloQueryInterface<D, V>,\n  | 'context'\n  | 'errorPolicy'\n  | 'fetchPolicy'\n  | 'nextFetchPolicy'\n  | 'noAutoSubscribe'\n  | 'notifyOnNetworkStatusChange'\n  | 'onError'\n  | 'partialRefetch'\n  | 'pollInterval'\n  | 'query'\n  | 'returnPartialData'\n  | 'shouldSubscribe'\n  | 'variables'\n> & {\n  client?: ApolloClient<NormalizedCacheObject>;\n  onCompleted?(data: D): void;\n}>;\n\nexport type QueryResult<D, V> = Pick<ApolloQueryInterface<D, V>,\n    'client'\n  | 'data'\n  | 'error'\n  | 'fetchMore'\n  | 'loading'\n  | 'networkStatus'\n  | 'refetch'\n  | 'subscribeToMore'\n  | 'variables'\n> & {\n  called: true;\n  startPolling: (ms: number) => void;\n  stopPolling: () => void;\n}\n\nclass UseQueryHook<D = unknown, V = OperationVariables> extends ApolloHook<\n  D,\n  V,\n  QueryHookOptions<D, V>,\n  QueryResult<D, V>,\n  ApolloQueryElement<D, V>\n> {\n  readonly type = 'query';\n\n  readonly componentClass = ApolloQueryElement;\n\n  readonly defaults: Partial<ApolloQueryElement<D, V>> = {\n    networkStatus: NetworkStatus.ready,\n  };\n\n  pollingInterval?: number;\n\n  constructor(\n    id: number,\n    state: State<ApolloQueryElement<D, V>>,\n    query: D extends TypedDocumentNode ? D : DocumentNode,\n    options?: QueryHookOptions<D, V>\n  ) {\n    super(id, state, query, options);\n    this.init();\n  }\n\n  protected optionsToProperties() : Partial<ApolloQueryElement<D, V>> {\n    const { onError, onCompleted, ...options } = this.options;\n    const query = this.document ?? options.query;\n    const noAutoSubscribe =\n      options.noAutoSubscribe ?? this.state.host.hasAttribute('no-auto-subscribe');\n    const errorPolicy = options.errorPolicy ?? 'none';\n    return {\n      ...this.defaults,\n      ...options,\n      noAutoSubscribe,\n      errorPolicy,\n      query,\n    };\n  }\n\n  protected optionsToOptionalMethods() {\n    // shouldSubscribe is handled just fine by `apply`\n    const { onCompleted, onError } = this.options;\n    return { onCompleted, onError };\n  }\n\n  update(_ = this.document, { variables = null } = this.options): QueryResult<D, V> {\n    if (this.disconnected) this.connect();\n\n    const { client, data, error, loading, networkStatus } = this.state.host;\n\n    const refetch = this.state.host.refetch.bind(this.state.host);\n    const fetchMore = this.state.host.fetchMore.bind(this.state.host);\n    const subscribeToMore = this.state.host.subscribeToMore.bind(this.state.host);\n\n    const startPolling = (ms: number) =>\n      void (this.pollingInterval = window.setInterval(refetch, ms));\n\n    const stopPolling = () =>\n      clearInterval(this.pollingInterval);\n\n    const called = true;\n\n    return {\n      called, client, data, error, loading, networkStatus, variables,\n      fetchMore, refetch, startPolling, stopPolling, subscribeToMore,\n    };\n  }\n\n  teardown() {\n    if (this.pollingInterval != null)\n      clearInterval(this.pollingInterval);\n    super.teardown();\n  }\n}\n\nexport const useQuery = hook(UseQueryHook);\n", "import type {\n  ApolloError,\n  DocumentNode,\n  ErrorPolicy,\n  FetchPolicy,\n  FetchResult,\n  MutationOptions,\n  MutationUpdaterFn,\n  OperationVariables,\n} from '@apollo/client/core';\n\nimport { gqlDocument, writable } from '@apollo-elements/lib/descriptors';\n\nimport type {\n  ApolloMutationInterface,\n  ComponentDocument,\n  Constructor,\n  Data,\n  OptimisticResponseType,\n  RefetchQueriesType,\n  Variables,\n} from '@apollo-elements/interfaces';\n\nimport { dedupeMixin } from '@open-wc/dedupe-mixin';\nimport { ApolloElementMixin } from './apollo-element-mixin';\n\ntype ApolloMutationResultEvent<TData = unknown> =\n  CustomEvent<FetchResult<TData>>;\n\ndeclare global {\n  interface HTMLElementEventMap {\n    'apollo-mutation-result': ApolloMutationResultEvent;\n  }\n}\n\ntype MixinInstance = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  new <D, V = Record<string, any>>(): ApolloMutationInterface<D, V>;\n  documentType: 'mutation';\n  observedAttributes?: string[];\n}\n\nfunction ApolloMutationMixinImpl<B extends Constructor>(base: B): B & MixinInstance {\n  class ApolloMutationElement<D, V = OperationVariables>\n    extends ApolloElementMixin(base)\n    implements ApolloMutationInterface<D, V> {\n    static documentType = 'mutation' as const;\n\n    static get observedAttributes(): string[] {\n      return [...new Set([\n        ...super.observedAttributes ?? [], /* c8 ignore next */\n        'await-refetch-queries',\n        'fetch-policy',\n        'refetch-queries',\n      ])];\n    }\n\n    /**\n     * Latest mutation data.\n     */\n    declare data: Data<D> | null;\n\n    /**\n     * An object that maps from the name of a variable as used in the mutation GraphQL document to that variable's value.\n     *\n     * @summary Mutation variables.\n     */\n    declare variables: Variables<D, V> | null;\n\n    declare mutation: DocumentNode | ComponentDocument<D> | null;\n\n    declare refetchQueries: RefetchQueriesType<D> | null;\n\n    declare called: boolean;\n\n    declare context?: Record<string, unknown>;\n\n    declare optimisticResponse?: OptimisticResponseType<D, V>;\n\n    declare errorPolicy?: ErrorPolicy;\n\n    declare fetchPolicy?: Extract<FetchPolicy, 'no-cache'>;\n\n    declare awaitRefetchQueries?: boolean;\n\n    onCompleted?(_data: Data<D>): void;\n\n    onError?(_error: Error): void;\n\n    updater?(\n      ...params: Parameters<MutationUpdaterFn<Data<D>>>\n    ): ReturnType<MutationUpdaterFn<Data<D>>>;\n\n    ignoreResults = false;\n\n    /**\n     * The ID number of the most recent mutation since the element was instantiated.\n     */\n    private mostRecentMutationId = 0;\n\n    constructor(...a: any[]) {\n      super(...a);\n      this.variables ??= null;\n      this.loading ??= false;\n    }\n\n    connectedCallback() {\n      super.connectedCallback?.();\n    }\n\n    attributeChangedCallback(name: string, oldVal: string, newVal: string): void {\n      super.attributeChangedCallback?.(name, oldVal, newVal);\n      // @ts-expect-error: ts is not tracking the static side\n      if (super.constructor?.observedAttributes?.includes?.(name))\n        return; /* c8 ignore next */\n\n      switch (name) { /* c8 ignore next */\n        case 'await-refetch-queries':\n          this.awaitRefetchQueries =\n            this.hasAttribute('await-refetch-queries');\n          break; /* c8 ignore next */\n\n        case 'refetch-queries':\n          this.refetchQueries =\n            !newVal ? null : newVal\n              .split(',')\n              .map(x => x.trim());\n          break; /* c8 ignore next */\n\n        case 'fetch-policy':\n          this.fetchPolicy = newVal as ApolloMutationElement<D, V>['fetchPolicy'];\n          break;\n      }\n    }\n\n    /**\n     * This resolves a single mutation according to the options specified and returns a Promise which is either resolved with the resulting data or rejected with an error.\n     */\n    public async mutate(\n      params?: Partial<MutationOptions<Data<D>, Variables<D, V>>>\n    ): Promise<FetchResult<Data<D>>> {\n      if (!this.client)\n        throw new TypeError('No Apollo client. See https://apolloelements.dev/guides/getting-started/apollo-client/'); /* c8 ignore next */ // covered\n\n      const options: MutationOptions<Data<D>, Variables<D, V>> = {\n        // It's better to let Apollo client throw this error\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        mutation: params?.mutation ?? this.mutation!,\n\n        awaitRefetchQueries: params?.awaitRefetchQueries ?? this.awaitRefetchQueries,\n        context: params?.context ?? this.context,\n        errorPolicy: params?.errorPolicy ?? this.errorPolicy,\n        fetchPolicy: params?.fetchPolicy ?? this.fetchPolicy,\n        optimisticResponse: params?.optimisticResponse ?? this.optimisticResponse,\n        refetchQueries: params?.refetchQueries ?? this.refetchQueries ?? undefined,\n        update: params?.update ?? this.updater,\n        variables: params?.variables ?? this.variables ?? undefined,\n      };\n\n      const mutationId = this.generateMutationId();\n\n      this.loading = true;\n      this.error = null;\n      this.data = null;\n      this.called = true;\n\n      return this.client.mutate<Data<D>, Variables<D, V>>(options)\n        .then(this.onCompletedMutation.bind(this, mutationId))\n        .catch(this.onMutationError.bind(this, mutationId));\n    }\n\n    /**\n     * Increments and returns the most recent mutation id.\n     */\n    private generateMutationId(): number {\n      this.mostRecentMutationId += 1;\n      return this.mostRecentMutationId;\n    }\n\n    /**\n     * Returns true when an ID matches the most recent mutation id.\n     */\n    private isMostRecentMutation(mutationId: number): boolean {\n      return this.mostRecentMutationId === mutationId;\n    }\n\n    /**\n     * Callback for when a mutation is completed.\n     */\n    private onCompletedMutation(\n      mutationId: number,\n      response: FetchResult<Data<D>>\n    ): FetchResult<Data<D>> {\n      const { data } = response;\n      this.dispatchEvent(new CustomEvent('apollo-mutation-result', { detail: response }));\n      if (this.isMostRecentMutation(mutationId) && !this.ignoreResults) {\n        this.loading = false;\n        this.error = null;\n        this.data = data ?? null; /* c8 ignore next */\n        this.errors = response.errors ?? null;\n        if (data)\n          this.onCompleted?.(data);\n      }\n      return response;\n    }\n\n    /**\n     * Callback for when a mutation fails.\n     */\n    private onMutationError(mutationId: number, error: ApolloError): never {\n      this.dispatchEvent(new CustomEvent('apollo-error', { detail: error }));\n      if (this.isMostRecentMutation(mutationId)) {\n        this.loading = false;\n        this.data = null;\n        this.error = error;\n      }\n      this.onError?.(error);\n      throw error;\n    }\n  }\n\n  Object.defineProperties(ApolloMutationElement.prototype, {\n    called: writable(false),\n    mutation: gqlDocument(),\n    optimisticResponse: writable(),\n    refetchQueries: writable(null),\n  });\n\n  return ApolloMutationElement;\n}\n\n/**\n * `ApolloMutationMixin`: class mixin for apollo-mutation elements.\n */\nexport const ApolloMutationMixin =\n  dedupeMixin(ApolloMutationMixinImpl);\n", "import type {\n  DocumentNode,\n  ErrorPolicy,\n  FetchPolicy,\n  FetchResult,\n  MutationOptions,\n  MutationUpdaterFn,\n  OperationVariables,\n} from '@apollo/client/core';\n\nimport type { RefetchQueryDescription } from '@apollo/client/core/watchQueryOptions';\n\nimport type { ComponentDocument, Data, Variables } from './operation';\nimport type { ApolloElementInterface } from './apollo-element';\n\nimport { ApolloMutationMixin } from '@apollo-elements/mixins/apollo-mutation-mixin';\n\nexport type RefetchQueriesType<D> =\n  RefetchQueryDescription |\n  ((result: FetchResult<Data<D>>) =>\n    RefetchQueryDescription);\n\nexport type OptimisticResponseType<D, V> =\n  Data<D> |\n  ((vars: Variables<D, V>) =>\n    Data<D>);\n\n/**\n * Common interface for mutation elements\n *\n * See [`ApolloElementInterface`](https://apolloelements.dev/api/interfaces/element) for more information on events\n *\n * @element\n *\n * @fires 'apollo-mutation-result' when the mutation resolves\n * @fires 'apollo-error' when the mutation rejects\n */\nexport declare class ApolloMutationInterface<D, V = OperationVariables>\n  extends ApolloElementInterface {\n  /**\n   * Latest mutation data\n   */\n  declare data: Data<D> | null;\n\n  /**\n   * An object that maps from the name of a variable as used in the mutation GraphQL document to that variable's value.\n   *\n   * @summary Mutation variables.\n   */\n  declare variables: Variables<D, V> | null;\n\n  /** The mutation. */\n  declare mutation: DocumentNode | ComponentDocument<D> | null;\n\n  /**\n   * An object that represents the result of this mutation that\n   * will be optimistically stored before the server has actually returned a\n   * result.\n   *\n   * This is most often used for optimistic UI, where we want to be able to see\n   * the result of a mutation immediately, and update the UI later if any errors\n   * appear.\n   */\n  declare optimisticResponse?: OptimisticResponseType<D, V>;\n\n  /**\n   * Whether the mutation was called\n   */\n  declare called: boolean;\n\n  /**\n   * If true, the returned data property will not update with the mutation result.\n   */\n  declare ignoreResults?: boolean;\n\n  /**\n   * Specifies the ErrorPolicy to be used for this mutation.\n   */\n  declare errorPolicy?: ErrorPolicy;\n\n  /**\n   * Specifies the FetchPolicy to be used for this mutation.\n   */\n  declare fetchPolicy?: Extract<FetchPolicy, 'no-cache'>;\n\n  /**\n   * A list of query names which will be refetched once this mutation has returned.\n   * This is often used if you have a set of queries which may be affected by a mutation and will have to update.\n   * Rather than writing a mutation query reducer (i.e. `updateQueries`) for this,\n   * you can refetch the queries that will be affected\n   * and achieve a consistent store once these queries return.\n   */\n  declare refetchQueries: RefetchQueriesType<D> | null;\n\n  /**\n   * Queries refetched as part of refetchQueries are handled asynchronously,\n   * and are not waited on before the mutation is completed (resolved).\n   * Setting this to true will make sure refetched queries are completed\n   * before the mutation is considered done. false by default.\n   */\n  declare awaitRefetchQueries?: boolean;\n\n  constructor(...a: any[]);\n\n  /**\n   * Callback for when a mutation is completed.\n   */\n  onCompleted?(_data: Data<D>): void\n\n  /**\n   * Callback for when an error occurs in mutation.\n   */\n  onError?(_error: Error): void\n\n  /**\n   * A function which updates the apollo cache when the query responds.\n   * This function will be called twice over the lifecycle of a mutation.\n   * Once at the very beginning if an optimisticResponse was provided.\n   * The writes created from the optimistic data will be rolled back before\n   * the second time this function is called which is when the mutation has\n   * succesfully resolved. At that point update will be called with the actual\n   * mutation result and those writes will not be rolled back.\n   *\n   * The reason a DataProxy is provided instead of the user calling the methods\n   * directly on ApolloClient is that all of the writes are batched together at\n   * the end of the update, and it allows for writes generated by optimistic\n   * data to be rolled back.\n   */\n  updater?(\n    ...params: Parameters<MutationUpdaterFn<Data<D>>>\n  ): ReturnType<MutationUpdaterFn<Data<D>>>;\n\n  /**\n   * This resolves a single mutation according to the options specified and returns a\n   * Promise which is either resolved with the resulting data or rejected with an error.\n   */\n  public mutate(\n    params?: Partial<MutationOptions<Data<D>, Variables<D, V>>>\n  ): Promise<FetchResult<Data<D>>>;\n}\n\nexport class ApolloMutationElement<D = unknown, V = OperationVariables>\n  extends ApolloMutationMixin(HTMLElement)<D, V> implements ApolloMutationInterface<D, V> {\n    declare data: Data<D> | null;\n\n    declare variables: Variables<D, V> | null;\n}\n", "import type {\n  ApolloClient,\n  ApolloError,\n  DocumentNode,\n  OperationVariables,\n  NormalizedCacheObject,\n} from '@apollo/client/core';\n\nimport type { State } from 'haunted';\n\nimport { ApolloMutationElement } from '@apollo-elements/interfaces/apollo-mutation';\n\nimport { hook } from 'haunted';\n\nimport { ApolloHook } from './ApolloHook';\nimport { ComponentDocument, Data } from '@apollo-elements/interfaces';\n\nexport type MutationHookOptions<D, V> = Partial<Pick<ApolloMutationElement<D, V>,\n  | 'context'\n  | 'mutation'\n  | 'errorPolicy'\n  | 'fetchPolicy'\n  | 'variables'\n  | 'refetchQueries'\n  | 'awaitRefetchQueries'\n  | 'optimisticResponse'\n  | 'ignoreResults'\n  | 'onCompleted'\n  | 'onError'\n> & {\n  client?: ApolloClient<NormalizedCacheObject>;\n  update: ApolloMutationElement['updater']\n  notifyOnNetworkStatusChange?: boolean;\n}>;\n\nexport interface MutationHookResult<D, V> {\n  called: boolean;\n  client: ApolloMutationElement<D, V>['client'] | null;\n  data: Data<D> | null;\n  error: Error | ApolloError | null,\n  loading: boolean;\n}\n\nexport type MutateFn<D, V> = ApolloMutationElement<D, V>['mutate'];\n\nexport type MutationTuple<D, V> = [MutateFn<D, V>, MutationHookResult<D, V>]\n\nclass UseMutationHook<D = unknown, V = OperationVariables> extends ApolloHook<\n  D,\n  V,\n  MutationHookOptions<D, V>,\n  MutationTuple<D, V>,\n  ApolloMutationElement<D, V>\n> {\n  readonly componentClass = ApolloMutationElement;\n\n  readonly type = 'mutation';\n\n  readonly reactiveProps = ['called' as const];\n\n  readonly defaults: Partial<ApolloMutationElement<D, V>> = {\n    called: false,\n  };\n\n  pollingInterval?: number;\n\n  constructor(\n    id: number,\n    state: State<ApolloMutationElement<D, V>>,\n    mutation: DocumentNode | ComponentDocument<D>,\n    options?: MutationHookOptions<D, V>\n  ) {\n    super(id, state, mutation, options);\n    this.init();\n    this.update();\n  }\n\n  protected optionsToProperties(): Partial<ApolloMutationElement<D, V>> {\n    const {\n      onCompleted, onError, update,\n      ignoreResults = false,\n      variables = null,\n      refetchQueries = null,\n      ...options\n    } = this.options;\n    const mutation = this.document ?? options.mutation;\n    return {\n      mutation,\n      ignoreResults,\n      variables,\n      refetchQueries,\n      ...options,\n    };\n  }\n\n  protected optionsToOptionalMethods(): Partial<ApolloMutationElement<D, V>> {\n    const { options: { onCompleted, onError, update: updater } } = this;\n    return { onCompleted, onError, updater };\n  }\n\n  update(_ = this.document, { variables } = this.options): MutationTuple<D, V> {\n    if (this.disconnected) this.connect();\n\n    const { host } = this.state;\n\n    host.variables = variables ?? null;\n\n    const { called, client, data, error, loading } = this.state.host;\n\n    return [host.mutate.bind(host), { called, client, data, error, loading }];\n  }\n}\n\nexport const useMutation = hook(UseMutationHook);\n", "import type {\n  ApolloError,\n  DocumentNode,\n  FetchPolicy,\n  FetchResult,\n  Observable,\n  SubscriptionOptions,\n} from '@apollo/client/core';\n\nimport type {\n  ApolloSubscriptionInterface,\n  ComponentDocument,\n  Constructor,\n  Data,\n  OnSubscriptionDataParams,\n  SubscriptionDataOptions,\n  Variables,\n} from '@apollo-elements/interfaces';\n\nimport { dedupeMixin } from '@open-wc/dedupe-mixin';\n\nimport { ApolloElementMixin } from './apollo-element-mixin';\nimport { booleanAttr, gqlDocument } from '@apollo-elements/lib/descriptors';\n\ntype ApolloSubscriptionResultEvent<TData = unknown> =\n  CustomEvent<OnSubscriptionDataParams<TData>>;\n\ndeclare global {\n  interface HTMLElementEventMap {\n    'apollo-subscription-result': ApolloSubscriptionResultEvent;\n  }\n}\n\ntype MixinInstance = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  new <D = unknown, V = Record<string, any>>(...a: any[]): ApolloSubscriptionInterface<D, V>;\n  documentType: 'subscription';\n}\n\nfunction ApolloSubscriptionMixinImpl<B extends Constructor>(base: B): MixinInstance & B {\n  class ApolloSubscriptionElement<D, V>\n    extends ApolloElementMixin(base)\n    implements Omit<ApolloSubscriptionInterface<D, V>, 'canSubscribe'> {\n    static documentType = 'subscription' as const;\n\n    declare subscription: DocumentNode | ComponentDocument<D> | null;\n\n    /**\n     * Latest subscription data.\n     */\n    declare data: Data<D> | null;\n\n    /**\n     * An object map from variable name to variable value, where the variables are used within the GraphQL subscription.\n     *\n     * Setting variables will initiate the subscription, unless [`noAutoSubscribe`](#noautosubscribe) is also set.\n     *\n     * @summary Subscription variables.\n     */\n    declare variables: Variables<D, V> | null;\n\n    declare fetchPolicy?: FetchPolicy;\n\n    declare pollInterval?: number;\n\n    declare noAutoSubscribe: boolean;\n\n    declare observable?: Observable<FetchResult<Data<D>>>;\n\n    declare observableSubscription?: ZenObservable.Subscription;\n\n    notifyOnNetworkStatusChange = false;\n\n    shouldResubscribe: SubscriptionDataOptions['shouldResubscribe'] = false;\n\n    skip = false;\n\n    onSubscriptionData?(_result: OnSubscriptionDataParams<Data<D>>): void\n\n    onSubscriptionComplete?(): void\n\n    onError?(error: ApolloError): void\n\n    public get canAutoSubscribe() {\n      return (\n        !!this.client &&\n        !this.noAutoSubscribe &&\n        this.shouldSubscribe()\n      );\n    }\n\n    constructor(...a: any[]) { super(...a); }\n\n    connectedCallback(): void {\n      super.connectedCallback?.();\n      if (!this.canSubscribe() || !this.shouldSubscribe()) return;\n      this.initObservable();\n      this.subscribe();\n    }\n\n    disconnectedCallback(): void {\n      super.disconnectedCallback?.();\n      this.cancel();\n    }\n\n    documentChanged(document: DocumentNode | ComponentDocument<D>): void {\n      this.cancel();\n\n      const query = document;\n\n      if (this.canSubscribe({ query }) && this.shouldSubscribe({ query }))\n        this.subscribe();\n    }\n\n    variablesChanged(variables: Variables<D, V> | null): void {\n      this.cancel();\n      if (this.canSubscribe({ variables }) && this.shouldSubscribe({ variables }))\n        this.subscribe();\n    }\n\n    public subscribe(params?: Partial<SubscriptionDataOptions<D, V>>) {\n      this.initObservable(params);\n\n      if (this.observableSubscription && !(params?.shouldResubscribe ?? this.shouldResubscribe))\n        return; /* c8 ignore next */\n\n      this.loading = true;\n\n      this.observableSubscription =\n        this.observable?.subscribe({\n          next: this.nextData.bind(this),\n          error: this.nextError.bind(this),\n          complete: this.onComplete.bind(this),\n        });\n    }\n\n    public cancel(): void {\n      this.endSubscription();\n      this.observableSubscription = undefined;\n      this.observable = undefined;\n    }\n\n    /**\n     * Determines whether the element is able to automatically subscribe\n     */\n    protected canSubscribe(params?: Partial<SubscriptionOptions<this['variables']>>): boolean {\n      return (\n        !this.noAutoSubscribe &&\n        !!this.client &&\n        !!(params?.query ?? this.document)\n      );\n    }\n\n    /**\n     * Determines whether the element should attempt to automatically subscribe i.e. begin querying\n     *\n     * Override to prevent subscribing unless your conditions are met.\n     */\n    shouldSubscribe(params?: Partial<SubscriptionOptions<this['variables']>>): boolean {\n      return (void params, true);\n    }\n\n    private initObservable(params?: Partial<SubscriptionDataOptions<D, V>>): void {\n      const shouldResubscribe = params?.shouldResubscribe ?? this.shouldResubscribe;\n      const client = params?.client ?? this.client;\n      const skip = params?.skip ?? this.skip;\n      // It's better to let Apollo client throw this error\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const query = params?.subscription ?? this.subscription!;\n      const variables = params?.variables ?? this.variables ?? undefined;\n      const fetchPolicy = params?.fetchPolicy ?? this.fetchPolicy;\n\n      if (!client)\n        throw new TypeError('No Apollo client. See https://apolloelements.dev/guides/getting-started/apollo-client/');\n\n      if ((this.observable && !shouldResubscribe) || skip)\n        return;\n\n      this.observable =\n        client.subscribe<Data<D>, Variables<D, V>>({ query, variables, fetchPolicy });\n    }\n\n    /**\n     * Sets `data`, `loading`, and `error` on the instance when new subscription results arrive.\n     */\n    private nextData(result: FetchResult<Data<D>>) {\n      const data = result.data ?? null; /* c8 ignore next */\n      // If we got to this line without a client, it's because of user error\n      const client = this.client!; // eslint-disable-line @typescript-eslint/no-non-null-assertion\n      const loading = false;\n      const error = null;\n      const subscriptionData = { data, loading, error };\n      const detail = { client, subscriptionData };\n      this.dispatchEvent(new CustomEvent('apollo-subscription-result', { detail }));\n      this.data = data;\n      this.loading = loading;\n      this.error = error;\n      this.onSubscriptionData?.(detail);\n    }\n\n    /**\n     * Sets `error` and `loading` on the instance when the subscription errors.\n     */\n    private nextError(error: ApolloError) {\n      this.dispatchEvent(new CustomEvent('apollo-error', { detail: error }));\n      this.error = error;\n      this.loading = false;\n      this.onError?.(error);\n    }\n\n    /**\n     * Shuts down the subscription\n     */\n    private onComplete(): void {\n      this.onSubscriptionComplete?.();\n      this.endSubscription();\n    }\n\n    private endSubscription() {\n      if (this.observableSubscription) {\n        this.observableSubscription.unsubscribe();\n        this.observableSubscription = undefined;\n      }\n    }\n  }\n\n  Object.defineProperties(ApolloSubscriptionElement.prototype, {\n    subscription: gqlDocument(),\n    noAutoSubscribe: booleanAttr('no-auto-subscribe'),\n  });\n\n  // @ts-expect-error: it is though\n  return ApolloSubscriptionElement;\n}\n\n/**\n * `ApolloSubscriptionMixin`: class mixin for apollo-subscription elements.\n */\nexport const ApolloSubscriptionMixin =\n  dedupeMixin(ApolloSubscriptionMixinImpl);\n", "import type {\n  ApolloClient,\n  ApolloError,\n  DocumentNode,\n  FetchPolicy,\n  FetchResult,\n  NormalizedCacheObject,\n  Observable,\n  OperationVariables,\n  SubscriptionOptions,\n} from '@apollo/client/core';\n\nimport type { ComponentDocument, Data, Variables } from './operation';\nimport type { ApolloElementInterface } from './apollo-element';\n\nimport { ApolloSubscriptionMixin } from '@apollo-elements/mixins/apollo-subscription-mixin';\n\nexport interface SubscriptionResult<TData> {\n  /** whether the subscription is loading */\n  loading: boolean;\n  /** subscription data */\n  data: TData | null;\n  /** subscription error */\n  error: ApolloError | null;\n}\n\nexport interface SubscriptionDataOptions<D = unknown, V = OperationVariables> {\n  subscription: DocumentNode | ComponentDocument<D>;\n  variables?: Variables<D, V>;\n  fetchPolicy?: FetchPolicy;\n  shouldResubscribe?:\n    | boolean\n    | ((options: SubscriptionDataOptions<D, V>) => boolean);\n  client?: ApolloClient<NormalizedCacheObject>;\n  skip?: boolean;\n}\n\nexport interface OnSubscriptionDataParams<TData = unknown> {\n  client: ApolloClient<NormalizedCacheObject>;\n  subscriptionData: SubscriptionResult<TData>;\n}\n\n/**\n * Common interface for subscription elements\n *\n * See [`ApolloElementInterface`](https://apolloelements.dev/api/interfaces/element) for more information on events\n *\n * @element\n *\n * @fires 'apollo-subscription-result' when the subscription updates\n * @fires 'apollo-error' when the query rejects\n */\nexport declare abstract class ApolloSubscriptionInterface<D, V = OperationVariables>\n  extends ApolloElementInterface {\n  /**\n   * Latest subscription data.\n   */\n  declare data: Data<D> | null;\n\n  /**\n   * An object map from variable name to variable value, where the variables are used within the GraphQL subscription.\n   *\n   * Setting variables will initiate the subscription, unless [`noAutoSubscribe`](#noautosubscribe) is also set.\n   *\n   * @summary Subscription variables.\n   */\n  declare variables: Variables<D, V> | null;\n\n  /**\n   * Specifies the FetchPolicy to be used for this subscription.\n   */\n  declare fetchPolicy?: FetchPolicy;\n\n  /**\n   * The time interval (in milliseconds) on which this subscription should be refetched from the server.\n   */\n  declare pollInterval?: number;\n\n  /**\n   * Whether or not updates to the network status should trigger next on the observer of this subscription.\n   */\n  declare notifyOnNetworkStatusChange: boolean;\n\n  /**\n   * Observable watching this element's subscription.\n   */\n  declare observable?: Observable<FetchResult<Data<D>>>;\n\n  /**\n   * Subscription to the observable\n   */\n  declare observableSubscription?: ZenObservable.Subscription;\n\n  /**\n   * A GraphQL document containing a single subscription.\n   */\n  declare subscription: DocumentNode | ComponentDocument<D> | null;\n\n  /**\n   * If true, the element will not begin querying data until you manually call `subscribe`\n   */\n  declare noAutoSubscribe: boolean;\n\n  /**\n   * If skip is true, the query will be skipped entirely\n   */\n  declare skip: boolean;\n\n  /**\n   * Determines if your subscription should be unsubscribed and subscribed again.\n   */\n  declare shouldResubscribe: SubscriptionDataOptions['shouldResubscribe'];\n\n  constructor(...a: any[]);\n\n  /**\n   * Resets the observable and subscribes.\n   */\n  public subscribe(params?: Partial<SubscriptionDataOptions<D, V>>): void\n\n  /**\n   * Cancels and clears the subscription\n   */\n  public cancel(): void\n\n  /** Flags an element that's ready and able to auto subscribe */\n  public get canAutoSubscribe(): boolean;\n\n  /**\n   * Determines whether the element should attempt to subscribe i.e. begin querying\n   * Override to prevent subscribing unless your conditions are met\n   */\n  shouldSubscribe(\n    options?: Partial<SubscriptionOptions<Variables<D, V>, Data<D>>>\n  ): boolean\n\n  /**\n   * Determines whether the element is able to automatically subscribe\n   */\n  protected canSubscribe(options?: Partial<SubscriptionOptions<Variables<D, V>, Data<D>>>): boolean\n\n  /**\n   * Callback for when data is updated\n   */\n  onSubscriptionData?(result: OnSubscriptionDataParams<Data<D>>): void;\n\n  /**\n   * Callback for when error is updated\n   */\n  onError?(error: ApolloError): void;\n\n  /**\n   * Callback for when subscription completes.\n   */\n  onSubscriptionComplete?(): void;\n\n  private initObservable(params?: Partial<SubscriptionDataOptions<D, V>>): void;\n\n  /**\n   * Sets `data`, `loading`, and `error` on the instance when new subscription results arrive.\n   */\n  private nextData(result: FetchResult<Data<D>>): void;\n\n  /**\n   * Sets `error` and `loading` on the instance when the subscription errors.\n   */\n  private nextError(error: ApolloError): void;\n\n  /**\n   * Shuts down the subscription\n   */\n  private onComplete(): void;\n\n  private endSubscription(): void;\n}\n\nexport class ApolloSubscriptionElement<D = unknown, V = OperationVariables>\n  extends ApolloSubscriptionMixin(HTMLElement)<D, V> { }\n", "import type {\n  ApolloClient,\n  DocumentNode,\n  NormalizedCacheObject,\n  OperationVariables,\n  TypedDocumentNode,\n} from '@apollo/client/core';\n\nimport type { State } from 'haunted';\n\nimport { ApolloSubscriptionElement } from '@apollo-elements/interfaces/apollo-subscription';\n\nimport { hook } from 'haunted';\n\nimport { ApolloHook } from './ApolloHook';\n\nexport type SubscriptionHookOptions<D, V> = Partial<Pick<ApolloSubscriptionElement<D, V>,\n  | 'fetchPolicy'\n  | 'noAutoSubscribe'\n  | 'onSubscriptionComplete'\n  | 'onSubscriptionData'\n  | 'shouldResubscribe'\n  | 'shouldSubscribe'\n  | 'skip'\n  | 'subscription'\n  | 'variables'\n> & {\n  client?: ApolloClient<NormalizedCacheObject>;\n}>;\n\nexport type SubscriptionResult<D> = Pick<ApolloSubscriptionElement<D>,\n  | 'data'\n  | 'error'\n  | 'loading'\n>;\n\nclass UseSubscriptionHook<D, V = OperationVariables> extends ApolloHook<\n  D,\n  V,\n  SubscriptionHookOptions<D, V>,\n  SubscriptionResult<D>,\n  ApolloSubscriptionElement<D, V>\n> {\n  readonly type = 'subscription';\n\n  readonly componentClass = ApolloSubscriptionElement;\n\n  readonly defaults: Partial<ApolloSubscriptionElement<D, V>> = {\n    notifyOnNetworkStatusChange: false,\n    shouldResubscribe: false,\n    skip: false,\n  };\n\n  constructor(\n    id: number,\n    state: State<ApolloSubscriptionElement<D, V>>,\n    subscription: D extends TypedDocumentNode ? D : DocumentNode,\n    options?: SubscriptionHookOptions<D, V>\n  ) {\n    super(id, state, subscription, options);\n    this.init();\n  }\n\n  protected optionsToProperties() {\n    const {\n      onSubscriptionComplete, onSubscriptionData, shouldSubscribe,\n      ...options\n    } = this.options;\n    return {\n      ...this.defaults,\n      noAutoSubscribe: options.noAutoSubscribe ?? this.state.host.hasAttribute('no-auto-subscribe'),\n      skip: options.skip ?? false,\n      subscription: this.document,\n      variables: options.variables,\n    };\n  }\n\n  protected optionsToOptionalMethods(): Partial<ApolloSubscriptionElement<D, V>> {\n    const { onSubscriptionData, shouldSubscribe } = this.options;\n    return { onSubscriptionData, shouldSubscribe };\n  }\n\n  update(): SubscriptionResult<D> {\n    if (this.disconnected) this.connect();\n\n    const { data, error, loading } = this.state.host;\n\n    return { data, error, loading };\n  }\n}\n\nexport const useSubscription = hook(UseSubscriptionHook);\n", "/* eslint-disable no-nested-ternary */\nimport { gql } from '@apollo/client/core';\n\nexport const DEFAULT_BARBEQUES_COLLECTION_PRICE_RANGE = [1, 30000];\nexport const DEFAULT_BARBEQUES_COLLECTION_GRILL_COOKING_AREA_RANGE = [1, 20];\n\nexport const GET_PRODUCT_BY_HANDLE = gql`\n  query getProductByHandle($handle: String!) {\n    productByHandle(handle: $handle) {\n      id\n      onlineStoreUrl\n      availableForSale\n      handle\n      title\n      totalInventory\n      tags\n      vendor\n      productType\n      variants(first: 2) {\n        edges {\n          node {\n            id\n            image {\n              altText\n              originalSrc\n              transformedSrc(crop: CENTER, maxWidth: 600, maxHeight: 600)\n            }\n            priceV2 {\n              amount\n              currencyCode\n            }\n            quantityAvailable\n            availableForSale\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const GET_PRODUCTS = gql`\n  query getProducts(\n    $first: Int\n    $after: String\n    $query: String\n    $reverse: Boolean\n    $sortKey: ProductSortKeys\n  ) {\n    products(\n      first: $first\n      after: $after\n      query: $query\n      reverse: $reverse\n      sortKey: $sortKey\n    ) {\n      edges {\n        cursor\n        node {\n          id\n          onlineStoreUrl\n          handle\n          title\n          availableForSale\n          productType\n          vendor\n          totalInventory\n          images(first: 2) {\n            edges {\n              node {\n                altText\n                originalSrc\n                transformedSrc(crop: CENTER, maxWidth: 340, maxHeight: 340)\n              }\n            }\n          }\n          priceRange {\n            maxVariantPrice {\n              amount\n              currencyCode\n            }\n            minVariantPrice {\n              amount\n              currencyCode\n            }\n          }\n          tags\n          description\n        }\n      }\n    }\n  }\n`;\n\nexport const transformFunc = ({\n  availableForSale,\n  totalInventory,\n  onlineStoreUrl,\n  description,\n  handle,\n  images,\n  priceRange,\n  tags,\n  title,\n  vendor,\n  productType,\n}) => ({\n  availableForSale,\n  inStock: totalInventory > 0,\n  totalInventory,\n  title,\n  handle,\n  images:\n    images?.edges?.map(({ node: image }) => ({\n      imageAltText: image?.altText ?? null,\n      imageOriginalSrc: image?.originalSrc ?? null,\n      imageTransformedSrc: image?.transformedSrc ?? null,\n    })) ?? [],\n  maxVariantPrice: Number(priceRange?.maxVariantPrice?.amount),\n  minVariantPrice: Number(priceRange?.minVariantPrice?.amount),\n  tags,\n  description,\n  vendor,\n  productType,\n  onlineStoreUrl,\n});\n\nexport const createFragmentFromString = (str) =>\n  document.createRange().createContextualFragment(str);\n\nexport const stripHTML = (str) => str.replace(/(<([^>]+)>)/gi, '');\n\nexport const addslashes = (str) =>\n  `${str}`.replace(/([\\\\\"'])/g, '\\\\$1').replace(/\\0/g, '\\\\0');\n\nexport const addQuotesIfNecessary = (cur) =>\n  cur.split(/\\s+/).length > 1 ? `\"${cur}\"` : cur;\n\nexport const removeKey = (obj, propToDelete) => {\n  const { [propToDelete]: deleted, ...objectWithoutDeletedProp } = obj;\n  return objectWithoutDeletedProp;\n};\n// used to generate query string which to be used in graphql request\nexport const getQueryString = ({\n  searchString = '',\n  productTypes = [],\n} = {}) => {\n  let searchStringPart = '';\n  const queryValueString =\n    searchString.trim() === ''\n      ? `*`\n      : searchString.trim().split(' ').length > 1\n      ? `\"${addslashes(\n          searchString.trim().split(' ').slice(0, -1).join(' ')\n        )}*\"`\n      : `${addslashes(searchString.trim())}*`;\n\n  if (searchString.trim() !== '') {\n    searchStringPart = ` AND (title:${queryValueString} OR description:${queryValueString} OR tags:${queryValueString})`;\n  }\n\n  let productTypesPart = `${productTypes\n    .map((type) => `product_type:\"${addslashes(type)}\"`)\n    .join(' OR ')}`;\n\n  if (productTypesPart !== '') {\n    productTypesPart = ` AND (${productTypesPart})`;\n  }\n\n  return `available_for_sale:true${searchStringPart}${productTypesPart}`;\n};\n\nexport const queryAllProductsThroughGraphqlCreator = ({\n  searchString = '',\n  productTypes = [],\n} = {}) => {\n  let products = [];\n  const query250Products = (dataWithLastPageProducts) =>\n    window.__APOLLO_CLIENT__\n      .query({\n        query: GET_PRODUCTS,\n        variables: {\n          first: 250,\n          query: `${getQueryString({ searchString, productTypes })}`,\n          after:\n            dataWithLastPageProducts?.data?.products?.edges?.slice(-1)?.[0]\n              ?.cursor ?? null,\n          sortKey: 'BEST_SELLING',\n        },\n      })\n      .then((data) => {\n        products = [\n          ...products,\n          ...(data?.data?.products?.edges?.map(({ node }) => node) ?? []),\n        ];\n        if ((data?.data?.products?.edges?.length ?? 0) < 250) {\n          return Promise.resolve(products);\n        }\n        return query250Products(data);\n      });\n  return query250Products;\n};\n\nexport const queryAllProductsFromSearchTerm = async (searchString = '') => {\n  const rawProducts = await queryAllProductsThroughGraphqlCreator({\n    searchString,\n  })();\n\n  return rawProducts.map(transformFunc);\n};\n\nexport const hasIntersectionBetweenTwoRanges = (arr1 = [], arr2 = []) => {\n  const [el11, el12] = arr1;\n  const [el21, el22] = arr2;\n  const leftLimit = Math.max(el11, el21);\n  const rightLimit = Math.min(el12, el22);\n  if (rightLimit >= leftLimit) {\n    return true;\n  }\n  return false;\n};\n\nexport const productsFilters = (state) => ({\n  onlineStoreOnly: (product) => {\n    if (!state.onlineStoreOnly) {\n      return true;\n    }\n    return !!product.onlineStoreUrl;\n  },\n});\n\nexport const productsSorter = (state) => (productA, productB) => {\n  switch (state.sortValue) {\n    case 'TITLE_ASC': {\n      return productA?.title?.localeCompare(productB?.title, undefined, {\n        base: true,\n      });\n    }\n    case 'TITLE_DESC': {\n      return productB?.title?.localeCompare(productA?.title, undefined, {\n        base: true,\n      });\n    }\n    case 'PRICE_ASC': {\n      return productA.minVariantPrice - productB.maxVariantPrice;\n    }\n    case 'PRICE_DESC': {\n      return productB.minVariantPrice - productA.maxVariantPrice;\n    }\n    default: {\n      return 0;\n    }\n  }\n};\n\nexport const getSortValueFromDefaultSortBy = (defaultSortBy) => {\n  switch (defaultSortBy) {\n    case 'best-selling': {\n      return 'BEST_SELLING_ASC';\n    }\n    case 'title-ascending': {\n      return 'TITLE_ASC';\n    }\n    case 'title-descending': {\n      return 'TITLE_DESC';\n    }\n    case 'price-ascending': {\n      return 'PRICE_ASC';\n    }\n    case 'price-descending': {\n      return 'PRICE_DESC';\n    }\n    default: {\n      return 'BEST_SELLING_ASC';\n    }\n  }\n};\n\nexport const getDisplayedPageNumbers = (pageCount, pageNumber) => {\n  const displayedPageNumbers = [\n    1,\n    pageCount,\n    pageNumber - 2,\n    pageNumber - 1,\n    pageNumber,\n    pageNumber + 1,\n    pageNumber + 2,\n  ]\n    .filter(\n      (item, pos, a) =>\n        a.indexOf(item) === pos && item >= 1 && item <= pageCount\n    )\n    .sort((a, b) => a - b)\n    .reduce((acc, cur, idx) => {\n      let accCopy = [...acc];\n      if (idx === 0) {\n        accCopy = [cur];\n      } else if (cur - acc[acc.length - 1] > 1) {\n        accCopy = [...acc, '...', cur];\n      } else {\n        accCopy = [...acc, cur];\n      }\n      return accCopy;\n    }, []);\n  return displayedPageNumbers;\n};\n", "import { html, virtual } from '@apollo-elements/haunted';\n\nconst TitleBanner = virtual(\n  ({\n    classList = [\n      'collection-banner',\n      'd-flex',\n      'justify-content-between',\n      'align-items-center',\n    ],\n    title,\n  }) => html`<div class=${classList.join(' ')}>\n    <h2 class=\"banner-name dtm-banner-name\">${title}</h2>\n    <div class=\"parallelograms-group dtm-parallelograms-group\">\n      <span class=\"parallelograms parallelogram-lt dtm-parallelograms\"> </span>\n      <span class=\"parallelograms parallelogram-rt dtm-parallelograms\"> </span>\n      <span class=\"parallelograms parallelogram-br dtm-parallelograms\"> </span>\n    </div>\n  </div>`\n);\n\nexport default TitleBanner;\n", "/* eslint-disable camelcase */\nimport { html, useState } from '@apollo-elements/haunted';\nimport pickBy from 'lodash.pickby';\nimport { stripHTML } from '../../shared/helpers';\nimport TitleBanner from './TitleBanner';\n\nfunction CompareTable() {\n  const transformFunc = ({\n    available,\n    title,\n    featured_image,\n    vendor,\n    description,\n    tags,\n    price,\n    handle,\n    first_available_variant_id,\n  }) => ({\n    availability: available ? 'INSTOCK' : 'OUTOFSTOCK',\n    name: title,\n    image: featured_image,\n    brand: vendor,\n    description: stripHTML(description),\n    handle,\n    variantId: first_available_variant_id,\n    price: `$${(price / 1000).toFixed(2)}`,\n    'cook-type':\n      tags\n        ?.filter((tag) => tag.includes('dtm_cook-type_'))\n        ?.map((t) => t?.replace('dtm_cook-type_', '')) ?? [],\n    'total-btu':\n      tags\n        ?.find((tag) => tag.includes('dtm_total-btu'))\n        ?.replace('dtm_total-btu_', '') ?? '',\n    'cooking-temperature-range':\n      tags\n        ?.find((tag) => tag.includes('dtm_cooking-temperature-range'))\n        ?.replace('dtm_cooking-temperature-range_', '') ?? '',\n    'total-grill-size':\n      tags\n        ?.find((tag) => tag.includes('dtm_total-grill-size'))\n        ?.replace('dtm_total-grill-size_', '') ?? '',\n    'primary-cooking-space':\n      tags\n        ?.find((tag) => tag.includes('dtm_primary-cooking-space'))\n        ?.replace('dtm_primary-cooking-space_', '') ?? '',\n    'number-of-racks':\n      tags\n        ?.find((tag) => tag.includes('dtm_number-of-racks'))\n        ?.replace('dtm_number-of-racks_', '') ?? '',\n    'rear-rotisserie-burner': !!tags?.includes('dtm_rear-rotisserie-burner'),\n    'side-burner': !!tags?.includes('dtm_side-burner'),\n    'sear-functionality': !!tags?.includes('dtm_sear-functionality'),\n  });\n  const currentCompareProducts = JSON.parse(\n    localStorage.getItem('compare') ?? '{}'\n  );\n  const [products, setProducts] = useState(\n    window?.productsToCompare.map((p) => transformFunc(p)) ?? []\n  );\n  const compareItems = [\n    { label: 'Product Name & Image', key: 'name_image' },\n    { label: 'Product Description', key: 'description' },\n    { label: 'Brand', key: 'brand' },\n    { label: 'Availability', key: 'availability' },\n    { label: 'Cook Type', key: 'cook-type' },\n    { label: 'Total BTU', key: 'total-btu' },\n    { label: 'Cooking Temperature Range', key: 'cooking-temperature-range' },\n    { label: 'Total Grill Size', key: 'total-grill-size' },\n    { label: 'Primary Cooking Space', key: 'primary-cooking-space' },\n    { label: 'Number of racks ', key: 'number-of-racks' },\n    { label: 'Rear Rotisserie Burner', key: 'rear-rotisserie-burner' },\n    { label: 'Side Burner ', key: 'side-burner' },\n    { label: 'Sear Functionality', key: 'sear-functionality' },\n    { label: 'Action', key: 'action' },\n  ];\n  const handleRemoveIconClicked = (product) => {\n    const newCompareProducts = pickBy(\n      currentCompareProducts,\n      (value) => value !== product.handle\n    );\n    console.log('newCompareProducts', newCompareProducts);\n    localStorage.setItem('compare', JSON.stringify(newCompareProducts));\n    setProducts((previousProducts) =>\n      previousProducts.filter((p) => p.handle !== product.handle)\n    );\n  };\n  const getCellContent = (item, product) => {\n    switch (item.key) {\n      case 'name_image': {\n        return html`<div\n          class=\"name-image-price-wrapper w-100\"\n          style=\"position: relative;\"\n        >\n          <img\n            class=\"w-100\"\n            src=${product.image}\n            style=\"max-width: 300px;display: block;margin:0 auto;\"\n          />\n          <h3>${product.name}</h3>\n          <h4>${product.price}</h4>\n          <i\n            class=\"fa fa-close\"\n            style=\"position: absolute; right: 0; top: 0; cursor: pointer;\"\n            @click=${() => handleRemoveIconClicked(product)}\n          ></i>\n        </div>`;\n      }\n      case 'action': {\n        return html`${product.variantId\n          ? html`<a\n              href=${`/cart/add?id=${product.variantId}&quantity=1`}\n              class=\"btn btn-solid\"\n            >\n              Add to cart >>\n            </a>`\n          : null}`;\n      }\n      default: {\n        return product?.[item.key] ?? '';\n      }\n    }\n  };\n  return html` <div class=\"modal-header\">\n      ${TitleBanner({\n        title: 'Compare Products',\n        classList: [\n          'd-flex',\n          'justify-content-between',\n          'align-items-center',\n          'w-100',\n        ],\n      })}\n    </div>\n    ${products && (products?.length ?? 0) > 0\n      ? html`<div class=\"modal-body\">\n          <div class=\"table-wrapper\">\n            <table class=\"table table-responsive\">\n              <tbody id=\"table-compare\">\n                ${compareItems.map(\n                  (item) => html`\n                    <tr>\n                      <th width=\"10%\" class=${item.key}>${item.label}</th>\n                      ${products.map(\n                        (product) => html`\n                          <td\n                            width=\"${90 / products.length}%\"\n                            class=${`${product.handle}-${item.key}`}\n                          >\n                            ${getCellContent(item, product)}\n                          </td>\n                        `\n                      )}\n                    </tr>\n                  `\n                )}\n              </tbody>\n            </table>\n          </div>\n        </div>`\n      : html`<div class=\"modal-body\">\n          <div class=\"table-wrapper\">\n            <table class=\"table table-responsive\">\n              <tbody id=\"table-compare\">\n                <div class=\"row cart-buttons compare-grid--empty-list\">\n                  <div class=\"col-12\">\n                    <div class=\"text-center\">\n                      <img\n                        class=\"\"\n                        src=\"https://picsum.photos/200/300\"\n                        alt=\"Compare list loading\"\n                      />\n                      <h5 class=\"title-font mb-3 empty-list--text \">\n                        Your compare list is currently empty.\n                      </h5>\n                      <a href=\"/collections/Barbeques\" class=\"btn btn-solid\">\n                        Start Shopping\n                      </a>\n                    </div>\n                  </div>\n                </div>\n              </tbody>\n            </table>\n          </div>\n        </div>`}\n    <div class=\"modal-footer\">\n      <a\n        href=\"javascript:void(0)\"\n        class=\"close-modal\"\n        @click=${() => {\n          window?.$('.compare_modal')?.hide();\n        }}\n      >\n        <i class=\"fa fa-close\"></i>\n      </a>\n    </div>`;\n}\n\nexport default {\n  tagName: 'compare-table',\n  renderer: CompareTable,\n  options: {\n    observedAttributes: ['empty-image'],\n    useShadowDOM: false,\n  },\n};\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/* eslint-disable no-unused-vars */\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is replaced by the munged name for object[property]\n * We cannot alias this function, so we have to use a small shim that has the same behavior when not compiling.\n *\n * @param {?} prop Property name\n * @param {*} obj Reference object\n * @return {string} Potentially renamed property name\n */\nwindow.JSCompiler_renameProperty = function(prop, obj) {\n  return prop;\n};\n/* eslint-enable */\n\nexport {};\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nlet CSS_URL_RX = /(url\\()([^)]*)(\\))/g;\nlet ABS_URL = /(^\\/[^\\/])|(^#)|(^[\\w-\\d]*:)/;\nlet workingURL;\nlet resolveDoc;\n/**\n * Resolves the given URL against the provided `baseUri'.\n *\n * Note that this function performs no resolution for URLs that start\n * with `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\n * URL resolution, use `window.URL`.\n *\n * @param {string} url Input URL to resolve\n * @param {?string=} baseURI Base URI to resolve the URL against\n * @return {string} resolved URL\n */\nexport function resolveUrl(url, baseURI) {\n  if (url && ABS_URL.test(url)) {\n    return url;\n  }\n  if (url === '//') {\n    return url;\n  }\n  // Lazy feature detection.\n  if (workingURL === undefined) {\n    workingURL = false;\n    try {\n      const u = new URL('b', 'http://a');\n      u.pathname = 'c%20d';\n      workingURL = (u.href === 'http://a/c%20d');\n    } catch (e) {\n      // silently fail\n    }\n  }\n  if (!baseURI) {\n    baseURI = document.baseURI || window.location.href;\n  }\n  if (workingURL) {\n    try {\n      return (new URL(url, baseURI)).href;\n    } catch (e) {\n      // Bad url or baseURI structure. Do not attempt to resolve.\n      return url;\n    }\n  }\n  // Fallback to creating an anchor into a disconnected document.\n  if (!resolveDoc) {\n    resolveDoc = document.implementation.createHTMLDocument('temp');\n    resolveDoc.base = resolveDoc.createElement('base');\n    resolveDoc.head.appendChild(resolveDoc.base);\n    resolveDoc.anchor = resolveDoc.createElement('a');\n    resolveDoc.body.appendChild(resolveDoc.anchor);\n  }\n  resolveDoc.base.href = baseURI;\n  resolveDoc.anchor.href = url;\n  return resolveDoc.anchor.href || url;\n\n}\n\n/**\n * Resolves any relative URL's in the given CSS text against the provided\n * `ownerDocument`'s `baseURI`.\n *\n * @param {string} cssText CSS text to process\n * @param {string} baseURI Base URI to resolve the URL against\n * @return {string} Processed CSS text with resolved URL's\n */\nexport function resolveCss(cssText, baseURI) {\n  return cssText.replace(CSS_URL_RX, function(m, pre, url, post) {\n    return pre + '\\'' +\n      resolveUrl(url.replace(/[\"']/g, ''), baseURI) +\n      '\\'' + post;\n  });\n}\n\n/**\n * Returns a path from a given `url`. The path includes the trailing\n * `/` from the url.\n *\n * @param {string} url Input URL to transform\n * @return {string} resolved path\n */\nexport function pathFromUrl(url) {\n  return url.substring(0, url.lastIndexOf('/') + 1);\n}\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\nimport { pathFromUrl } from './resolve-url.js';\nexport const useShadow = !(window.ShadyDOM) || !(window.ShadyDOM.inUse);\nexport const useNativeCSSProperties = Boolean(!window.ShadyCSS || window.ShadyCSS.nativeCss);\nexport const useNativeCustomElements = !(window.customElements.polyfillWrapFlushCallback);\nexport const supportsAdoptingStyleSheets = useShadow &&\n    ('adoptedStyleSheets' in Document.prototype) &&\n    ('replaceSync' in CSSStyleSheet.prototype) &&\n    // Since spec may change, feature detect exact API we need\n    (() => {\n      try {\n        const sheet = new CSSStyleSheet();\n        sheet.replaceSync('');\n        const host = document.createElement('div');\n        host.attachShadow({mode: 'open'});\n        host.shadowRoot.adoptedStyleSheets = [sheet];\n        return (host.shadowRoot.adoptedStyleSheets[0] === sheet);\n      } catch(e) {\n        return false;\n      }\n    })();\n\n/**\n * Globally settable property that is automatically assigned to\n * `ElementMixin` instances, useful for binding in templates to\n * make URL's relative to an application's root.  Defaults to the main\n * document URL, but can be overridden by users.  It may be useful to set\n * `rootPath` to provide a stable application mount path when\n * using client side routing.\n */\nexport let rootPath = window.Polymer && window.Polymer.rootPath ||\n  pathFromUrl(document.baseURI || window.location.href);\n\n/**\n * Sets the global rootPath property used by `ElementMixin` and\n * available via `rootPath`.\n *\n * @param {string} path The new root path\n * @return {void}\n */\nexport const setRootPath = function(path) {\n  rootPath = path;\n};\n\n/**\n * A global callback used to sanitize any value before inserting it into the DOM.\n * The callback signature is:\n *\n *  function sanitizeDOMValue(value, name, type, node) { ... }\n *\n * Where:\n *\n * `value` is the value to sanitize.\n * `name` is the name of an attribute or property (for example, href).\n * `type` indicates where the value is being inserted: one of property, attribute, or text.\n * `node` is the node where the value is being inserted.\n *\n * @type {(function(*,string,string,?Node):*)|undefined}\n */\nexport let sanitizeDOMValue =\n  window.Polymer && window.Polymer.sanitizeDOMValue || undefined;\n\n/**\n * Sets the global sanitizeDOMValue available via this module's exported\n * `sanitizeDOMValue` variable.\n *\n * @param {(function(*,string,string,?Node):*)|undefined} newSanitizeDOMValue the global sanitizeDOMValue callback\n * @return {void}\n */\nexport const setSanitizeDOMValue = function(newSanitizeDOMValue) {\n  sanitizeDOMValue = newSanitizeDOMValue;\n};\n\n/**\n * Gets sanitizeDOMValue, for environments that don't well support `export let`.\n *\n * @return {(function(*,string,string,?Node):*)|undefined} sanitizeDOMValue\n */\nexport const getSanitizeDOMValue = function() {\n  return sanitizeDOMValue;\n};\n\n/**\n * Globally settable property to make Polymer Gestures use passive TouchEvent listeners when recognizing gestures.\n * When set to `true`, gestures made from touch will not be able to prevent scrolling, allowing for smoother\n * scrolling performance.\n * Defaults to `false` for backwards compatibility.\n */\nexport let passiveTouchGestures =\n  window.Polymer && window.Polymer.setPassiveTouchGestures || false;\n\n/**\n * Sets `passiveTouchGestures` globally for all elements using Polymer Gestures.\n *\n * @param {boolean} usePassive enable or disable passive touch gestures globally\n * @return {void}\n */\nexport const setPassiveTouchGestures = function(usePassive) {\n  passiveTouchGestures = usePassive;\n};\n\n/**\n * Setting to ensure Polymer template evaluation only occurs based on tempates\n * defined in trusted script.  When true, `<dom-module>` re-registration is\n * disallowed, `<dom-bind>` is disabled, and `<dom-if>`/`<dom-repeat>`\n * templates will only evaluate in the context of a trusted element template.\n */\nexport let strictTemplatePolicy =\n  window.Polymer && window.Polymer.strictTemplatePolicy || false;\n\n/**\n * Sets `strictTemplatePolicy` globally for all elements\n *\n * @param {boolean} useStrictPolicy enable or disable strict template policy\n *   globally\n * @return {void}\n */\nexport const setStrictTemplatePolicy = function(useStrictPolicy) {\n  strictTemplatePolicy = useStrictPolicy;\n};\n\n/**\n * Setting to enable dom-module lookup from Polymer.Element.  By default,\n * templates must be defined in script using the `static get template()`\n * getter and the `html` tag function.  To enable legacy loading of templates\n * via dom-module, set this flag to true.\n */\nexport let allowTemplateFromDomModule =\n  window.Polymer && window.Polymer.allowTemplateFromDomModule || false;\n\n/**\n * Sets `lookupTemplateFromDomModule` globally for all elements\n *\n * @param {boolean} allowDomModule enable or disable template lookup\n *   globally\n * @return {void}\n */\nexport const setAllowTemplateFromDomModule = function(allowDomModule) {\n  allowTemplateFromDomModule = allowDomModule;\n};\n\n/**\n * Setting to skip processing style includes and re-writing urls in css styles.\n * Normally \"included\" styles are pulled into the element and all urls in styles\n * are re-written to be relative to the containing script url.\n * If no includes or relative urls are used in styles, these steps can be\n * skipped as an optimization.\n */\nexport let legacyOptimizations =\n  window.Polymer && window.Polymer.legacyOptimizations || false;\n\n/**\n * Sets `legacyOptimizations` globally for all elements to enable optimizations\n * when only legacy based elements are used.\n *\n * @param {boolean} useLegacyOptimizations enable or disable legacy optimizations\n * includes and url rewriting\n * @return {void}\n */\nexport const setLegacyOptimizations = function(useLegacyOptimizations) {\n  legacyOptimizations = useLegacyOptimizations;\n};\n\n/**\n * Setting to add warnings useful when migrating from Polymer 1.x to 2.x.\n */\nexport let legacyWarnings =\n  window.Polymer && window.Polymer.legacyWarnings || false;\n\n/**\n * Sets `legacyWarnings` globally for all elements to migration warnings.\n *\n * @param {boolean} useLegacyWarnings enable or disable warnings\n * @return {void}\n */\nexport const setLegacyWarnings = function(useLegacyWarnings) {\n  legacyWarnings = useLegacyWarnings;\n};\n\n/**\n * Setting to perform initial rendering synchronously when running under ShadyDOM.\n * This matches the behavior of Polymer 1.\n */\nexport let syncInitialRender =\n  window.Polymer && window.Polymer.syncInitialRender || false;\n\n/**\n * Sets `syncInitialRender` globally for all elements to enable synchronous\n * initial rendering.\n *\n * @param {boolean} useSyncInitialRender enable or disable synchronous initial\n * rendering globally.\n * @return {void}\n */\nexport const setSyncInitialRender = function(useSyncInitialRender) {\n  syncInitialRender = useSyncInitialRender;\n};\n\n/**\n * Setting to retain the legacy Polymer 1 behavior for multi-property\n * observers around undefined values. Observers and computed property methods\n * are not called until no argument is undefined.\n */\nexport let legacyUndefined =\n  window.Polymer && window.Polymer.legacyUndefined || false;\n\n/**\n * Sets `legacyUndefined` globally for all elements to enable legacy\n * multi-property behavior for undefined values.\n *\n * @param {boolean} useLegacyUndefined enable or disable legacy\n * multi-property behavior for undefined.\n * @return {void}\n */\nexport const setLegacyUndefined = function(useLegacyUndefined) {\n  legacyUndefined = useLegacyUndefined;\n};\n\n/**\n * Setting to ensure computed properties are computed in order to ensure\n * re-computation never occurs in a given turn.\n */\nexport let orderedComputed =\n  window.Polymer && window.Polymer.orderedComputed || false;\n\n/**\n * Sets `orderedComputed` globally for all elements to enable ordered computed\n * property computation.\n *\n * @param {boolean} useOrderedComputed enable or disable ordered computed effects\n * @return {void}\n */\nexport const setOrderedComputed = function(useOrderedComputed) {\n  orderedComputed = useOrderedComputed;\n};\n\n/**\n * Setting to cancel synthetic click events fired by older mobile browsers. Modern browsers\n * no longer fire synthetic click events, and the cancellation behavior can interfere\n * when programmatically clicking on elements.\n */\nexport let cancelSyntheticClickEvents = true;\n\n/**\n * Sets `setCancelSyntheticEvents` globally for all elements to cancel synthetic click events.\n *\n * @param {boolean} useCancelSyntheticClickEvents enable or disable cancelling synthetic\n * events\n * @return {void}\n */\nexport const setCancelSyntheticClickEvents = function(useCancelSyntheticClickEvents) {\n  cancelSyntheticClickEvents = useCancelSyntheticClickEvents;\n};\n\n/**\n * Setting to remove nested templates inside `dom-if` and `dom-repeat` as\n * part of element template parsing.  This is a performance optimization that\n * eliminates most of the tax of needing two elements due to the loss of\n * type-extended templates as a result of the V1 specification changes.\n */\nexport let removeNestedTemplates =\n  window.Polymer && window.Polymer.removeNestedTemplates || false;\n\n/**\n * Sets `removeNestedTemplates` globally, to eliminate nested templates\n * inside `dom-if` and `dom-repeat` as part of template parsing.\n *\n * @param {boolean} useRemoveNestedTemplates enable or disable removing nested\n *   templates during parsing\n * @return {void}\n */\nexport const setRemoveNestedTemplates = function(useRemoveNestedTemplates) {\n  removeNestedTemplates = useRemoveNestedTemplates;\n};\n\n/**\n * Setting to place `dom-if` elements in a performance-optimized mode that takes\n * advantage of lighter-weight host runtime template stamping to eliminate the\n * need for an intermediate Templatizer `TemplateInstance` to mange the nodes\n * stamped by `dom-if`.  Under this setting, any Templatizer-provided API's\n * such as `modelForElement` will not be available for nodes stamped by\n * `dom-if`.\n */\nexport let fastDomIf = window.Polymer && window.Polymer.fastDomIf || false;\n\n/**\n * Sets `fastDomIf` globally, to put `dom-if` in a performance-optimized mode.\n *\n * @param {boolean} useFastDomIf enable or disable `dom-if` fast-mode\n * @return {void}\n */\nexport const setFastDomIf = function(useFastDomIf) {\n  fastDomIf = useFastDomIf;\n};\n\n/**\n * Setting to disable `dom-change` and `rendered-item-count` events from\n * `dom-if` and `dom-repeat`. Users can opt back into `dom-change` events by\n * setting the `notify-dom-change` attribute (`notifyDomChange: true` property)\n * to `dom-if`/`don-repeat` instances.\n */\nexport let suppressTemplateNotifications =\n  window.Polymer && window.Polymer.suppressTemplateNotifications || false;\n\n/**\n * Sets `suppressTemplateNotifications` globally, to disable `dom-change` and\n * `rendered-item-count` events from `dom-if` and `dom-repeat`.\n *\n * @param {boolean} suppress enable or disable `suppressTemplateNotifications`\n * @return {void}\n */\nexport const setSuppressTemplateNotifications = function(suppress) {\n  suppressTemplateNotifications = suppress;\n};\n\n/**\n * Setting to disable use of dynamic attributes. This is an optimization\n * to avoid setting `observedAttributes`. Instead attributes are read\n * once at create time and set/removeAttribute are patched.\n */\nexport let legacyNoObservedAttributes =\n  window.Polymer && window.Polymer.legacyNoObservedAttributes || false;\n\n/**\n * Sets `legacyNoObservedAttributes` globally, to disable `observedAttributes`.\n *\n * @param {boolean} noObservedAttributes enable or disable `legacyNoObservedAttributes`\n * @return {void}\n */\nexport const setLegacyNoObservedAttributes = function(noObservedAttributes) {\n  legacyNoObservedAttributes = noObservedAttributes;\n};\n\n/**\n * Setting to enable use of `adoptedStyleSheets` for sharing style sheets\n * between component instances' shadow roots, if the app uses built Shady CSS\n * styles.\n */\nexport let useAdoptedStyleSheetsWithBuiltCSS =\n  window.Polymer && window.Polymer.useAdoptedStyleSheetsWithBuiltCSS || false;\n\n/**\n * Sets `useAdoptedStyleSheetsWithBuiltCSS` globally.\n *\n * @param {boolean} value enable or disable `useAdoptedStyleSheetsWithBuiltCSS`\n * @return {void}\n */\nexport const setUseAdoptedStyleSheetsWithBuiltCSS = function(value) {\n  useAdoptedStyleSheetsWithBuiltCSS = value;\n};\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\n// unique global id for deduping mixins.\nlet dedupeId = 0;\n\n/**\n * @constructor\n * @extends {Function}\n * @private\n */\nfunction MixinFunction(){}\n/** @type {(WeakMap | undefined)} */\nMixinFunction.prototype.__mixinApplications;\n/** @type {(Object | undefined)} */\nMixinFunction.prototype.__mixinSet;\n\n/* eslint-disable valid-jsdoc */\n/**\n * Wraps an ES6 class expression mixin such that the mixin is only applied\n * if it has not already been applied its base argument. Also memoizes mixin\n * applications.\n *\n * @template T\n * @param {T} mixin ES6 class expression mixin to wrap\n * @return {T}\n * @suppress {invalidCasts}\n */\nexport const dedupingMixin = function(mixin) {\n  let mixinApplications = /** @type {!MixinFunction} */(mixin).__mixinApplications;\n  if (!mixinApplications) {\n    mixinApplications = new WeakMap();\n    /** @type {!MixinFunction} */(mixin).__mixinApplications = mixinApplications;\n  }\n  // maintain a unique id for each mixin\n  let mixinDedupeId = dedupeId++;\n  function dedupingMixin(base) {\n    let baseSet = /** @type {!MixinFunction} */(base).__mixinSet;\n    if (baseSet && baseSet[mixinDedupeId]) {\n      return base;\n    }\n    let map = mixinApplications;\n    let extended = map.get(base);\n    if (!extended) {\n      extended = /** @type {!Function} */(mixin)(base);\n      map.set(base, extended);\n      // copy inherited mixin set from the extended class, or the base class\n      // NOTE: we avoid use of Set here because some browser (IE11)\n      // cannot extend a base Set via the constructor.\n      let mixinSet = Object.create(/** @type {!MixinFunction} */(extended).__mixinSet || baseSet || null);\n      mixinSet[mixinDedupeId] = true;\n      /** @type {!MixinFunction} */(extended).__mixinSet = mixinSet;\n    }\n    return extended;\n  }\n\n  return dedupingMixin;\n};\n/* eslint-enable valid-jsdoc */\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { resolveUrl, pathFromUrl } from '../utils/resolve-url.js';\nimport { strictTemplatePolicy } from '../utils/settings.js';\n\nlet modules = {};\nlet lcModules = {};\n/**\n * Sets a dom-module into the global registry by id.\n *\n * @param {string} id dom-module id\n * @param {DomModule} module dom-module instance\n * @return {void}\n */\nfunction setModule(id, module) {\n  // store id separate from lowercased id so that\n  // in all cases mixedCase id will stored distinctly\n  // and lowercase version is a fallback\n  modules[id] = lcModules[id.toLowerCase()] = module;\n}\n/**\n * Retrieves a dom-module from the global registry by id.\n *\n * @param {string} id dom-module id\n * @return {DomModule!} dom-module instance\n */\nfunction findModule(id) {\n  return modules[id] || lcModules[id.toLowerCase()];\n}\n\nfunction styleOutsideTemplateCheck(inst) {\n  if (inst.querySelector('style')) {\n    console.warn('dom-module %s has style outside template', inst.id);\n  }\n}\n\n/**\n * The `dom-module` element registers the dom it contains to the name given\n * by the module's id attribute. It provides a unified database of dom\n * accessible via its static `import` API.\n *\n * A key use case of `dom-module` is for providing custom element `<template>`s\n * via HTML imports that are parsed by the native HTML parser, that can be\n * relocated during a bundling pass and still looked up by `id`.\n *\n * Example:\n *\n *     <dom-module id=\"foo\">\n *       <img src=\"stuff.png\">\n *     </dom-module>\n *\n * Then in code in some other location that cannot access the dom-module above\n *\n *     let img = customElements.get('dom-module').import('foo', 'img');\n *\n * @customElement\n * @extends HTMLElement\n * @summary Custom element that provides a registry of relocatable DOM content\n *   by `id` that is agnostic to bundling.\n * @unrestricted\n */\nexport class DomModule extends HTMLElement {\n\n  /** @override */\n  static get observedAttributes() { return ['id']; }\n\n  /**\n   * Retrieves the element specified by the css `selector` in the module\n   * registered by `id`. For example, this.import('foo', 'img');\n   * @param {string} id The id of the dom-module in which to search.\n   * @param {string=} selector The css selector by which to find the element.\n   * @return {Element} Returns the element which matches `selector` in the\n   * module registered at the specified `id`.\n   *\n   * @export\n   * @nocollapse Referred to indirectly in style-gather.js\n   */\n  static import(id, selector) {\n    if (id) {\n      let m = findModule(id);\n      if (m && selector) {\n        return m.querySelector(selector);\n      }\n      return m;\n    }\n    return null;\n  }\n\n  /* eslint-disable no-unused-vars */\n  /**\n   * @param {string} name Name of attribute.\n   * @param {?string} old Old value of attribute.\n   * @param {?string} value Current value of attribute.\n   * @param {?string} namespace Attribute namespace.\n   * @return {void}\n   * @override\n   */\n  attributeChangedCallback(name, old, value, namespace) {\n    if (old !== value) {\n      this.register();\n    }\n  }\n  /* eslint-enable no-unused-args */\n\n  /**\n   * The absolute URL of the original location of this `dom-module`.\n   *\n   * This value will differ from this element's `ownerDocument` in the\n   * following ways:\n   * - Takes into account any `assetpath` attribute added during bundling\n   *   to indicate the original location relative to the bundled location\n   * - Uses the HTMLImports polyfill's `importForElement` API to ensure\n   *   the path is relative to the import document's location since\n   *   `ownerDocument` is not currently polyfilled\n   */\n  get assetpath() {\n    // Don't override existing assetpath.\n    if (!this.__assetpath) {\n      // note: assetpath set via an attribute must be relative to this\n      // element's location; accomodate polyfilled HTMLImports\n      const owner = window.HTMLImports && HTMLImports.importForElement ?\n        HTMLImports.importForElement(this) || document : this.ownerDocument;\n      const url = resolveUrl(\n        this.getAttribute('assetpath') || '', owner.baseURI);\n      this.__assetpath = pathFromUrl(url);\n    }\n    return this.__assetpath;\n  }\n\n  /**\n   * Registers the dom-module at a given id. This method should only be called\n   * when a dom-module is imperatively created. For\n   * example, `document.createElement('dom-module').register('foo')`.\n   * @param {string=} id The id at which to register the dom-module.\n   * @return {void}\n   */\n  register(id) {\n    id = id || this.id;\n    if (id) {\n      // Under strictTemplatePolicy, reject and null out any re-registered\n      // dom-module since it is ambiguous whether first-in or last-in is trusted\n      if (strictTemplatePolicy && findModule(id) !== undefined) {\n        setModule(id, null);\n        throw new Error(`strictTemplatePolicy: dom-module ${id} re-registered`);\n      }\n      this.id = id;\n      setModule(id, this);\n      styleOutsideTemplateCheck(this);\n    }\n  }\n}\n\nDomModule.prototype['modules'] = modules;\n\ncustomElements.define('dom-module', DomModule);\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Module with utilities for collection CSS text from `<templates>`, external\n * stylesheets, and `dom-module`s.\n *\n * @summary Module with utilities for collection CSS text from various sources.\n */\n\nimport { DomModule } from '../elements/dom-module.js';\nimport { resolveCss } from './resolve-url.js';\n\nconst MODULE_STYLE_LINK_SELECTOR = 'link[rel=import][type~=css]';\nconst INCLUDE_ATTR = 'include';\nconst SHADY_UNSCOPED_ATTR = 'shady-unscoped';\n\n/**\n * @param {string} moduleId .\n * @return {?DomModule} .\n */\nfunction importModule(moduleId) {\n  return /** @type {?DomModule} */(DomModule.import(moduleId));\n}\n\nfunction styleForImport(importDoc) {\n  // NOTE: polyfill affordance.\n  // under the HTMLImports polyfill, there will be no 'body',\n  // but the import pseudo-doc can be used directly.\n  let container = importDoc.body ? importDoc.body : importDoc;\n  const importCss = resolveCss(container.textContent,\n    importDoc.baseURI);\n  const style = document.createElement('style');\n  style.textContent = importCss;\n  return style;\n}\n\n/** @typedef {{assetpath: string}} */\nlet templateWithAssetPath; // eslint-disable-line no-unused-vars\n\n\n/**\n * Returns a list of <style> elements in a space-separated list of `dom-module`s.\n *\n * @function\n * @param {string} moduleIds List of dom-module id's within which to\n * search for css.\n * @return {!Array<!HTMLStyleElement>} Array of contained <style> elements\n */\nexport function stylesFromModules(moduleIds) {\n const modules = moduleIds.trim().split(/\\s+/);\n const styles = [];\n for (let i=0; i < modules.length; i++) {\n   styles.push(...stylesFromModule(modules[i]));\n }\n return styles;\n}\n\n/**\n * Returns a list of <style> elements in a given `dom-module`.\n * Styles in a `dom-module` can come either from `<style>`s within the\n * first `<template>`, or else from one or more\n * `<link rel=\"import\" type=\"css\">` links outside the template.\n *\n * @param {string} moduleId dom-module id to gather styles from\n * @return {!Array<!HTMLStyleElement>} Array of contained styles.\n */\nexport function stylesFromModule(moduleId) {\n  const m = importModule(moduleId);\n\n  if (!m) {\n    console.warn('Could not find style data in module named', moduleId);\n    return [];\n  }\n\n  if (m._styles === undefined) {\n    const styles = [];\n    // module imports: <link rel=\"import\" type=\"css\">\n    styles.push(..._stylesFromModuleImports(m));\n    // include css from the first template in the module\n    const template = /** @type {?HTMLTemplateElement} */(\n        m.querySelector('template'));\n    if (template) {\n      styles.push(...stylesFromTemplate(template,\n        /** @type {templateWithAssetPath} */(m).assetpath));\n    }\n\n    m._styles = styles;\n  }\n\n  return m._styles;\n}\n\n/**\n * Returns the `<style>` elements within a given template.\n *\n * @param {!HTMLTemplateElement} template Template to gather styles from\n * @param {string=} baseURI baseURI for style content\n * @return {!Array<!HTMLStyleElement>} Array of styles\n */\nexport function stylesFromTemplate(template, baseURI) {\n  if (!template._styles) {\n    const styles = [];\n    // if element is a template, get content from its .content\n    const e$ = template.content.querySelectorAll('style');\n    for (let i=0; i < e$.length; i++) {\n      let e = e$[i];\n      // support style sharing by allowing styles to \"include\"\n      // other dom-modules that contain styling\n      let include = e.getAttribute(INCLUDE_ATTR);\n      if (include) {\n        styles.push(...stylesFromModules(include).filter(function(item, index, self) {\n          return self.indexOf(item) === index;\n        }));\n      }\n      if (baseURI) {\n        e.textContent =\n            resolveCss(e.textContent, /** @type {string} */ (baseURI));\n      }\n      styles.push(e);\n    }\n    template._styles = styles;\n  }\n  return template._styles;\n}\n\n/**\n * Returns a list of <style> elements  from stylesheets loaded via `<link rel=\"import\" type=\"css\">` links within the specified `dom-module`.\n *\n * @param {string} moduleId Id of `dom-module` to gather CSS from\n * @return {!Array<!HTMLStyleElement>} Array of contained styles.\n */\nexport function stylesFromModuleImports(moduleId) {\n let m = importModule(moduleId);\n return m ? _stylesFromModuleImports(m) : [];\n}\n\n/**\n * @param {!HTMLElement} module dom-module element that could contain `<link rel=\"import\" type=\"css\">` styles\n * @return {!Array<!HTMLStyleElement>} Array of contained styles\n */\nfunction _stylesFromModuleImports(module) {\n  const styles = [];\n  const p$ = module.querySelectorAll(MODULE_STYLE_LINK_SELECTOR);\n  for (let i=0; i < p$.length; i++) {\n    let p = p$[i];\n    if (p.import) {\n      const importDoc = p.import;\n      const unscoped = p.hasAttribute(SHADY_UNSCOPED_ATTR);\n      if (unscoped && !importDoc._unscopedStyle) {\n        const style = styleForImport(importDoc);\n        style.setAttribute(SHADY_UNSCOPED_ATTR, '');\n        importDoc._unscopedStyle = style;\n      } else if (!importDoc._style) {\n        importDoc._style = styleForImport(importDoc);\n      }\n      styles.push(unscoped ? importDoc._unscopedStyle : importDoc._style);\n    }\n  }\n  return styles;\n}\n\n/**\n *\n * Returns CSS text of styles in a space-separated list of `dom-module`s.\n * Note: This method is deprecated, use `stylesFromModules` instead.\n *\n * @deprecated\n * @param {string} moduleIds List of dom-module id's within which to\n * search for css.\n * @return {string} Concatenated CSS content from specified `dom-module`s\n */\nexport function cssFromModules(moduleIds) {\n let modules = moduleIds.trim().split(/\\s+/);\n let cssText = '';\n for (let i=0; i < modules.length; i++) {\n   cssText += cssFromModule(modules[i]);\n }\n return cssText;\n}\n\n/**\n * Returns CSS text of styles in a given `dom-module`.  CSS in a `dom-module`\n * can come either from `<style>`s within the first `<template>`, or else\n * from one or more `<link rel=\"import\" type=\"css\">` links outside the\n * template.\n *\n * Any `<styles>` processed are removed from their original location.\n * Note: This method is deprecated, use `styleFromModule` instead.\n *\n * @deprecated\n * @param {string} moduleId dom-module id to gather styles from\n * @return {string} Concatenated CSS content from specified `dom-module`\n */\nexport function cssFromModule(moduleId) {\n  let m = importModule(moduleId);\n  if (m && m._cssText === undefined) {\n    // module imports: <link rel=\"import\" type=\"css\">\n    let cssText = _cssFromModuleImports(m);\n    // include css from the first template in the module\n    let t = /** @type {?HTMLTemplateElement} */(m.querySelector('template'));\n    if (t) {\n      cssText += cssFromTemplate(t,\n        /** @type {templateWithAssetPath} */(m).assetpath);\n    }\n    m._cssText = cssText || null;\n  }\n  if (!m) {\n    console.warn('Could not find style data in module named', moduleId);\n  }\n  return m && m._cssText || '';\n}\n\n/**\n * Returns CSS text of `<styles>` within a given template.\n *\n * Any `<styles>` processed are removed from their original location.\n * Note: This method is deprecated, use `styleFromTemplate` instead.\n *\n * @deprecated\n * @param {!HTMLTemplateElement} template Template to gather styles from\n * @param {string} baseURI Base URI to resolve the URL against\n * @return {string} Concatenated CSS content from specified template\n */\nexport function cssFromTemplate(template, baseURI) {\n  let cssText = '';\n  const e$ = stylesFromTemplate(template, baseURI);\n  // if element is a template, get content from its .content\n  for (let i=0; i < e$.length; i++) {\n    let e = e$[i];\n    if (e.parentNode) {\n      e.parentNode.removeChild(e);\n    }\n    cssText += e.textContent;\n  }\n  return cssText;\n}\n\n/**\n * Returns CSS text from stylesheets loaded via `<link rel=\"import\" type=\"css\">`\n * links within the specified `dom-module`.\n *\n * Note: This method is deprecated, use `stylesFromModuleImports` instead.\n *\n * @deprecated\n *\n * @param {string} moduleId Id of `dom-module` to gather CSS from\n * @return {string} Concatenated CSS content from links in specified `dom-module`\n */\nexport function cssFromModuleImports(moduleId) {\n  let m = importModule(moduleId);\n  return m ? _cssFromModuleImports(m) : '';\n}\n\n/**\n * @deprecated\n * @param {!HTMLElement} module dom-module element that could contain `<link rel=\"import\" type=\"css\">` styles\n * @return {string} Concatenated CSS content from links in the dom-module\n */\nfunction _cssFromModuleImports(module) {\n  let cssText = '';\n  let styles = _stylesFromModuleImports(module);\n  for (let i=0; i < styles.length; i++) {\n    cssText += styles[i].textContent;\n  }\n  return cssText;\n}\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/* eslint-disable valid-jsdoc */\n/**\n * Node wrapper to ensure ShadowDOM safe operation regardless of polyfill\n * presence or mode. Note that with the introduction of `ShadyDOM.noPatch`,\n * a node wrapper must be used to access ShadowDOM API.\n * This is similar to using `Polymer.dom` but relies exclusively\n * on the presence of the ShadyDOM polyfill rather than requiring the loading\n * of legacy (Polymer.dom) API.\n * @type {function(Node):Node}\n */\nexport const wrap = (window['ShadyDOM'] && window['ShadyDOM']['noPatch'] && window['ShadyDOM']['wrap']) ?\n  window['ShadyDOM']['wrap'] :\n  (window['ShadyDOM'] ? (n) => ShadyDOM['patch'](n) : (n) => n);\n\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\n/**\n * Module with utilities for manipulating structured data path strings.\n *\n * @summary Module with utilities for manipulating structured data path strings.\n */\n\n/**\n * Returns true if the given string is a structured data path (has dots).\n *\n * Example:\n *\n * ```\n * isPath('foo.bar.baz') // true\n * isPath('foo')         // false\n * ```\n *\n * @param {string} path Path string\n * @return {boolean} True if the string contained one or more dots\n */\nexport function isPath(path) {\n  return path.indexOf('.') >= 0;\n}\n\n/**\n * Returns the root property name for the given path.\n *\n * Example:\n *\n * ```\n * root('foo.bar.baz') // 'foo'\n * root('foo')         // 'foo'\n * ```\n *\n * @param {string} path Path string\n * @return {string} Root property name\n */\nexport function root(path) {\n  let dotIndex = path.indexOf('.');\n  if (dotIndex === -1) {\n    return path;\n  }\n  return path.slice(0, dotIndex);\n}\n\n/**\n * Given `base` is `foo.bar`, `foo` is an ancestor, `foo.bar` is not\n * Returns true if the given path is an ancestor of the base path.\n *\n * Example:\n *\n * ```\n * isAncestor('foo.bar', 'foo')         // true\n * isAncestor('foo.bar', 'foo.bar')     // false\n * isAncestor('foo.bar', 'foo.bar.baz') // false\n * ```\n *\n * @param {string} base Path string to test against.\n * @param {string} path Path string to test.\n * @return {boolean} True if `path` is an ancestor of `base`.\n */\nexport function isAncestor(base, path) {\n  //     base.startsWith(path + '.');\n  return base.indexOf(path + '.') === 0;\n}\n\n/**\n * Given `base` is `foo.bar`, `foo.bar.baz` is an descendant\n *\n * Example:\n *\n * ```\n * isDescendant('foo.bar', 'foo.bar.baz') // true\n * isDescendant('foo.bar', 'foo.bar')     // false\n * isDescendant('foo.bar', 'foo')         // false\n * ```\n *\n * @param {string} base Path string to test against.\n * @param {string} path Path string to test.\n * @return {boolean} True if `path` is a descendant of `base`.\n */\nexport function isDescendant(base, path) {\n  //     path.startsWith(base + '.');\n  return path.indexOf(base + '.') === 0;\n}\n\n/**\n * Replaces a previous base path with a new base path, preserving the\n * remainder of the path.\n *\n * User must ensure `path` has a prefix of `base`.\n *\n * Example:\n *\n * ```\n * translate('foo.bar', 'zot', 'foo.bar.baz') // 'zot.baz'\n * ```\n *\n * @param {string} base Current base string to remove\n * @param {string} newBase New base string to replace with\n * @param {string} path Path to translate\n * @return {string} Translated string\n */\nexport function translate(base, newBase, path) {\n  return newBase + path.slice(base.length);\n}\n\n/**\n * @param {string} base Path string to test against\n * @param {string} path Path string to test\n * @return {boolean} True if `path` is equal to `base`\n */\nexport function matches(base, path) {\n  return (base === path) ||\n         isAncestor(base, path) ||\n         isDescendant(base, path);\n}\n\n/**\n * Converts array-based paths to flattened path.  String-based paths\n * are returned as-is.\n *\n * Example:\n *\n * ```\n * normalize(['foo.bar', 0, 'baz'])  // 'foo.bar.0.baz'\n * normalize('foo.bar.0.baz')        // 'foo.bar.0.baz'\n * ```\n *\n * @param {string | !Array<string|number>} path Input path\n * @return {string} Flattened path\n */\nexport function normalize(path) {\n  if (Array.isArray(path)) {\n    let parts = [];\n    for (let i=0; i<path.length; i++) {\n      let args = path[i].toString().split('.');\n      for (let j=0; j<args.length; j++) {\n        parts.push(args[j]);\n      }\n    }\n    return parts.join('.');\n  } else {\n    return path;\n  }\n}\n\n/**\n * Splits a path into an array of property names. Accepts either arrays\n * of path parts or strings.\n *\n * Example:\n *\n * ```\n * split(['foo.bar', 0, 'baz'])  // ['foo', 'bar', '0', 'baz']\n * split('foo.bar.0.baz')        // ['foo', 'bar', '0', 'baz']\n * ```\n *\n * @param {string | !Array<string|number>} path Input path\n * @return {!Array<string>} Array of path parts\n * @suppress {checkTypes}\n */\nexport function split(path) {\n  if (Array.isArray(path)) {\n    return normalize(path).split('.');\n  }\n  return path.toString().split('.');\n}\n\n/**\n * Reads a value from a path.  If any sub-property in the path is `undefined`,\n * this method returns `undefined` (will never throw.\n *\n * @param {Object} root Object from which to dereference path from\n * @param {string | !Array<string|number>} path Path to read\n * @param {Object=} info If an object is provided to `info`, the normalized\n *  (flattened) path will be set to `info.path`.\n * @return {*} Value at path, or `undefined` if the path could not be\n *  fully dereferenced.\n */\nexport function get(root, path, info) {\n  let prop = root;\n  let parts = split(path);\n  // Loop over path parts[0..n-1] and dereference\n  for (let i=0; i<parts.length; i++) {\n    if (!prop) {\n      return;\n    }\n    let part = parts[i];\n    prop = prop[part];\n  }\n  if (info) {\n    info.path = parts.join('.');\n  }\n  return prop;\n}\n\n/**\n * Sets a value to a path.  If any sub-property in the path is `undefined`,\n * this method will no-op.\n *\n * @param {Object} root Object from which to dereference path from\n * @param {string | !Array<string|number>} path Path to set\n * @param {*} value Value to set to path\n * @return {string | undefined} The normalized version of the input path\n */\nexport function set(root, path, value) {\n  let prop = root;\n  let parts = split(path);\n  let last = parts[parts.length-1];\n  if (parts.length > 1) {\n    // Loop over path parts[0..n-2] and dereference\n    for (let i=0; i<parts.length-1; i++) {\n      let part = parts[i];\n      prop = prop[part];\n      if (!prop) {\n        return;\n      }\n    }\n    // Set value to object at end of path\n    prop[last] = value;\n  } else {\n    // Simple property set\n    prop[path] = value;\n  }\n  return parts.join('.');\n}\n\n/**\n * Returns true if the given string is a structured data path (has dots).\n *\n * This function is deprecated.  Use `isPath` instead.\n *\n * Example:\n *\n * ```\n * isDeep('foo.bar.baz') // true\n * isDeep('foo')         // false\n * ```\n *\n * @deprecated\n * @param {string} path Path string\n * @return {boolean} True if the string contained one or more dots\n */\nexport const isDeep = isPath;\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nconst caseMap = {};\nconst DASH_TO_CAMEL = /-[a-z]/g;\nconst CAMEL_TO_DASH = /([A-Z])/g;\n\n/**\n * @fileoverview Module with utilities for converting between \"dash-case\" and\n * \"camelCase\" identifiers.\n */\n\n/**\n * Converts \"dash-case\" identifier (e.g. `foo-bar-baz`) to \"camelCase\"\n * (e.g. `fooBarBaz`).\n *\n * @param {string} dash Dash-case identifier\n * @return {string} Camel-case representation of the identifier\n */\nexport function dashToCamelCase(dash) {\n  return caseMap[dash] || (\n    caseMap[dash] = dash.indexOf('-') < 0 ? dash : dash.replace(DASH_TO_CAMEL,\n      (m) => m[1].toUpperCase()\n    )\n  );\n}\n\n/**\n * Converts \"camelCase\" identifier (e.g. `fooBarBaz`) to \"dash-case\"\n * (e.g. `foo-bar-baz`).\n *\n * @param {string} camel Camel-case identifier\n * @return {string} Dash-case representation of the identifier\n */\nexport function camelToDashCase(camel) {\n  return caseMap[camel] || (\n    caseMap[camel] = camel.replace(CAMEL_TO_DASH, '-$1').toLowerCase()\n  );\n}\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * @fileoverview\n *\n * This module provides a number of strategies for enqueuing asynchronous\n * tasks. Each sub-module provides a standard `run(fn)` interface that returns a\n * handle, and a `cancel(handle)` interface for canceling async tasks before\n * they run.\n *\n * @summary Module that provides a number of strategies for enqueuing\n * asynchronous tasks.\n */\n\nimport './boot.js';\n\n// Microtask implemented using Mutation Observer\nlet microtaskCurrHandle = 0;\nlet microtaskLastHandle = 0;\nlet microtaskCallbacks = [];\nlet microtaskNodeContent = 0;\nlet microtaskScheduled = false;\nlet microtaskNode = document.createTextNode('');\nnew window.MutationObserver(microtaskFlush).observe(microtaskNode, {characterData: true});\n\nfunction microtaskFlush() {\n  microtaskScheduled = false;\n  const len = microtaskCallbacks.length;\n  for (let i = 0; i < len; i++) {\n    let cb = microtaskCallbacks[i];\n    if (cb) {\n      try {\n        cb();\n      } catch (e) {\n        setTimeout(() => { throw e; });\n      }\n    }\n  }\n  microtaskCallbacks.splice(0, len);\n  microtaskLastHandle += len;\n}\n\n/**\n * Async interface wrapper around `setTimeout`.\n *\n * @namespace\n * @summary Async interface wrapper around `setTimeout`.\n */\nconst timeOut = {\n  /**\n   * Returns a sub-module with the async interface providing the provided\n   * delay.\n   *\n   * @memberof timeOut\n   * @param {number=} delay Time to wait before calling callbacks in ms\n   * @return {!AsyncInterface} An async timeout interface\n   */\n  after(delay) {\n    return {\n      run(fn) { return window.setTimeout(fn, delay); },\n      cancel(handle) {\n        window.clearTimeout(handle);\n      }\n    };\n  },\n  /**\n   * Enqueues a function called in the next task.\n   *\n   * @memberof timeOut\n   * @param {!Function} fn Callback to run\n   * @param {number=} delay Delay in milliseconds\n   * @return {number} Handle used for canceling task\n   */\n  run(fn, delay) {\n    return window.setTimeout(fn, delay);\n  },\n  /**\n   * Cancels a previously enqueued `timeOut` callback.\n   *\n   * @memberof timeOut\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    window.clearTimeout(handle);\n  }\n};\nexport {timeOut};\n\n/**\n * Async interface wrapper around `requestAnimationFrame`.\n *\n * @namespace\n * @summary Async interface wrapper around `requestAnimationFrame`.\n */\nconst animationFrame = {\n  /**\n   * Enqueues a function called at `requestAnimationFrame` timing.\n   *\n   * @memberof animationFrame\n   * @param {function(number):void} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(fn) {\n    return window.requestAnimationFrame(fn);\n  },\n  /**\n   * Cancels a previously enqueued `animationFrame` callback.\n   *\n   * @memberof animationFrame\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    window.cancelAnimationFrame(handle);\n  }\n};\nexport {animationFrame};\n\n/**\n * Async interface wrapper around `requestIdleCallback`.  Falls back to\n * `setTimeout` on browsers that do not support `requestIdleCallback`.\n *\n * @namespace\n * @summary Async interface wrapper around `requestIdleCallback`.\n */\nconst idlePeriod = {\n  /**\n   * Enqueues a function called at `requestIdleCallback` timing.\n   *\n   * @memberof idlePeriod\n   * @param {function(!IdleDeadline):void} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(fn) {\n    return window.requestIdleCallback ?\n      window.requestIdleCallback(fn) :\n      window.setTimeout(fn, 16);\n  },\n  /**\n   * Cancels a previously enqueued `idlePeriod` callback.\n   *\n   * @memberof idlePeriod\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    window.cancelIdleCallback ?\n      window.cancelIdleCallback(handle) :\n      window.clearTimeout(handle);\n  }\n};\nexport {idlePeriod};\n\n/**\n * Async interface for enqueuing callbacks that run at microtask timing.\n *\n * Note that microtask timing is achieved via a single `MutationObserver`,\n * and thus callbacks enqueued with this API will all run in a single\n * batch, and not interleaved with other microtasks such as promises.\n * Promises are avoided as an implementation choice for the time being\n * due to Safari bugs that cause Promises to lack microtask guarantees.\n *\n * @namespace\n * @summary Async interface for enqueuing callbacks that run at microtask\n *   timing.\n */\nconst microTask = {\n\n  /**\n   * Enqueues a function called at microtask timing.\n   *\n   * @memberof microTask\n   * @param {!Function=} callback Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(callback) {\n    if (!microtaskScheduled) {\n      microtaskScheduled = true;\n      microtaskNode.textContent = microtaskNodeContent++;\n    }\n    microtaskCallbacks.push(callback);\n    return microtaskCurrHandle++;\n  },\n\n  /**\n   * Cancels a previously enqueued `microTask` callback.\n   *\n   * @memberof microTask\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    const idx = handle - microtaskLastHandle;\n    if (idx >= 0) {\n      if (!microtaskCallbacks[idx]) {\n        throw new Error('invalid async handle: ' + handle);\n      }\n      microtaskCallbacks[idx] = null;\n    }\n  }\n\n};\nexport {microTask};\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { microTask } from '../utils/async.js';\nimport { wrap } from '../utils/wrap.js';\n\n/** @const {!AsyncInterface} */\nconst microtask = microTask;\n\n/**\n * Element class mixin that provides basic meta-programming for creating one\n * or more property accessors (getter/setter pair) that enqueue an async\n * (batched) `_propertiesChanged` callback.\n *\n * For basic usage of this mixin, call `MyClass.createProperties(props)`\n * once at class definition time to create property accessors for properties\n * named in props, implement `_propertiesChanged` to react as desired to\n * property changes, and implement `static get observedAttributes()` and\n * include lowercase versions of any property names that should be set from\n * attributes. Last, call `this._enableProperties()` in the element's\n * `connectedCallback` to enable the accessors.\n *\n * @mixinFunction\n * @polymer\n * @summary Element class mixin for reacting to property changes from\n *   generated property accessors.\n * @template T\n * @param {function(new:T)} superClass Class to apply mixin to.\n * @return {function(new:T)} superClass with mixin applied.\n */\nexport const PropertiesChanged = dedupingMixin(\n    /**\n     * @template T\n     * @param {function(new:T)} superClass Class to apply mixin to.\n     * @return {function(new:T)} superClass with mixin applied.\n     */\n    (superClass) => {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_PropertiesChanged}\n   * @unrestricted\n   */\n  class PropertiesChanged extends superClass {\n\n    /**\n     * Creates property accessors for the given property names.\n     * @param {!Object} props Object whose keys are names of accessors.\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static createProperties(props) {\n      const proto = this.prototype;\n      for (let prop in props) {\n        // don't stomp an existing accessor\n        if (!(prop in proto)) {\n          proto._createPropertyAccessor(prop);\n        }\n      }\n    }\n\n    /**\n     * Returns an attribute name that corresponds to the given property.\n     * The attribute name is the lowercased property name. Override to\n     * customize this mapping.\n     * @param {string} property Property to convert\n     * @return {string} Attribute name corresponding to the given property.\n     *\n     * @protected\n     * @nocollapse\n     */\n    static attributeNameForProperty(property) {\n      return property.toLowerCase();\n    }\n\n    /**\n     * Override point to provide a type to which to deserialize a value to\n     * a given property.\n     * @param {string} name Name of property\n     *\n     * @protected\n     * @nocollapse\n     */\n    static typeForProperty(name) { } //eslint-disable-line no-unused-vars\n\n    /**\n     * Creates a setter/getter pair for the named property with its own\n     * local storage.  The getter returns the value in the local storage,\n     * and the setter calls `_setProperty`, which updates the local storage\n     * for the property and enqueues a `_propertiesChanged` callback.\n     *\n     * This method may be called on a prototype or an instance.  Calling\n     * this method may overwrite a property value that already exists on\n     * the prototype/instance by creating the accessor.\n     *\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created; the\n     *   protected `_setProperty` function must be used to set the property\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _createPropertyAccessor(property, readOnly) {\n      this._addPropertyToAttributeMap(property);\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('__dataHasAccessor', this))) {\n        this.__dataHasAccessor = Object.assign({}, this.__dataHasAccessor);\n      }\n      if (!this.__dataHasAccessor[property]) {\n        this.__dataHasAccessor[property] = true;\n        this._definePropertyAccessor(property, readOnly);\n      }\n    }\n\n    /**\n     * Adds the given `property` to a map matching attribute names\n     * to property names, using `attributeNameForProperty`. This map is\n     * used when deserializing attribute values to properties.\n     *\n     * @param {string} property Name of the property\n     * @override\n     */\n    _addPropertyToAttributeMap(property) {\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('__dataAttributes', this))) {\n        this.__dataAttributes = Object.assign({}, this.__dataAttributes);\n      }\n      // This check is technically not correct; it's an optimization that\n      // assumes that if a _property_ name is already in the map (note this is\n      // an attr->property map), the property mapped directly to the attribute\n      // and it has already been mapped.  This would fail if\n      // `attributeNameForProperty` were overridden such that this was not the\n      // case.\n      let attr = this.__dataAttributes[property];\n      if (!attr) {\n        attr = this.constructor.attributeNameForProperty(property);\n        this.__dataAttributes[attr] = property;\n      }\n      return attr;\n    }\n\n    /**\n     * Defines a property accessor for the given property.\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created\n     * @return {void}\n     * @override\n     */\n     _definePropertyAccessor(property, readOnly) {\n      Object.defineProperty(this, property, {\n        /* eslint-disable valid-jsdoc */\n        /** @this {PropertiesChanged} */\n        get() {\n          // Inline for perf instead of using `_getProperty`\n          return this.__data[property];\n        },\n        /** @this {PropertiesChanged} */\n        set: readOnly ? function () {} : function (value) {\n          // Inline for perf instead of using `_setProperty`\n          if (this._setPendingProperty(property, value, true)) {\n            this._invalidateProperties();\n          }\n        }\n        /* eslint-enable */\n      });\n    }\n\n    constructor() {\n      super();\n      /** @type {boolean} */\n      this.__dataEnabled = false;\n      this.__dataReady = false;\n      this.__dataInvalid = false;\n      this.__data = {};\n      this.__dataPending = null;\n      this.__dataOld = null;\n      this.__dataInstanceProps = null;\n      /** @type {number} */\n      // NOTE: used to track re-entrant calls to `_flushProperties`\n      this.__dataCounter = 0;\n      this.__serializing = false;\n      this._initializeProperties();\n    }\n\n    /**\n     * Lifecycle callback called when properties are enabled via\n     * `_enableProperties`.\n     *\n     * Users may override this function to implement behavior that is\n     * dependent on the element having its property data initialized, e.g.\n     * from defaults (initialized from `constructor`, `_initializeProperties`),\n     * `attributeChangedCallback`, or values propagated from host e.g. via\n     * bindings.  `super.ready()` must be called to ensure the data system\n     * becomes enabled.\n     *\n     * @return {void}\n     * @public\n     * @override\n     */\n    ready() {\n      this.__dataReady = true;\n      this._flushProperties();\n    }\n\n    /**\n     * Initializes the local storage for property accessors.\n     *\n     * Provided as an override point for performing any setup work prior\n     * to initializing the property accessor system.\n     *\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _initializeProperties() {\n      // Capture instance properties; these will be set into accessors\n      // during first flush. Don't set them here, since we want\n      // these to overwrite defaults/constructor assignments\n      for (let p in this.__dataHasAccessor) {\n        if (this.hasOwnProperty(p)) {\n          this.__dataInstanceProps = this.__dataInstanceProps || {};\n          this.__dataInstanceProps[p] = this[p];\n          delete this[p];\n        }\n      }\n    }\n\n    /**\n     * Called at ready time with bag of instance properties that overwrote\n     * accessors when the element upgraded.\n     *\n     * The default implementation sets these properties back into the\n     * setter at ready time.  This method is provided as an override\n     * point for customizing or providing more efficient initialization.\n     *\n     * @param {Object} props Bag of property values that were overwritten\n     *   when creating property accessors.\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _initializeInstanceProperties(props) {\n      Object.assign(this, props);\n    }\n\n    /**\n     * Updates the local storage for a property (via `_setPendingProperty`)\n     * and enqueues a `_proeprtiesChanged` callback.\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _setProperty(property, value) {\n      if (this._setPendingProperty(property, value)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Returns the value for the given property.\n     * @param {string} property Name of property\n     * @return {*} Value for the given property\n     * @protected\n     * @override\n     */\n    _getProperty(property) {\n      return this.__data[property];\n    }\n\n    /* eslint-disable no-unused-vars */\n    /**\n     * Updates the local storage for a property, records the previous value,\n     * and adds it to the set of \"pending changes\" that will be passed to the\n     * `_propertiesChanged` callback.  This method does not enqueue the\n     * `_propertiesChanged` callback.\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @param {boolean=} ext Not used here; affordance for closure\n     * @return {boolean} Returns true if the property changed\n     * @protected\n     * @override\n     */\n    _setPendingProperty(property, value, ext) {\n      let old = this.__data[property];\n      let changed = this._shouldPropertyChange(property, value, old);\n      if (changed) {\n        if (!this.__dataPending) {\n          this.__dataPending = {};\n          this.__dataOld = {};\n        }\n        // Ensure old is captured from the last turn\n        if (this.__dataOld && !(property in this.__dataOld)) {\n          this.__dataOld[property] = old;\n        }\n        this.__data[property] = value;\n        this.__dataPending[property] = value;\n      }\n      return changed;\n    }\n    /* eslint-enable */\n\n    /**\n     * @param {string} property Name of the property\n     * @return {boolean} Returns true if the property is pending.\n     */\n    _isPropertyPending(property) {\n      return !!(this.__dataPending && this.__dataPending.hasOwnProperty(property));\n    }\n\n    /**\n     * Marks the properties as invalid, and enqueues an async\n     * `_propertiesChanged` callback.\n     *\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _invalidateProperties() {\n      if (!this.__dataInvalid && this.__dataReady) {\n        this.__dataInvalid = true;\n        microtask.run(() => {\n          if (this.__dataInvalid) {\n            this.__dataInvalid = false;\n            this._flushProperties();\n          }\n        });\n      }\n    }\n\n    /**\n     * Call to enable property accessor processing. Before this method is\n     * called accessor values will be set but side effects are\n     * queued. When called, any pending side effects occur immediately.\n     * For elements, generally `connectedCallback` is a normal spot to do so.\n     * It is safe to call this method multiple times as it only turns on\n     * property accessors once.\n     *\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _enableProperties() {\n      if (!this.__dataEnabled) {\n        this.__dataEnabled = true;\n        if (this.__dataInstanceProps) {\n          this._initializeInstanceProperties(this.__dataInstanceProps);\n          this.__dataInstanceProps = null;\n        }\n        this.ready();\n      }\n    }\n\n    /**\n     * Calls the `_propertiesChanged` callback with the current set of\n     * pending changes (and old values recorded when pending changes were\n     * set), and resets the pending set of changes. Generally, this method\n     * should not be called in user code.\n     *\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _flushProperties() {\n      this.__dataCounter++;\n      const props = this.__data;\n      const changedProps = this.__dataPending;\n      const old = this.__dataOld;\n      if (this._shouldPropertiesChange(props, changedProps, old)) {\n        this.__dataPending = null;\n        this.__dataOld = null;\n        this._propertiesChanged(props, changedProps, old);\n      }\n      this.__dataCounter--;\n    }\n\n    /**\n     * Called in `_flushProperties` to determine if `_propertiesChanged`\n     * should be called. The default implementation returns true if\n     * properties are pending. Override to customize when\n     * `_propertiesChanged` is called.\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {?Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {?Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @return {boolean} true if changedProps is truthy\n     * @override\n     */\n    _shouldPropertiesChange(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars\n      return Boolean(changedProps);\n    }\n\n    /**\n     * Callback called when any properties with accessors created via\n     * `_createPropertyAccessor` have been set.\n     *\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {?Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {?Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _propertiesChanged(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Method called to determine whether a property value should be\n     * considered as a change and cause the `_propertiesChanged` callback\n     * to be enqueued.\n     *\n     * The default implementation returns `true` if a strict equality\n     * check fails. The method always returns false for `NaN`.\n     *\n     * Override this method to e.g. provide stricter checking for\n     * Objects/Arrays when using immutable patterns.\n     *\n     * @param {string} property Property name\n     * @param {*} value New property value\n     * @param {*} old Previous property value\n     * @return {boolean} Whether the property should be considered a change\n     *   and enqueue a `_proeprtiesChanged` callback\n     * @protected\n     * @override\n     */\n    _shouldPropertyChange(property, value, old) {\n      return (\n        // Strict equality check\n        (old !== value &&\n          // This ensures (old==NaN, value==NaN) always returns false\n          (old === old || value === value))\n      );\n    }\n\n    /**\n     * Implements native Custom Elements `attributeChangedCallback` to\n     * set an attribute value to a property via `_attributeToProperty`.\n     *\n     * @param {string} name Name of attribute that changed\n     * @param {?string} old Old attribute value\n     * @param {?string} value New attribute value\n     * @param {?string} namespace Attribute namespace.\n     * @return {void}\n     * @suppress {missingProperties} Super may or may not implement the callback\n     * @override\n     */\n    attributeChangedCallback(name, old, value, namespace) {\n      if (old !== value) {\n        this._attributeToProperty(name, value);\n      }\n      if (super.attributeChangedCallback) {\n        super.attributeChangedCallback(name, old, value, namespace);\n      }\n    }\n\n    /**\n     * Deserializes an attribute to its associated property.\n     *\n     * This method calls the `_deserializeValue` method to convert the string to\n     * a typed value.\n     *\n     * @param {string} attribute Name of attribute to deserialize.\n     * @param {?string} value of the attribute.\n     * @param {*=} type type to deserialize to, defaults to the value\n     * returned from `typeForProperty`\n     * @return {void}\n     * @override\n     */\n    _attributeToProperty(attribute, value, type) {\n      if (!this.__serializing) {\n        const map = this.__dataAttributes;\n        const property = map && map[attribute] || attribute;\n        this[property] = this._deserializeValue(value, type ||\n          this.constructor.typeForProperty(property));\n      }\n    }\n\n    /**\n     * Serializes a property to its associated attribute.\n     *\n     * @suppress {invalidCasts} Closure can't figure out `this` is an element.\n     *\n     * @param {string} property Property name to reflect.\n     * @param {string=} attribute Attribute name to reflect to.\n     * @param {*=} value Property value to refect.\n     * @return {void}\n     * @override\n     */\n    _propertyToAttribute(property, attribute, value) {\n      this.__serializing = true;\n      value = (arguments.length < 3) ? this[property] : value;\n      this._valueToNodeAttribute(/** @type {!HTMLElement} */(this), value,\n        attribute || this.constructor.attributeNameForProperty(property));\n      this.__serializing = false;\n    }\n\n    /**\n     * Sets a typed value to an HTML attribute on a node.\n     *\n     * This method calls the `_serializeValue` method to convert the typed\n     * value to a string.  If the `_serializeValue` method returns `undefined`,\n     * the attribute will be removed (this is the default for boolean\n     * type `false`).\n     *\n     * @param {Element} node Element to set attribute to.\n     * @param {*} value Value to serialize.\n     * @param {string} attribute Attribute name to serialize to.\n     * @return {void}\n     * @override\n     */\n    _valueToNodeAttribute(node, value, attribute) {\n      const str = this._serializeValue(value);\n      if (attribute === 'class' || attribute === 'name' || attribute === 'slot') {\n        node = /** @type {?Element} */(wrap(node));\n      }\n      if (str === undefined) {\n        node.removeAttribute(attribute);\n      } else {\n        node.setAttribute(attribute, str);\n      }\n    }\n\n    /**\n     * Converts a typed JavaScript value to a string.\n     *\n     * This method is called when setting JS property values to\n     * HTML attributes.  Users may override this method to provide\n     * serialization for custom types.\n     *\n     * @param {*} value Property value to serialize.\n     * @return {string | undefined} String serialized from the provided\n     * property  value.\n     * @override\n     */\n    _serializeValue(value) {\n      switch (typeof value) {\n        case 'boolean':\n          return value ? '' : undefined;\n        default:\n          return value != null ? value.toString() : undefined;\n      }\n    }\n\n    /**\n     * Converts a string to a typed JavaScript value.\n     *\n     * This method is called when reading HTML attribute values to\n     * JS properties.  Users may override this method to provide\n     * deserialization for custom `type`s. Types for `Boolean`, `String`,\n     * and `Number` convert attributes to the expected types.\n     *\n     * @param {?string} value Value to deserialize.\n     * @param {*=} type Type to deserialize the string to.\n     * @return {*} Typed value deserialized from the provided string.\n     * @override\n     */\n    _deserializeValue(value, type) {\n      switch (type) {\n        case Boolean:\n          return (value !== null);\n        case Number:\n          return Number(value);\n        default:\n          return value;\n      }\n    }\n\n  }\n\n  return PropertiesChanged;\n});\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { camelToDashCase, dashToCamelCase } from '../utils/case-map.js';\nimport { PropertiesChanged } from './properties-changed.js';\n\n// Save map of native properties; this forms a blacklist or properties\n// that won't have their values \"saved\" by `saveAccessorValue`, since\n// reading from an HTMLElement accessor from the context of a prototype throws\nconst nativeProperties = {};\nlet proto = HTMLElement.prototype;\nwhile (proto) {\n  let props = Object.getOwnPropertyNames(proto);\n  for (let i=0; i<props.length; i++) {\n    nativeProperties[props[i]] = true;\n  }\n  proto = Object.getPrototypeOf(proto);\n}\n\n/**\n * Used to save the value of a property that will be overridden with\n * an accessor. If the `model` is a prototype, the values will be saved\n * in `__dataProto`, and it's up to the user (or downstream mixin) to\n * decide how/when to set these values back into the accessors.\n * If `model` is already an instance (it has a `__data` property), then\n * the value will be set as a pending property, meaning the user should\n * call `_invalidateProperties` or `_flushProperties` to take effect\n *\n * @param {Object} model Prototype or instance\n * @param {string} property Name of property\n * @return {void}\n * @private\n */\nfunction saveAccessorValue(model, property) {\n  // Don't read/store value for any native properties since they could throw\n  if (!nativeProperties[property]) {\n    let value = model[property];\n    if (value !== undefined) {\n      if (model.__data) {\n        // Adding accessor to instance; update the property\n        // It is the user's responsibility to call _flushProperties\n        model._setPendingProperty(property, value);\n      } else {\n        // Adding accessor to proto; save proto's value for instance-time use\n        if (!model.__dataProto) {\n          model.__dataProto = {};\n        } else if (!model.hasOwnProperty(JSCompiler_renameProperty('__dataProto', model))) {\n          model.__dataProto = Object.create(model.__dataProto);\n        }\n        model.__dataProto[property] = value;\n      }\n    }\n  }\n}\n\n/**\n * Element class mixin that provides basic meta-programming for creating one\n * or more property accessors (getter/setter pair) that enqueue an async\n * (batched) `_propertiesChanged` callback.\n *\n * For basic usage of this mixin:\n *\n * -   Declare attributes to observe via the standard `static get\n *     observedAttributes()`. Use `dash-case` attribute names to represent\n *     `camelCase` property names.\n * -   Implement the `_propertiesChanged` callback on the class.\n * -   Call `MyClass.createPropertiesForAttributes()` **once** on the class to\n *     generate property accessors for each observed attribute. This must be\n *     called before the first instance is created, for example, by calling it\n *     before calling `customElements.define`. It can also be called lazily from\n *     the element's `constructor`, as long as it's guarded so that the call is\n *     only made once, when the first instance is created.\n * -   Call `this._enableProperties()` in the element's `connectedCallback` to\n *     enable the accessors.\n *\n * Any `observedAttributes` will automatically be\n * deserialized via `attributeChangedCallback` and set to the associated\n * property using `dash-case`-to-`camelCase` convention.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertiesChanged\n * @summary Element class mixin for reacting to property changes from\n *   generated property accessors.\n * @template T\n * @param {function(new:T)} superClass Class to apply mixin to.\n * @return {function(new:T)} superClass with mixin applied.\n */\nexport const PropertyAccessors = dedupingMixin(superClass => {\n\n  /**\n   * @constructor\n   * @implements {Polymer_PropertiesChanged}\n   * @unrestricted\n   * @private\n   */\n   const base = PropertiesChanged(superClass);\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_PropertyAccessors}\n   * @extends {base}\n   * @unrestricted\n   */\n  class PropertyAccessors extends base {\n\n    /**\n     * Generates property accessors for all attributes in the standard\n     * static `observedAttributes` array.\n     *\n     * Attribute names are mapped to property names using the `dash-case` to\n     * `camelCase` convention\n     *\n     * @return {void}\n     * @nocollapse\n     */\n    static createPropertiesForAttributes() {\n      let a$ =  /** @type {?} */ (this).observedAttributes;\n      for (let i=0; i < a$.length; i++) {\n        this.prototype._createPropertyAccessor(dashToCamelCase(a$[i]));\n      }\n    }\n\n    /**\n     * Returns an attribute name that corresponds to the given property.\n     * By default, converts camel to dash case, e.g. `fooBar` to `foo-bar`.\n     * @param {string} property Property to convert\n     * @return {string} Attribute name corresponding to the given property.\n     *\n     * @protected\n     * @nocollapse\n     */\n    static attributeNameForProperty(property) {\n      return camelToDashCase(property);\n    }\n\n    /**\n     * Overrides PropertiesChanged implementation to initialize values for\n     * accessors created for values that already existed on the element\n     * prototype.\n     *\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _initializeProperties() {\n      if (this.__dataProto) {\n        this._initializeProtoProperties(this.__dataProto);\n        this.__dataProto = null;\n      }\n      super._initializeProperties();\n    }\n\n    /**\n     * Called at instance time with bag of properties that were overwritten\n     * by accessors on the prototype when accessors were created.\n     *\n     * The default implementation sets these properties back into the\n     * setter at instance time.  This method is provided as an override\n     * point for customizing or providing more efficient initialization.\n     *\n     * @param {Object} props Bag of property values that were overwritten\n     *   when creating property accessors.\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _initializeProtoProperties(props) {\n      for (let p in props) {\n        this._setProperty(p, props[p]);\n      }\n    }\n\n    /**\n     * Ensures the element has the given attribute. If it does not,\n     * assigns the given value to the attribute.\n     *\n     * @suppress {invalidCasts} Closure can't figure out `this` is infact an\n     *     element\n     *\n     * @param {string} attribute Name of attribute to ensure is set.\n     * @param {string} value of the attribute.\n     * @return {void}\n     * @override\n     */\n    _ensureAttribute(attribute, value) {\n      const el = /** @type {!HTMLElement} */(this);\n      if (!el.hasAttribute(attribute)) {\n        this._valueToNodeAttribute(el, value, attribute);\n      }\n    }\n\n    /**\n     * Overrides PropertiesChanged implemention to serialize objects as JSON.\n     *\n     * @param {*} value Property value to serialize.\n     * @return {string | undefined} String serialized from the provided property\n     *     value.\n     * @override\n     */\n    _serializeValue(value) {\n      /* eslint-disable no-fallthrough */\n      switch (typeof value) {\n        case 'object':\n          if (value instanceof Date) {\n            return value.toString();\n          } else if (value) {\n            try {\n              return JSON.stringify(value);\n            } catch(x) {\n              return '';\n            }\n          }\n\n        default:\n          return super._serializeValue(value);\n      }\n    }\n\n    /**\n     * Converts a string to a typed JavaScript value.\n     *\n     * This method is called by Polymer when reading HTML attribute values to\n     * JS properties.  Users may override this method on Polymer element\n     * prototypes to provide deserialization for custom `type`s.  Note,\n     * the `type` argument is the value of the `type` field provided in the\n     * `properties` configuration object for a given property, and is\n     * by convention the constructor for the type to deserialize.\n     *\n     *\n     * @param {?string} value Attribute value to deserialize.\n     * @param {*=} type Type to deserialize the string to.\n     * @return {*} Typed value deserialized from the provided string.\n     * @override\n     */\n    _deserializeValue(value, type) {\n      /**\n       * @type {*}\n       */\n      let outValue;\n      switch (type) {\n        case Object:\n          try {\n            outValue = JSON.parse(/** @type {string} */(value));\n          } catch(x) {\n            // allow non-JSON literals like Strings and Numbers\n            outValue = value;\n          }\n          break;\n        case Array:\n          try {\n            outValue = JSON.parse(/** @type {string} */(value));\n          } catch(x) {\n            outValue = null;\n            console.warn(`Polymer::Attributes: couldn't decode Array as JSON: ${value}`);\n          }\n          break;\n        case Date:\n          outValue = isNaN(value) ? String(value) : Number(value);\n          outValue = new Date(outValue);\n          break;\n        default:\n          outValue = super._deserializeValue(value, type);\n          break;\n      }\n      return outValue;\n    }\n    /* eslint-enable no-fallthrough */\n\n    /**\n     * Overrides PropertiesChanged implementation to save existing prototype\n     * property value so that it can be reset.\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created\n     *\n     * When calling on a prototype, any overwritten values are saved in\n     * `__dataProto`, and it is up to the subclasser to decide how/when\n     * to set those properties back into the accessor.  When calling on an\n     * instance, the overwritten value is set via `_setPendingProperty`,\n     * and the user should call `_invalidateProperties` or `_flushProperties`\n     * for the values to take effect.\n     * @protected\n     * @return {void}\n     * @override\n     */\n    _definePropertyAccessor(property, readOnly) {\n      saveAccessorValue(this, property);\n      super._definePropertyAccessor(property, readOnly);\n    }\n\n    /**\n     * Returns true if this library created an accessor for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if an accessor was created\n     * @override\n     */\n    _hasAccessor(property) {\n      return this.__dataHasAccessor && this.__dataHasAccessor[property];\n    }\n\n    /**\n     * Returns true if the specified property has a pending change.\n     *\n     * @param {string} prop Property name\n     * @return {boolean} True if property has a pending change\n     * @protected\n     * @override\n     */\n    _isPropertyPending(prop) {\n      return Boolean(this.__dataPending && (prop in this.__dataPending));\n    }\n\n  }\n\n  return PropertyAccessors;\n\n});\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\n\n// 1.x backwards-compatible auto-wrapper for template type extensions\n// This is a clear layering violation and gives favored-nation status to\n// dom-if and dom-repeat templates.  This is a conceit we're choosing to keep\n// a.) to ease 1.x backwards-compatibility due to loss of `is`, and\n// b.) to maintain if/repeat capability in parser-constrained elements\n//     (e.g. table, select) in lieu of native CE type extensions without\n//     massive new invention in this space (e.g. directive system)\nconst templateExtensions = {\n  'dom-if': true,\n  'dom-repeat': true\n};\n\nlet placeholderBugDetect = false;\nlet placeholderBug = false;\n\nfunction hasPlaceholderBug() {\n  if (!placeholderBugDetect) {\n    placeholderBugDetect = true;\n    const t = document.createElement('textarea');\n    t.placeholder = 'a';\n    placeholderBug = t.placeholder === t.textContent;\n  }\n  return placeholderBug;\n}\n\n/**\n * Some browsers have a bug with textarea, where placeholder text is copied as\n * a textnode child of the textarea.\n *\n * If the placeholder is a binding, this can break template stamping in two\n * ways.\n *\n * One issue is that when the `placeholder` attribute is removed when the\n * binding is processed, the textnode child of the textarea is deleted, and the\n * template info tries to bind into that node.\n *\n * With `legacyOptimizations` in use, when the template is stamped and the\n * `textarea.textContent` binding is processed, no corresponding node is found\n * because it was removed during parsing. An exception is generated when this\n * binding is updated.\n *\n * With `legacyOptimizations` not in use, the template is cloned before\n * processing and this changes the above behavior. The cloned template also has\n * a value property set to the placeholder and textContent. This prevents the\n * removal of the textContent when the placeholder attribute is removed.\n * Therefore the exception does not occur. However, there is an extra\n * unnecessary binding.\n *\n * @param {!Node} node Check node for placeholder bug\n * @return {void}\n */\nfunction fixPlaceholder(node) {\n  if (hasPlaceholderBug() && node.localName === 'textarea' && node.placeholder\n        && node.placeholder === node.textContent) {\n    node.textContent = null;\n  }\n}\n\nfunction wrapTemplateExtension(node) {\n  let is = node.getAttribute('is');\n  if (is && templateExtensions[is]) {\n    let t = node;\n    t.removeAttribute('is');\n    node = t.ownerDocument.createElement(is);\n    t.parentNode.replaceChild(node, t);\n    node.appendChild(t);\n    while(t.attributes.length) {\n      node.setAttribute(t.attributes[0].name, t.attributes[0].value);\n      t.removeAttribute(t.attributes[0].name);\n    }\n  }\n  return node;\n}\n\nfunction findTemplateNode(root, nodeInfo) {\n  // recursively ascend tree until we hit root\n  let parent = nodeInfo.parentInfo && findTemplateNode(root, nodeInfo.parentInfo);\n  // unwind the stack, returning the indexed node at each level\n  if (parent) {\n    // note: marginally faster than indexing via childNodes\n    // (http://jsperf.com/childnodes-lookup)\n    for (let n=parent.firstChild, i=0; n; n=n.nextSibling) {\n      if (nodeInfo.parentIndex === i++) {\n        return n;\n      }\n    }\n  } else {\n    return root;\n  }\n}\n\n// construct `$` map (from id annotations)\nfunction applyIdToMap(inst, map, node, nodeInfo) {\n  if (nodeInfo.id) {\n    map[nodeInfo.id] = node;\n  }\n}\n\n// install event listeners (from event annotations)\nfunction applyEventListener(inst, node, nodeInfo) {\n  if (nodeInfo.events && nodeInfo.events.length) {\n    for (let j=0, e$=nodeInfo.events, e; (j<e$.length) && (e=e$[j]); j++) {\n      inst._addMethodEventListenerToNode(node, e.name, e.value, inst);\n    }\n  }\n}\n\n// push configuration references at configure time\nfunction applyTemplateInfo(inst, node, nodeInfo, parentTemplateInfo) {\n  if (nodeInfo.templateInfo) {\n    // Give the node an instance of this templateInfo and set its parent\n    node._templateInfo = nodeInfo.templateInfo;\n    node._parentTemplateInfo = parentTemplateInfo;\n  }\n}\n\nfunction createNodeEventHandler(context, eventName, methodName) {\n  // Instances can optionally have a _methodHost which allows redirecting where\n  // to find methods. Currently used by `templatize`.\n  context = context._methodHost || context;\n  let handler = function(e) {\n    if (context[methodName]) {\n      context[methodName](e, e.detail);\n    } else {\n      console.warn('listener method `' + methodName + '` not defined');\n    }\n  };\n  return handler;\n}\n\n/**\n * Element mixin that provides basic template parsing and stamping, including\n * the following template-related features for stamped templates:\n *\n * - Declarative event listeners (`on-eventname=\"listener\"`)\n * - Map of node id's to stamped node instances (`this.$.id`)\n * - Nested template content caching/removal and re-installation (performance\n *   optimization)\n *\n * @mixinFunction\n * @polymer\n * @summary Element class mixin that provides basic template parsing and stamping\n */\nexport const TemplateStamp = dedupingMixin(\n    /**\n     * @template T\n     * @param {function(new:T)} superClass Class to apply mixin to.\n     * @return {function(new:T)} superClass with mixin applied.\n     */\n    (superClass) => {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_TemplateStamp}\n   */\n  class TemplateStamp extends superClass {\n\n    /**\n     * Scans a template to produce template metadata.\n     *\n     * Template-specific metadata are stored in the object returned, and node-\n     * specific metadata are stored in objects in its flattened `nodeInfoList`\n     * array.  Only nodes in the template that were parsed as nodes of\n     * interest contain an object in `nodeInfoList`.  Each `nodeInfo` object\n     * contains an `index` (`childNodes` index in parent) and optionally\n     * `parent`, which points to node info of its parent (including its index).\n     *\n     * The template metadata object returned from this method has the following\n     * structure (many fields optional):\n     *\n     * ```js\n     *   {\n     *     // Flattened list of node metadata (for nodes that generated metadata)\n     *     nodeInfoList: [\n     *       {\n     *         // `id` attribute for any nodes with id's for generating `$` map\n     *         id: {string},\n     *         // `on-event=\"handler\"` metadata\n     *         events: [\n     *           {\n     *             name: {string},   // event name\n     *             value: {string},  // handler method name\n     *           }, ...\n     *         ],\n     *         // Notes when the template contained a `<slot>` for shady DOM\n     *         // optimization purposes\n     *         hasInsertionPoint: {boolean},\n     *         // For nested `<template>`` nodes, nested template metadata\n     *         templateInfo: {object}, // nested template metadata\n     *         // Metadata to allow efficient retrieval of instanced node\n     *         // corresponding to this metadata\n     *         parentInfo: {number},   // reference to parent nodeInfo>\n     *         parentIndex: {number},  // index in parent's `childNodes` collection\n     *         infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n     *       },\n     *       ...\n     *     ],\n     *     // When true, the template had the `strip-whitespace` attribute\n     *     // or was nested in a template with that setting\n     *     stripWhitespace: {boolean},\n     *     // For nested templates, nested template content is moved into\n     *     // a document fragment stored here; this is an optimization to\n     *     // avoid the cost of nested template cloning\n     *     content: {DocumentFragment}\n     *   }\n     * ```\n     *\n     * This method kicks off a recursive treewalk as follows:\n     *\n     * ```\n     *    _parseTemplate <---------------------+\n     *      _parseTemplateContent              |\n     *        _parseTemplateNode  <------------|--+\n     *          _parseTemplateNestedTemplate --+  |\n     *          _parseTemplateChildNodes ---------+\n     *          _parseTemplateNodeAttributes\n     *            _parseTemplateNodeAttribute\n     *\n     * ```\n     *\n     * These methods may be overridden to add custom metadata about templates\n     * to either `templateInfo` or `nodeInfo`.\n     *\n     * Note that this method may be destructive to the template, in that\n     * e.g. event annotations may be removed after being noted in the\n     * template metadata.\n     *\n     * @param {!HTMLTemplateElement} template Template to parse\n     * @param {TemplateInfo=} outerTemplateInfo Template metadata from the outer\n     *   template, for parsing nested templates\n     * @return {!TemplateInfo} Parsed template metadata\n     * @nocollapse\n     */\n    static _parseTemplate(template, outerTemplateInfo) {\n      // since a template may be re-used, memo-ize metadata\n      if (!template._templateInfo) {\n        // TODO(rictic): fix typing\n        let /** ? */ templateInfo = template._templateInfo = {};\n        templateInfo.nodeInfoList = [];\n        templateInfo.nestedTemplate = Boolean(outerTemplateInfo);\n        templateInfo.stripWhiteSpace =\n          (outerTemplateInfo && outerTemplateInfo.stripWhiteSpace) ||\n          template.hasAttribute('strip-whitespace');\n         // TODO(rictic): fix typing\n         this._parseTemplateContent(\n             template, templateInfo, /** @type {?} */ ({parent: null}));\n      }\n      return template._templateInfo;\n    }\n\n    /**\n     * See docs for _parseTemplateNode.\n     *\n     * @param {!HTMLTemplateElement} template .\n     * @param {!TemplateInfo} templateInfo .\n     * @param {!NodeInfo} nodeInfo .\n     * @return {boolean} .\n     * @nocollapse\n     */\n    static _parseTemplateContent(template, templateInfo, nodeInfo) {\n      return this._parseTemplateNode(template.content, templateInfo, nodeInfo);\n    }\n\n    /**\n     * Parses template node and adds template and node metadata based on\n     * the current node, and its `childNodes` and `attributes`.\n     *\n     * This method may be overridden to add custom node or template specific\n     * metadata based on this node.\n     *\n     * @param {Node} node Node to parse\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @nocollapse\n     */\n    static _parseTemplateNode(node, templateInfo, nodeInfo) {\n      let noted = false;\n      let element = /** @type {!HTMLTemplateElement} */ (node);\n      if (element.localName == 'template' && !element.hasAttribute('preserve-content')) {\n        noted = this._parseTemplateNestedTemplate(element, templateInfo, nodeInfo) || noted;\n      } else if (element.localName === 'slot') {\n        // For ShadyDom optimization, indicating there is an insertion point\n        templateInfo.hasInsertionPoint = true;\n      }\n      fixPlaceholder(element);\n      if (element.firstChild) {\n        this._parseTemplateChildNodes(element, templateInfo, nodeInfo);\n      }\n      if (element.hasAttributes && element.hasAttributes()) {\n        noted = this._parseTemplateNodeAttributes(element, templateInfo, nodeInfo) || noted;\n      }\n      // Checking `nodeInfo.noted` allows a child node of this node (who gets\n      // access to `parentInfo`) to cause the parent to be noted, which\n      // otherwise has no return path via `_parseTemplateChildNodes` (used by\n      // some optimizations)\n      return noted || nodeInfo.noted;\n    }\n\n    /**\n     * Parses template child nodes for the given root node.\n     *\n     * This method also wraps whitelisted legacy template extensions\n     * (`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\n     * wrappers, collapses text nodes, and strips whitespace from the template\n     * if the `templateInfo.stripWhitespace` setting was provided.\n     *\n     * @param {Node} root Root node whose `childNodes` will be parsed\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {void}\n     */\n    static _parseTemplateChildNodes(root, templateInfo, nodeInfo) {\n      if (root.localName === 'script' || root.localName === 'style') {\n        return;\n      }\n      for (let node=root.firstChild, parentIndex=0, next; node; node=next) {\n        // Wrap templates\n        if (node.localName == 'template') {\n          node = wrapTemplateExtension(node);\n        }\n        // collapse adjacent textNodes: fixes an IE issue that can cause\n        // text nodes to be inexplicably split =(\n        // note that root.normalize() should work but does not so we do this\n        // manually.\n        next = node.nextSibling;\n        if (node.nodeType === Node.TEXT_NODE) {\n          let /** Node */ n = next;\n          while (n && (n.nodeType === Node.TEXT_NODE)) {\n            node.textContent += n.textContent;\n            next = n.nextSibling;\n            root.removeChild(n);\n            n = next;\n          }\n          // optionally strip whitespace\n          if (templateInfo.stripWhiteSpace && !node.textContent.trim()) {\n            root.removeChild(node);\n            continue;\n          }\n        }\n        let childInfo =\n            /** @type {!NodeInfo} */ ({parentIndex, parentInfo: nodeInfo});\n        if (this._parseTemplateNode(node, templateInfo, childInfo)) {\n          childInfo.infoIndex = templateInfo.nodeInfoList.push(childInfo) - 1;\n        }\n        // Increment if not removed\n        if (node.parentNode) {\n          parentIndex++;\n        }\n      }\n    }\n\n    /**\n     * Parses template content for the given nested `<template>`.\n     *\n     * Nested template info is stored as `templateInfo` in the current node's\n     * `nodeInfo`. `template.content` is removed and stored in `templateInfo`.\n     * It will then be the responsibility of the host to set it back to the\n     * template and for users stamping nested templates to use the\n     * `_contentForTemplate` method to retrieve the content for this template\n     * (an optimization to avoid the cost of cloning nested template content).\n     *\n     * @param {HTMLTemplateElement} node Node to parse (a <template>)\n     * @param {TemplateInfo} outerTemplateInfo Template metadata for current template\n     *   that includes the template `node`\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @nocollapse\n     */\n    static _parseTemplateNestedTemplate(node, outerTemplateInfo, nodeInfo) {\n      // TODO(rictic): the type of node should be non-null\n      let element = /** @type {!HTMLTemplateElement} */ (node);\n      let templateInfo = this._parseTemplate(element, outerTemplateInfo);\n      let content = templateInfo.content =\n          element.content.ownerDocument.createDocumentFragment();\n      content.appendChild(element.content);\n      nodeInfo.templateInfo = templateInfo;\n      return true;\n    }\n\n    /**\n     * Parses template node attributes and adds node metadata to `nodeInfo`\n     * for nodes of interest.\n     *\n     * @param {Element} node Node to parse\n     * @param {!TemplateInfo} templateInfo Template metadata for current\n     *     template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @nocollapse\n     */\n    static _parseTemplateNodeAttributes(node, templateInfo, nodeInfo) {\n      // Make copy of original attribute list, since the order may change\n      // as attributes are added and removed\n      let noted = false;\n      let attrs = Array.from(node.attributes);\n      for (let i=attrs.length-1, a; (a=attrs[i]); i--) {\n        noted = this._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, a.name, a.value) || noted;\n      }\n      return noted;\n    }\n\n    /**\n     * Parses a single template node attribute and adds node metadata to\n     * `nodeInfo` for attributes of interest.\n     *\n     * This implementation adds metadata for `on-event=\"handler\"` attributes\n     * and `id` attributes.\n     *\n     * @param {Element} node Node to parse\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @param {string} name Attribute name\n     * @param {string} value Attribute value\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @nocollapse\n     */\n    static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {\n      // events (on-*)\n      if (name.slice(0, 3) === 'on-') {\n        node.removeAttribute(name);\n        nodeInfo.events = nodeInfo.events || [];\n        nodeInfo.events.push({\n          name: name.slice(3),\n          value\n        });\n        return true;\n      }\n      // static id\n      else if (name === 'id') {\n        nodeInfo.id = value;\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Returns the `content` document fragment for a given template.\n     *\n     * For nested templates, Polymer performs an optimization to cache nested\n     * template content to avoid the cost of cloning deeply nested templates.\n     * This method retrieves the cached content for a given template.\n     *\n     * @param {HTMLTemplateElement} template Template to retrieve `content` for\n     * @return {DocumentFragment} Content fragment\n     * @nocollapse\n     */\n    static _contentForTemplate(template) {\n      let templateInfo = /** @type {HTMLTemplateElementWithInfo} */ (template)._templateInfo;\n      return (templateInfo && templateInfo.content) || template.content;\n    }\n\n    /**\n     * Clones the provided template content and returns a document fragment\n     * containing the cloned dom.\n     *\n     * The template is parsed (once and memoized) using this library's\n     * template parsing features, and provides the following value-added\n     * features:\n     * * Adds declarative event listeners for `on-event=\"handler\"` attributes\n     * * Generates an \"id map\" for all nodes with id's under `$` on returned\n     *   document fragment\n     * * Passes template info including `content` back to templates as\n     *   `_templateInfo` (a performance optimization to avoid deep template\n     *   cloning)\n     *\n     * Note that the memoized template parsing process is destructive to the\n     * template: attributes for bindings and declarative event listeners are\n     * removed after being noted in notes, and any nested `<template>.content`\n     * is removed and stored in notes as well.\n     *\n     * @param {!HTMLTemplateElement} template Template to stamp\n     * @param {TemplateInfo=} templateInfo Optional template info associated\n     *   with the template to be stamped; if omitted the template will be\n     *   automatically parsed.\n     * @return {!StampedTemplate} Cloned template content\n     * @override\n     */\n    _stampTemplate(template, templateInfo) {\n      // Polyfill support: bootstrap the template if it has not already been\n      if (template && !template.content &&\n          window.HTMLTemplateElement && HTMLTemplateElement.decorate) {\n        HTMLTemplateElement.decorate(template);\n      }\n      // Accepting the `templateInfo` via an argument allows for creating\n      // instances of the `templateInfo` by the caller, useful for adding\n      // instance-time information to the prototypical data\n      templateInfo = templateInfo || this.constructor._parseTemplate(template);\n      let nodeInfo = templateInfo.nodeInfoList;\n      let content = templateInfo.content || template.content;\n      let dom = /** @type {DocumentFragment} */ (document.importNode(content, true));\n      // NOTE: ShadyDom optimization indicating there is an insertion point\n      dom.__noInsertionPoint = !templateInfo.hasInsertionPoint;\n      let nodes = dom.nodeList = new Array(nodeInfo.length);\n      dom.$ = {};\n      for (let i=0, l=nodeInfo.length, info; (i<l) && (info=nodeInfo[i]); i++) {\n        let node = nodes[i] = findTemplateNode(dom, info);\n        applyIdToMap(this, dom.$, node, info);\n        applyTemplateInfo(this, node, info, templateInfo);\n        applyEventListener(this, node, info);\n      }\n      dom = /** @type {!StampedTemplate} */(dom); // eslint-disable-line no-self-assign\n      return dom;\n    }\n\n    /**\n     * Adds an event listener by method name for the event provided.\n     *\n     * This method generates a handler function that looks up the method\n     * name at handling time.\n     *\n     * @param {!EventTarget} node Node to add listener on\n     * @param {string} eventName Name of event\n     * @param {string} methodName Name of method\n     * @param {*=} context Context the method will be called on (defaults\n     *   to `node`)\n     * @return {Function} Generated handler function\n     * @override\n     */\n    _addMethodEventListenerToNode(node, eventName, methodName, context) {\n      context = context || node;\n      let handler = createNodeEventHandler(context, eventName, methodName);\n      this._addEventListenerToNode(node, eventName, handler);\n      return handler;\n    }\n\n    /**\n     * Override point for adding custom or simulated event handling.\n     *\n     * @param {!EventTarget} node Node to add event listener to\n     * @param {string} eventName Name of event\n     * @param {function(!Event):void} handler Listener function to add\n     * @return {void}\n     * @override\n     */\n    _addEventListenerToNode(node, eventName, handler) {\n      node.addEventListener(eventName, handler);\n    }\n\n    /**\n     * Override point for adding custom or simulated event handling.\n     *\n     * @param {!EventTarget} node Node to remove event listener from\n     * @param {string} eventName Name of event\n     * @param {function(!Event):void} handler Listener function to remove\n     * @return {void}\n     * @override\n     */\n    _removeEventListenerFromNode(node, eventName, handler) {\n      node.removeEventListener(eventName, handler);\n    }\n\n  }\n\n  return TemplateStamp;\n\n});\n", "/**\n * @fileoverview\n * @suppress {checkPrototypalTypes}\n * @license Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt The complete set of authors may be found\n * at http://polymer.github.io/AUTHORS.txt The complete set of contributors may\n * be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by\n * Google as part of the polymer project is also subject to an additional IP\n * rights grant found at http://polymer.github.io/PATENTS.txt\n */\n\nimport '../utils/boot.js';\nimport { wrap } from '../utils/wrap.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { root, isAncestor, isDescendant, get, translate, isPath, set, normalize } from '../utils/path.js';\n/* for notify, reflect */\nimport { camelToDashCase, dashToCamelCase } from '../utils/case-map.js';\nimport { PropertyAccessors } from './property-accessors.js';\n/* for annotated effects */\nimport { TemplateStamp } from './template-stamp.js';\nimport { sanitizeDOMValue, legacyUndefined, orderedComputed, removeNestedTemplates, fastDomIf } from '../utils/settings.js';\n\n// Monotonically increasing unique ID used for de-duping effects triggered\n// from multiple properties in the same turn\nlet dedupeId = 0;\n\nconst NOOP = [];\n\n/**\n * Property effect types; effects are stored on the prototype using these keys\n * @enum {string}\n */\nconst TYPES = {\n  COMPUTE: '__computeEffects',\n  REFLECT: '__reflectEffects',\n  NOTIFY: '__notifyEffects',\n  PROPAGATE: '__propagateEffects',\n  OBSERVE: '__observeEffects',\n  READ_ONLY: '__readOnly'\n};\n\nconst COMPUTE_INFO = '__computeInfo';\n\n/** @const {!RegExp} */\nconst capitalAttributeRegex = /[A-Z]/;\n\n/**\n * @typedef {{\n * name: (string | undefined),\n * structured: (boolean | undefined),\n * wildcard: (boolean | undefined)\n * }}\n */\nlet DataTrigger; //eslint-disable-line no-unused-vars\n\n/**\n * @typedef {{\n * info: ?,\n * trigger: (!DataTrigger | undefined),\n * fn: (!Function | undefined)\n * }}\n */\nlet DataEffect; //eslint-disable-line no-unused-vars\n\n/**\n * Ensures that the model has an own-property map of effects for the given type.\n * The model may be a prototype or an instance.\n *\n * Property effects are stored as arrays of effects by property in a map,\n * by named type on the model. e.g.\n *\n *   __computeEffects: {\n *     foo: [ ... ],\n *     bar: [ ... ]\n *   }\n *\n * If the model does not yet have an effect map for the type, one is created\n * and returned.  If it does, but it is not an own property (i.e. the\n * prototype had effects), the the map is deeply cloned and the copy is\n * set on the model and returned, ready for new effects to be added.\n *\n * @param {Object} model Prototype or instance\n * @param {string} type Property effect type\n * @param {boolean=} cloneArrays Clone any arrays assigned to the map when\n *   extending a superclass map onto this subclass\n * @return {Object} The own-property map of effects for the given type\n * @private\n */\nfunction ensureOwnEffectMap(model, type, cloneArrays) {\n  let effects = model[type];\n  if (!effects) {\n    effects = model[type] = {};\n  } else if (!model.hasOwnProperty(type)) {\n    effects = model[type] = Object.create(model[type]);\n    if (cloneArrays) {\n      for (let p in effects) {\n        let protoFx = effects[p];\n        // Perf optimization over Array.slice\n        let instFx = effects[p] = Array(protoFx.length);\n        for (let i=0; i<protoFx.length; i++) {\n          instFx[i] = protoFx[i];\n        }\n      }\n    }\n  }\n  return effects;\n}\n\n// -- effects ----------------------------------------------\n\n/**\n * Runs all effects of a given type for the given set of property changes\n * on an instance.\n *\n * @param {!Polymer_PropertyEffects} inst The instance with effects to run\n * @param {?Object} effects Object map of property-to-Array of effects\n * @param {?Object} props Bag of current property changes\n * @param {?Object=} oldProps Bag of previous values for changed properties\n * @param {boolean=} hasPaths True with `props` contains one or more paths\n * @param {*=} extraArgs Additional metadata to pass to effect function\n * @return {boolean} True if an effect ran for this property\n * @private\n */\nfunction runEffects(inst, effects, props, oldProps, hasPaths, extraArgs) {\n  if (effects) {\n    let ran = false;\n    const id = dedupeId++;\n    for (let prop in props) {\n      // Inline `runEffectsForProperty` for perf.\n      let rootProperty = hasPaths ? root(prop) : prop;\n      let fxs = effects[rootProperty];\n      if (fxs) {\n        for (let i=0, l=fxs.length, fx; (i<l) && (fx=fxs[i]); i++) {\n          if ((!fx.info || fx.info.lastRun !== id) &&\n              (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) {\n            if (fx.info) {\n              fx.info.lastRun = id;\n            }\n            fx.fn(inst, prop, props, oldProps, fx.info, hasPaths, extraArgs);\n            ran = true;\n          }\n        }\n      }\n    }\n    return ran;\n  }\n  return false;\n}\n\n/**\n * Runs a list of effects for a given property.\n *\n * @param {!Polymer_PropertyEffects} inst The instance with effects to run\n * @param {!Object} effects Object map of property-to-Array of effects\n * @param {number} dedupeId Counter used for de-duping effects\n * @param {string} prop Name of changed property\n * @param {*} props Changed properties\n * @param {*} oldProps Old properties\n * @param {boolean=} hasPaths True with `props` contains one or more paths\n * @param {*=} extraArgs Additional metadata to pass to effect function\n * @return {boolean} True if an effect ran for this property\n * @private\n */\nfunction runEffectsForProperty(inst, effects, dedupeId, prop, props, oldProps, hasPaths, extraArgs) {\n  let ran = false;\n  let rootProperty = hasPaths ? root(prop) : prop;\n  let fxs = effects[rootProperty];\n  if (fxs) {\n    for (let i=0, l=fxs.length, fx; (i<l) && (fx=fxs[i]); i++) {\n      if ((!fx.info || fx.info.lastRun !== dedupeId) &&\n          (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) {\n        if (fx.info) {\n          fx.info.lastRun = dedupeId;\n        }\n        fx.fn(inst, prop, props, oldProps, fx.info, hasPaths, extraArgs);\n        ran = true;\n      }\n    }\n  }\n  return ran;\n}\n\n/**\n * Determines whether a property/path that has changed matches the trigger\n * criteria for an effect.  A trigger is a descriptor with the following\n * structure, which matches the descriptors returned from `parseArg`.\n * e.g. for `foo.bar.*`:\n * ```\n * trigger: {\n *   name: 'a.b',\n *   structured: true,\n *   wildcard: true\n * }\n * ```\n * If no trigger is given, the path is deemed to match.\n *\n * @param {string} path Path or property that changed\n * @param {?DataTrigger} trigger Descriptor\n * @return {boolean} Whether the path matched the trigger\n */\nfunction pathMatchesTrigger(path, trigger) {\n  if (trigger) {\n    let triggerPath = /** @type {string} */ (trigger.name);\n    return (triggerPath == path) ||\n        !!(trigger.structured && isAncestor(triggerPath, path)) ||\n        !!(trigger.wildcard && isDescendant(triggerPath, path));\n  } else {\n    return true;\n  }\n}\n\n/**\n * Implements the \"observer\" effect.\n *\n * Calls the method with `info.methodName` on the instance, passing the\n * new and old values.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {void}\n * @private\n */\nfunction runObserverEffect(inst, property, props, oldProps, info) {\n  let fn = typeof info.method === \"string\" ? inst[info.method] : info.method;\n  let changedProp = info.property;\n  if (fn) {\n    fn.call(inst, inst.__data[changedProp], oldProps[changedProp]);\n  } else if (!info.dynamicFn) {\n    console.warn('observer method `' + info.method + '` not defined');\n  }\n}\n\n/**\n * Runs \"notify\" effects for a set of changed properties.\n *\n * This method differs from the generic `runEffects` method in that it\n * will dispatch path notification events in the case that the property\n * changed was a path and the root property for that path didn't have a\n * \"notify\" effect.  This is to maintain 1.0 behavior that did not require\n * `notify: true` to ensure object sub-property notifications were\n * sent.\n *\n * @param {!Polymer_PropertyEffects} inst The instance with effects to run\n * @param {Object} notifyProps Bag of properties to notify\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @return {void}\n * @private\n */\nfunction runNotifyEffects(inst, notifyProps, props, oldProps, hasPaths) {\n  // Notify\n  let fxs = inst[TYPES.NOTIFY];\n  let notified;\n  let id = dedupeId++;\n  // Try normal notify effects; if none, fall back to try path notification\n  for (let prop in notifyProps) {\n    if (notifyProps[prop]) {\n      if (fxs && runEffectsForProperty(inst, fxs, id, prop, props, oldProps, hasPaths)) {\n        notified = true;\n      } else if (hasPaths && notifyPath(inst, prop, props)) {\n        notified = true;\n      }\n    }\n  }\n  // Flush host if we actually notified and host was batching\n  // And the host has already initialized clients; this prevents\n  // an issue with a host observing data changes before clients are ready.\n  let host;\n  if (notified && (host = inst.__dataHost) && host._invalidateProperties) {\n    host._invalidateProperties();\n  }\n}\n\n/**\n * Dispatches {property}-changed events with path information in the detail\n * object to indicate a sub-path of the property was changed.\n *\n * @param {!Polymer_PropertyEffects} inst The element from which to fire the\n *     event\n * @param {string} path The path that was changed\n * @param {Object} props Bag of current property changes\n * @return {boolean} Returns true if the path was notified\n * @private\n */\nfunction notifyPath(inst, path, props) {\n  let rootProperty = root(path);\n  if (rootProperty !== path) {\n    let eventName = camelToDashCase(rootProperty) + '-changed';\n    dispatchNotifyEvent(inst, eventName, props[path], path);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Dispatches {property}-changed events to indicate a property (or path)\n * changed.\n *\n * @param {!Polymer_PropertyEffects} inst The element from which to fire the\n *     event\n * @param {string} eventName The name of the event to send\n *     ('{property}-changed')\n * @param {*} value The value of the changed property\n * @param {string | null | undefined} path If a sub-path of this property\n *     changed, the path that changed (optional).\n * @return {void}\n * @private\n * @suppress {invalidCasts}\n */\nfunction dispatchNotifyEvent(inst, eventName, value, path) {\n  let detail = {\n    value: value,\n    queueProperty: true\n  };\n  if (path) {\n    detail.path = path;\n  }\n  // As a performance optimization, we could elide the wrap here since notifying\n  // events are non-bubbling and shouldn't need retargeting. However, a very\n  // small number of internal tests failed in obscure ways, which may indicate\n  // user code relied on timing differences resulting from ShadyDOM flushing\n  // as a result of the wrapped `dispatchEvent`.\n  wrap(/** @type {!HTMLElement} */(inst)).dispatchEvent(new CustomEvent(eventName, { detail }));\n}\n\n/**\n * Implements the \"notify\" effect.\n *\n * Dispatches a non-bubbling event named `info.eventName` on the instance\n * with a detail object containing the new `value`.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @return {void}\n * @private\n */\nfunction runNotifyEffect(inst, property, props, oldProps, info, hasPaths) {\n  let rootProperty = hasPaths ? root(property) : property;\n  let path = rootProperty != property ? property : null;\n  let value = path ? get(inst, path) : inst.__data[property];\n  if (path && value === undefined) {\n    value = props[property];  // specifically for .splices\n  }\n  dispatchNotifyEvent(inst, info.eventName, value, path);\n}\n\n/**\n * Handler function for 2-way notification events. Receives context\n * information captured in the `addNotifyListener` closure from the\n * `__notifyListeners` metadata.\n *\n * Sets the value of the notified property to the host property or path.  If\n * the event contained path information, translate that path to the host\n * scope's name for that path first.\n *\n * @param {CustomEvent} event Notification event (e.g. '<property>-changed')\n * @param {!Polymer_PropertyEffects} inst Host element instance handling the\n *     notification event\n * @param {string} fromProp Child element property that was bound\n * @param {string} toPath Host property/path that was bound\n * @param {boolean} negate Whether the binding was negated\n * @return {void}\n * @private\n */\nfunction handleNotification(event, inst, fromProp, toPath, negate) {\n  let value;\n  let detail = /** @type {Object} */(event.detail);\n  let fromPath = detail && detail.path;\n  if (fromPath) {\n    toPath = translate(fromProp, toPath, fromPath);\n    value = detail && detail.value;\n  } else {\n    value = event.currentTarget[fromProp];\n  }\n  value = negate ? !value : value;\n  if (!inst[TYPES.READ_ONLY] || !inst[TYPES.READ_ONLY][toPath]) {\n    if (inst._setPendingPropertyOrPath(toPath, value, true, Boolean(fromPath))\n      && (!detail || !detail.queueProperty)) {\n      inst._invalidateProperties();\n    }\n  }\n}\n\n/**\n * Implements the \"reflect\" effect.\n *\n * Sets the attribute named `info.attrName` to the given property value.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {void}\n * @private\n */\nfunction runReflectEffect(inst, property, props, oldProps, info) {\n  let value = inst.__data[property];\n  if (sanitizeDOMValue) {\n    value = sanitizeDOMValue(value, info.attrName, 'attribute', /** @type {Node} */(inst));\n  }\n  inst._propertyToAttribute(property, info.attrName, value);\n}\n\n/**\n * Runs \"computed\" effects for a set of changed properties.\n *\n * This method differs from the generic `runEffects` method in that it\n * continues to run computed effects based on the output of each pass until\n * there are no more newly computed properties.  This ensures that all\n * properties that will be computed by the initial set of changes are\n * computed before other effects (binding propagation, observers, and notify)\n * run.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {?Object} changedProps Bag of changed properties\n * @param {?Object} oldProps Bag of previous values for changed properties\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @return {void}\n * @private\n */\nfunction runComputedEffects(inst, changedProps, oldProps, hasPaths) {\n  let computeEffects = inst[TYPES.COMPUTE];\n  if (computeEffects) {\n    if (orderedComputed) {\n      // Runs computed effects in efficient order by keeping a topologically-\n      // sorted queue of compute effects to run, and inserting subsequently\n      // invalidated effects as they are run\n      dedupeId++;\n      const order = getComputedOrder(inst);\n      const queue = [];\n      for (let p in changedProps) {\n        enqueueEffectsFor(p, computeEffects, queue, order, hasPaths);\n      }\n      let info;\n      while ((info = queue.shift())) {\n        if (runComputedEffect(inst, '', changedProps, oldProps, info)) {\n          enqueueEffectsFor(info.methodInfo, computeEffects, queue, order, hasPaths);\n        }\n      }\n      Object.assign(/** @type {!Object} */ (oldProps), inst.__dataOld);\n      Object.assign(/** @type {!Object} */ (changedProps), inst.__dataPending);\n      inst.__dataPending = null;\n    } else {\n      // Original Polymer 2.x computed effects order, which continues running\n      // effects until no further computed properties have been invalidated\n      let inputProps = changedProps;\n      while (runEffects(inst, computeEffects, inputProps, oldProps, hasPaths)) {\n        Object.assign(/** @type {!Object} */ (oldProps), inst.__dataOld);\n        Object.assign(/** @type {!Object} */ (changedProps), inst.__dataPending);\n        inputProps = inst.__dataPending;\n        inst.__dataPending = null;\n      }\n    }\n  }\n}\n\n/**\n * Inserts a computed effect into a queue, given the specified order. Performs\n * the insert using a binary search.\n *\n * Used by `orderedComputed: true` computed property algorithm.\n *\n * @param {Object} info Property effects metadata\n * @param {Array<Object>} queue Ordered queue of effects\n * @param {Map<string,number>} order Map of computed property name->topological\n *   sort order\n */\nconst insertEffect = (info, queue, order) => {\n  let start = 0;\n  let end = queue.length - 1;\n  let idx = -1;\n  while (start <= end) {\n    const mid = (start + end) >> 1;\n    // Note `methodInfo` is where the computed property name is stored in\n    // the effect metadata\n    const cmp = order.get(queue[mid].methodInfo) - order.get(info.methodInfo);\n    if (cmp < 0) {\n      start = mid + 1;\n    } else if (cmp > 0) {\n      end = mid - 1;\n    } else {\n      idx = mid;\n      break;\n    }\n  }\n  if (idx < 0) {\n    idx = end + 1;\n  }\n  queue.splice(idx, 0, info);\n};\n\n/**\n * Inserts all downstream computed effects invalidated by the specified property\n * into the topologically-sorted queue of effects to be run.\n *\n * Used by `orderedComputed: true` computed property algorithm.\n *\n * @param {string} prop Property name\n * @param {Object} computeEffects Computed effects for this element\n * @param {Array<Object>} queue Topologically-sorted queue of computed effects\n *   to be run\n * @param {Map<string,number>} order Map of computed property name->topological\n *   sort order\n * @param {boolean} hasPaths True with `changedProps` contains one or more paths\n */\nconst enqueueEffectsFor = (prop, computeEffects, queue, order, hasPaths) => {\n  const rootProperty = hasPaths ? root(prop) : prop;\n  const fxs = computeEffects[rootProperty];\n  if (fxs) {\n    for (let i=0; i<fxs.length; i++) {\n      const fx = fxs[i];\n      if ((fx.info.lastRun !== dedupeId) &&\n          (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) {\n        fx.info.lastRun = dedupeId;\n        insertEffect(fx.info, queue, order);\n      }\n    }\n  }\n};\n\n/**\n * Generates and retrieves a memoized map of computed property name to its\n * topologically-sorted order.\n *\n * The map is generated by first assigning a \"dependency count\" to each property\n * (defined as number properties it depends on, including its method for\n * \"dynamic functions\"). Any properties that have no dependencies are added to\n * the `ready` queue, which are properties whose order can be added to the final\n * order map. Properties are popped off the `ready` queue one by one and a.) added as\n * the next property in the order map, and b.) each property that it is a\n * dependency for has its dep count decremented (and if that property's dep\n * count goes to zero, it is added to the `ready` queue), until all properties\n * have been visited and ordered.\n *\n * Used by `orderedComputed: true` computed property algorithm.\n *\n * @param {!Polymer_PropertyEffects} inst The instance to retrieve the computed\n *   effect order for.\n * @return {Map<string,number>} Map of computed property name->topological sort\n *   order\n */\nfunction getComputedOrder(inst) {\n  let ordered = inst.constructor.__orderedComputedDeps;\n  if (!ordered) {\n    ordered = new Map();\n    const effects = inst[TYPES.COMPUTE];\n    let {counts, ready, total} = dependencyCounts(inst);\n    let curr;\n    while ((curr = ready.shift())) {\n      ordered.set(curr, ordered.size);\n      const computedByCurr = effects[curr];\n      if (computedByCurr) {\n        computedByCurr.forEach(fx => {\n          // Note `methodInfo` is where the computed property name is stored\n          const computedProp = fx.info.methodInfo;\n          --total;\n          if (--counts[computedProp] === 0) {\n            ready.push(computedProp);\n          }\n        });\n      }\n    }\n    if (total !== 0) {\n      const el = /** @type {HTMLElement} */ (inst);\n      console.warn(`Computed graph for ${el.localName} incomplete; circular?`);\n    }\n    inst.constructor.__orderedComputedDeps = ordered;\n  }\n  return ordered;\n}\n\n/**\n * Generates a map of property-to-dependency count (`counts`, where \"dependency\n * count\" is the number of dependencies a given property has assuming it is a\n * computed property, otherwise 0).  It also returns a pre-populated list of\n * `ready` properties that have no dependencies and a `total` count, which is\n * used for error-checking the graph.\n *\n * Used by `orderedComputed: true` computed property algorithm.\n *\n * @param {!Polymer_PropertyEffects} inst The instance to generate dependency\n *   counts for.\n * @return {!Object} Object containing `counts` map (property-to-dependency\n *   count) and pre-populated `ready` array of properties that had zero\n *   dependencies.\n */\nfunction dependencyCounts(inst) {\n  const infoForComputed = inst[COMPUTE_INFO];\n  const counts = {};\n  const computedDeps = inst[TYPES.COMPUTE];\n  const ready = [];\n  let total = 0;\n  // Count dependencies for each computed property\n  for (let p in infoForComputed) {\n    const info = infoForComputed[p];\n    // Be sure to add the method name itself in case of \"dynamic functions\"\n    total += counts[p] =\n      info.args.filter(a => !a.literal).length + (info.dynamicFn ? 1 : 0);\n  }\n  // Build list of ready properties (that aren't themselves computed)\n  for (let p in computedDeps) {\n    if (!infoForComputed[p]) {\n      ready.push(p);\n    }\n  }\n  return {counts, ready, total};\n}\n\n/**\n * Implements the \"computed property\" effect by running the method with the\n * values of the arguments specified in the `info` object and setting the\n * return value to the computed property specified.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {?Object} changedProps Bag of current property changes\n * @param {?Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {boolean} True when the property being computed changed\n * @private\n */\nfunction runComputedEffect(inst, property, changedProps, oldProps, info) {\n  // Dirty check dependencies and run if any invalid\n  let result = runMethodEffect(inst, property, changedProps, oldProps, info);\n  // Abort if method returns a no-op result\n  if (result === NOOP) {\n    return false;\n  }\n  let computedProp = info.methodInfo;\n  if (inst.__dataHasAccessor && inst.__dataHasAccessor[computedProp]) {\n    return inst._setPendingProperty(computedProp, result, true);\n  } else {\n    inst[computedProp] = result;\n    return false;\n  }\n}\n\n/**\n * Computes path changes based on path links set up using the `linkPaths`\n * API.\n *\n * @param {!Polymer_PropertyEffects} inst The instance whose props are changing\n * @param {string} path Path that has changed\n * @param {*} value Value of changed path\n * @return {void}\n * @private\n */\nfunction computeLinkedPaths(inst, path, value) {\n  let links = inst.__dataLinkedPaths;\n  if (links) {\n    let link;\n    for (let a in links) {\n      let b = links[a];\n      if (isDescendant(a, path)) {\n        link = translate(a, b, path);\n        inst._setPendingPropertyOrPath(link, value, true, true);\n      } else if (isDescendant(b, path)) {\n        link = translate(b, a, path);\n        inst._setPendingPropertyOrPath(link, value, true, true);\n      }\n    }\n  }\n}\n\n// -- bindings ----------------------------------------------\n\n/**\n * Adds binding metadata to the current `nodeInfo`, and binding effects\n * for all part dependencies to `templateInfo`.\n *\n * @param {Function} constructor Class that `_parseTemplate` is currently\n *   running on\n * @param {TemplateInfo} templateInfo Template metadata for current template\n * @param {NodeInfo} nodeInfo Node metadata for current template node\n * @param {string} kind Binding kind, either 'property', 'attribute', or 'text'\n * @param {string} target Target property name\n * @param {!Array<!BindingPart>} parts Array of binding part metadata\n * @param {string=} literal Literal text surrounding binding parts (specified\n *   only for 'property' bindings, since these must be initialized as part\n *   of boot-up)\n * @return {void}\n * @private\n */\nfunction addBinding(constructor, templateInfo, nodeInfo, kind, target, parts, literal) {\n  // Create binding metadata and add to nodeInfo\n  nodeInfo.bindings = nodeInfo.bindings || [];\n  let /** Binding */ binding = { kind, target, parts, literal, isCompound: (parts.length !== 1) };\n  nodeInfo.bindings.push(binding);\n  // Add listener info to binding metadata\n  if (shouldAddListener(binding)) {\n    let {event, negate} = binding.parts[0];\n    binding.listenerEvent = event || (camelToDashCase(target) + '-changed');\n    binding.listenerNegate = negate;\n  }\n  // Add \"propagate\" property effects to templateInfo\n  let index = templateInfo.nodeInfoList.length;\n  for (let i=0; i<binding.parts.length; i++) {\n    let part = binding.parts[i];\n    part.compoundIndex = i;\n    addEffectForBindingPart(constructor, templateInfo, binding, part, index);\n  }\n}\n\n/**\n * Adds property effects to the given `templateInfo` for the given binding\n * part.\n *\n * @param {Function} constructor Class that `_parseTemplate` is currently\n *   running on\n * @param {TemplateInfo} templateInfo Template metadata for current template\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @param {number} index Index into `nodeInfoList` for this node\n * @return {void}\n */\nfunction addEffectForBindingPart(constructor, templateInfo, binding, part, index) {\n  if (!part.literal) {\n    if (binding.kind === 'attribute' && binding.target[0] === '-') {\n      console.warn('Cannot set attribute ' + binding.target +\n        ' because \"-\" is not a valid attribute starting character');\n    } else {\n      let dependencies = part.dependencies;\n      let info = { index, binding, part, evaluator: constructor };\n      for (let j=0; j<dependencies.length; j++) {\n        let trigger = dependencies[j];\n        if (typeof trigger == 'string') {\n          trigger = parseArg(trigger);\n          trigger.wildcard = true;\n        }\n        constructor._addTemplatePropertyEffect(templateInfo, trigger.rootProperty, {\n          fn: runBindingEffect,\n          info, trigger\n        });\n      }\n    }\n  }\n}\n\n/**\n * Implements the \"binding\" (property/path binding) effect.\n *\n * Note that binding syntax is overridable via `_parseBindings` and\n * `_evaluateBinding`.  This method will call `_evaluateBinding` for any\n * non-literal parts returned from `_parseBindings`.  However,\n * there is no support for _path_ bindings via custom binding parts,\n * as this is specific to Polymer's path binding syntax.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} path Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @param {Array} nodeList List of nodes associated with `nodeInfoList` template\n *   metadata\n * @return {void}\n * @private\n */\nfunction runBindingEffect(inst, path, props, oldProps, info, hasPaths, nodeList) {\n  let node = nodeList[info.index];\n  let binding = info.binding;\n  let part = info.part;\n  // Subpath notification: transform path and set to client\n  // e.g.: foo=\"{{obj.sub}}\", path: 'obj.sub.prop', set 'foo.prop'=obj.sub.prop\n  if (hasPaths && part.source && (path.length > part.source.length) &&\n      (binding.kind == 'property') && !binding.isCompound &&\n      node.__isPropertyEffectsClient &&\n      node.__dataHasAccessor && node.__dataHasAccessor[binding.target]) {\n    let value = props[path];\n    path = translate(part.source, binding.target, path);\n    if (node._setPendingPropertyOrPath(path, value, false, true)) {\n      inst._enqueueClient(node);\n    }\n  } else {\n    let value = info.evaluator._evaluateBinding(inst, part, path, props, oldProps, hasPaths);\n    // Propagate value to child\n    // Abort if value is a no-op result\n    if (value !== NOOP) {\n      applyBindingValue(inst, node, binding, part, value);\n    }\n  }\n}\n\n/**\n * Sets the value for an \"binding\" (binding) effect to a node,\n * either as a property or attribute.\n *\n * @param {!Polymer_PropertyEffects} inst The instance owning the binding effect\n * @param {Node} node Target node for binding\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @param {*} value Value to set\n * @return {void}\n * @private\n */\nfunction applyBindingValue(inst, node, binding, part, value) {\n  value = computeBindingValue(node, value, binding, part);\n  if (sanitizeDOMValue) {\n    value = sanitizeDOMValue(value, binding.target, binding.kind, node);\n  }\n  if (binding.kind == 'attribute') {\n    // Attribute binding\n    inst._valueToNodeAttribute(/** @type {Element} */(node), value, binding.target);\n  } else {\n    // Property binding\n    let prop = binding.target;\n    if (node.__isPropertyEffectsClient &&\n        node.__dataHasAccessor && node.__dataHasAccessor[prop]) {\n      if (!node[TYPES.READ_ONLY] || !node[TYPES.READ_ONLY][prop]) {\n        if (node._setPendingProperty(prop, value)) {\n          inst._enqueueClient(node);\n        }\n      }\n    } else {\n      // In legacy no-batching mode, bindings applied before dataReady are\n      // equivalent to the \"apply config\" phase, which only set managed props\n      inst._setUnmanagedPropertyToNode(node, prop, value);\n    }\n  }\n}\n\n/**\n * Transforms an \"binding\" effect value based on compound & negation\n * effect metadata, as well as handling for special-case properties\n *\n * @param {Node} node Node the value will be set to\n * @param {*} value Value to set\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @return {*} Transformed value to set\n * @private\n */\nfunction computeBindingValue(node, value, binding, part) {\n  if (binding.isCompound) {\n    let storage = node.__dataCompoundStorage[binding.target];\n    storage[part.compoundIndex] = value;\n    value = storage.join('');\n  }\n  if (binding.kind !== 'attribute') {\n    // Some browsers serialize `undefined` to `\"undefined\"`\n    if (binding.target === 'textContent' ||\n        (binding.target === 'value' &&\n          (node.localName === 'input' || node.localName === 'textarea'))) {\n      value = value == undefined ? '' : value;\n    }\n  }\n  return value;\n}\n\n/**\n * Returns true if a binding's metadata meets all the requirements to allow\n * 2-way binding, and therefore a `<property>-changed` event listener should be\n * added:\n * - used curly braces\n * - is a property (not attribute) binding\n * - is not a textContent binding\n * - is not compound\n *\n * @param {!Binding} binding Binding metadata\n * @return {boolean} True if 2-way listener should be added\n * @private\n */\nfunction shouldAddListener(binding) {\n  return Boolean(binding.target) &&\n         binding.kind != 'attribute' &&\n         binding.kind != 'text' &&\n         !binding.isCompound &&\n         binding.parts[0].mode === '{';\n}\n\n/**\n * Setup compound binding storage structures, notify listeners, and dataHost\n * references onto the bound nodeList.\n *\n * @param {!Polymer_PropertyEffects} inst Instance that bas been previously\n *     bound\n * @param {TemplateInfo} templateInfo Template metadata\n * @return {void}\n * @private\n */\nfunction setupBindings(inst, templateInfo) {\n  // Setup compound storage, dataHost, and notify listeners\n  let {nodeList, nodeInfoList} = templateInfo;\n  if (nodeInfoList.length) {\n    for (let i=0; i < nodeInfoList.length; i++) {\n      let info = nodeInfoList[i];\n      let node = nodeList[i];\n      let bindings = info.bindings;\n      if (bindings) {\n        for (let i=0; i<bindings.length; i++) {\n          let binding = bindings[i];\n          setupCompoundStorage(node, binding);\n          addNotifyListener(node, inst, binding);\n        }\n      }\n      // This ensures all bound elements have a host set, regardless\n      // of whether they upgrade synchronous to creation\n      node.__dataHost = inst;\n    }\n  }\n}\n\n/**\n * Initializes `__dataCompoundStorage` local storage on a bound node with\n * initial literal data for compound bindings, and sets the joined\n * literal parts to the bound property.\n *\n * When changes to compound parts occur, they are first set into the compound\n * storage array for that property, and then the array is joined to result in\n * the final value set to the property/attribute.\n *\n * @param {Node} node Bound node to initialize\n * @param {Binding} binding Binding metadata\n * @return {void}\n * @private\n */\nfunction setupCompoundStorage(node, binding) {\n  if (binding.isCompound) {\n    // Create compound storage map\n    let storage = node.__dataCompoundStorage ||\n      (node.__dataCompoundStorage = {});\n    let parts = binding.parts;\n    // Copy literals from parts into storage for this binding\n    let literals = new Array(parts.length);\n    for (let j=0; j<parts.length; j++) {\n      literals[j] = parts[j].literal;\n    }\n    let target = binding.target;\n    storage[target] = literals;\n    // Configure properties with their literal parts\n    if (binding.literal && binding.kind == 'property') {\n      // Note, className needs style scoping so this needs wrapping.\n      // We may also want to consider doing this for `textContent` and\n      // `innerHTML`.\n      if (target === 'className') {\n        node = wrap(node);\n      }\n      node[target] = binding.literal;\n    }\n  }\n}\n\n/**\n * Adds a 2-way binding notification event listener to the node specified\n *\n * @param {Object} node Child element to add listener to\n * @param {!Polymer_PropertyEffects} inst Host element instance to handle\n *     notification event\n * @param {Binding} binding Binding metadata\n * @return {void}\n * @private\n */\nfunction addNotifyListener(node, inst, binding) {\n  if (binding.listenerEvent) {\n    let part = binding.parts[0];\n    node.addEventListener(binding.listenerEvent, function(e) {\n      handleNotification(e, inst, binding.target, part.source, part.negate);\n    });\n  }\n}\n\n// -- for method-based effects (complexObserver & computed) --------------\n\n/**\n * Adds property effects for each argument in the method signature (and\n * optionally, for the method name if `dynamic` is true) that calls the\n * provided effect function.\n *\n * @param {Element | Object} model Prototype or instance\n * @param {!MethodSignature} sig Method signature metadata\n * @param {string} type Type of property effect to add\n * @param {Function} effectFn Function to run when arguments change\n * @param {*=} methodInfo Effect-specific information to be included in\n *   method effect metadata\n * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n *   method names should be included as a dependency to the effect. Note,\n *   defaults to true if the signature is static (sig.static is true).\n * @return {!Object} Effect metadata for this method effect\n * @private\n */\nfunction createMethodEffect(model, sig, type, effectFn, methodInfo, dynamicFn) {\n  dynamicFn = sig.static || (dynamicFn &&\n    (typeof dynamicFn !== 'object' || dynamicFn[sig.methodName]));\n  let info = {\n    methodName: sig.methodName,\n    args: sig.args,\n    methodInfo,\n    dynamicFn\n  };\n  for (let i=0, arg; (i<sig.args.length) && (arg=sig.args[i]); i++) {\n    if (!arg.literal) {\n      model._addPropertyEffect(arg.rootProperty, type, {\n        fn: effectFn, info: info, trigger: arg\n      });\n    }\n  }\n  if (dynamicFn) {\n    model._addPropertyEffect(sig.methodName, type, {\n      fn: effectFn, info: info\n    });\n  }\n  return info;\n}\n\n/**\n * Calls a method with arguments marshaled from properties on the instance\n * based on the method signature contained in the effect metadata.\n *\n * Multi-property observers, computed properties, and inline computing\n * functions call this function to invoke the method, then use the return\n * value accordingly.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {*} Returns the return value from the method invocation\n * @private\n */\nfunction runMethodEffect(inst, property, props, oldProps, info) {\n  // Instances can optionally have a _methodHost which allows redirecting where\n  // to find methods. Currently used by `templatize`.\n  let context = inst._methodHost || inst;\n  let fn = context[info.methodName];\n  if (fn) {\n    let args = inst._marshalArgs(info.args, property, props);\n    return args === NOOP ? NOOP : fn.apply(context, args);\n  } else if (!info.dynamicFn) {\n    console.warn('method `' + info.methodName + '` not defined');\n  }\n}\n\nconst emptyArray = [];\n\n// Regular expressions used for binding\nconst IDENT  = '(?:' + '[a-zA-Z_$][\\\\w.:$\\\\-*]*' + ')';\nconst NUMBER = '(?:' + '[-+]?[0-9]*\\\\.?[0-9]+(?:[eE][-+]?[0-9]+)?' + ')';\nconst SQUOTE_STRING = '(?:' + '\\'(?:[^\\'\\\\\\\\]|\\\\\\\\.)*\\'' + ')';\nconst DQUOTE_STRING = '(?:' + '\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"' + ')';\nconst STRING = '(?:' + SQUOTE_STRING + '|' + DQUOTE_STRING + ')';\nconst ARGUMENT = '(?:(' + IDENT + '|' + NUMBER + '|' +  STRING + ')\\\\s*' + ')';\nconst ARGUMENTS = '(?:' + ARGUMENT + '(?:,\\\\s*' + ARGUMENT + ')*' + ')';\nconst ARGUMENT_LIST = '(?:' + '\\\\(\\\\s*' +\n                              '(?:' + ARGUMENTS + '?' + ')' +\n                            '\\\\)\\\\s*' + ')';\nconst BINDING = '(' + IDENT + '\\\\s*' + ARGUMENT_LIST + '?' + ')'; // Group 3\nconst OPEN_BRACKET = '(\\\\[\\\\[|{{)' + '\\\\s*';\nconst CLOSE_BRACKET = '(?:]]|}})';\nconst NEGATE = '(?:(!)\\\\s*)?'; // Group 2\nconst EXPRESSION = OPEN_BRACKET + NEGATE + BINDING + CLOSE_BRACKET;\nconst bindingRegex = new RegExp(EXPRESSION, \"g\");\n\n/**\n * Create a string from binding parts of all the literal parts\n *\n * @param {!Array<BindingPart>} parts All parts to stringify\n * @return {string} String made from the literal parts\n */\nfunction literalFromParts(parts) {\n  let s = '';\n  for (let i=0; i<parts.length; i++) {\n    let literal = parts[i].literal;\n    s += literal || '';\n  }\n  return s;\n}\n\n/**\n * Parses an expression string for a method signature, and returns a metadata\n * describing the method in terms of `methodName`, `static` (whether all the\n * arguments are literals), and an array of `args`\n *\n * @param {string} expression The expression to parse\n * @return {?MethodSignature} The method metadata object if a method expression was\n *   found, otherwise `undefined`\n * @private\n */\nfunction parseMethod(expression) {\n  // tries to match valid javascript property names\n  let m = expression.match(/([^\\s]+?)\\(([\\s\\S]*)\\)/);\n  if (m) {\n    let methodName = m[1];\n    let sig = { methodName, static: true, args: emptyArray };\n    if (m[2].trim()) {\n      // replace escaped commas with comma entity, split on un-escaped commas\n      let args = m[2].replace(/\\\\,/g, '&comma;').split(',');\n      return parseArgs(args, sig);\n    } else {\n      return sig;\n    }\n  }\n  return null;\n}\n\n/**\n * Parses an array of arguments and sets the `args` property of the supplied\n * signature metadata object. Sets the `static` property to false if any\n * argument is a non-literal.\n *\n * @param {!Array<string>} argList Array of argument names\n * @param {!MethodSignature} sig Method signature metadata object\n * @return {!MethodSignature} The updated signature metadata object\n * @private\n */\nfunction parseArgs(argList, sig) {\n  sig.args = argList.map(function(rawArg) {\n    let arg = parseArg(rawArg);\n    if (!arg.literal) {\n      sig.static = false;\n    }\n    return arg;\n  }, this);\n  return sig;\n}\n\n/**\n * Parses an individual argument, and returns an argument metadata object\n * with the following fields:\n *\n *   {\n *     value: 'prop',        // property/path or literal value\n *     literal: false,       // whether argument is a literal\n *     structured: false,    // whether the property is a path\n *     rootProperty: 'prop', // the root property of the path\n *     wildcard: false       // whether the argument was a wildcard '.*' path\n *   }\n *\n * @param {string} rawArg The string value of the argument\n * @return {!MethodArg} Argument metadata object\n * @private\n */\nfunction parseArg(rawArg) {\n  // clean up whitespace\n  let arg = rawArg.trim()\n    // replace comma entity with comma\n    .replace(/&comma;/g, ',')\n    // repair extra escape sequences; note only commas strictly need\n    // escaping, but we allow any other char to be escaped since its\n    // likely users will do this\n    .replace(/\\\\(.)/g, '\\$1')\n    ;\n  // basic argument descriptor\n  let a = {\n    name: arg,\n    value: '',\n    literal: false\n  };\n  // detect literal value (must be String or Number)\n  let fc = arg[0];\n  if (fc === '-') {\n    fc = arg[1];\n  }\n  if (fc >= '0' && fc <= '9') {\n    fc = '#';\n  }\n  switch(fc) {\n    case \"'\":\n    case '\"':\n      a.value = arg.slice(1, -1);\n      a.literal = true;\n      break;\n    case '#':\n      a.value = Number(arg);\n      a.literal = true;\n      break;\n  }\n  // if not literal, look for structured path\n  if (!a.literal) {\n    a.rootProperty = root(arg);\n    // detect structured path (has dots)\n    a.structured = isPath(arg);\n    if (a.structured) {\n      a.wildcard = (arg.slice(-2) == '.*');\n      if (a.wildcard) {\n        a.name = arg.slice(0, -2);\n      }\n    }\n  }\n  return a;\n}\n\nfunction getArgValue(data, props, path) {\n  let value = get(data, path);\n  // when data is not stored e.g. `splices`, get the value from changedProps\n  // TODO(kschaaf): Note, this can cause a rare issue where the wildcard\n  // info.value could pull a stale value out of changedProps during a reentrant\n  // change that sets the value back to undefined.\n  // https://github.com/Polymer/polymer/issues/5479\n  if (value === undefined) {\n    value = props[path];\n  }\n  return value;\n}\n\n// data api\n\n/**\n * Sends array splice notifications (`.splices` and `.length`)\n *\n * Note: this implementation only accepts normalized paths\n *\n * @param {!Polymer_PropertyEffects} inst Instance to send notifications to\n * @param {Array} array The array the mutations occurred on\n * @param {string} path The path to the array that was mutated\n * @param {Array} splices Array of splice records\n * @return {void}\n * @private\n */\nfunction notifySplices(inst, array, path, splices) {\n  const splicesData = { indexSplices: splices };\n  // Legacy behavior stored splices in `__data__` so it was *not* ephemeral.\n  // To match this behavior, we store splices directly on the array.\n  if (legacyUndefined && !inst._overrideLegacyUndefined) {\n    array.splices = splicesData;\n  }\n  inst.notifyPath(path + '.splices', splicesData);\n  inst.notifyPath(path + '.length', array.length);\n  // Clear splice data only when it's stored on the array.\n  if (legacyUndefined && !inst._overrideLegacyUndefined) {\n    splicesData.indexSplices = [];\n  }\n}\n\n/**\n * Creates a splice record and sends an array splice notification for\n * the described mutation\n *\n * Note: this implementation only accepts normalized paths\n *\n * @param {!Polymer_PropertyEffects} inst Instance to send notifications to\n * @param {Array} array The array the mutations occurred on\n * @param {string} path The path to the array that was mutated\n * @param {number} index Index at which the array mutation occurred\n * @param {number} addedCount Number of added items\n * @param {Array} removed Array of removed items\n * @return {void}\n * @private\n */\nfunction notifySplice(inst, array, path, index, addedCount, removed) {\n  notifySplices(inst, array, path, [{\n    index: index,\n    addedCount: addedCount,\n    removed: removed,\n    object: array,\n    type: 'splice'\n  }]);\n}\n\n/**\n * Returns an upper-cased version of the string.\n *\n * @param {string} name String to uppercase\n * @return {string} Uppercased string\n * @private\n */\nfunction upper(name) {\n  return name[0].toUpperCase() + name.substring(1);\n}\n\n/**\n * Element class mixin that provides meta-programming for Polymer's template\n * binding and data observation (collectively, \"property effects\") system.\n *\n * This mixin uses provides the following key static methods for adding\n * property effects to an element class:\n * - `addPropertyEffect`\n * - `createPropertyObserver`\n * - `createMethodObserver`\n * - `createNotifyingProperty`\n * - `createReadOnlyProperty`\n * - `createReflectedProperty`\n * - `createComputedProperty`\n * - `bindTemplate`\n *\n * Each method creates one or more property accessors, along with metadata\n * used by this mixin's implementation of `_propertiesChanged` to perform\n * the property effects.\n *\n * Underscored versions of the above methods also exist on the element\n * prototype for adding property effects on instances at runtime.\n *\n * Note that this mixin overrides several `PropertyAccessors` methods, in\n * many cases to maintain guarantees provided by the Polymer 1.x features;\n * notably it changes property accessors to be synchronous by default\n * whereas the default when using `PropertyAccessors` standalone is to be\n * async by default.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin TemplateStamp\n * @appliesMixin PropertyAccessors\n * @summary Element class mixin that provides meta-programming for Polymer's\n * template binding and data observation system.\n */\nexport const PropertyEffects = dedupingMixin(superClass => {\n\n  /**\n   * @constructor\n   * @implements {Polymer_PropertyAccessors}\n   * @implements {Polymer_TemplateStamp}\n   * @unrestricted\n   * @private\n   */\n  const propertyEffectsBase = TemplateStamp(PropertyAccessors(superClass));\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_PropertyEffects}\n   * @extends {propertyEffectsBase}\n   * @unrestricted\n   */\n  class PropertyEffects extends propertyEffectsBase {\n\n    constructor() {\n      super();\n      /** @type {boolean} */\n      // Used to identify users of this mixin, ala instanceof\n      this.__isPropertyEffectsClient = true;\n      /** @type {boolean} */\n      this.__dataClientsReady;\n      /** @type {Array} */\n      this.__dataPendingClients;\n      /** @type {Object} */\n      this.__dataToNotify;\n      /** @type {Object} */\n      this.__dataLinkedPaths;\n      /** @type {boolean} */\n      this.__dataHasPaths;\n      /** @type {Object} */\n      this.__dataCompoundStorage;\n      /** @type {Polymer_PropertyEffects} */\n      this.__dataHost;\n      /** @type {!Object} */\n      this.__dataTemp;\n      /** @type {boolean} */\n      this.__dataClientsInitialized;\n      /** @type {!Object} */\n      this.__data;\n      /** @type {!Object|null} */\n      this.__dataPending;\n      /** @type {!Object} */\n      this.__dataOld;\n      /** @type {Object} */\n      this.__computeEffects;\n      /** @type {Object} */\n      this.__computeInfo;\n      /** @type {Object} */\n      this.__reflectEffects;\n      /** @type {Object} */\n      this.__notifyEffects;\n      /** @type {Object} */\n      this.__propagateEffects;\n      /** @type {Object} */\n      this.__observeEffects;\n      /** @type {Object} */\n      this.__readOnly;\n      /** @type {!TemplateInfo} */\n      this.__templateInfo;\n      /** @type {boolean} */\n      this._overrideLegacyUndefined;\n    }\n\n    get PROPERTY_EFFECT_TYPES() {\n      return TYPES;\n    }\n\n    /**\n     * @override\n     * @return {void}\n     */\n    _initializeProperties() {\n      super._initializeProperties();\n      this._registerHost();\n      this.__dataClientsReady = false;\n      this.__dataPendingClients = null;\n      this.__dataToNotify = null;\n      this.__dataLinkedPaths = null;\n      this.__dataHasPaths = false;\n      // May be set on instance prior to upgrade\n      this.__dataCompoundStorage = this.__dataCompoundStorage || null;\n      this.__dataHost = this.__dataHost || null;\n      this.__dataTemp = {};\n      this.__dataClientsInitialized = false;\n    }\n\n    _registerHost() {\n      if (hostStack.length) {\n        let host = hostStack[hostStack.length-1];\n        host._enqueueClient(this);\n        // This ensures even non-bound elements have a host set, as\n        // long as they upgrade synchronously\n        this.__dataHost = host;\n      }\n    }\n\n    /**\n     * Overrides `PropertyAccessors` implementation to provide a\n     * more efficient implementation of initializing properties from\n     * the prototype on the instance.\n     *\n     * @override\n     * @param {Object} props Properties to initialize on the prototype\n     * @return {void}\n     */\n    _initializeProtoProperties(props) {\n      this.__data = Object.create(props);\n      this.__dataPending = Object.create(props);\n      this.__dataOld = {};\n    }\n\n    /**\n     * Overrides `PropertyAccessors` implementation to avoid setting\n     * `_setProperty`'s `shouldNotify: true`.\n     *\n     * @override\n     * @param {Object} props Properties to initialize on the instance\n     * @return {void}\n     */\n    _initializeInstanceProperties(props) {\n      let readOnly = this[TYPES.READ_ONLY];\n      for (let prop in props) {\n        if (!readOnly || !readOnly[prop]) {\n          this.__dataPending = this.__dataPending || {};\n          this.__dataOld = this.__dataOld || {};\n          this.__data[prop] = this.__dataPending[prop] = props[prop];\n        }\n      }\n    }\n\n    // Prototype setup ----------------------------------------\n\n    /**\n     * Equivalent to static `addPropertyEffect` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Property that should trigger the effect\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     */\n    _addPropertyEffect(property, type, effect) {\n      this._createPropertyAccessor(property, type == TYPES.READ_ONLY);\n      // effects are accumulated into arrays per property based on type\n      let effects = ensureOwnEffectMap(this, type, true)[property];\n      if (!effects) {\n        effects = this[type][property] = [];\n      }\n      effects.push(effect);\n    }\n\n    /**\n     * Removes the given property effect.\n     *\n     * @override\n     * @param {string} property Property the effect was associated with\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object to remove\n     * @return {void}\n     */\n    _removePropertyEffect(property, type, effect) {\n      let effects = ensureOwnEffectMap(this, type, true)[property];\n      let idx = effects.indexOf(effect);\n      if (idx >= 0) {\n        effects.splice(idx, 1);\n      }\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a property effect\n     * of a certain type.\n     *\n     * @override\n     * @param {string} property Property name\n     * @param {string=} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @return {boolean} True if the prototype/instance has an effect of this\n     *     type\n     * @protected\n     */\n    _hasPropertyEffect(property, type) {\n      let effects = this[type];\n      return Boolean(effects && effects[property]);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"read only\"\n     * accessor for the given property.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this\n     *     type\n     * @protected\n     */\n    _hasReadOnlyEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.READ_ONLY);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"notify\"\n     * property effect for the given property.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this\n     *     type\n     * @protected\n     */\n    _hasNotifyEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.NOTIFY);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"reflect to\n     * attribute\" property effect for the given property.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this\n     *     type\n     * @protected\n     */\n    _hasReflectEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.REFLECT);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"computed\"\n     * property effect for the given property.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this\n     *     type\n     * @protected\n     */\n    _hasComputedEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.COMPUTE);\n    }\n\n    // Runtime ----------------------------------------\n\n    /**\n     * Sets a pending property or path.  If the root property of the path in\n     * question had no accessor, the path is set, otherwise it is enqueued\n     * via `_setPendingProperty`.\n     *\n     * This function isolates relatively expensive functionality necessary\n     * for the public API (`set`, `setProperties`, `notifyPath`, and property\n     * change listeners via {{...}} bindings), such that it is only done\n     * when paths enter the system, and not at every propagation step.  It\n     * also sets a `__dataHasPaths` flag on the instance which is used to\n     * fast-path slower path-matching code in the property effects host paths.\n     *\n     * `path` can be a path string or array of path parts as accepted by the\n     * public API.\n     *\n     * @override\n     * @param {string | !Array<number|string>} path Path to set\n     * @param {*} value Value to set\n     * @param {boolean=} shouldNotify Set to true if this change should\n     *  cause a property notification event dispatch\n     * @param {boolean=} isPathNotification If the path being set is a path\n     *   notification of an already changed value, as opposed to a request\n     *   to set and notify the change.  In the latter `false` case, a dirty\n     *   check is performed and then the value is set to the path before\n     *   enqueuing the pending property change.\n     * @return {boolean} Returns true if the property/path was enqueued in\n     *   the pending changes bag.\n     * @protected\n     */\n    _setPendingPropertyOrPath(path, value, shouldNotify, isPathNotification) {\n      if (isPathNotification ||\n          root(Array.isArray(path) ? path[0] : path) !== path) {\n        // Dirty check changes being set to a path against the actual object,\n        // since this is the entry point for paths into the system; from here\n        // the only dirty checks are against the `__dataTemp` cache to prevent\n        // duplicate work in the same turn only. Note, if this was a notification\n        // of a change already set to a path (isPathNotification: true),\n        // we always let the change through and skip the `set` since it was\n        // already dirty checked at the point of entry and the underlying\n        // object has already been updated\n        if (!isPathNotification) {\n          let old = get(this, path);\n          path = /** @type {string} */ (set(this, path, value));\n          // Use property-accessor's simpler dirty check\n          if (!path || !super._shouldPropertyChange(path, value, old)) {\n            return false;\n          }\n        }\n        this.__dataHasPaths = true;\n        if (this._setPendingProperty(/**@type{string}*/(path), value, shouldNotify)) {\n          computeLinkedPaths(this, /**@type{string}*/ (path), value);\n          return true;\n        }\n      } else {\n        if (this.__dataHasAccessor && this.__dataHasAccessor[path]) {\n          return this._setPendingProperty(/**@type{string}*/(path), value, shouldNotify);\n        } else {\n          this[path] = value;\n        }\n      }\n      return false;\n    }\n\n    /**\n     * Applies a value to a non-Polymer element/node's property.\n     *\n     * The implementation makes a best-effort at binding interop:\n     * Some native element properties have side-effects when\n     * re-setting the same value (e.g. setting `<input>.value` resets the\n     * cursor position), so we do a dirty-check before setting the value.\n     * However, for better interop with non-Polymer custom elements that\n     * accept objects, we explicitly re-set object changes coming from the\n     * Polymer world (which may include deep object changes without the\n     * top reference changing), erring on the side of providing more\n     * information.\n     *\n     * Users may override this method to provide alternate approaches.\n     *\n     * @override\n     * @param {!Node} node The node to set a property on\n     * @param {string} prop The property to set\n     * @param {*} value The value to set\n     * @return {void}\n     * @protected\n     */\n    _setUnmanagedPropertyToNode(node, prop, value) {\n      // It is a judgment call that resetting primitives is\n      // \"bad\" and resettings objects is also \"good\"; alternatively we could\n      // implement a whitelist of tag & property values that should never\n      // be reset (e.g. <input>.value && <select>.value)\n      if (value !== node[prop] || typeof value == 'object') {\n        // Note, className needs style scoping so this needs wrapping.\n        if (prop === 'className') {\n          node = /** @type {!Node} */(wrap(node));\n        }\n        node[prop] = value;\n      }\n    }\n\n    /**\n     * Overrides the `PropertiesChanged` implementation to introduce special\n     * dirty check logic depending on the property & value being set:\n     *\n     * 1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n     *    Stored in `__dataTemp`, dirty checked against `__dataTemp`\n     * 2. Object set to simple property (e.g. 'prop': {...})\n     *    Stored in `__dataTemp` and `__data`, dirty checked against\n     *    `__dataTemp` by default implementation of `_shouldPropertyChange`\n     * 3. Primitive value set to simple property (e.g. 'prop': 42)\n     *    Stored in `__data`, dirty checked against `__data`\n     *\n     * The dirty-check is important to prevent cycles due to two-way\n     * notification, but paths and objects are only dirty checked against any\n     * previous value set during this turn via a \"temporary cache\" that is\n     * cleared when the last `_propertiesChanged` exits. This is so:\n     * a. any cached array paths (e.g. 'array.3.prop') may be invalidated\n     *    due to array mutations like shift/unshift/splice; this is fine\n     *    since path changes are dirty-checked at user entry points like `set`\n     * b. dirty-checking for objects only lasts one turn to allow the user\n     *    to mutate the object in-place and re-set it with the same identity\n     *    and have all sub-properties re-propagated in a subsequent turn.\n     *\n     * The temp cache is not necessarily sufficient to prevent invalid array\n     * paths, since a splice can happen during the same turn (with pathological\n     * user code); we could introduce a \"fixup\" for temporarily cached array\n     * paths if needed: https://github.com/Polymer/polymer/issues/4227\n     *\n     * @override\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @param {boolean=} shouldNotify True if property should fire notification\n     *   event (applies only for `notify: true` properties)\n     * @return {boolean} Returns true if the property changed\n     */\n    _setPendingProperty(property, value, shouldNotify) {\n      let propIsPath = this.__dataHasPaths && isPath(property);\n      let prevProps = propIsPath ? this.__dataTemp : this.__data;\n      if (this._shouldPropertyChange(property, value, prevProps[property])) {\n        if (!this.__dataPending) {\n          this.__dataPending = {};\n          this.__dataOld = {};\n        }\n        // Ensure old is captured from the last turn\n        if (!(property in this.__dataOld)) {\n          this.__dataOld[property] = this.__data[property];\n        }\n        // Paths are stored in temporary cache (cleared at end of turn),\n        // which is used for dirty-checking, all others stored in __data\n        if (propIsPath) {\n          this.__dataTemp[property] = value;\n        } else {\n          this.__data[property] = value;\n        }\n        // All changes go into pending property bag, passed to _propertiesChanged\n        this.__dataPending[property] = value;\n        // Track properties that should notify separately\n        if (propIsPath || (this[TYPES.NOTIFY] && this[TYPES.NOTIFY][property])) {\n          this.__dataToNotify = this.__dataToNotify || {};\n          this.__dataToNotify[property] = shouldNotify;\n        }\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Overrides base implementation to ensure all accessors set `shouldNotify`\n     * to true, for per-property notification tracking.\n     *\n     * @override\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @return {void}\n     */\n    _setProperty(property, value) {\n      if (this._setPendingProperty(property, value, true)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Overrides `PropertyAccessor`'s default async queuing of\n     * `_propertiesChanged`: if `__dataReady` is false (has not yet been\n     * manually flushed), the function no-ops; otherwise flushes\n     * `_propertiesChanged` synchronously.\n     *\n     * @override\n     * @return {void}\n     */\n    _invalidateProperties() {\n      if (this.__dataReady) {\n        this._flushProperties();\n      }\n    }\n\n    /**\n     * Enqueues the given client on a list of pending clients, whose\n     * pending property changes can later be flushed via a call to\n     * `_flushClients`.\n     *\n     * @override\n     * @param {Object} client PropertyEffects client to enqueue\n     * @return {void}\n     * @protected\n     */\n    _enqueueClient(client) {\n      this.__dataPendingClients = this.__dataPendingClients || [];\n      if (client !== this) {\n        this.__dataPendingClients.push(client);\n      }\n    }\n\n    /**\n     * Flushes any clients previously enqueued via `_enqueueClient`, causing\n     * their `_flushProperties` method to run.\n     *\n     * @override\n     * @return {void}\n     * @protected\n     */\n    _flushClients() {\n      if (!this.__dataClientsReady) {\n        this.__dataClientsReady = true;\n        this._readyClients();\n        // Override point where accessors are turned on; importantly,\n        // this is after clients have fully readied, providing a guarantee\n        // that any property effects occur only after all clients are ready.\n        this.__dataReady = true;\n      } else {\n        this.__enableOrFlushClients();\n      }\n    }\n\n    // NOTE: We ensure clients either enable or flush as appropriate. This\n    // handles two corner cases:\n    // (1) clients flush properly when connected/enabled before the host\n    // enables; e.g.\n    //   (a) Templatize stamps with no properties and does not flush and\n    //   (b) the instance is inserted into dom and\n    //   (c) then the instance flushes.\n    // (2) clients enable properly when not connected/enabled when the host\n    // flushes; e.g.\n    //   (a) a template is runtime stamped and not yet connected/enabled\n    //   (b) a host sets a property, causing stamped dom to flush\n    //   (c) the stamped dom enables.\n    __enableOrFlushClients() {\n      let clients = this.__dataPendingClients;\n      if (clients) {\n        this.__dataPendingClients = null;\n        for (let i=0; i < clients.length; i++) {\n          let client = clients[i];\n          if (!client.__dataEnabled) {\n            client._enableProperties();\n          } else if (client.__dataPending) {\n            client._flushProperties();\n          }\n        }\n      }\n    }\n\n    /**\n     * Perform any initial setup on client dom. Called before the first\n     * `_flushProperties` call on client dom and before any element\n     * observers are called.\n     *\n     * @override\n     * @return {void}\n     * @protected\n     */\n    _readyClients() {\n      this.__enableOrFlushClients();\n    }\n\n    /**\n     * Sets a bag of property changes to this instance, and\n     * synchronously processes all effects of the properties as a batch.\n     *\n     * Property names must be simple properties, not paths.  Batched\n     * path propagation is not supported.\n     *\n     * @override\n     * @param {Object} props Bag of one or more key-value pairs whose key is\n     *   a property and value is the new value to set for that property.\n     * @param {boolean=} setReadOnly When true, any private values set in\n     *   `props` will be set. By default, `setProperties` will not set\n     *   `readOnly: true` root properties.\n     * @return {void}\n     * @public\n     */\n    setProperties(props, setReadOnly) {\n      for (let path in props) {\n        if (setReadOnly || !this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][path]) {\n          //TODO(kschaaf): explicitly disallow paths in setProperty?\n          // wildcard observers currently only pass the first changed path\n          // in the `info` object, and you could do some odd things batching\n          // paths, e.g. {'foo.bar': {...}, 'foo': null}\n          this._setPendingPropertyOrPath(path, props[path], true);\n        }\n      }\n      this._invalidateProperties();\n    }\n\n    /**\n     * Overrides `PropertyAccessors` so that property accessor\n     * side effects are not enabled until after client dom is fully ready.\n     * Also calls `_flushClients` callback to ensure client dom is enabled\n     * that was not enabled as a result of flushing properties.\n     *\n     * @override\n     * @return {void}\n     */\n    ready() {\n      // It is important that `super.ready()` is not called here as it\n      // immediately turns on accessors. Instead, we wait until `readyClients`\n      // to enable accessors to provide a guarantee that clients are ready\n      // before processing any accessors side effects.\n      this._flushProperties();\n      // If no data was pending, `_flushProperties` will not `flushClients`\n      // so ensure this is done.\n      if (!this.__dataClientsReady) {\n        this._flushClients();\n      }\n      // Before ready, client notifications do not trigger _flushProperties.\n      // Therefore a flush is necessary here if data has been set.\n      if (this.__dataPending) {\n        this._flushProperties();\n      }\n    }\n\n    /**\n     * Implements `PropertyAccessors`'s properties changed callback.\n     *\n     * Runs each class of effects for the batch of changed properties in\n     * a specific order (compute, propagate, reflect, observe, notify).\n     *\n     * @override\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {?Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {?Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @return {void}\n     */\n    _propertiesChanged(currentProps, changedProps, oldProps) {\n      // ----------------------------\n      // let c = Object.getOwnPropertyNames(changedProps || {});\n      // window.debug && console.group(this.localName + '#' + this.id + ': ' + c);\n      // if (window.debug) { debugger; }\n      // ----------------------------\n      let hasPaths = this.__dataHasPaths;\n      this.__dataHasPaths = false;\n      let notifyProps;\n      // Compute properties\n      runComputedEffects(this, changedProps, oldProps, hasPaths);\n      // Clear notify properties prior to possible reentry (propagate, observe),\n      // but after computing effects have a chance to add to them\n      notifyProps = this.__dataToNotify;\n      this.__dataToNotify = null;\n      // Propagate properties to clients\n      this._propagatePropertyChanges(changedProps, oldProps, hasPaths);\n      // Flush clients\n      this._flushClients();\n      // Reflect properties\n      runEffects(this, this[TYPES.REFLECT], changedProps, oldProps, hasPaths);\n      // Observe properties\n      runEffects(this, this[TYPES.OBSERVE], changedProps, oldProps, hasPaths);\n      // Notify properties to host\n      if (notifyProps) {\n        runNotifyEffects(this, notifyProps, changedProps, oldProps, hasPaths);\n      }\n      // Clear temporary cache at end of turn\n      if (this.__dataCounter == 1) {\n        this.__dataTemp = {};\n      }\n      // ----------------------------\n      // window.debug && console.groupEnd(this.localName + '#' + this.id + ': ' + c);\n      // ----------------------------\n    }\n\n    /**\n     * Called to propagate any property changes to stamped template nodes\n     * managed by this element.\n     *\n     * @override\n     * @param {Object} changedProps Bag of changed properties\n     * @param {Object} oldProps Bag of previous values for changed properties\n     * @param {boolean} hasPaths True with `props` contains one or more paths\n     * @return {void}\n     * @protected\n     */\n    _propagatePropertyChanges(changedProps, oldProps, hasPaths) {\n      if (this[TYPES.PROPAGATE]) {\n        runEffects(this, this[TYPES.PROPAGATE], changedProps, oldProps, hasPaths);\n      }\n      if (this.__templateInfo) {\n        this._runEffectsForTemplate(this.__templateInfo, changedProps, oldProps, hasPaths);\n      }\n    }\n\n    _runEffectsForTemplate(templateInfo, changedProps, oldProps, hasPaths) {\n      const baseRunEffects = (changedProps, hasPaths) => {\n        runEffects(this, templateInfo.propertyEffects, changedProps, oldProps,\n          hasPaths, templateInfo.nodeList);\n        for (let info=templateInfo.firstChild; info; info=info.nextSibling) {\n          this._runEffectsForTemplate(info, changedProps, oldProps, hasPaths);\n        }\n      };\n      if (templateInfo.runEffects) {\n        templateInfo.runEffects(baseRunEffects, changedProps, hasPaths);\n      } else {\n        baseRunEffects(changedProps, hasPaths);\n      }\n    }\n\n    /**\n     * Aliases one data path as another, such that path notifications from one\n     * are routed to the other.\n     *\n     * @override\n     * @param {string | !Array<string|number>} to Target path to link.\n     * @param {string | !Array<string|number>} from Source path to link.\n     * @return {void}\n     * @public\n     */\n    linkPaths(to, from) {\n      to = normalize(to);\n      from = normalize(from);\n      this.__dataLinkedPaths = this.__dataLinkedPaths || {};\n      this.__dataLinkedPaths[to] = from;\n    }\n\n    /**\n     * Removes a data path alias previously established with `_linkPaths`.\n     *\n     * Note, the path to unlink should be the target (`to`) used when\n     * linking the paths.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Target path to unlink.\n     * @return {void}\n     * @public\n     */\n    unlinkPaths(path) {\n      path = normalize(path);\n      if (this.__dataLinkedPaths) {\n        delete this.__dataLinkedPaths[path];\n      }\n    }\n\n    /**\n     * Notify that an array has changed.\n     *\n     * Example:\n     *\n     *     this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n     *     ...\n     *     this.items.splice(1, 1, {name: 'Sam'});\n     *     this.items.push({name: 'Bob'});\n     *     this.notifySplices('items', [\n     *       { index: 1, removed: [{name: 'Todd'}], addedCount: 1,\n     *         object: this.items, type: 'splice' },\n     *       { index: 3, removed: [], addedCount: 1,\n     *         object: this.items, type: 'splice'}\n     *     ]);\n     *\n     * @param {string} path Path that should be notified.\n     * @param {Array} splices Array of splice records indicating ordered\n     *   changes that occurred to the array. Each record should have the\n     *   following fields:\n     *    * index: index at which the change occurred\n     *    * removed: array of items that were removed from this index\n     *    * addedCount: number of new items added at this index\n     *    * object: a reference to the array in question\n     *    * type: the string literal 'splice'\n     *\n     *   Note that splice records _must_ be normalized such that they are\n     *   reported in index order (raw results from `Object.observe` are not\n     *   ordered and must be normalized/merged before notifying).\n     *\n     * @override\n     * @return {void}\n     * @public\n     */\n    notifySplices(path, splices) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get(this, path, info));\n      notifySplices(this, array, info.path, splices);\n    }\n\n    /**\n     * Convenience method for reading a value from a path.\n     *\n     * Note, if any part in the path is undefined, this method returns\n     * `undefined` (this method does not throw when dereferencing undefined\n     * paths).\n     *\n     * @override\n     * @param {(string|!Array<(string|number)>)} path Path to the value\n     *   to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n     *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n     *   bracketed expressions are not supported; string-based path parts\n     *   *must* be separated by dots.  Note that when dereferencing array\n     *   indices, the index may be used as a dotted part directly\n     *   (e.g. `users.12.name` or `['users', 12, 'name']`).\n     * @param {Object=} root Root object from which the path is evaluated.\n     * @return {*} Value at the path, or `undefined` if any part of the path\n     *   is undefined.\n     * @public\n     */\n    get(path, root) {\n      return get(root || this, path);\n    }\n\n    /**\n     * Convenience method for setting a value to a path and notifying any\n     * elements bound to the same path.\n     *\n     * Note, if any part in the path except for the last is undefined,\n     * this method does nothing (this method does not throw when\n     * dereferencing undefined paths).\n     *\n     * @override\n     * @param {(string|!Array<(string|number)>)} path Path to the value\n     *   to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n     *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n     *   bracketed expressions are not supported; string-based path parts\n     *   *must* be separated by dots.  Note that when dereferencing array\n     *   indices, the index may be used as a dotted part directly\n     *   (e.g. `'users.12.name'` or `['users', 12, 'name']`).\n     * @param {*} value Value to set at the specified path.\n     * @param {Object=} root Root object from which the path is evaluated.\n     *   When specified, no notification will occur.\n     * @return {void}\n     * @public\n     */\n    set(path, value, root) {\n      if (root) {\n        set(root, path, value);\n      } else {\n        if (!this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][/** @type {string} */(path)]) {\n          if (this._setPendingPropertyOrPath(path, value, true)) {\n            this._invalidateProperties();\n          }\n        }\n      }\n    }\n\n    /**\n     * Adds items onto the end of the array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.push`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {...*} items Items to push onto array\n     * @return {number} New length of the array.\n     * @public\n     */\n    push(path, ...items) {\n      let info = {path: ''};\n      let array = /** @type {Array}*/(get(this, path, info));\n      let len = array.length;\n      let ret = array.push(...items);\n      if (items.length) {\n        notifySplice(this, array, info.path, len, items.length, []);\n      }\n      return ret;\n    }\n\n    /**\n     * Removes an item from the end of array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.pop`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Path to array.\n     * @return {*} Item that was removed.\n     * @public\n     */\n    pop(path) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get(this, path, info));\n      let hadLength = Boolean(array.length);\n      let ret = array.pop();\n      if (hadLength) {\n        notifySplice(this, array, info.path, array.length, 0, [ret]);\n      }\n      return ret;\n    }\n\n    /**\n     * Starting from the start index specified, removes 0 or more items\n     * from the array and inserts 0 or more new items in their place.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.splice`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {number} start Index from which to start removing/inserting.\n     * @param {number=} deleteCount Number of items to remove.\n     * @param {...*} items Items to insert into array.\n     * @return {!Array} Array of removed items.\n     * @public\n     */\n    splice(path, start, deleteCount, ...items) {\n      let info = {path : ''};\n      let array = /** @type {Array} */(get(this, path, info));\n      // Normalize fancy native splice handling of crazy start values\n      if (start < 0) {\n        start = array.length - Math.floor(-start);\n      } else if (start) {\n        start = Math.floor(start);\n      }\n      // array.splice does different things based on the number of arguments\n      // you pass in. Therefore, array.splice(0) and array.splice(0, undefined)\n      // do different things. In the former, the whole array is cleared. In the\n      // latter, no items are removed.\n      // This means that we need to detect whether 1. one of the arguments\n      // is actually passed in and then 2. determine how many arguments\n      // we should pass on to the native array.splice\n      //\n      let ret;\n      // Omit any additional arguments if they were not passed in\n      if (arguments.length === 2) {\n        ret = array.splice(start);\n      // Either start was undefined and the others were defined, but in this\n      // case we can safely pass on all arguments\n      //\n      // Note: this includes the case where none of the arguments were passed in,\n      // e.g. this.splice('array'). However, if both start and deleteCount\n      // are undefined, array.splice will not modify the array (as expected)\n      } else {\n        ret = array.splice(start, deleteCount, ...items);\n      }\n      // At the end, check whether any items were passed in (e.g. insertions)\n      // or if the return array contains items (e.g. deletions).\n      // Only notify if items were added or deleted.\n      if (items.length || ret.length) {\n        notifySplice(this, array, info.path, start, items.length, ret);\n      }\n      return ret;\n    }\n\n    /**\n     * Removes an item from the beginning of array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.pop`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Path to array.\n     * @return {*} Item that was removed.\n     * @public\n     */\n    shift(path) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get(this, path, info));\n      let hadLength = Boolean(array.length);\n      let ret = array.shift();\n      if (hadLength) {\n        notifySplice(this, array, info.path, 0, 0, [ret]);\n      }\n      return ret;\n    }\n\n    /**\n     * Adds items onto the beginning of the array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.push`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {...*} items Items to insert info array\n     * @return {number} New length of the array.\n     * @public\n     */\n    unshift(path, ...items) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get(this, path, info));\n      let ret = array.unshift(...items);\n      if (items.length) {\n        notifySplice(this, array, info.path, 0, items.length, []);\n      }\n      return ret;\n    }\n\n    /**\n     * Notify that a path has changed.\n     *\n     * Example:\n     *\n     *     this.item.user.name = 'Bob';\n     *     this.notifyPath('item.user.name');\n     *\n     * @override\n     * @param {string} path Path that should be notified.\n     * @param {*=} value Value at the path (optional).\n     * @return {void}\n     * @public\n     */\n    notifyPath(path, value) {\n      /** @type {string} */\n      let propPath;\n      if (arguments.length == 1) {\n        // Get value if not supplied\n        let info = {path: ''};\n        value = get(this, path, info);\n        propPath = info.path;\n      } else if (Array.isArray(path)) {\n        // Normalize path if needed\n        propPath = normalize(path);\n      } else {\n        propPath = /** @type{string} */(path);\n      }\n      if (this._setPendingPropertyOrPath(propPath, value, true, true)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Equivalent to static `createReadOnlyProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Property name\n     * @param {boolean=} protectedSetter Creates a custom protected setter\n     *   when `true`.\n     * @return {void}\n     * @protected\n     */\n    _createReadOnlyProperty(property, protectedSetter) {\n      this._addPropertyEffect(property, TYPES.READ_ONLY);\n      if (protectedSetter) {\n        this['_set' + upper(property)] = /** @this {PropertyEffects} */function(value) {\n          this._setProperty(property, value);\n        };\n      }\n    }\n\n    /**\n     * Equivalent to static `createPropertyObserver` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Property name\n     * @param {string|function(*,*)} method Function or name of observer method\n     *     to call\n     * @param {boolean=} dynamicFn Whether the method name should be included as\n     *   a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    _createPropertyObserver(property, method, dynamicFn) {\n      let info = { property, method, dynamicFn: Boolean(dynamicFn) };\n      this._addPropertyEffect(property, TYPES.OBSERVE, {\n        fn: runObserverEffect, info, trigger: {name: property}\n      });\n      if (dynamicFn) {\n        this._addPropertyEffect(/** @type {string} */(method), TYPES.OBSERVE, {\n          fn: runObserverEffect, info, trigger: {name: method}\n        });\n      }\n    }\n\n    /**\n     * Equivalent to static `createMethodObserver` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     *   whether method names should be included as a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    _createMethodObserver(expression, dynamicFn) {\n      let sig = parseMethod(expression);\n      if (!sig) {\n        throw new Error(\"Malformed observer expression '\" + expression + \"'\");\n      }\n      createMethodEffect(this, sig, TYPES.OBSERVE, runMethodEffect, null, dynamicFn);\n    }\n\n    /**\n     * Equivalent to static `createNotifyingProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     */\n    _createNotifyingProperty(property) {\n      this._addPropertyEffect(property, TYPES.NOTIFY, {\n        fn: runNotifyEffect,\n        info: {\n          eventName: camelToDashCase(property) + '-changed',\n          property: property\n        }\n      });\n    }\n\n    /**\n     * Equivalent to static `createReflectedProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     * @suppress {missingProperties} go/missingfnprops\n     */\n    _createReflectedProperty(property) {\n      let attr = this.constructor.attributeNameForProperty(property);\n      if (attr[0] === '-') {\n        console.warn('Property ' + property + ' cannot be reflected to attribute ' +\n          attr + ' because \"-\" is not a valid starting attribute name. Use a lowercase first letter for the property instead.');\n      } else {\n        this._addPropertyEffect(property, TYPES.REFLECT, {\n          fn: runReflectEffect,\n          info: {\n            attrName: attr\n          }\n        });\n      }\n    }\n\n    /**\n     * Equivalent to static `createComputedProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Name of computed property to set\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     *   whether method names should be included as a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    _createComputedProperty(property, expression, dynamicFn) {\n      let sig = parseMethod(expression);\n      if (!sig) {\n        throw new Error(\"Malformed computed expression '\" + expression + \"'\");\n      }\n      const info = createMethodEffect(this, sig, TYPES.COMPUTE, runComputedEffect, property, dynamicFn);\n      // Effects are normally stored as map of dependency->effect, but for\n      // ordered computation, we also need tree of computedProp->dependencies\n      ensureOwnEffectMap(this, COMPUTE_INFO)[property] = info;\n    }\n\n    /**\n     * Gather the argument values for a method specified in the provided array\n     * of argument metadata.\n     *\n     * The `path` and `value` arguments are used to fill in wildcard descriptor\n     * when the method is being called as a result of a path notification.\n     *\n     * @param {!Array<!MethodArg>} args Array of argument metadata\n     * @param {string} path Property/path name that triggered the method effect\n     * @param {Object} props Bag of current property changes\n     * @return {!Array<*>} Array of argument values\n     * @private\n     */\n    _marshalArgs(args, path, props) {\n      const data = this.__data;\n      const values = [];\n      for (let i=0, l=args.length; i<l; i++) {\n        let {name, structured, wildcard, value, literal} = args[i];\n        if (!literal) {\n          if (wildcard) {\n            const matches = isDescendant(name, path);\n            const pathValue = getArgValue(data, props, matches ? path : name);\n            value = {\n              path: matches ? path : name,\n              value: pathValue,\n              base: matches ? get(data, name) : pathValue\n            };\n          } else {\n            value = structured ? getArgValue(data, props, name) : data[name];\n          }\n        }\n        // When the `legacyUndefined` flag is enabled, pass a no-op value\n        // so that the observer, computed property, or compound binding is aborted.\n        if (legacyUndefined && !this._overrideLegacyUndefined && value === undefined && args.length > 1) {\n          return NOOP;\n        }\n        values[i] = value;\n      }\n      return values;\n    }\n\n    // -- static class methods ------------\n\n    /**\n     * Ensures an accessor exists for the specified property, and adds\n     * to a list of \"property effects\" that will run when the accessor for\n     * the specified property is set.  Effects are grouped by \"type\", which\n     * roughly corresponds to a phase in effect processing.  The effect\n     * metadata should be in the following form:\n     *\n     *     {\n     *       fn: effectFunction, // Reference to function to call to perform effect\n     *       info: { ... }       // Effect metadata passed to function\n     *       trigger: {          // Optional triggering metadata; if not provided\n     *         name: string      // the property is treated as a wildcard\n     *         structured: boolean\n     *         wildcard: boolean\n     *       }\n     *     }\n     *\n     * Effects are called from `_propertiesChanged` in the following order by\n     * type:\n     *\n     * 1. COMPUTE\n     * 2. PROPAGATE\n     * 3. REFLECT\n     * 4. OBSERVE\n     * 5. NOTIFY\n     *\n     * Effect functions are called with the following signature:\n     *\n     *     effectFunction(inst, path, props, oldProps, info, hasPaths)\n     *\n     * @param {string} property Property that should trigger the effect\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static addPropertyEffect(property, type, effect) {\n      this.prototype._addPropertyEffect(property, type, effect);\n    }\n\n    /**\n     * Creates a single-property observer for the given property.\n     *\n     * @param {string} property Property name\n     * @param {string|function(*,*)} method Function or name of observer method to call\n     * @param {boolean=} dynamicFn Whether the method name should be included as\n     *   a dependency to the effect.\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static createPropertyObserver(property, method, dynamicFn) {\n      this.prototype._createPropertyObserver(property, method, dynamicFn);\n    }\n\n    /**\n     * Creates a multi-property \"method observer\" based on the provided\n     * expression, which should be a string in the form of a normal JavaScript\n     * function signature: `'methodName(arg1, [..., argn])'`.  Each argument\n     * should correspond to a property or path in the context of this\n     * prototype (or instance), or may be a literal string or number.\n     *\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     * @return {void}\n     *   whether method names should be included as a dependency to the effect.\n     * @protected\n     * @nocollapse\n     */\n    static createMethodObserver(expression, dynamicFn) {\n      this.prototype._createMethodObserver(expression, dynamicFn);\n    }\n\n    /**\n     * Causes the setter for the given property to dispatch `<property>-changed`\n     * events to notify of changes to the property.\n     *\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static createNotifyingProperty(property) {\n      this.prototype._createNotifyingProperty(property);\n    }\n\n    /**\n     * Creates a read-only accessor for the given property.\n     *\n     * To set the property, use the protected `_setProperty` API.\n     * To create a custom protected setter (e.g. `_setMyProp()` for\n     * property `myProp`), pass `true` for `protectedSetter`.\n     *\n     * Note, if the property will have other property effects, this method\n     * should be called first, before adding other effects.\n     *\n     * @param {string} property Property name\n     * @param {boolean=} protectedSetter Creates a custom protected setter\n     *   when `true`.\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static createReadOnlyProperty(property, protectedSetter) {\n      this.prototype._createReadOnlyProperty(property, protectedSetter);\n    }\n\n    /**\n     * Causes the setter for the given property to reflect the property value\n     * to a (dash-cased) attribute of the same name.\n     *\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static createReflectedProperty(property) {\n      this.prototype._createReflectedProperty(property);\n    }\n\n    /**\n     * Creates a computed property whose value is set to the result of the\n     * method described by the given `expression` each time one or more\n     * arguments to the method changes.  The expression should be a string\n     * in the form of a normal JavaScript function signature:\n     * `'methodName(arg1, [..., argn])'`\n     *\n     * @param {string} property Name of computed property to set\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n     *   method names should be included as a dependency to the effect.\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static createComputedProperty(property, expression, dynamicFn) {\n      this.prototype._createComputedProperty(property, expression, dynamicFn);\n    }\n\n    /**\n     * Parses the provided template to ensure binding effects are created\n     * for them, and then ensures property accessors are created for any\n     * dependent properties in the template.  Binding effects for bound\n     * templates are stored in a linked list on the instance so that\n     * templates can be efficiently stamped and unstamped.\n     *\n     * @param {!HTMLTemplateElement} template Template containing binding\n     *   bindings\n     * @return {!TemplateInfo} Template metadata object\n     * @protected\n     * @nocollapse\n     */\n    static bindTemplate(template) {\n      return this.prototype._bindTemplate(template);\n    }\n\n    // -- binding ----------------------------------------------\n\n    /*\n     * Overview of binding flow:\n     *\n     * During finalization (`instanceBinding==false`, `wasPreBound==false`):\n     *  `_bindTemplate(t, false)` called directly during finalization - parses\n     *  the template (for the first time), and then assigns that _prototypical_\n     *  template info to `__preboundTemplateInfo` _on the prototype_; note in\n     *  this case `wasPreBound` is false; this is the first time we're binding\n     *  it, thus we create accessors.\n     *\n     * During first stamping (`instanceBinding==true`, `wasPreBound==true`):\n     *   `_stampTemplate` calls `_bindTemplate(t, true)`: the `templateInfo`\n     *   returned matches the prebound one, and so this is `wasPreBound == true`\n     *   state; thus we _skip_ creating accessors, but _do_ create an instance\n     *   of the template info to serve as the start of our linked list (needs to\n     *   be an instance, not the prototypical one, so that we can add `nodeList`\n     *   to it to contain the `nodeInfo`-ordered list of instance nodes for\n     *   bindings, and so we can chain runtime-stamped template infos off of\n     *   it). At this point, the call to `_stampTemplate` calls\n     *   `applyTemplateInfo` for each nested `<template>` found during parsing\n     *   to hand prototypical `_templateInfo` to them; we also pass the _parent_\n     *   `templateInfo` to the `<template>` so that we have the instance-time\n     *   parent to link the `templateInfo` under in the case it was\n     *   runtime-stamped.\n     *\n     * During subsequent runtime stamping (`instanceBinding==true`,\n     *   `wasPreBound==false`): `_stampTemplate` calls `_bindTemplate(t, true)`\n     *   - here `templateInfo` is guaranteed to _not_ match the prebound one,\n     *   because it was either a different template altogether, or even if it\n     *   was the same template, the step above created a instance of the info;\n     *   in this case `wasPreBound == false`, so we _do_ create accessors, _and_\n     *   link a instance into the linked list.\n     */\n\n    /**\n     * Equivalent to static `bindTemplate` API but can be called on an instance\n     * to add effects at runtime.  See that method for full API docs.\n     *\n     * This method may be called on the prototype (for prototypical template\n     * binding, to avoid creating accessors every instance) once per prototype,\n     * and will be called with `runtimeBinding: true` by `_stampTemplate` to\n     * create and link an instance of the template metadata associated with a\n     * particular stamping.\n     *\n     * @override\n     * @param {!HTMLTemplateElement} template Template containing binding\n     * bindings\n     * @param {boolean=} instanceBinding When false (default), performs\n     * \"prototypical\" binding of the template and overwrites any previously\n     * bound template for the class. When true (as passed from\n     * `_stampTemplate`), the template info is instanced and linked into the\n     * list of bound templates.\n     * @return {!TemplateInfo} Template metadata object; for `runtimeBinding`,\n     * this is an instance of the prototypical template info\n     * @protected\n     * @suppress {missingProperties} go/missingfnprops\n     */\n    _bindTemplate(template, instanceBinding) {\n      let templateInfo = this.constructor._parseTemplate(template);\n      let wasPreBound = this.__preBoundTemplateInfo == templateInfo;\n      // Optimization: since this is called twice for proto-bound templates,\n      // don't attempt to recreate accessors if this template was pre-bound\n      if (!wasPreBound) {\n        for (let prop in templateInfo.propertyEffects) {\n          this._createPropertyAccessor(prop);\n        }\n      }\n      if (instanceBinding) {\n        // For instance-time binding, create instance of template metadata\n        // and link into tree of templates if necessary\n        templateInfo = /** @type {!TemplateInfo} */(Object.create(templateInfo));\n        templateInfo.wasPreBound = wasPreBound;\n        if (!this.__templateInfo) {\n          // Set the info to the root of the tree\n          this.__templateInfo = templateInfo;\n        } else {\n          // Append this template info onto the end of its parent template's\n          // list, which will determine the tree structure via which property\n          // effects are run; if this template was not nested in another\n          // template, use the root template (the first stamped one) as the\n          // parent. Note, `parent` is the `templateInfo` instance for this\n          // template's parent (containing) template, which was set up in\n          // `applyTemplateInfo`.  While a given template's `parent` is set\n          // apriori, it is only added to the parent's child list at the point\n          // that it is being bound, since a template may or may not ever be\n          // stamped, and may be stamped more than once (in which case instances\n          // of the template info will be in the tree under its parent more than\n          // once).\n          const parent = template._parentTemplateInfo || this.__templateInfo;\n          const previous = parent.lastChild;\n          templateInfo.parent = parent;\n          parent.lastChild = templateInfo;\n          templateInfo.previousSibling = previous;\n          if (previous) {\n            previous.nextSibling = templateInfo;\n          } else {\n            parent.firstChild = templateInfo;\n          }\n        }\n      } else {\n        this.__preBoundTemplateInfo = templateInfo;\n      }\n      return templateInfo;\n    }\n\n    /**\n     * Adds a property effect to the given template metadata, which is run\n     * at the \"propagate\" stage of `_propertiesChanged` when the template\n     * has been bound to the element via `_bindTemplate`.\n     *\n     * The `effect` object should match the format in `_addPropertyEffect`.\n     *\n     * @param {Object} templateInfo Template metadata to add effect to\n     * @param {string} prop Property that should trigger the effect\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static _addTemplatePropertyEffect(templateInfo, prop, effect) {\n      let hostProps = templateInfo.hostProps = templateInfo.hostProps || {};\n      hostProps[prop] = true;\n      let effects = templateInfo.propertyEffects = templateInfo.propertyEffects || {};\n      let propEffects = effects[prop] = effects[prop] || [];\n      propEffects.push(effect);\n    }\n\n    /**\n     * Stamps the provided template and performs instance-time setup for\n     * Polymer template features, including data bindings, declarative event\n     * listeners, and the `this.$` map of `id`'s to nodes.  A document fragment\n     * is returned containing the stamped DOM, ready for insertion into the\n     * DOM.\n     *\n     * This method may be called more than once; however note that due to\n     * `shadycss` polyfill limitations, only styles from templates prepared\n     * using `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\n     * to the shadow root and support CSS custom properties), and note that\n     * `ShadyCSS.prepareTemplate` may only be called once per element. As such,\n     * any styles required by in runtime-stamped templates must be included\n     * in the main element template.\n     *\n     * @param {!HTMLTemplateElement} template Template to stamp\n     * @param {TemplateInfo=} templateInfo Optional bound template info associated\n     *   with the template to be stamped; if omitted the template will be\n     *   automatically bound.\n     * @return {!StampedTemplate} Cloned template content\n     * @override\n     * @protected\n     */\n    _stampTemplate(template, templateInfo) {\n      templateInfo =  templateInfo || /** @type {!TemplateInfo} */(this._bindTemplate(template, true));\n      // Ensures that created dom is `_enqueueClient`'d to this element so\n      // that it can be flushed on next call to `_flushProperties`\n      hostStack.push(this);\n      let dom = super._stampTemplate(template, templateInfo);\n      hostStack.pop();\n      // Add template-instance-specific data to instanced templateInfo\n      templateInfo.nodeList = dom.nodeList;\n      // Capture child nodes to allow unstamping of non-prototypical templates\n      if (!templateInfo.wasPreBound) {\n        let nodes = templateInfo.childNodes = [];\n        for (let n=dom.firstChild; n; n=n.nextSibling) {\n          nodes.push(n);\n        }\n      }\n      dom.templateInfo = templateInfo;\n      // Setup compound storage, 2-way listeners, and dataHost for bindings\n      setupBindings(this, templateInfo);\n      // Flush properties into template nodes; the check on `__dataClientsReady`\n      // ensures we don't needlessly run effects for an element's initial\n      // prototypical template stamping since they will happen as a part of the\n      // first call to `_propertiesChanged`. This flag is set to true\n      // after running the initial propagate effects, and immediately before\n      // flushing clients. Since downstream clients could cause stamping on\n      // this host (e.g. a fastDomIf `dom-if` being forced to render\n      // synchronously), this flag ensures effects for runtime-stamped templates\n      // are run at this point during the initial element boot-up.\n      if (this.__dataClientsReady) {\n        this._runEffectsForTemplate(templateInfo, this.__data, null, false);\n        this._flushClients();\n      }\n      return dom;\n    }\n\n    /**\n     * Removes and unbinds the nodes previously contained in the provided\n     * DocumentFragment returned from `_stampTemplate`.\n     *\n     * @override\n     * @param {!StampedTemplate} dom DocumentFragment previously returned\n     *   from `_stampTemplate` associated with the nodes to be removed\n     * @return {void}\n     * @protected\n     */\n    _removeBoundDom(dom) {\n      // Unlink template info; Note that while the child is unlinked from its\n      // parent list, a template's `parent` reference is never removed, since\n      // this is is determined by the tree structure and applied at\n      // `applyTemplateInfo` time.\n      const templateInfo = dom.templateInfo;\n      const {previousSibling, nextSibling, parent} = templateInfo;\n      if (previousSibling) {\n        previousSibling.nextSibling = nextSibling;\n      } else if (parent) {\n        parent.firstChild = nextSibling;\n      }\n      if (nextSibling) {\n        nextSibling.previousSibling = previousSibling;\n      } else if (parent) {\n        parent.lastChild = previousSibling;\n      }\n      templateInfo.nextSibling = templateInfo.previousSibling = null;\n      // Remove stamped nodes\n      let nodes = templateInfo.childNodes;\n      for (let i=0; i<nodes.length; i++) {\n        let node = nodes[i];\n        wrap(wrap(node).parentNode).removeChild(node);\n      }\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * parsing bindings from `TextNode`'s' `textContent`.  A `bindings`\n     * array is added to `nodeInfo` and populated with binding metadata\n     * with information capturing the binding target, and a `parts` array\n     * with one or more metadata objects capturing the source(s) of the\n     * binding.\n     *\n     * @param {Node} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     * @nocollapse\n     */\n    static _parseTemplateNode(node, templateInfo, nodeInfo) {\n      // TODO(https://github.com/google/closure-compiler/issues/3240):\n      //     Change back to just super.methodCall()\n      let noted = propertyEffectsBase._parseTemplateNode.call(\n        this, node, templateInfo, nodeInfo);\n      if (node.nodeType === Node.TEXT_NODE) {\n        let parts = this._parseBindings(node.textContent, templateInfo);\n        if (parts) {\n          // Initialize the textContent with any literal parts\n          // NOTE: default to a space here so the textNode remains; some browsers\n          // (IE) omit an empty textNode following cloneNode/importNode.\n          node.textContent = literalFromParts(parts) || ' ';\n          addBinding(this, templateInfo, nodeInfo, 'text', 'textContent', parts);\n          noted = true;\n        }\n      }\n      return noted;\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * parsing bindings from attributes.  A `bindings`\n     * array is added to `nodeInfo` and populated with binding metadata\n     * with information capturing the binding target, and a `parts` array\n     * with one or more metadata objects capturing the source(s) of the\n     * binding.\n     *\n     * @param {Element} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @param {string} name Attribute name\n     * @param {string} value Attribute value\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     * @nocollapse\n     */\n    static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {\n      let parts = this._parseBindings(value, templateInfo);\n      if (parts) {\n        // Attribute or property\n        let origName = name;\n        let kind = 'property';\n        // The only way we see a capital letter here is if the attr has\n        // a capital letter in it per spec. In this case, to make sure\n        // this binding works, we go ahead and make the binding to the attribute.\n        if (capitalAttributeRegex.test(name)) {\n          kind = 'attribute';\n        } else if (name[name.length-1] == '$') {\n          name = name.slice(0, -1);\n          kind = 'attribute';\n        }\n        // Initialize attribute bindings with any literal parts\n        let literal = literalFromParts(parts);\n        if (literal && kind == 'attribute') {\n          // Ensure a ShadyCSS template scoped style is not removed\n          // when a class$ binding's initial literal value is set.\n          if (name == 'class' && node.hasAttribute('class')) {\n            literal += ' ' + node.getAttribute(name);\n          }\n          node.setAttribute(name, literal);\n        }\n        // support disable-upgrade\n        if (kind == 'attribute' && origName == 'disable-upgrade$') {\n          node.setAttribute(name, '');\n        }\n        // Clear attribute before removing, since IE won't allow removing\n        // `value` attribute if it previously had a value (can't\n        // unconditionally set '' before removing since attributes with `$`\n        // can't be set using setAttribute)\n        if (node.localName === 'input' && origName === 'value') {\n          node.setAttribute(origName, '');\n        }\n        // Remove annotation\n        node.removeAttribute(origName);\n        // Case hackery: attributes are lower-case, but bind targets\n        // (properties) are case sensitive. Gambit is to map dash-case to\n        // camel-case: `foo-bar` becomes `fooBar`.\n        // Attribute bindings are excepted.\n        if (kind === 'property') {\n          name = dashToCamelCase(name);\n        }\n        addBinding(this, templateInfo, nodeInfo, kind, name, parts, literal);\n        return true;\n      } else {\n        // TODO(https://github.com/google/closure-compiler/issues/3240):\n        //     Change back to just super.methodCall()\n        return propertyEffectsBase._parseTemplateNodeAttribute.call(\n          this, node, templateInfo, nodeInfo, name, value);\n      }\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * binding the properties that a nested template depends on to the template\n     * as `_host_<property>`.\n     *\n     * @param {Node} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     * @nocollapse\n     */\n    static _parseTemplateNestedTemplate(node, templateInfo, nodeInfo) {\n      // TODO(https://github.com/google/closure-compiler/issues/3240):\n      //     Change back to just super.methodCall()\n      let noted = propertyEffectsBase._parseTemplateNestedTemplate.call(\n        this, node, templateInfo, nodeInfo);\n      const parent = node.parentNode;\n      const nestedTemplateInfo = nodeInfo.templateInfo;\n      const isDomIf = parent.localName === 'dom-if';\n      const isDomRepeat = parent.localName === 'dom-repeat';\n      // Remove nested template and redirect its host bindings & templateInfo\n      // onto the parent (dom-if/repeat element)'s nodeInfo\n      if (removeNestedTemplates && (isDomIf || isDomRepeat)) {\n        parent.removeChild(node);\n        // Use the parent's nodeInfo (for the dom-if/repeat) to record the\n        // templateInfo, and use that for any host property bindings below\n        nodeInfo = nodeInfo.parentInfo;\n        nodeInfo.templateInfo = nestedTemplateInfo;\n        // Ensure the parent dom-if/repeat is noted since it now may have host\n        // bindings; it may not have been if it did not have its own bindings\n        nodeInfo.noted = true;\n        noted = false;\n      }\n      // Merge host props into outer template and add bindings\n      let hostProps = nestedTemplateInfo.hostProps;\n      if (fastDomIf && isDomIf) {\n        // `fastDomIf` mode uses runtime-template stamping to add accessors/\n        // effects to properties used in its template; as such we don't need to\n        // tax the host element with `_host_` bindings for the `dom-if`.\n        // However, in the event it is nested in a `dom-repeat`, it is still\n        // important that its host properties are added to the\n        // TemplateInstance's `hostProps` so that they are forwarded to the\n        // TemplateInstance.\n        if (hostProps) {\n          templateInfo.hostProps =\n            Object.assign(templateInfo.hostProps || {}, hostProps);\n          // Ensure the dom-if is noted so that it has a __dataHost, since\n          // `fastDomIf` uses the host for runtime template stamping; note this\n          // was already ensured above in the `removeNestedTemplates` case\n          if (!removeNestedTemplates) {\n            nodeInfo.parentInfo.noted = true;\n          }\n        }\n      } else {\n        let mode = '{';\n        for (let source in hostProps) {\n          let parts = [{ mode, source, dependencies: [source], hostProp: true }];\n          addBinding(this, templateInfo, nodeInfo, 'property', '_host_' + source, parts);\n        }\n      }\n      return noted;\n    }\n\n    /**\n     * Called to parse text in a template (either attribute values or\n     * textContent) into binding metadata.\n     *\n     * Any overrides of this method should return an array of binding part\n     * metadata  representing one or more bindings found in the provided text\n     * and any \"literal\" text in between.  Any non-literal parts will be passed\n     * to `_evaluateBinding` when any dependencies change.  The only required\n     * fields of each \"part\" in the returned array are as follows:\n     *\n     * - `dependencies` - Array containing trigger metadata for each property\n     *   that should trigger the binding to update\n     * - `literal` - String containing text if the part represents a literal;\n     *   in this case no `dependencies` are needed\n     *\n     * Additional metadata for use by `_evaluateBinding` may be provided in\n     * each part object as needed.\n     *\n     * The default implementation handles the following types of bindings\n     * (one or more may be intermixed with literal strings):\n     * - Property binding: `[[prop]]`\n     * - Path binding: `[[object.prop]]`\n     * - Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n     * - Two-way property or path bindings (supports negation):\n     *   `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n     * - Inline computed method (supports negation):\n     *   `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`\n     *\n     * The default implementation uses a regular expression for best\n     * performance. However, the regular expression uses a white-list of\n     * allowed characters in a data-binding, which causes problems for\n     * data-bindings that do use characters not in this white-list.\n     *\n     * Instead of updating the white-list with all allowed characters,\n     * there is a StrictBindingParser (see lib/mixins/strict-binding-parser)\n     * that uses a state machine instead. This state machine is able to handle\n     * all characters. However, it is slightly less performant, therefore we\n     * extracted it into a separate optional mixin.\n     *\n     * @param {string} text Text to parse from attribute or textContent\n     * @param {Object} templateInfo Current template metadata\n     * @return {Array<!BindingPart>} Array of binding part metadata\n     * @protected\n     * @nocollapse\n     */\n    static _parseBindings(text, templateInfo) {\n      let parts = [];\n      let lastIndex = 0;\n      let m;\n      // Example: \"literal1{{prop}}literal2[[!compute(foo,bar)]]final\"\n      // Regex matches:\n      //        Iteration 1:  Iteration 2:\n      // m[1]: '{{'          '[['\n      // m[2]: ''            '!'\n      // m[3]: 'prop'        'compute(foo,bar)'\n      while ((m = bindingRegex.exec(text)) !== null) {\n        // Add literal part\n        if (m.index > lastIndex) {\n          parts.push({literal: text.slice(lastIndex, m.index)});\n        }\n        // Add binding part\n        let mode = m[1][0];\n        let negate = Boolean(m[2]);\n        let source = m[3].trim();\n        let customEvent = false, notifyEvent = '', colon = -1;\n        if (mode == '{' && (colon = source.indexOf('::')) > 0) {\n          notifyEvent = source.substring(colon + 2);\n          source = source.substring(0, colon);\n          customEvent = true;\n        }\n        let signature = parseMethod(source);\n        let dependencies = [];\n        if (signature) {\n          // Inline computed function\n          let {args, methodName} = signature;\n          for (let i=0; i<args.length; i++) {\n            let arg = args[i];\n            if (!arg.literal) {\n              dependencies.push(arg);\n            }\n          }\n          let dynamicFns = templateInfo.dynamicFns;\n          if (dynamicFns && dynamicFns[methodName] || signature.static) {\n            dependencies.push(methodName);\n            signature.dynamicFn = true;\n          }\n        } else {\n          // Property or path\n          dependencies.push(source);\n        }\n        parts.push({\n          source, mode, negate, customEvent, signature, dependencies,\n          event: notifyEvent\n        });\n        lastIndex = bindingRegex.lastIndex;\n      }\n      // Add a final literal part\n      if (lastIndex && lastIndex < text.length) {\n        let literal = text.substring(lastIndex);\n        if (literal) {\n          parts.push({\n            literal: literal\n          });\n        }\n      }\n      if (parts.length) {\n        return parts;\n      } else {\n        return null;\n      }\n    }\n\n    /**\n     * Called to evaluate a previously parsed binding part based on a set of\n     * one or more changed dependencies.\n     *\n     * @param {!Polymer_PropertyEffects} inst Element that should be used as\n     *     scope for binding dependencies\n     * @param {BindingPart} part Binding part metadata\n     * @param {string} path Property/path that triggered this effect\n     * @param {Object} props Bag of current property changes\n     * @param {Object} oldProps Bag of previous values for changed properties\n     * @param {boolean} hasPaths True with `props` contains one or more paths\n     * @return {*} Value the binding part evaluated to\n     * @protected\n     * @nocollapse\n     */\n    static _evaluateBinding(inst, part, path, props, oldProps, hasPaths) {\n      let value;\n      if (part.signature) {\n        value = runMethodEffect(inst, path, props, oldProps, part.signature);\n      } else if (path != part.source) {\n        value = get(inst, part.source);\n      } else {\n        if (hasPaths && isPath(path)) {\n          value = get(inst, path);\n        } else {\n          value = inst.__data[path];\n        }\n      }\n      if (part.negate) {\n        value = !value;\n      }\n      return value;\n    }\n\n  }\n\n  return PropertyEffects;\n});\n\n/**\n * Stack for enqueuing client dom created by a host element.\n *\n * By default elements are flushed via `_flushProperties` when\n * `connectedCallback` is called. Elements attach their client dom to\n * themselves at `ready` time which results from this first flush.\n * This provides an ordering guarantee that the client dom an element\n * creates is flushed before the element itself (i.e. client `ready`\n * fires before host `ready`).\n *\n * However, if `_flushProperties` is called *before* an element is connected,\n * as for example `Templatize` does, this ordering guarantee cannot be\n * satisfied because no elements are connected. (Note: Bound elements that\n * receive data do become enqueued clients and are properly ordered but\n * unbound elements are not.)\n *\n * To maintain the desired \"client before host\" ordering guarantee for this\n * case we rely on the \"host stack. Client nodes registers themselves with\n * the creating host element when created. This ensures that all client dom\n * is readied in the proper order, maintaining the desired guarantee.\n *\n * @private\n */\nconst hostStack = [];\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Total number of Polymer element instances created.\n * @type {number}\n */\nexport let instanceCount = 0;\n\nexport function incrementInstanceCount() {\n  instanceCount++;\n}\n\n/**\n * Array of Polymer element classes that have been finalized.\n * @type {!Array<!PolymerElementConstructor>}\n */\nexport const registrations = [];\n\n/**\n * @param {!PolymerElementConstructor} prototype Element prototype to log\n * @private\n */\nfunction _regLog(prototype) {\n  console.log('[' + /** @type {?} */(prototype).is + ']: registered');\n}\n\n/**\n * Registers a class prototype for telemetry purposes.\n * @param {!PolymerElementConstructor} prototype Element prototype to register\n * @protected\n */\nexport function register(prototype) {\n  registrations.push(prototype);\n}\n\n/**\n * Logs all elements registered with an `is` to the console.\n * @public\n */\nexport function dumpRegistrations() {\n  registrations.forEach(_regLog);\n}", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { register, incrementInstanceCount } from '../utils/telemetry.js';\nimport { PropertiesChanged } from './properties-changed.js';\n\n/**\n * Creates a copy of `props` with each property normalized such that\n * upgraded it is an object with at least a type property { type: Type}.\n *\n * @param {!Object} props Properties to normalize\n * @return {!Object} Copy of input `props` with normalized properties that\n * are in the form {type: Type}\n * @private\n */\nfunction normalizeProperties(props) {\n  const output = {};\n  for (let p in props) {\n    const o = props[p];\n    output[p] = (typeof o === 'function') ? {type: o} : o;\n  }\n  return output;\n}\n\n/**\n * Mixin that provides a minimal starting point to using the PropertiesChanged\n * mixin by providing a mechanism to declare properties in a static\n * getter (e.g. static get properties() { return { foo: String } }). Changes\n * are reported via the `_propertiesChanged` method.\n *\n * This mixin provides no specific support for rendering. Users are expected\n * to create a ShadowRoot and put content into it and update it in whatever\n * way makes sense. This can be done in reaction to properties changing by\n * implementing `_propertiesChanged`.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertiesChanged\n * @summary Mixin that provides a minimal starting point for using\n * the PropertiesChanged mixin by providing a declarative `properties` object.\n * @template T\n * @param {function(new:T)} superClass Class to apply mixin to.\n * @return {function(new:T)} superClass with mixin applied.\n */\nexport const PropertiesMixin = dedupingMixin(superClass => {\n\n /**\n  * @constructor\n  * @implements {Polymer_PropertiesChanged}\n  * @private\n  */\n const base = PropertiesChanged(superClass);\n\n /**\n  * Returns the super class constructor for the given class, if it is an\n  * instance of the PropertiesMixin.\n  *\n  * @param {!PropertiesMixinConstructor} constructor PropertiesMixin constructor\n  * @return {?PropertiesMixinConstructor} Super class constructor\n  */\n function superPropertiesClass(constructor) {\n   const superCtor = Object.getPrototypeOf(constructor);\n\n   // Note, the `PropertiesMixin` class below only refers to the class\n   // generated by this call to the mixin; the instanceof test only works\n   // because the mixin is deduped and guaranteed only to apply once, hence\n   // all constructors in a proto chain will see the same `PropertiesMixin`\n   return (superCtor.prototype instanceof PropertiesMixin) ?\n     /** @type {!PropertiesMixinConstructor} */ (superCtor) : null;\n }\n\n /**\n  * Returns a memoized version of the `properties` object for the\n  * given class. Properties not in object format are converted to at\n  * least {type}.\n  *\n  * @param {PropertiesMixinConstructor} constructor PropertiesMixin constructor\n  * @return {Object} Memoized properties object\n  */\n function ownProperties(constructor) {\n   if (!constructor.hasOwnProperty(JSCompiler_renameProperty('__ownProperties', constructor))) {\n     let props = null;\n\n     if (constructor.hasOwnProperty(JSCompiler_renameProperty('properties', constructor))) {\n       const properties = constructor.properties;\n\n       if (properties) {\n        props = normalizeProperties(properties);\n       }\n     }\n\n     constructor.__ownProperties = props;\n   }\n   return constructor.__ownProperties;\n }\n\n /**\n  * @polymer\n  * @mixinClass\n  * @extends {base}\n  * @implements {Polymer_PropertiesMixin}\n  * @unrestricted\n  */\n class PropertiesMixin extends base {\n\n   /**\n    * Implements standard custom elements getter to observes the attributes\n    * listed in `properties`.\n    * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n    * @nocollapse\n    */\n   static get observedAttributes() {\n     if (!this.hasOwnProperty(JSCompiler_renameProperty('__observedAttributes', this))) {\n       register(this.prototype);\n       const props = this._properties;\n       this.__observedAttributes = props ? Object.keys(props).map(p => this.prototype._addPropertyToAttributeMap(p)) : [];\n     }\n     return this.__observedAttributes;\n   }\n\n   /**\n    * Finalizes an element definition, including ensuring any super classes\n    * are also finalized. This includes ensuring property\n    * accessors exist on the element prototype. This method calls\n    * `_finalizeClass` to finalize each constructor in the prototype chain.\n    * @return {void}\n    * @nocollapse\n    */\n   static finalize() {\n     if (!this.hasOwnProperty(JSCompiler_renameProperty('__finalized', this))) {\n       const superCtor = superPropertiesClass(/** @type {!PropertiesMixinConstructor} */(this));\n       if (superCtor) {\n         superCtor.finalize();\n       }\n       this.__finalized = true;\n       this._finalizeClass();\n     }\n   }\n\n   /**\n    * Finalize an element class. This includes ensuring property\n    * accessors exist on the element prototype. This method is called by\n    * `finalize` and finalizes the class constructor.\n    *\n    * @protected\n    * @nocollapse\n    */\n   static _finalizeClass() {\n     const props = ownProperties(/** @type {!PropertiesMixinConstructor} */(this));\n     if (props) {\n       /** @type {?} */ (this).createProperties(props);\n     }\n   }\n\n   /**\n    * Returns a memoized version of all properties, including those inherited\n    * from super classes. Properties not in object format are converted to\n    * at least {type}.\n    *\n    * @return {Object} Object containing properties for this class\n    * @protected\n    * @nocollapse\n    */\n   static get _properties() {\n     if (!this.hasOwnProperty(\n       JSCompiler_renameProperty('__properties', this))) {\n       const superCtor = superPropertiesClass(/** @type {!PropertiesMixinConstructor} */(this));\n       this.__properties = Object.assign({},\n         superCtor && superCtor._properties,\n         ownProperties(/** @type {PropertiesMixinConstructor} */(this)));\n     }\n     return this.__properties;\n   }\n\n   /**\n    * Overrides `PropertiesChanged` method to return type specified in the\n    * static `properties` object for the given property.\n    * @param {string} name Name of property\n    * @return {*} Type to which to deserialize attribute\n    *\n    * @protected\n    * @nocollapse\n    */\n   static typeForProperty(name) {\n     const info = this._properties[name];\n     return info && info.type;\n   }\n\n   /**\n    * Overrides `PropertiesChanged` method and adds a call to\n    * `finalize` which lazily configures the element's property accessors.\n    * @override\n    * @return {void}\n    */\n   _initializeProperties() {\n     incrementInstanceCount();\n     this.constructor.finalize();\n     super._initializeProperties();\n   }\n\n   /**\n    * Called when the element is added to a document.\n    * Calls `_enableProperties` to turn on property system from\n    * `PropertiesChanged`.\n    * @suppress {missingProperties} Super may or may not implement the callback\n    * @return {void}\n    * @override\n    */\n   connectedCallback() {\n     if (super.connectedCallback) {\n       super.connectedCallback();\n     }\n     this._enableProperties();\n   }\n\n   /**\n    * Called when the element is removed from a document\n    * @suppress {missingProperties} Super may or may not implement the callback\n    * @return {void}\n    * @override\n    */\n   disconnectedCallback() {\n     if (super.disconnectedCallback) {\n       super.disconnectedCallback();\n     }\n   }\n\n }\n\n return PropertiesMixin;\n\n});\n", "/**\n * @fileoverview\n * @suppress {checkPrototypalTypes}\n * @license Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt The complete set of authors may be found\n * at http://polymer.github.io/AUTHORS.txt The complete set of contributors may\n * be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by\n * Google as part of the polymer project is also subject to an additional IP\n * rights grant found at http://polymer.github.io/PATENTS.txt\n */\nimport '../utils/boot.js';\n\nimport { rootPath, strictTemplatePolicy, allowTemplateFromDomModule, legacyOptimizations, legacyWarnings, syncInitialRender, supportsAdoptingStyleSheets, useAdoptedStyleSheetsWithBuiltCSS } from '../utils/settings.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { stylesFromTemplate, stylesFromModuleImports } from '../utils/style-gather.js';\nimport { pathFromUrl, resolveCss, resolveUrl } from '../utils/resolve-url.js';\nimport { DomModule } from '../elements/dom-module.js';\nimport { PropertyEffects } from './property-effects.js';\nimport { PropertiesMixin } from './properties-mixin.js';\nimport { wrap } from '../utils/wrap.js';\n\n/**\n * Current Polymer version in Semver notation.\n * @type {string} Semver notation of the current version of Polymer.\n */\nexport const version = '3.4.1';\n\nexport const builtCSS = window.ShadyCSS && window.ShadyCSS['cssBuild'];\n\n/**\n * Element class mixin that provides the core API for Polymer's meta-programming\n * features including template stamping, data-binding, attribute deserialization,\n * and property change observation.\n *\n * Subclassers may provide the following static getters to return metadata\n * used to configure Polymer's features for the class:\n *\n * - `static get is()`: When the template is provided via a `dom-module`,\n *   users should return the `dom-module` id from a static `is` getter.  If\n *   no template is needed or the template is provided directly via the\n *   `template` getter, there is no need to define `is` for the element.\n *\n * - `static get template()`: Users may provide the template directly (as\n *   opposed to via `dom-module`) by implementing a static `template` getter.\n *   The getter must return an `HTMLTemplateElement`.\n *\n * - `static get properties()`: Should return an object describing\n *   property-related metadata used by Polymer features (key: property name\n *   value: object containing property metadata). Valid keys in per-property\n *   metadata include:\n *   - `type` (String|Number|Object|Array|...): Used by\n *     `attributeChangedCallback` to determine how string-based attributes\n *     are deserialized to JavaScript property values.\n *   - `notify` (boolean): Causes a change in the property to fire a\n *     non-bubbling event called `<property>-changed`. Elements that have\n *     enabled two-way binding to the property use this event to observe changes.\n *   - `readOnly` (boolean): Creates a getter for the property, but no setter.\n *     To set a read-only property, use the private setter method\n *     `_setProperty(property, value)`.\n *   - `observer` (string): Observer method name that will be called when\n *     the property changes. The arguments of the method are\n *     `(value, previousValue)`.\n *   - `computed` (string): String describing method and dependent properties\n *     for computing the value of this property (e.g. `'computeFoo(bar, zot)'`).\n *     Computed properties are read-only by default and can only be changed\n *     via the return value of the computing method.\n *\n * - `static get observers()`: Array of strings describing multi-property\n *   observer methods and their dependent properties (e.g.\n *   `'observeABC(a, b, c)'`).\n *\n * The base class provides default implementations for the following standard\n * custom element lifecycle callbacks; users may override these, but should\n * call the super method to ensure\n * - `constructor`: Run when the element is created or upgraded\n * - `connectedCallback`: Run each time the element is connected to the\n *   document\n * - `disconnectedCallback`: Run each time the element is disconnected from\n *   the document\n * - `attributeChangedCallback`: Run each time an attribute in\n *   `observedAttributes` is set or removed (note: this element's default\n *   `observedAttributes` implementation will automatically return an array\n *   of dash-cased attributes based on `properties`)\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertyEffects\n * @appliesMixin PropertiesMixin\n * @property rootPath {string} Set to the value of `rootPath`,\n *   which defaults to the main document path\n * @property importPath {string} Set to the value of the class's static\n *   `importPath` property, which defaults to the path of this element's\n *   `dom-module` (when `is` is used), but can be overridden for other\n *   import strategies.\n * @summary Element class mixin that provides the core API for Polymer's\n * meta-programming features.\n * @template T\n * @param {function(new:T)} superClass Class to apply mixin to.\n * @return {function(new:T)} superClass with mixin applied.\n */\nexport const ElementMixin = dedupingMixin(base => {\n  /**\n   * @constructor\n   * @implements {Polymer_PropertyEffects}\n   * @implements {Polymer_PropertiesMixin}\n   * @extends {HTMLElement}\n   * @private\n   */\n  const polymerElementBase = PropertiesMixin(PropertyEffects(base));\n\n  /**\n   * Returns a list of properties with default values.\n   * This list is created as an optimization since it is a subset of\n   * the list returned from `_properties`.\n   * This list is used in `_initializeProperties` to set property defaults.\n   *\n   * @param {PolymerElementConstructor} constructor Element class\n   * @return {PolymerElementProperties} Flattened properties for this class\n   *   that have default values\n   * @private\n   */\n  function propertyDefaults(constructor) {\n    if (!constructor.hasOwnProperty(\n      JSCompiler_renameProperty('__propertyDefaults', constructor))) {\n      constructor.__propertyDefaults = null;\n      let props = constructor._properties;\n      for (let p in props) {\n        let info = props[p];\n        if ('value' in info) {\n          constructor.__propertyDefaults = constructor.__propertyDefaults || {};\n          constructor.__propertyDefaults[p] = info;\n        }\n      }\n    }\n    return constructor.__propertyDefaults;\n  }\n\n  /**\n   * Returns a memoized version of the `observers` array.\n   * @param {PolymerElementConstructor} constructor Element class\n   * @return {Array} Array containing own observers for the given class\n   * @protected\n   */\n  function ownObservers(constructor) {\n    if (!constructor.hasOwnProperty(\n      JSCompiler_renameProperty('__ownObservers', constructor))) {\n      constructor.__ownObservers =\n          constructor.hasOwnProperty(\n              JSCompiler_renameProperty('observers', constructor)) ?\n          /** @type {PolymerElementConstructor} */ (constructor).observers :\n          null;\n    }\n    return constructor.__ownObservers;\n  }\n\n  /**\n   * Creates effects for a property.\n   *\n   * Note, once a property has been set to\n   * `readOnly`, `computed`, `reflectToAttribute`, or `notify`\n   * these values may not be changed. For example, a subclass cannot\n   * alter these settings. However, additional `observers` may be added\n   * by subclasses.\n   *\n   * The info object should contain property metadata as follows:\n   *\n   * * `type`: {function} type to which an attribute matching the property\n   * is deserialized. Note the property is camel-cased from a dash-cased\n   * attribute. For example, 'foo-bar' attribute is deserialized to a\n   * property named 'fooBar'.\n   *\n   * * `readOnly`: {boolean} creates a readOnly property and\n   * makes a private setter for the private of the form '_setFoo' for a\n   * property 'foo',\n   *\n   * * `computed`: {string} creates a computed property. A computed property\n   * is also automatically set to `readOnly: true`. The value is calculated\n   * by running a method and arguments parsed from the given string. For\n   * example 'compute(foo)' will compute a given property when the\n   * 'foo' property changes by executing the 'compute' method. This method\n   * must return the computed value.\n   *\n   * * `reflectToAttribute`: {boolean} If true, the property value is reflected\n   * to an attribute of the same name. Note, the attribute is dash-cased\n   * so a property named 'fooBar' is reflected as 'foo-bar'.\n   *\n   * * `notify`: {boolean} sends a non-bubbling notification event when\n   * the property changes. For example, a property named 'foo' sends an\n   * event named 'foo-changed' with `event.detail` set to the value of\n   * the property.\n   *\n   * * observer: {string} name of a method that runs when the property\n   * changes. The arguments of the method are (value, previousValue).\n   *\n   * Note: Users may want control over modifying property\n   * effects via subclassing. For example, a user might want to make a\n   * reflectToAttribute property not do so in a subclass. We've chosen to\n   * disable this because it leads to additional complication.\n   * For example, a readOnly effect generates a special setter. If a subclass\n   * disables the effect, the setter would fail unexpectedly.\n   * Based on feedback, we may want to try to make effects more malleable\n   * and/or provide an advanced api for manipulating them.\n   *\n   * @param {!PolymerElement} proto Element class prototype to add accessors\n   *   and effects to\n   * @param {string} name Name of the property.\n   * @param {Object} info Info object from which to create property effects.\n   * Supported keys:\n   * @param {Object} allProps Flattened map of all properties defined in this\n   *   element (including inherited properties)\n   * @return {void}\n   * @private\n   */\n  function createPropertyFromConfig(proto, name, info, allProps) {\n    // computed forces readOnly...\n    if (info.computed) {\n      info.readOnly = true;\n    }\n    // Note, since all computed properties are readOnly, this prevents\n    // adding additional computed property effects (which leads to a confusing\n    // setup where multiple triggers for setting a property)\n    // While we do have `hasComputedEffect` this is set on the property's\n    // dependencies rather than itself.\n    if (info.computed) {\n      if (proto._hasReadOnlyEffect(name)) {\n        console.warn(`Cannot redefine computed property '${name}'.`);\n      } else {\n        proto._createComputedProperty(name, info.computed, allProps);\n      }\n    }\n    if (info.readOnly && !proto._hasReadOnlyEffect(name)) {\n      proto._createReadOnlyProperty(name, !info.computed);\n    } else if (info.readOnly === false && proto._hasReadOnlyEffect(name)) {\n      console.warn(`Cannot make readOnly property '${name}' non-readOnly.`);\n    }\n    if (info.reflectToAttribute && !proto._hasReflectEffect(name)) {\n      proto._createReflectedProperty(name);\n    } else if (info.reflectToAttribute === false && proto._hasReflectEffect(name)) {\n      console.warn(`Cannot make reflected property '${name}' non-reflected.`);\n    }\n    if (info.notify && !proto._hasNotifyEffect(name)) {\n      proto._createNotifyingProperty(name);\n    } else if (info.notify === false && proto._hasNotifyEffect(name)) {\n      console.warn(`Cannot make notify property '${name}' non-notify.`);\n    }\n    // always add observer\n    if (info.observer) {\n      proto._createPropertyObserver(name, info.observer, allProps[info.observer]);\n    }\n    // always create the mapping from attribute back to property for deserialization.\n    proto._addPropertyToAttributeMap(name);\n  }\n\n  /**\n   * Process all style elements in the element template. Styles with the\n   * `include` attribute are processed such that any styles in\n   * the associated \"style modules\" are included in the element template.\n   * @param {PolymerElementConstructor} klass Element class\n   * @param {!HTMLTemplateElement} template Template to process\n   * @param {string} is Name of element\n   * @param {string} baseURI Base URI for element\n   * @private\n   */\n  function processElementStyles(klass, template, is, baseURI) {\n    if (!builtCSS) {\n      const templateStyles = template.content.querySelectorAll('style');\n      const stylesWithImports = stylesFromTemplate(template);\n      // insert styles from <link rel=\"import\" type=\"css\"> at the top of the template\n      const linkedStyles = stylesFromModuleImports(is);\n      const firstTemplateChild = template.content.firstElementChild;\n      for (let idx = 0; idx < linkedStyles.length; idx++) {\n        let s = linkedStyles[idx];\n        s.textContent = klass._processStyleText(s.textContent, baseURI);\n        template.content.insertBefore(s, firstTemplateChild);\n      }\n      // keep track of the last \"concrete\" style in the template we have encountered\n      let templateStyleIndex = 0;\n      // ensure all gathered styles are actually in this template.\n      for (let i = 0; i < stylesWithImports.length; i++) {\n        let s = stylesWithImports[i];\n        let templateStyle = templateStyles[templateStyleIndex];\n        // if the style is not in this template, it's been \"included\" and\n        // we put a clone of it in the template before the style that included it\n        if (templateStyle !== s) {\n          s = s.cloneNode(true);\n          templateStyle.parentNode.insertBefore(s, templateStyle);\n        } else {\n          templateStyleIndex++;\n        }\n        s.textContent = klass._processStyleText(s.textContent, baseURI);\n      }\n    }\n    if (window.ShadyCSS) {\n      window.ShadyCSS.prepareTemplate(template, is);\n    }\n    // Support for `adoptedStylesheets` relies on using native Shadow DOM\n    // and built CSS. Built CSS is required because runtime transformation of\n    // `@apply` is not supported. This is because ShadyCSS relies on being able\n    // to update a `style` element in the element template and this is\n    // removed when using `adoptedStyleSheets`.\n    // Note, it would be more efficient to allow style includes to become\n    // separate stylesheets; however, because of `@apply` these are\n    // potentially not shareable and sharing the ones that could be shared\n    // would require some coordination. To keep it simple, all the includes\n    // and styles are collapsed into a single shareable stylesheet.\n    if (useAdoptedStyleSheetsWithBuiltCSS && builtCSS &&\n        supportsAdoptingStyleSheets) {\n      // Remove styles in template and make a shareable stylesheet\n      const styles = template.content.querySelectorAll('style');\n      if (styles) {\n        let css = '';\n        Array.from(styles).forEach(s => {\n          css += s.textContent;\n          s.parentNode.removeChild(s);\n        });\n        klass._styleSheet = new CSSStyleSheet();\n        klass._styleSheet.replaceSync(css);\n      }\n    }\n  }\n\n  /**\n   * Look up template from dom-module for element\n   *\n   * @param {string} is Element name to look up\n   * @return {?HTMLTemplateElement|undefined} Template found in dom module, or\n   *   undefined if not found\n   * @protected\n   */\n  function getTemplateFromDomModule(is) {\n    let template = null;\n    // Under strictTemplatePolicy in 3.x+, dom-module lookup is only allowed\n    // when opted-in via allowTemplateFromDomModule\n    if (is && (!strictTemplatePolicy || allowTemplateFromDomModule)) {\n      template = /** @type {?HTMLTemplateElement} */ (\n          DomModule.import(is, 'template'));\n      // Under strictTemplatePolicy, require any element with an `is`\n      // specified to have a dom-module\n      if (strictTemplatePolicy && !template) {\n        throw new Error(`strictTemplatePolicy: expecting dom-module or null template for ${is}`);\n      }\n    }\n    return template;\n  }\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @unrestricted\n   * @implements {Polymer_ElementMixin}\n   * @extends {polymerElementBase}\n   */\n  class PolymerElement extends polymerElementBase {\n\n    /**\n     * Current Polymer version in Semver notation.\n     * @type {string} Semver notation of the current version of Polymer.\n     * @nocollapse\n     */\n    static get polymerElementVersion() {\n      return version;\n    }\n\n    /**\n     * Override of PropertiesMixin _finalizeClass to create observers and\n     * find the template.\n     * @return {void}\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     * @nocollapse\n     */\n    static _finalizeClass() {\n      // TODO(https://github.com/google/closure-compiler/issues/3240):\n      //     Change back to just super.methodCall()\n      polymerElementBase._finalizeClass.call(this);\n      const observers = ownObservers(this);\n      if (observers) {\n        this.createObservers(observers, this._properties);\n      }\n      this._prepareTemplate();\n    }\n\n    /** @nocollapse */\n    static _prepareTemplate() {\n      // note: create \"working\" template that is finalized at instance time\n      let template = /** @type {PolymerElementConstructor} */ (this).template;\n      if (template) {\n        if (typeof template === 'string') {\n          console.error('template getter must return HTMLTemplateElement');\n          template = null;\n        } else if (!legacyOptimizations) {\n          template = template.cloneNode(true);\n        }\n      }\n\n      /** @override */\n      this.prototype._template = template;\n    }\n\n    /**\n     * Override of PropertiesChanged createProperties to create accessors\n     * and property effects for all of the properties.\n     * @param {!Object} props .\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static createProperties(props) {\n      for (let p in props) {\n        createPropertyFromConfig(\n            /** @type {?} */ (this.prototype), p, props[p], props);\n      }\n    }\n\n    /**\n     * Creates observers for the given `observers` array.\n     * Leverages `PropertyEffects` to create observers.\n     * @param {Object} observers Array of observer descriptors for\n     *   this class\n     * @param {Object} dynamicFns Object containing keys for any properties\n     *   that are functions and should trigger the effect when the function\n     *   reference is changed\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static createObservers(observers, dynamicFns) {\n      const proto = this.prototype;\n      for (let i=0; i < observers.length; i++) {\n        proto._createMethodObserver(observers[i], dynamicFns);\n      }\n    }\n\n    /**\n     * Returns the template that will be stamped into this element's shadow root.\n     *\n     * If a `static get is()` getter is defined, the default implementation will\n     * return the first `<template>` in a `dom-module` whose `id` matches this\n     * element's `is` (note that a `_template` property on the class prototype\n     * takes precedence over the `dom-module` template, to maintain legacy\n     * element semantics; a subclass will subsequently fall back to its super\n     * class template if neither a `prototype._template` or a `dom-module` for\n     * the class's `is` was found).\n     *\n     * Users may override this getter to return an arbitrary template\n     * (in which case the `is` getter is unnecessary). The template returned\n     * must be an `HTMLTemplateElement`.\n     *\n     * Note that when subclassing, if the super class overrode the default\n     * implementation and the subclass would like to provide an alternate\n     * template via a `dom-module`, it should override this getter and\n     * return `DomModule.import(this.is, 'template')`.\n     *\n     * If a subclass would like to modify the super class template, it should\n     * clone it rather than modify it in place.  If the getter does expensive\n     * work such as cloning/modifying a template, it should memoize the\n     * template for maximum performance:\n     *\n     *   let memoizedTemplate;\n     *   class MySubClass extends MySuperClass {\n     *     static get template() {\n     *       if (!memoizedTemplate) {\n     *         memoizedTemplate = super.template.cloneNode(true);\n     *         let subContent = document.createElement('div');\n     *         subContent.textContent = 'This came from MySubClass';\n     *         memoizedTemplate.content.appendChild(subContent);\n     *       }\n     *       return memoizedTemplate;\n     *     }\n     *   }\n     *\n     * @return {!HTMLTemplateElement|string} Template to be stamped\n     * @nocollapse\n     */\n    static get template() {\n      // Explanation of template-related properties:\n      // - constructor.template (this getter): the template for the class.\n      //     This can come from the prototype (for legacy elements), from a\n      //     dom-module, or from the super class's template (or can be overridden\n      //     altogether by the user)\n      // - constructor._template: memoized version of constructor.template\n      // - prototype._template: working template for the element, which will be\n      //     parsed and modified in place. It is a cloned version of\n      //     constructor.template, saved in _finalizeClass(). Note that before\n      //     this getter is called, for legacy elements this could be from a\n      //     _template field on the info object passed to Polymer(), a behavior,\n      //     or set in registered(); once the static getter runs, a clone of it\n      //     will overwrite it on the prototype as the working template.\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('_template', this))) {\n        const protoTemplate = this.prototype.hasOwnProperty(\n          JSCompiler_renameProperty('_template', this.prototype)) ?\n          this.prototype._template : undefined;\n        this._template =\n          // If user has put template on prototype (e.g. in legacy via registered\n          // callback or info object), prefer that first. Note that `null` is\n          // used as a sentinel to indicate \"no template\" and can be used to\n          // override a super template, whereas `undefined` is used as a\n          // sentinel to mean \"fall-back to default template lookup\" via\n          // dom-module and/or super.template.\n          protoTemplate !== undefined ? protoTemplate :\n          // Look in dom-module associated with this element's is\n          ((this.hasOwnProperty(JSCompiler_renameProperty('is', this)) &&\n          (getTemplateFromDomModule(/** @type {PolymerElementConstructor}*/ (this).is))) ||\n          // Next look for superclass template (call the super impl this\n          // way so that `this` points to the superclass)\n          Object.getPrototypeOf(/** @type {PolymerElementConstructor}*/ (this).prototype).constructor.template);\n      }\n      return this._template;\n    }\n\n    /**\n     * Set the template.\n     *\n     * @param {!HTMLTemplateElement|string} value Template to set.\n     * @nocollapse\n     */\n    static set template(value) {\n      this._template = value;\n    }\n\n    /**\n     * Path matching the url from which the element was imported.\n     *\n     * This path is used to resolve url's in template style cssText.\n     * The `importPath` property is also set on element instances and can be\n     * used to create bindings relative to the import path.\n     *\n     * For elements defined in ES modules, users should implement\n     * `static get importMeta() { return import.meta; }`, and the default\n     * implementation of `importPath` will  return `import.meta.url`'s path.\n     * For elements defined in HTML imports, this getter will return the path\n     * to the document containing a `dom-module` element matching this\n     * element's static `is` property.\n     *\n     * Note, this path should contain a trailing `/`.\n     *\n     * @return {string} The import path for this element class\n     * @suppress {missingProperties}\n     * @nocollapse\n     */\n    static get importPath() {\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('_importPath', this))) {\n        const meta = this.importMeta;\n        if (meta) {\n          this._importPath = pathFromUrl(meta.url);\n        } else {\n          const module = DomModule.import(/** @type {PolymerElementConstructor} */ (this).is);\n          this._importPath = (module && module.assetpath) ||\n            Object.getPrototypeOf(/** @type {PolymerElementConstructor}*/ (this).prototype).constructor.importPath;\n        }\n      }\n      return this._importPath;\n    }\n\n    constructor() {\n      super();\n      /** @type {HTMLTemplateElement} */\n      this._template;\n      /** @type {string} */\n      this._importPath;\n      /** @type {string} */\n      this.rootPath;\n      /** @type {string} */\n      this.importPath;\n      /** @type {StampedTemplate | HTMLElement | ShadowRoot} */\n      this.root;\n      /** @type {!Object<string, !Element>} */\n      this.$;\n    }\n\n    /**\n     * Overrides the default `PropertyAccessors` to ensure class\n     * metaprogramming related to property accessors and effects has\n     * completed (calls `finalize`).\n     *\n     * It also initializes any property defaults provided via `value` in\n     * `properties` metadata.\n     *\n     * @return {void}\n     * @override\n     * @suppress {invalidCasts,missingProperties} go/missingfnprops\n     */\n    _initializeProperties() {\n      this.constructor.finalize();\n      // note: finalize template when we have access to `localName` to\n      // avoid dependence on `is` for polyfilling styling.\n      this.constructor._finalizeTemplate(/** @type {!HTMLElement} */(this).localName);\n      super._initializeProperties();\n      // set path defaults\n      this.rootPath = rootPath;\n      this.importPath = this.constructor.importPath;\n      // apply property defaults...\n      let p$ = propertyDefaults(this.constructor);\n      if (!p$) {\n        return;\n      }\n      for (let p in p$) {\n        let info = p$[p];\n        if (this._canApplyPropertyDefault(p)) {\n          let value = typeof info.value == 'function' ?\n            info.value.call(this) :\n            info.value;\n          // Set via `_setProperty` if there is an accessor, to enable\n          // initializing readOnly property defaults\n          if (this._hasAccessor(p)) {\n            this._setPendingProperty(p, value, true);\n          } else {\n            this[p] = value;\n          }\n        }\n      }\n    }\n\n    /**\n     * Determines if a property dfeault can be applied. For example, this\n     * prevents a default from being applied when a property that has no\n     * accessor is overridden by its host before upgrade (e.g. via a binding).\n     * @override\n     * @param {string} property Name of the property\n     * @return {boolean} Returns true if the property default can be applied.\n     */\n    _canApplyPropertyDefault(property) {\n      return !this.hasOwnProperty(property);\n    }\n\n    /**\n     * Gather style text for a style element in the template.\n     *\n     * @param {string} cssText Text containing styling to process\n     * @param {string} baseURI Base URI to rebase CSS paths against\n     * @return {string} The processed CSS text\n     * @protected\n     * @nocollapse\n     */\n    static _processStyleText(cssText, baseURI) {\n      return resolveCss(cssText, baseURI);\n    }\n\n    /**\n    * Configures an element `proto` to function with a given `template`.\n    * The element name `is` and extends `ext` must be specified for ShadyCSS\n    * style scoping.\n    *\n    * @param {string} is Tag name (or type extension name) for this element\n    * @return {void}\n    * @protected\n    * @nocollapse\n    */\n    static _finalizeTemplate(is) {\n      /** @const {HTMLTemplateElement} */\n      const template = this.prototype._template;\n      if (template && !template.__polymerFinalized) {\n        template.__polymerFinalized = true;\n        const importPath = this.importPath;\n        const baseURI = importPath ? resolveUrl(importPath) : '';\n        // e.g. support `include=\"module-name\"`, and ShadyCSS\n        processElementStyles(this, template, is, baseURI);\n        this.prototype._bindTemplate(template);\n      }\n    }\n\n    /**\n     * Provides a default implementation of the standard Custom Elements\n     * `connectedCallback`.\n     *\n     * The default implementation enables the property effects system and\n     * flushes any pending properties, and updates shimmed CSS properties\n     * when using the ShadyCSS scoping/custom properties polyfill.\n     *\n     * @override\n     * @suppress {missingProperties, invalidCasts} Super may or may not\n     *     implement the callback\n     * @return {void}\n     */\n    connectedCallback() {\n      if (window.ShadyCSS && this._template) {\n        window.ShadyCSS.styleElement(/** @type {!HTMLElement} */(this));\n      }\n      super.connectedCallback();\n    }\n\n    /**\n     * Stamps the element template.\n     *\n     * @return {void}\n     * @override\n     */\n    ready() {\n      if (this._template) {\n        this.root = this._stampTemplate(this._template);\n        this.$ = this.root.$;\n      }\n      super.ready();\n    }\n\n    /**\n     * Implements `PropertyEffects`'s `_readyClients` call. Attaches\n     * element dom by calling `_attachDom` with the dom stamped from the\n     * element's template via `_stampTemplate`. Note that this allows\n     * client dom to be attached to the element prior to any observers\n     * running.\n     *\n     * @return {void}\n     * @override\n     */\n    _readyClients() {\n      if (this._template) {\n        this.root = this._attachDom(/** @type {StampedTemplate} */(this.root));\n      }\n      // The super._readyClients here sets the clients initialized flag.\n      // We must wait to do this until after client dom is created/attached\n      // so that this flag can be checked to prevent notifications fired\n      // during this process from being handled before clients are ready.\n      super._readyClients();\n    }\n\n\n    /**\n     * Attaches an element's stamped dom to itself. By default,\n     * this method creates a `shadowRoot` and adds the dom to it.\n     * However, this method may be overridden to allow an element\n     * to put its dom in another location.\n     *\n     * @override\n     * @throws {Error}\n     * @suppress {missingReturn}\n     * @param {StampedTemplate} dom to attach to the element.\n     * @return {ShadowRoot} node to which the dom has been attached.\n     */\n    _attachDom(dom) {\n      const n = wrap(this);\n      if (n.attachShadow) {\n        if (dom) {\n          if (!n.shadowRoot) {\n            n.attachShadow({mode: 'open', shadyUpgradeFragment: dom});\n            n.shadowRoot.appendChild(dom);\n            // When `adoptedStyleSheets` is supported a stylesheet is made\n            // available on the element constructor.\n            if (this.constructor._styleSheet) {\n              n.shadowRoot.adoptedStyleSheets = [this.constructor._styleSheet];\n            }\n          }\n          if (syncInitialRender && window.ShadyDOM) {\n            window.ShadyDOM.flushInitial(n.shadowRoot);\n          }\n          return n.shadowRoot;\n        }\n        return null;\n      } else {\n        throw new Error('ShadowDOM not available. ' +\n          // TODO(sorvell): move to compile-time conditional when supported\n        'PolymerElement can create dom as children instead of in ' +\n        'ShadowDOM by setting `this.root = this;\\` before \\`ready\\`.');\n      }\n    }\n\n    /**\n     * When using the ShadyCSS scoping and custom property shim, causes all\n     * shimmed styles in this element (and its subtree) to be updated\n     * based on current custom property values.\n     *\n     * The optional parameter overrides inline custom property styles with an\n     * object of properties where the keys are CSS properties, and the values\n     * are strings.\n     *\n     * Example: `this.updateStyles({'--color': 'blue'})`\n     *\n     * These properties are retained unless a value of `null` is set.\n     *\n     * Note: This function does not support updating CSS mixins.\n     * You can not dynamically change the value of an `@apply`.\n     *\n     * @override\n     * @param {Object=} properties Bag of custom property key/values to\n     *   apply to this element.\n     * @return {void}\n     * @suppress {invalidCasts}\n     */\n    updateStyles(properties) {\n      if (window.ShadyCSS) {\n        window.ShadyCSS.styleSubtree(/** @type {!HTMLElement} */(this), properties);\n      }\n    }\n\n    /**\n     * Rewrites a given URL relative to a base URL. The base URL defaults to\n     * the original location of the document containing the `dom-module` for\n     * this element. This method will return the same URL before and after\n     * bundling.\n     *\n     * Note that this function performs no resolution for URLs that start\n     * with `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\n     * URL resolution, use `window.URL`.\n     *\n     * @override\n     * @param {string} url URL to resolve.\n     * @param {string=} base Optional base URL to resolve against, defaults\n     * to the element's `importPath`\n     * @return {string} Rewritten URL relative to base\n     */\n    resolveUrl(url, base) {\n      if (!base && this.importPath) {\n        base = resolveUrl(this.importPath);\n      }\n      return resolveUrl(url, base);\n    }\n\n    /**\n     * Overrides `PropertyEffects` to add map of dynamic functions on\n     * template info, for consumption by `PropertyEffects` template binding\n     * code. This map determines which method templates should have accessors\n     * created for them.\n     *\n     * @param {!HTMLTemplateElement} template Template\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} .\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     * @nocollapse\n     */\n    static _parseTemplateContent(template, templateInfo, nodeInfo) {\n      templateInfo.dynamicFns = templateInfo.dynamicFns || this._properties;\n      // TODO(https://github.com/google/closure-compiler/issues/3240):\n      //     Change back to just super.methodCall()\n      return polymerElementBase._parseTemplateContent.call(\n        this, template, templateInfo, nodeInfo);\n    }\n\n    /**\n     * Overrides `PropertyEffects` to warn on use of undeclared properties in\n     * template.\n     *\n     * @param {Object} templateInfo Template metadata to add effect to\n     * @param {string} prop Property that should trigger the effect\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     * @nocollapse\n     */\n    static _addTemplatePropertyEffect(templateInfo, prop, effect) {\n      // Warn if properties are used in template without being declared.\n      // Properties must be listed in `properties` to be included in\n      // `observedAttributes` since CE V1 reads that at registration time, and\n      // since we want to keep template parsing lazy, we can't automatically\n      // add undeclared properties used in templates to `observedAttributes`.\n      // The warning is only enabled in `legacyOptimizations` mode, since\n      // we don't want to spam existing users who might have adopted the\n      // shorthand when attribute deserialization is not important.\n      if (legacyWarnings && !(prop in this._properties) &&\n          // Methods used in templates with no dependencies (or only literal\n          // dependencies) become accessors with template effects; ignore these\n          !(effect.info.part.signature && effect.info.part.signature.static) &&\n          // Warnings for bindings added to nested templates are handled by\n          // templatizer so ignore both the host-to-template bindings\n          // (`hostProp`) and TemplateInstance-to-child bindings\n          // (`nestedTemplate`)\n          !effect.info.part.hostProp && !templateInfo.nestedTemplate) {\n        console.warn(`Property '${prop}' used in template but not declared in 'properties'; ` +\n          `attribute will not be observed.`);\n      }\n      // TODO(https://github.com/google/closure-compiler/issues/3240):\n      //     Change back to just super.methodCall()\n      return polymerElementBase._addTemplatePropertyEffect.call(\n        this, templateInfo, prop, effect);\n    }\n\n  }\n\n  return PolymerElement;\n});\n\n/**\n * When using the ShadyCSS scoping and custom property shim, causes all\n * shimmed `styles` (via `custom-style`) in the document (and its subtree)\n * to be updated based on current custom property values.\n *\n * The optional parameter overrides inline custom property styles with an\n * object of properties where the keys are CSS properties, and the values\n * are strings.\n *\n * Example: `updateStyles({'--color': 'blue'})`\n *\n * These properties are retained unless a value of `null` is set.\n *\n * @param {Object=} props Bag of custom property key/values to\n *   apply to the document.\n * @return {void}\n */\nexport const updateStyles = function(props) {\n  if (window.ShadyCSS) {\n    window.ShadyCSS.styleDocument(props);\n  }\n};\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\n/**\n * Class representing a static string value which can be used to filter\n * strings by asseting that they have been created via this class. The\n * `value` property returns the string passed to the constructor.\n */\nclass LiteralString {\n  constructor(string) {\n    /** @type {string} */\n    this.value = string.toString();\n  }\n  /**\n   * @return {string} LiteralString string value\n   * @override\n   */\n  toString() {\n    return this.value;\n  }\n}\n\n/**\n * @param {*} value Object to stringify into HTML\n * @return {string} HTML stringified form of `obj`\n */\nfunction literalValue(value) {\n  if (value instanceof LiteralString) {\n    return /** @type {!LiteralString} */(value).value;\n  } else {\n    throw new Error(\n        `non-literal value passed to Polymer's htmlLiteral function: ${value}`\n    );\n  }\n}\n\n/**\n * @param {*} value Object to stringify into HTML\n * @return {string} HTML stringified form of `obj`\n */\nfunction htmlValue(value) {\n  if (value instanceof HTMLTemplateElement) {\n    return /** @type {!HTMLTemplateElement } */(value).innerHTML;\n  } else if (value instanceof LiteralString) {\n    return literalValue(value);\n  } else {\n    throw new Error(\n        `non-template value passed to Polymer's html function: ${value}`);\n  }\n}\n\n/**\n * A template literal tag that creates an HTML <template> element from the\n * contents of the string.\n *\n * This allows you to write a Polymer Template in JavaScript.\n *\n * Templates can be composed by interpolating `HTMLTemplateElement`s in\n * expressions in the JavaScript template literal. The nested template's\n * `innerHTML` is included in the containing template.  The only other\n * values allowed in expressions are those returned from `htmlLiteral`\n * which ensures only literal values from JS source ever reach the HTML, to\n * guard against XSS risks.\n *\n * All other values are disallowed in expressions to help prevent XSS\n * attacks; however, `htmlLiteral` can be used to compose static\n * string values into templates. This is useful to compose strings into\n * places that do not accept html, like the css text of a `style`\n * element.\n *\n * Example:\n *\n *     static get template() {\n *       return html`\n *         <style>:host{ content:\"...\" }</style>\n *         <div class=\"shadowed\">${this.partialTemplate}</div>\n *         ${super.template}\n *       `;\n *     }\n *     static get partialTemplate() { return html`<span>Partial!</span>`; }\n *\n * @param {!ITemplateArray} strings Constant parts of tagged template literal\n * @param {...*} values Variable parts of tagged template literal\n * @return {!HTMLTemplateElement} Constructed HTMLTemplateElement\n */\nexport const html = function html(strings, ...values) {\n  const template = /** @type {!HTMLTemplateElement} */(document.createElement('template'));\n  template.innerHTML = values.reduce((acc, v, idx) =>\n      acc + htmlValue(v) + strings[idx + 1], strings[0]);\n  return template;\n};\n\n/**\n * An html literal tag that can be used with `html` to compose.\n * a literal string.\n *\n * Example:\n *\n *     static get template() {\n *       return html`\n *         <style>\n *           :host { display: block; }\n *           ${this.styleTemplate()}\n *         </style>\n *         <div class=\"shadowed\">${staticValue}</div>\n *         ${super.template}\n *       `;\n *     }\n *     static get styleTemplate() {\n *        return htmlLiteral`.shadowed { background: gray; }`;\n *     }\n *\n * @param {!ITemplateArray} strings Constant parts of tagged template literal\n * @param {...*} values Variable parts of tagged template literal\n * @return {!LiteralString} Constructed literal string\n */\nexport const htmlLiteral = function(strings, ...values) {\n  return new LiteralString(values.reduce((acc, v, idx) =>\n      acc + literalValue(v) + strings[idx + 1], strings[0]));\n};\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport { ElementMixin, version } from './lib/mixins/element-mixin.js';\nexport { html } from './lib/utils/html-tag.js';\n\nexport { version };\n\n/**\n * Base class that provides the core API for Polymer's meta-programming\n * features including template stamping, data-binding, attribute deserialization,\n * and property change observation.\n *\n * @customElement\n * @polymer\n * @constructor\n * @implements {Polymer_ElementMixin}\n * @extends HTMLElement\n * @appliesMixin ElementMixin\n * @summary Custom element base class that provides the core API for Polymer's\n *   key meta-programming features including template stamping, data-binding,\n *   attribute deserialization, and property change observation\n */\nexport const PolymerElement = ElementMixin(HTMLElement);\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nimport './mixin.js';\nimport './async.js';\n\n/**\n * @summary Collapse multiple callbacks into one invocation after a timer.\n */\nexport class Debouncer {\n  constructor() {\n    this._asyncModule = null;\n    this._callback = null;\n    this._timer = null;\n  }\n  /**\n   * Sets the scheduler; that is, a module with the Async interface,\n   * a callback and optional arguments to be passed to the run function\n   * from the async module.\n   *\n   * @param {!AsyncInterface} asyncModule Object with Async interface.\n   * @param {function()} callback Callback to run.\n   * @return {void}\n   */\n  setConfig(asyncModule, callback) {\n    this._asyncModule = asyncModule;\n    this._callback = callback;\n    this._timer = this._asyncModule.run(() => {\n      this._timer = null;\n      debouncerQueue.delete(this);\n      this._callback();\n    });\n  }\n  /**\n   * Cancels an active debouncer and returns a reference to itself.\n   *\n   * @return {void}\n   */\n  cancel() {\n    if (this.isActive()) {\n      this._cancelAsync();\n      // Canceling a debouncer removes its spot from the flush queue,\n      // so if a debouncer is manually canceled and re-debounced, it\n      // will reset its flush order (this is a very minor difference from 1.x)\n      // Re-debouncing via the `debounce` API retains the 1.x FIFO flush order\n      debouncerQueue.delete(this);\n    }\n  }\n  /**\n   * Cancels a debouncer's async callback.\n   *\n   * @return {void}\n   */\n  _cancelAsync() {\n    if (this.isActive()) {\n      this._asyncModule.cancel(/** @type {number} */(this._timer));\n      this._timer = null;\n    }\n  }\n  /**\n   * Flushes an active debouncer and returns a reference to itself.\n   *\n   * @return {void}\n   */\n  flush() {\n    if (this.isActive()) {\n      this.cancel();\n      this._callback();\n    }\n  }\n  /**\n   * Returns true if the debouncer is active.\n   *\n   * @return {boolean} True if active.\n   */\n  isActive() {\n    return this._timer != null;\n  }\n  /**\n   * Creates a debouncer if no debouncer is passed as a parameter\n   * or it cancels an active debouncer otherwise. The following\n   * example shows how a debouncer can be called multiple times within a\n   * microtask and \"debounced\" such that the provided callback function is\n   * called once. Add this method to a custom element:\n   *\n   * ```js\n   * import {microTask} from '@polymer/polymer/lib/utils/async.js';\n   * import {Debouncer} from '@polymer/polymer/lib/utils/debounce.js';\n   * // ...\n   *\n   * _debounceWork() {\n   *   this._debounceJob = Debouncer.debounce(this._debounceJob,\n   *       microTask, () => this._doWork());\n   * }\n   * ```\n   *\n   * If the `_debounceWork` method is called multiple times within the same\n   * microtask, the `_doWork` function will be called only once at the next\n   * microtask checkpoint.\n   *\n   * Note: In testing it is often convenient to avoid asynchrony. To accomplish\n   * this with a debouncer, you can use `enqueueDebouncer` and\n   * `flush`. For example, extend the above example by adding\n   * `enqueueDebouncer(this._debounceJob)` at the end of the\n   * `_debounceWork` method. Then in a test, call `flush` to ensure\n   * the debouncer has completed.\n   *\n   * @param {Debouncer?} debouncer Debouncer object.\n   * @param {!AsyncInterface} asyncModule Object with Async interface\n   * @param {function()} callback Callback to run.\n   * @return {!Debouncer} Returns a debouncer object.\n   */\n  static debounce(debouncer, asyncModule, callback) {\n    if (debouncer instanceof Debouncer) {\n      // Cancel the async callback, but leave in debouncerQueue if it was\n      // enqueued, to maintain 1.x flush order\n      debouncer._cancelAsync();\n    } else {\n      debouncer = new Debouncer();\n    }\n    debouncer.setConfig(asyncModule, callback);\n    return debouncer;\n  }\n}\n\nlet debouncerQueue = new Set();\n\n/**\n * Adds a `Debouncer` to a list of globally flushable tasks.\n *\n * @param {!Debouncer} debouncer Debouncer to enqueue\n * @return {void}\n */\nexport const enqueueDebouncer = function(debouncer) {\n  debouncerQueue.add(debouncer);\n};\n\n/**\n * Flushes any enqueued debouncers\n *\n * @return {boolean} Returns whether any debouncers were flushed\n */\nexport const flushDebouncers = function() {\n  const didFlush = Boolean(debouncerQueue.size);\n  // If new debouncers are added while flushing, Set.forEach will ensure\n  // newly added ones are also flushed\n  debouncerQueue.forEach(debouncer => {\n    try {\n      debouncer.flush();\n    } catch(e) {\n      setTimeout(() => {\n        throw e;\n      });\n    }\n  });\n  return didFlush;\n};", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * @fileoverview\n *\n * Module for adding listeners to a node for the following normalized\n * cross-platform \"gesture\" events:\n * - `down` - mouse or touch went down\n * - `up` - mouse or touch went up\n * - `tap` - mouse click or finger tap\n * - `track` - mouse drag or touch move\n *\n * @summary Module for adding cross-platform gesture event listeners.\n */\n\nimport './boot.js';\n\nimport { timeOut, microTask } from './async.js';\nimport { Debouncer } from './debounce.js';\nimport { passiveTouchGestures, cancelSyntheticClickEvents } from './settings.js';\nimport { wrap } from './wrap.js';\n\n// detect native touch action support\nlet HAS_NATIVE_TA = typeof document.head.style.touchAction === 'string';\nlet GESTURE_KEY = '__polymerGestures';\nlet HANDLED_OBJ = '__polymerGesturesHandled';\nlet TOUCH_ACTION = '__polymerGesturesTouchAction';\n// radius for tap and track\nlet TAP_DISTANCE = 25;\nlet TRACK_DISTANCE = 5;\n// number of last N track positions to keep\nlet TRACK_LENGTH = 2;\n\n// Disabling \"mouse\" handlers for 2500ms is enough\nlet MOUSE_TIMEOUT = 2500;\nlet MOUSE_EVENTS = ['mousedown', 'mousemove', 'mouseup', 'click'];\n// an array of bitmask values for mapping MouseEvent.which to MouseEvent.buttons\nlet MOUSE_WHICH_TO_BUTTONS = [0, 1, 4, 2];\nlet MOUSE_HAS_BUTTONS = (function() {\n  try {\n    return new MouseEvent('test', {buttons: 1}).buttons === 1;\n  } catch (e) {\n    return false;\n  }\n})();\n\n/**\n * @param {string} name Possible mouse event name\n * @return {boolean} true if mouse event, false if not\n */\nfunction isMouseEvent(name) {\n  return MOUSE_EVENTS.indexOf(name) > -1;\n}\n\n/* eslint no-empty: [\"error\", { \"allowEmptyCatch\": true }] */\n// check for passive event listeners\nlet supportsPassive = false;\n(function() {\n  try {\n    let opts = Object.defineProperty({}, 'passive', {get() {supportsPassive = true;}});\n    window.addEventListener('test', null, opts);\n    window.removeEventListener('test', null, opts);\n  } catch(e) {}\n})();\n\n/**\n * Generate settings for event listeners, dependant on `passiveTouchGestures`\n *\n * @param {string} eventName Event name to determine if `{passive}` option is\n *   needed\n * @return {{passive: boolean} | undefined} Options to use for addEventListener\n *   and removeEventListener\n */\nfunction PASSIVE_TOUCH(eventName) {\n  if (isMouseEvent(eventName) || eventName === 'touchend') {\n    return;\n  }\n  if (HAS_NATIVE_TA && supportsPassive && passiveTouchGestures) {\n    return {passive: true};\n  } else {\n    return;\n  }\n}\n\n// Check for touch-only devices\nlet IS_TOUCH_ONLY = navigator.userAgent.match(/iP(?:[oa]d|hone)|Android/);\n\n// keep track of any labels hit by the mouseCanceller\n/** @type {!Array<!HTMLLabelElement>} */\nconst clickedLabels = [];\n\n/** @type {!Object<boolean>} */\nconst labellable = {\n  'button': true,\n  'input': true,\n  'keygen': true,\n  'meter': true,\n  'output': true,\n  'textarea': true,\n  'progress': true,\n  'select': true\n};\n\n// Defined at https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#enabling-and-disabling-form-controls:-the-disabled-attribute\n/** @type {!Object<boolean>} */\nconst canBeDisabled = {\n  'button': true,\n  'command': true,\n  'fieldset': true,\n  'input': true,\n  'keygen': true,\n  'optgroup': true,\n  'option': true,\n  'select': true,\n  'textarea': true\n};\n\n/**\n * @param {HTMLElement} el Element to check labelling status\n * @return {boolean} element can have labels\n */\nfunction canBeLabelled(el) {\n  return labellable[el.localName] || false;\n}\n\n/**\n * @param {HTMLElement} el Element that may be labelled.\n * @return {!Array<!HTMLLabelElement>} Relevant label for `el`\n */\nfunction matchingLabels(el) {\n  let labels = Array.prototype.slice.call(/** @type {HTMLInputElement} */(el).labels || []);\n  // IE doesn't have `labels` and Safari doesn't populate `labels`\n  // if element is in a shadowroot.\n  // In this instance, finding the non-ancestor labels is enough,\n  // as the mouseCancellor code will handle ancstor labels\n  if (!labels.length) {\n    labels = [];\n    let root = el.getRootNode();\n    // if there is an id on `el`, check for all labels with a matching `for` attribute\n    if (el.id) {\n      let matching = root.querySelectorAll(`label[for = ${el.id}]`);\n      for (let i = 0; i < matching.length; i++) {\n        labels.push(/** @type {!HTMLLabelElement} */(matching[i]));\n      }\n    }\n  }\n  return labels;\n}\n\n// touch will make synthetic mouse events\n// `preventDefault` on touchend will cancel them,\n// but this breaks `<input>` focus and link clicks\n// disable mouse handlers for MOUSE_TIMEOUT ms after\n// a touchend to ignore synthetic mouse events\nlet mouseCanceller = function(mouseEvent) {\n  // Check for sourceCapabilities, used to distinguish synthetic events\n  // if mouseEvent did not come from a device that fires touch events,\n  // it was made by a real mouse and should be counted\n  // http://wicg.github.io/InputDeviceCapabilities/#dom-inputdevicecapabilities-firestouchevents\n  let sc = mouseEvent.sourceCapabilities;\n  if (sc && !sc.firesTouchEvents) {\n    return;\n  }\n  // skip synthetic mouse events\n  mouseEvent[HANDLED_OBJ] = {skip: true};\n  // disable \"ghost clicks\"\n  if (mouseEvent.type === 'click') {\n    let clickFromLabel = false;\n    let path = getComposedPath(mouseEvent);\n    for (let i = 0; i < path.length; i++) {\n      if (path[i].nodeType === Node.ELEMENT_NODE) {\n        if (path[i].localName === 'label') {\n          clickedLabels.push(/** @type {!HTMLLabelElement} */ (path[i]));\n        } else if (canBeLabelled(/** @type {!HTMLElement} */ (path[i]))) {\n          let ownerLabels =\n              matchingLabels(/** @type {!HTMLElement} */ (path[i]));\n          // check if one of the clicked labels is labelling this element\n          for (let j = 0; j < ownerLabels.length; j++) {\n            clickFromLabel = clickFromLabel || clickedLabels.indexOf(ownerLabels[j]) > -1;\n          }\n        }\n      }\n      if (path[i] === POINTERSTATE.mouse.target) {\n        return;\n      }\n    }\n    // if one of the clicked labels was labelling the target element,\n    // this is not a ghost click\n    if (clickFromLabel) {\n      return;\n    }\n    mouseEvent.preventDefault();\n    mouseEvent.stopPropagation();\n  }\n};\n\n/**\n * @param {boolean=} setup True to add, false to remove.\n * @return {void}\n */\nfunction setupTeardownMouseCanceller(setup) {\n  let events = IS_TOUCH_ONLY ? ['click'] : MOUSE_EVENTS;\n  for (let i = 0, en; i < events.length; i++) {\n    en = events[i];\n    if (setup) {\n      // reset clickLabels array\n      clickedLabels.length = 0;\n      document.addEventListener(en, mouseCanceller, true);\n    } else {\n      document.removeEventListener(en, mouseCanceller, true);\n    }\n  }\n}\n\nfunction ignoreMouse(e) {\n  if (!cancelSyntheticClickEvents) {\n    return;\n  }\n  if (!POINTERSTATE.mouse.mouseIgnoreJob) {\n    setupTeardownMouseCanceller(true);\n  }\n  let unset = function() {\n    setupTeardownMouseCanceller();\n    POINTERSTATE.mouse.target = null;\n    POINTERSTATE.mouse.mouseIgnoreJob = null;\n  };\n  POINTERSTATE.mouse.target = getComposedPath(e)[0];\n  POINTERSTATE.mouse.mouseIgnoreJob = Debouncer.debounce(\n        POINTERSTATE.mouse.mouseIgnoreJob\n      , timeOut.after(MOUSE_TIMEOUT)\n      , unset);\n}\n\n/**\n * @param {MouseEvent} ev event to test for left mouse button down\n * @return {boolean} has left mouse button down\n */\nfunction hasLeftMouseButton(ev) {\n  let type = ev.type;\n  // exit early if the event is not a mouse event\n  if (!isMouseEvent(type)) {\n    return false;\n  }\n  // ev.button is not reliable for mousemove (0 is overloaded as both left button and no buttons)\n  // instead we use ev.buttons (bitmask of buttons) or fall back to ev.which (deprecated, 0 for no buttons, 1 for left button)\n  if (type === 'mousemove') {\n    // allow undefined for testing events\n    let buttons = ev.buttons === undefined ? 1 : ev.buttons;\n    if ((ev instanceof window.MouseEvent) && !MOUSE_HAS_BUTTONS) {\n      buttons = MOUSE_WHICH_TO_BUTTONS[ev.which] || 0;\n    }\n    // buttons is a bitmask, check that the left button bit is set (1)\n    return Boolean(buttons & 1);\n  } else {\n    // allow undefined for testing events\n    let button = ev.button === undefined ? 0 : ev.button;\n    // ev.button is 0 in mousedown/mouseup/click for left button activation\n    return button === 0;\n  }\n}\n\nfunction isSyntheticClick(ev) {\n  if (ev.type === 'click') {\n    // ev.detail is 0 for HTMLElement.click in most browsers\n    if (ev.detail === 0) {\n      return true;\n    }\n    // in the worst case, check that the x/y position of the click is within\n    // the bounding box of the target of the event\n    // Thanks IE 10 >:(\n    let t = _findOriginalTarget(ev);\n    // make sure the target of the event is an element so we can use getBoundingClientRect,\n    // if not, just assume it is a synthetic click\n    if (!t.nodeType || /** @type {Element} */(t).nodeType !== Node.ELEMENT_NODE) {\n      return true;\n    }\n    let bcr = /** @type {Element} */(t).getBoundingClientRect();\n    // use page x/y to account for scrolling\n    let x = ev.pageX, y = ev.pageY;\n    // ev is a synthetic click if the position is outside the bounding box of the target\n    return !((x >= bcr.left && x <= bcr.right) && (y >= bcr.top && y <= bcr.bottom));\n  }\n  return false;\n}\n\nlet POINTERSTATE = {\n  mouse: {\n    target: null,\n    mouseIgnoreJob: null\n  },\n  touch: {\n    x: 0,\n    y: 0,\n    id: -1,\n    scrollDecided: false\n  }\n};\n\nfunction firstTouchAction(ev) {\n  let ta = 'auto';\n  let path = getComposedPath(ev);\n  for (let i = 0, n; i < path.length; i++) {\n    n = path[i];\n    if (n[TOUCH_ACTION]) {\n      ta = n[TOUCH_ACTION];\n      break;\n    }\n  }\n  return ta;\n}\n\nfunction trackDocument(stateObj, movefn, upfn) {\n  stateObj.movefn = movefn;\n  stateObj.upfn = upfn;\n  document.addEventListener('mousemove', movefn);\n  document.addEventListener('mouseup', upfn);\n}\n\nfunction untrackDocument(stateObj) {\n  document.removeEventListener('mousemove', stateObj.movefn);\n  document.removeEventListener('mouseup', stateObj.upfn);\n  stateObj.movefn = null;\n  stateObj.upfn = null;\n}\n\nif (cancelSyntheticClickEvents) {\n  // use a document-wide touchend listener to start the ghost-click prevention mechanism\n  // Use passive event listeners, if supported, to not affect scrolling performance\n  document.addEventListener('touchend', ignoreMouse, supportsPassive ? {passive: true} : false);\n}\n\n/**\n * Returns the composedPath for the given event.\n * @param {Event} event to process\n * @return {!Array<!EventTarget>} Path of the event\n */\nconst getComposedPath = window.ShadyDOM && window.ShadyDOM.noPatch ?\n  window.ShadyDOM.composedPath :\n  (event) => event.composedPath && event.composedPath() || [];\n\n/** @type {!Object<string, !GestureRecognizer>} */\nexport const gestures = {};\n\n/** @type {!Array<!GestureRecognizer>} */\nexport const recognizers = [];\n\n/**\n * Finds the element rendered on the screen at the provided coordinates.\n *\n * Similar to `document.elementFromPoint`, but pierces through\n * shadow roots.\n *\n * @param {number} x Horizontal pixel coordinate\n * @param {number} y Vertical pixel coordinate\n * @return {Element} Returns the deepest shadowRoot inclusive element\n * found at the screen position given.\n */\nexport function deepTargetFind(x, y) {\n  let node = document.elementFromPoint(x, y);\n  let next = node;\n  // this code path is only taken when native ShadowDOM is used\n  // if there is a shadowroot, it may have a node at x/y\n  // if there is not a shadowroot, exit the loop\n  while (next && next.shadowRoot && !window.ShadyDOM) {\n    // if there is a node at x/y in the shadowroot, look deeper\n    let oldNext = next;\n    next = next.shadowRoot.elementFromPoint(x, y);\n    // on Safari, elementFromPoint may return the shadowRoot host\n    if (oldNext === next) {\n      break;\n    }\n    if (next) {\n      node = next;\n    }\n  }\n  return node;\n}\n\n/**\n * a cheaper check than ev.composedPath()[0];\n *\n * @private\n * @param {Event|Touch} ev Event.\n * @return {EventTarget} Returns the event target.\n */\nfunction _findOriginalTarget(ev) {\n  const path = getComposedPath(/** @type {?Event} */ (ev));\n  // It shouldn't be, but sometimes path is empty (window on Safari).\n  return path.length > 0 ? path[0] : ev.target;\n}\n\n/**\n * @private\n * @param {Event} ev Event.\n * @return {void}\n */\nfunction _handleNative(ev) {\n  let handled;\n  let type = ev.type;\n  let node = ev.currentTarget;\n  let gobj = node[GESTURE_KEY];\n  if (!gobj) {\n    return;\n  }\n  let gs = gobj[type];\n  if (!gs) {\n    return;\n  }\n  if (!ev[HANDLED_OBJ]) {\n    ev[HANDLED_OBJ] = {};\n    if (type.slice(0, 5) === 'touch') {\n      ev = /** @type {TouchEvent} */(ev); // eslint-disable-line no-self-assign\n      let t = ev.changedTouches[0];\n      if (type === 'touchstart') {\n        // only handle the first finger\n        if (ev.touches.length === 1) {\n          POINTERSTATE.touch.id = t.identifier;\n        }\n      }\n      if (POINTERSTATE.touch.id !== t.identifier) {\n        return;\n      }\n      if (!HAS_NATIVE_TA) {\n        if (type === 'touchstart' || type === 'touchmove') {\n          _handleTouchAction(ev);\n        }\n      }\n    }\n  }\n  handled = ev[HANDLED_OBJ];\n  // used to ignore synthetic mouse events\n  if (handled.skip) {\n    return;\n  }\n  // reset recognizer state\n  for (let i = 0, r; i < recognizers.length; i++) {\n    r = recognizers[i];\n    if (gs[r.name] && !handled[r.name]) {\n      if (r.flow && r.flow.start.indexOf(ev.type) > -1 && r.reset) {\n        r.reset();\n      }\n    }\n  }\n  // enforce gesture recognizer order\n  for (let i = 0, r; i < recognizers.length; i++) {\n    r = recognizers[i];\n    if (gs[r.name] && !handled[r.name]) {\n      handled[r.name] = true;\n      r[type](ev);\n    }\n  }\n}\n\n/**\n * @private\n * @param {TouchEvent} ev Event.\n * @return {void}\n */\nfunction _handleTouchAction(ev) {\n  let t = ev.changedTouches[0];\n  let type = ev.type;\n  if (type === 'touchstart') {\n    POINTERSTATE.touch.x = t.clientX;\n    POINTERSTATE.touch.y = t.clientY;\n    POINTERSTATE.touch.scrollDecided = false;\n  } else if (type === 'touchmove') {\n    if (POINTERSTATE.touch.scrollDecided) {\n      return;\n    }\n    POINTERSTATE.touch.scrollDecided = true;\n    let ta = firstTouchAction(ev);\n    let shouldPrevent = false;\n    let dx = Math.abs(POINTERSTATE.touch.x - t.clientX);\n    let dy = Math.abs(POINTERSTATE.touch.y - t.clientY);\n    if (!ev.cancelable) {\n      // scrolling is happening\n    } else if (ta === 'none') {\n      shouldPrevent = true;\n    } else if (ta === 'pan-x') {\n      shouldPrevent = dy > dx;\n    } else if (ta === 'pan-y') {\n      shouldPrevent = dx > dy;\n    }\n    if (shouldPrevent) {\n      ev.preventDefault();\n    } else {\n      prevent('track');\n    }\n  }\n}\n\n/**\n * Adds an event listener to a node for the given gesture type.\n *\n * @param {!EventTarget} node Node to add listener on\n * @param {string} evType Gesture type: `down`, `up`, `track`, or `tap`\n * @param {!function(!Event):void} handler Event listener function to call\n * @return {boolean} Returns true if a gesture event listener was added.\n */\nexport function addListener(node, evType, handler) {\n  if (gestures[evType]) {\n    _add(node, evType, handler);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Removes an event listener from a node for the given gesture type.\n *\n * @param {!EventTarget} node Node to remove listener from\n * @param {string} evType Gesture type: `down`, `up`, `track`, or `tap`\n * @param {!function(!Event):void} handler Event listener function previously passed to\n *  `addListener`.\n * @return {boolean} Returns true if a gesture event listener was removed.\n */\nexport function removeListener(node, evType, handler) {\n  if (gestures[evType]) {\n    _remove(node, evType, handler);\n    return true;\n  }\n  return false;\n}\n\n/**\n * automate the event listeners for the native events\n *\n * @private\n * @param {!EventTarget} node Node on which to add the event.\n * @param {string} evType Event type to add.\n * @param {function(!Event)} handler Event handler function.\n * @return {void}\n */\nfunction _add(node, evType, handler) {\n  let recognizer = gestures[evType];\n  let deps = recognizer.deps;\n  let name = recognizer.name;\n  let gobj = node[GESTURE_KEY];\n  if (!gobj) {\n    node[GESTURE_KEY] = gobj = {};\n  }\n  for (let i = 0, dep, gd; i < deps.length; i++) {\n    dep = deps[i];\n    // don't add mouse handlers on iOS because they cause gray selection overlays\n    if (IS_TOUCH_ONLY && isMouseEvent(dep) && dep !== 'click') {\n      continue;\n    }\n    gd = gobj[dep];\n    if (!gd) {\n      gobj[dep] = gd = {_count: 0};\n    }\n    if (gd._count === 0) {\n      node.addEventListener(dep, _handleNative, PASSIVE_TOUCH(dep));\n    }\n    gd[name] = (gd[name] || 0) + 1;\n    gd._count = (gd._count || 0) + 1;\n  }\n  node.addEventListener(evType, handler);\n  if (recognizer.touchAction) {\n    setTouchAction(node, recognizer.touchAction);\n  }\n}\n\n/**\n * automate event listener removal for native events\n *\n * @private\n * @param {!EventTarget} node Node on which to remove the event.\n * @param {string} evType Event type to remove.\n * @param {function(!Event): void} handler Event handler function.\n * @return {void}\n */\nfunction _remove(node, evType, handler) {\n  let recognizer = gestures[evType];\n  let deps = recognizer.deps;\n  let name = recognizer.name;\n  let gobj = node[GESTURE_KEY];\n  if (gobj) {\n    for (let i = 0, dep, gd; i < deps.length; i++) {\n      dep = deps[i];\n      gd = gobj[dep];\n      if (gd && gd[name]) {\n        gd[name] = (gd[name] || 1) - 1;\n        gd._count = (gd._count || 1) - 1;\n        if (gd._count === 0) {\n          node.removeEventListener(dep, _handleNative, PASSIVE_TOUCH(dep));\n        }\n      }\n    }\n  }\n  node.removeEventListener(evType, handler);\n}\n\n/**\n * Registers a new gesture event recognizer for adding new custom\n * gesture event types.\n *\n * @param {!GestureRecognizer} recog Gesture recognizer descriptor\n * @return {void}\n */\nexport function register(recog) {\n  recognizers.push(recog);\n  for (let i = 0; i < recog.emits.length; i++) {\n    gestures[recog.emits[i]] = recog;\n  }\n}\n\n/**\n * @private\n * @param {string} evName Event name.\n * @return {Object} Returns the gesture for the given event name.\n */\nfunction _findRecognizerByEvent(evName) {\n  for (let i = 0, r; i < recognizers.length; i++) {\n    r = recognizers[i];\n    for (let j = 0, n; j < r.emits.length; j++) {\n      n = r.emits[j];\n      if (n === evName) {\n        return r;\n      }\n    }\n  }\n  return null;\n}\n\n/**\n * Sets scrolling direction on node.\n *\n * This value is checked on first move, thus it should be called prior to\n * adding event listeners.\n *\n * @param {!EventTarget} node Node to set touch action setting on\n * @param {string} value Touch action value\n * @return {void}\n */\nexport function setTouchAction(node, value) {\n  if (HAS_NATIVE_TA && node instanceof HTMLElement) {\n    // NOTE: add touchAction async so that events can be added in\n    // custom element constructors. Otherwise we run afoul of custom\n    // elements restriction against settings attributes (style) in the\n    // constructor.\n    microTask.run(() => {\n      node.style.touchAction = value;\n    });\n  }\n  node[TOUCH_ACTION] = value;\n}\n\n/**\n * Dispatches an event on the `target` element of `type` with the given\n * `detail`.\n * @private\n * @param {!EventTarget} target The element on which to fire an event.\n * @param {string} type The type of event to fire.\n * @param {!Object=} detail The detail object to populate on the event.\n * @return {void}\n */\nfunction _fire(target, type, detail) {\n  let ev = new Event(type, { bubbles: true, cancelable: true, composed: true });\n  ev.detail = detail;\n  wrap(/** @type {!Node} */(target)).dispatchEvent(ev);\n  // forward `preventDefault` in a clean way\n  if (ev.defaultPrevented) {\n    let preventer = detail.preventer || detail.sourceEvent;\n    if (preventer && preventer.preventDefault) {\n      preventer.preventDefault();\n    }\n  }\n}\n\n/**\n * Prevents the dispatch and default action of the given event name.\n *\n * @param {string} evName Event name.\n * @return {void}\n */\nexport function prevent(evName) {\n  let recognizer = _findRecognizerByEvent(evName);\n  if (recognizer.info) {\n    recognizer.info.prevent = true;\n  }\n}\n\n/**\n * Reset the 2500ms timeout on processing mouse input after detecting touch input.\n *\n * Touch inputs create synthesized mouse inputs anywhere from 0 to 2000ms after the touch.\n * This method should only be called during testing with simulated touch inputs.\n * Calling this method in production may cause duplicate taps or other Gestures.\n *\n * @return {void}\n */\nexport function resetMouseCanceller() {\n  if (POINTERSTATE.mouse.mouseIgnoreJob) {\n    POINTERSTATE.mouse.mouseIgnoreJob.flush();\n  }\n}\n\n/* eslint-disable valid-jsdoc */\n\nregister({\n  name: 'downup',\n  deps: ['mousedown', 'touchstart', 'touchend'],\n  flow: {\n    start: ['mousedown', 'touchstart'],\n    end: ['mouseup', 'touchend']\n  },\n  emits: ['down', 'up'],\n\n  info: {\n    movefn: null,\n    upfn: null\n  },\n\n  /**\n   * @this {GestureRecognizer}\n   * @return {void}\n   */\n  reset: function() {\n    untrackDocument(this.info);\n  },\n\n  /**\n   * @this {GestureRecognizer}\n   * @param {MouseEvent} e\n   * @return {void}\n   */\n  mousedown: function(e) {\n    if (!hasLeftMouseButton(e)) {\n      return;\n    }\n    let t = _findOriginalTarget(e);\n    let self = this;\n    let movefn = function movefn(e) {\n      if (!hasLeftMouseButton(e)) {\n        downupFire('up', t, e);\n        untrackDocument(self.info);\n      }\n    };\n    let upfn = function upfn(e) {\n      if (hasLeftMouseButton(e)) {\n        downupFire('up', t, e);\n      }\n      untrackDocument(self.info);\n    };\n    trackDocument(this.info, movefn, upfn);\n    downupFire('down', t, e);\n  },\n  /**\n   * @this {GestureRecognizer}\n   * @param {TouchEvent} e\n   * @return {void}\n   */\n  touchstart: function(e) {\n    downupFire('down', _findOriginalTarget(e), e.changedTouches[0], e);\n  },\n  /**\n   * @this {GestureRecognizer}\n   * @param {TouchEvent} e\n   * @return {void}\n   */\n  touchend: function(e) {\n    downupFire('up', _findOriginalTarget(e), e.changedTouches[0], e);\n  }\n});\n\n/**\n * @param {string} type\n * @param {EventTarget} target\n * @param {Event|Touch} event\n * @param {Event=} preventer\n * @return {void}\n */\nfunction downupFire(type, target, event, preventer) {\n  if (!target) {\n    return;\n  }\n  _fire(target, type, {\n    x: event.clientX,\n    y: event.clientY,\n    sourceEvent: event,\n    preventer: preventer,\n    prevent: function(e) {\n      return prevent(e);\n    }\n  });\n}\n\nregister({\n  name: 'track',\n  touchAction: 'none',\n  deps: ['mousedown', 'touchstart', 'touchmove', 'touchend'],\n  flow: {\n    start: ['mousedown', 'touchstart'],\n    end: ['mouseup', 'touchend']\n  },\n  emits: ['track'],\n\n  info: {\n    x: 0,\n    y: 0,\n    state: 'start',\n    started: false,\n    moves: [],\n    /** @this {GestureInfo} */\n    addMove: function(move) {\n      if (this.moves.length > TRACK_LENGTH) {\n        this.moves.shift();\n      }\n      this.moves.push(move);\n    },\n    movefn: null,\n    upfn: null,\n    prevent: false\n  },\n\n  /**\n   * @this {GestureRecognizer}\n   * @return {void}\n   */\n  reset: function() {\n    this.info.state = 'start';\n    this.info.started = false;\n    this.info.moves = [];\n    this.info.x = 0;\n    this.info.y = 0;\n    this.info.prevent = false;\n    untrackDocument(this.info);\n  },\n\n  /**\n   * @this {GestureRecognizer}\n   * @param {MouseEvent} e\n   * @return {void}\n   */\n  mousedown: function(e) {\n    if (!hasLeftMouseButton(e)) {\n      return;\n    }\n    let t = _findOriginalTarget(e);\n    let self = this;\n    let movefn = function movefn(e) {\n      let x = e.clientX, y = e.clientY;\n      if (trackHasMovedEnough(self.info, x, y)) {\n        // first move is 'start', subsequent moves are 'move', mouseup is 'end'\n        self.info.state = self.info.started ? (e.type === 'mouseup' ? 'end' : 'track') : 'start';\n        if (self.info.state === 'start') {\n          // if and only if tracking, always prevent tap\n          prevent('tap');\n        }\n        self.info.addMove({x: x, y: y});\n        if (!hasLeftMouseButton(e)) {\n          // always fire \"end\"\n          self.info.state = 'end';\n          untrackDocument(self.info);\n        }\n        if (t) {\n          trackFire(self.info, t, e);\n        }\n        self.info.started = true;\n      }\n    };\n    let upfn = function upfn(e) {\n      if (self.info.started) {\n        movefn(e);\n      }\n\n      // remove the temporary listeners\n      untrackDocument(self.info);\n    };\n    // add temporary document listeners as mouse retargets\n    trackDocument(this.info, movefn, upfn);\n    this.info.x = e.clientX;\n    this.info.y = e.clientY;\n  },\n  /**\n   * @this {GestureRecognizer}\n   * @param {TouchEvent} e\n   * @return {void}\n   */\n  touchstart: function(e) {\n    let ct = e.changedTouches[0];\n    this.info.x = ct.clientX;\n    this.info.y = ct.clientY;\n  },\n  /**\n   * @this {GestureRecognizer}\n   * @param {TouchEvent} e\n   * @return {void}\n   */\n  touchmove: function(e) {\n    let t = _findOriginalTarget(e);\n    let ct = e.changedTouches[0];\n    let x = ct.clientX, y = ct.clientY;\n    if (trackHasMovedEnough(this.info, x, y)) {\n      if (this.info.state === 'start') {\n        // if and only if tracking, always prevent tap\n        prevent('tap');\n      }\n      this.info.addMove({x: x, y: y});\n      trackFire(this.info, t, ct);\n      this.info.state = 'track';\n      this.info.started = true;\n    }\n  },\n  /**\n   * @this {GestureRecognizer}\n   * @param {TouchEvent} e\n   * @return {void}\n   */\n  touchend: function(e) {\n    let t = _findOriginalTarget(e);\n    let ct = e.changedTouches[0];\n    // only trackend if track was started and not aborted\n    if (this.info.started) {\n      // reset started state on up\n      this.info.state = 'end';\n      this.info.addMove({x: ct.clientX, y: ct.clientY});\n      trackFire(this.info, t, ct);\n    }\n  }\n});\n\n/**\n * @param {!GestureInfo} info\n * @param {number} x\n * @param {number} y\n * @return {boolean}\n */\nfunction trackHasMovedEnough(info, x, y) {\n  if (info.prevent) {\n    return false;\n  }\n  if (info.started) {\n    return true;\n  }\n  let dx = Math.abs(info.x - x);\n  let dy = Math.abs(info.y - y);\n  return (dx >= TRACK_DISTANCE || dy >= TRACK_DISTANCE);\n}\n\n/**\n * @param {!GestureInfo} info\n * @param {?EventTarget} target\n * @param {Touch} touch\n * @return {void}\n */\nfunction trackFire(info, target, touch) {\n  if (!target) {\n    return;\n  }\n  let secondlast = info.moves[info.moves.length - 2];\n  let lastmove = info.moves[info.moves.length - 1];\n  let dx = lastmove.x - info.x;\n  let dy = lastmove.y - info.y;\n  let ddx, ddy = 0;\n  if (secondlast) {\n    ddx = lastmove.x - secondlast.x;\n    ddy = lastmove.y - secondlast.y;\n  }\n  _fire(target, 'track', {\n    state: info.state,\n    x: touch.clientX,\n    y: touch.clientY,\n    dx: dx,\n    dy: dy,\n    ddx: ddx,\n    ddy: ddy,\n    sourceEvent: touch,\n    hover: function() {\n      return deepTargetFind(touch.clientX, touch.clientY);\n    }\n  });\n}\n\nregister({\n  name: 'tap',\n  deps: ['mousedown', 'click', 'touchstart', 'touchend'],\n  flow: {\n    start: ['mousedown', 'touchstart'],\n    end: ['click', 'touchend']\n  },\n  emits: ['tap'],\n  info: {\n    x: NaN,\n    y: NaN,\n    prevent: false\n  },\n  /**\n   * @this {GestureRecognizer}\n   * @return {void}\n   */\n  reset: function() {\n    this.info.x = NaN;\n    this.info.y = NaN;\n    this.info.prevent = false;\n  },\n  /**\n   * @this {GestureRecognizer}\n   * @param {MouseEvent} e\n   * @return {void}\n   */\n  mousedown: function(e) {\n    if (hasLeftMouseButton(e)) {\n      this.info.x = e.clientX;\n      this.info.y = e.clientY;\n    }\n  },\n  /**\n   * @this {GestureRecognizer}\n   * @param {MouseEvent} e\n   * @return {void}\n   */\n  click: function(e) {\n    if (hasLeftMouseButton(e)) {\n      trackForward(this.info, e);\n    }\n  },\n  /**\n   * @this {GestureRecognizer}\n   * @param {TouchEvent} e\n   * @return {void}\n   */\n  touchstart: function(e) {\n    const touch = e.changedTouches[0];\n    this.info.x = touch.clientX;\n    this.info.y = touch.clientY;\n  },\n  /**\n   * @this {GestureRecognizer}\n   * @param {TouchEvent} e\n   * @return {void}\n   */\n  touchend: function(e) {\n    trackForward(this.info, e.changedTouches[0], e);\n  }\n});\n\n/**\n * @param {!GestureInfo} info\n * @param {Event | Touch} e\n * @param {Event=} preventer\n * @return {void}\n */\nfunction trackForward(info, e, preventer) {\n  let dx = Math.abs(e.clientX - info.x);\n  let dy = Math.abs(e.clientY - info.y);\n  // find original target from `preventer` for TouchEvents, or `e` for MouseEvents\n  let t = _findOriginalTarget((preventer || e));\n  if (!t || (canBeDisabled[/** @type {!HTMLElement} */(t).localName] && t.hasAttribute('disabled'))) {\n    return;\n  }\n  // dx,dy can be NaN if `click` has been simulated and there was no `down` for `start`\n  if (isNaN(dx) || isNaN(dy) || (dx <= TAP_DISTANCE && dy <= TAP_DISTANCE) || isSyntheticClick(e)) {\n    // prevent taps from being generated if an event has canceled them\n    if (!info.prevent) {\n      _fire(t, 'tap', {\n        x: e.clientX,\n        y: e.clientY,\n        sourceEvent: e,\n        preventer: preventer\n      });\n    }\n  }\n}\n\n/* eslint-enable valid-jsdoc */\n\n/** @deprecated */\nexport const findOriginalTarget = _findOriginalTarget;\n\n/** @deprecated */\nexport const add = addListener;\n\n/** @deprecated */\nexport const remove = removeListener;\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { addListener, removeListener } from '../utils/gestures.js';\n\n/**\n * Element class mixin that provides API for adding Polymer's cross-platform\n * gesture events to nodes.\n *\n * The API is designed to be compatible with override points implemented\n * in `TemplateStamp` such that declarative event listeners in\n * templates will support gesture events when this mixin is applied along with\n * `TemplateStamp`.\n *\n * @mixinFunction\n * @polymer\n * @summary Element class mixin that provides API for adding Polymer's\n *   cross-platform gesture events to nodes\n * @template T\n * @param {function(new:T)} superClass Class to apply mixin to.\n * @return {function(new:T)} superClass with mixin applied.\n */\nexport const GestureEventListeners = dedupingMixin((superClass) => {\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_GestureEventListeners}\n   */\n  class GestureEventListeners extends superClass {\n    /**\n     * Add the event listener to the node if it is a gestures event.\n     *\n     * @param {!EventTarget} node Node to add event listener to\n     * @param {string} eventName Name of event\n     * @param {function(!Event):void} handler Listener function to add\n     * @return {void}\n     * @override\n     */\n    _addEventListenerToNode(node, eventName, handler) {\n      if (!addListener(node, eventName, handler)) {\n        super._addEventListenerToNode(node, eventName, handler);\n      }\n    }\n\n    /**\n     * Remove the event listener to the node if it is a gestures event.\n     *\n     * @param {!EventTarget} node Node to remove event listener from\n     * @param {string} eventName Name of event\n     * @param {function(!Event):void} handler Listener function to remove\n     * @return {void}\n     * @override\n     */\n    _removeEventListenerFromNode(node, eventName, handler) {\n      if (!removeListener(node, eventName, handler)) {\n        super._removeEventListenerFromNode(node, eventName, handler);\n      }\n    }\n  }\n\n  return GestureEventListeners;\n});\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nexport const nativeShadow = !(window['ShadyDOM'] && window['ShadyDOM']['inUse']);\nlet nativeCssVariables_;\n\n/**\n * @param {(ShadyCSSOptions | ShadyCSSInterface)=} settings\n */\nfunction calcCssVariables(settings) {\n  if (settings && settings['shimcssproperties']) {\n    nativeCssVariables_ = false;\n  } else {\n    // chrome 49 has semi-working css vars, check if box-shadow works\n    // safari 9.1 has a recalc bug: https://bugs.webkit.org/show_bug.cgi?id=155782\n    // However, shim css custom properties are only supported with ShadyDOM enabled,\n    // so fall back on native if we do not detect ShadyDOM\n    // Edge 15: custom properties used in ::before and ::after will also be used in the parent element\n    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12414257/\n    nativeCssVariables_ = nativeShadow || Boolean(!navigator.userAgent.match(/AppleWebKit\\/601|Edge\\/15/) &&\n      window.CSS && CSS.supports && CSS.supports('box-shadow', '0 0 0 var(--foo)'));\n  }\n}\n\n/** @type {string | undefined} */\nexport let cssBuild;\nif (window.ShadyCSS && window.ShadyCSS.cssBuild !== undefined) {\n  cssBuild = window.ShadyCSS.cssBuild;\n}\n\n/** @type {boolean} */\nexport const disableRuntime = Boolean(window.ShadyCSS && window.ShadyCSS.disableRuntime);\n\nif (window.ShadyCSS && window.ShadyCSS.nativeCss !== undefined) {\n  nativeCssVariables_ = window.ShadyCSS.nativeCss;\n} else if (window.ShadyCSS) {\n  calcCssVariables(window.ShadyCSS);\n  // reset window variable to let ShadyCSS API take its place\n  window.ShadyCSS = undefined;\n} else {\n  calcCssVariables(window['WebComponents'] && window['WebComponents']['flags']);\n}\n\n// Hack for type error under new type inference which doesn't like that\n// nativeCssVariables is updated in a function and assigns the type\n// `function(): ?` instead of `boolean`.\nexport const nativeCssVariables = /** @type {boolean} */(nativeCssVariables_);", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/*\nExtremely simple css parser. Intended to be not more than what we need\nand definitely not necessarily correct =).\n*/\n\n'use strict';\n\n/** @unrestricted */\nclass StyleNode {\n  constructor() {\n    /** @type {number} */\n    this['start'] = 0;\n    /** @type {number} */\n    this['end'] = 0;\n    /** @type {StyleNode} */\n    this['previous'] = null;\n    /** @type {StyleNode} */\n    this['parent'] = null;\n    /** @type {Array<StyleNode>} */\n    this['rules'] = null;\n    /** @type {string} */\n    this['parsedCssText'] = '';\n    /** @type {string} */\n    this['cssText'] = '';\n    /** @type {boolean} */\n    this['atRule'] = false;\n    /** @type {number} */\n    this['type'] = 0;\n    /** @type {string} */\n    this['keyframesName'] = '';\n    /** @type {string} */\n    this['selector'] = '';\n    /** @type {string} */\n    this['parsedSelector'] = '';\n  }\n}\n\nexport {StyleNode}\n\n// given a string of css, return a simple rule tree\n/**\n * @param {string} text\n * @return {StyleNode}\n */\nexport function parse(text) {\n  text = clean(text);\n  return parseCss(lex(text), text);\n}\n\n// remove stuff we don't care about that may hinder parsing\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction clean(cssText) {\n  return cssText.replace(RX.comments, '').replace(RX.port, '');\n}\n\n// super simple {...} lexer that returns a node tree\n/**\n * @param {string} text\n * @return {!StyleNode}\n */\nfunction lex(text) {\n  let root = new StyleNode();\n  root['start'] = 0;\n  root['end'] = text.length\n  let n = root;\n  for (let i = 0, l = text.length; i < l; i++) {\n    if (text[i] === OPEN_BRACE) {\n      if (!n['rules']) {\n        n['rules'] = [];\n      }\n      let p = n;\n      let previous = p['rules'][p['rules'].length - 1] || null;\n      n = new StyleNode();\n      n['start'] = i + 1;\n      n['parent'] = p;\n      n['previous'] = previous;\n      p['rules'].push(n);\n    } else if (text[i] === CLOSE_BRACE) {\n      n['end'] = i + 1;\n      n = n['parent'] || root;\n    }\n  }\n  return root;\n}\n\n// add selectors/cssText to node tree\n/**\n * @param {StyleNode} node\n * @param {string} text\n * @return {!StyleNode}\n */\nfunction parseCss(node, text) {\n  let t = text.substring(node['start'], node['end'] - 1);\n  node['parsedCssText'] = node['cssText'] = t.trim();\n  if (node['parent']) {\n    let ss = node['previous'] ? node['previous']['end'] : node['parent']['start'];\n    t = text.substring(ss, node['start'] - 1);\n    t = _expandUnicodeEscapes(t);\n    t = t.replace(RX.multipleSpaces, ' ');\n    // TODO(sorvell): ad hoc; make selector include only after last ;\n    // helps with mixin syntax\n    t = t.substring(t.lastIndexOf(';') + 1);\n    let s = node['parsedSelector'] = node['selector'] = t.trim();\n    node['atRule'] = (s.indexOf(AT_START) === 0);\n    // note, support a subset of rule types...\n    if (node['atRule']) {\n      if (s.indexOf(MEDIA_START) === 0) {\n        node['type'] = types.MEDIA_RULE;\n      } else if (s.match(RX.keyframesRule)) {\n        node['type'] = types.KEYFRAMES_RULE;\n        node['keyframesName'] =\n          node['selector'].split(RX.multipleSpaces).pop();\n      }\n    } else {\n      if (s.indexOf(VAR_START) === 0) {\n        node['type'] = types.MIXIN_RULE;\n      } else {\n        node['type'] = types.STYLE_RULE;\n      }\n    }\n  }\n  let r$ = node['rules'];\n  if (r$) {\n    for (let i = 0, l = r$.length, r;\n      (i < l) && (r = r$[i]); i++) {\n      parseCss(r, text);\n    }\n  }\n  return node;\n}\n\n/**\n * conversion of sort unicode escapes with spaces like `\\33 ` (and longer) into\n * expanded form that doesn't require trailing space `\\000033`\n * @param {string} s\n * @return {string}\n */\nfunction _expandUnicodeEscapes(s) {\n  return s.replace(/\\\\([0-9a-f]{1,6})\\s/gi, function() {\n    let code = arguments[1],\n      repeat = 6 - code.length;\n    while (repeat--) {\n      code = '0' + code;\n    }\n    return '\\\\' + code;\n  });\n}\n\n/**\n * stringify parsed css.\n * @param {StyleNode} node\n * @param {boolean=} preserveProperties\n * @param {string=} text\n * @return {string}\n */\nexport function stringify(node, preserveProperties, text = '') {\n  // calc rule cssText\n  let cssText = '';\n  if (node['cssText'] || node['rules']) {\n    let r$ = node['rules'];\n    if (r$ && !_hasMixinRules(r$)) {\n      for (let i = 0, l = r$.length, r;\n        (i < l) && (r = r$[i]); i++) {\n        cssText = stringify(r, preserveProperties, cssText);\n      }\n    } else {\n      cssText = preserveProperties ? node['cssText'] :\n        removeCustomProps(node['cssText']);\n      cssText = cssText.trim();\n      if (cssText) {\n        cssText = '  ' + cssText + '\\n';\n      }\n    }\n  }\n  // emit rule if there is cssText\n  if (cssText) {\n    if (node['selector']) {\n      text += node['selector'] + ' ' + OPEN_BRACE + '\\n';\n    }\n    text += cssText;\n    if (node['selector']) {\n      text += CLOSE_BRACE + '\\n\\n';\n    }\n  }\n  return text;\n}\n\n/**\n * @param {Array<StyleNode>} rules\n * @return {boolean}\n */\nfunction _hasMixinRules(rules) {\n  let r = rules[0];\n  return Boolean(r) && Boolean(r['selector']) && r['selector'].indexOf(VAR_START) === 0;\n}\n\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction removeCustomProps(cssText) {\n  cssText = removeCustomPropAssignment(cssText);\n  return removeCustomPropApply(cssText);\n}\n\n/**\n * @param {string} cssText\n * @return {string}\n */\nexport function removeCustomPropAssignment(cssText) {\n  return cssText\n    .replace(RX.customProp, '')\n    .replace(RX.mixinProp, '');\n}\n\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction removeCustomPropApply(cssText) {\n  return cssText\n    .replace(RX.mixinApply, '')\n    .replace(RX.varApply, '');\n}\n\n/** @enum {number} */\nexport const types = {\n  STYLE_RULE: 1,\n  KEYFRAMES_RULE: 7,\n  MEDIA_RULE: 4,\n  MIXIN_RULE: 1000\n}\n\nconst OPEN_BRACE = '{';\nconst CLOSE_BRACE = '}';\n\n// helper regexp's\nconst RX = {\n  comments: /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//gim,\n  port: /@import[^;]*;/gim,\n  customProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\\n]|$)/gim,\n  mixinProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\\n]|$)?/gim,\n  mixinApply: /@apply\\s*\\(?[^);]*\\)?\\s*(?:[;\\n]|$)?/gim,\n  varApply: /[^;:]*?:[^;]*?var\\([^;]*\\)(?:[;\\n]|$)?/gim,\n  keyframesRule: /^@[^\\s]*keyframes/,\n  multipleSpaces: /\\s+/g\n}\n\nconst VAR_START = '--';\nconst MEDIA_START = '@media';\nconst AT_START = '@';\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nexport const VAR_ASSIGN = /(?:^|[;\\s{]\\s*)(--[\\w-]*?)\\s*:\\s*(?:((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};{])+)|\\{([^}]*)\\}(?:(?=[;\\s}])|$))/gi;\nexport const MIXIN_MATCH = /(?:^|\\W+)@apply\\s*\\(?([^);\\n]*)\\)?/gi;\nexport const VAR_CONSUMED = /(--[\\w-]+)\\s*([:,;)]|$)/gi;\nexport const ANIMATION_MATCH = /(animation\\s*:)|(animation-name\\s*:)/;\nexport const MEDIA_MATCH = /@media\\s(.*)/;\nexport const IS_VAR = /^--/;\nexport const BRACKETED = /\\{[^}]*\\}/g;\nexport const HOST_PREFIX = '(?:^|[^.#[:])';\nexport const HOST_SUFFIX = '($|[.:[\\\\s>+~])';\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\n/** @type {!Set<string>} */\nconst styleTextSet = new Set();\n\nexport const scopingAttribute = 'shady-unscoped';\n\n/**\n * Add a specifically-marked style to the document directly, and only one copy of that style.\n *\n * @param {!HTMLStyleElement} style\n * @return {undefined}\n */\nexport function processUnscopedStyle(style) {\n  const text = style.textContent;\n  if (!styleTextSet.has(text)) {\n    styleTextSet.add(text);\n    const newStyle = document.createElement('style');\n    newStyle.setAttribute('shady-unscoped', '');\n    newStyle.textContent = text;\n    document.head.appendChild(newStyle);\n  }\n}\n\n/**\n * Check if a style is supposed to be unscoped\n * @param {!HTMLStyleElement} style\n * @return {boolean} true if the style has the unscoping attribute\n */\nexport function isUnscopedStyle(style) {\n  return style.hasAttribute(scopingAttribute);\n}", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {nativeShadow, nativeCssVariables, cssBuild} from './style-settings.js';\nimport {parse, stringify, types, StyleNode} from './css-parse.js'; // eslint-disable-line no-unused-vars\nimport {MEDIA_MATCH} from './common-regex.js';\nimport {processUnscopedStyle, isUnscopedStyle} from './unscoped-style-handler.js';\n\n/**\n * @param {string|StyleNode} rules\n * @param {function(StyleNode)=} callback\n * @return {string}\n */\nexport function toCssText (rules, callback) {\n  if (!rules) {\n    return '';\n  }\n  if (typeof rules === 'string') {\n    rules = parse(rules);\n  }\n  if (callback) {\n    forEachRule(rules, callback);\n  }\n  return stringify(rules, nativeCssVariables);\n}\n\n/**\n * @param {HTMLStyleElement} style\n * @return {StyleNode}\n */\nexport function rulesForStyle(style) {\n  if (!style['__cssRules'] && style.textContent) {\n    style['__cssRules'] = parse(style.textContent);\n  }\n  return style['__cssRules'] || null;\n}\n\n// Tests if a rule is a keyframes selector, which looks almost exactly\n// like a normal selector but is not (it has nothing to do with scoping\n// for example).\n/**\n * @param {StyleNode} rule\n * @return {boolean}\n */\nexport function isKeyframesSelector(rule) {\n  return Boolean(rule['parent']) &&\n  rule['parent']['type'] === types.KEYFRAMES_RULE;\n}\n\n/**\n * @param {StyleNode} node\n * @param {Function=} styleRuleCallback\n * @param {Function=} keyframesRuleCallback\n * @param {boolean=} onlyActiveRules\n */\nexport function forEachRule(node, styleRuleCallback, keyframesRuleCallback, onlyActiveRules) {\n  if (!node) {\n    return;\n  }\n  let skipRules = false;\n  let type = node['type'];\n  if (onlyActiveRules) {\n    if (type === types.MEDIA_RULE) {\n      let matchMedia = node['selector'].match(MEDIA_MATCH);\n      if (matchMedia) {\n        // if rule is a non matching @media rule, skip subrules\n        if (!window.matchMedia(matchMedia[1]).matches) {\n          skipRules = true;\n        }\n      }\n    }\n  }\n  if (type === types.STYLE_RULE) {\n    styleRuleCallback(node);\n  } else if (keyframesRuleCallback &&\n    type === types.KEYFRAMES_RULE) {\n    keyframesRuleCallback(node);\n  } else if (type === types.MIXIN_RULE) {\n    skipRules = true;\n  }\n  let r$ = node['rules'];\n  if (r$ && !skipRules) {\n    for (let i=0, l=r$.length, r; (i<l) && (r=r$[i]); i++) {\n      forEachRule(r, styleRuleCallback, keyframesRuleCallback, onlyActiveRules);\n    }\n  }\n}\n\n// add a string of cssText to the document.\n/**\n * @param {string} cssText\n * @param {string} moniker\n * @param {Node} target\n * @param {Node} contextNode\n * @return {HTMLStyleElement}\n */\nexport function applyCss(cssText, moniker, target, contextNode) {\n  let style = createScopeStyle(cssText, moniker);\n  applyStyle(style, target, contextNode);\n  return style;\n}\n\n/**\n * @param {string} cssText\n * @param {string} moniker\n * @return {!HTMLStyleElement}\n */\nexport function createScopeStyle(cssText, moniker) {\n  let style = /** @type {HTMLStyleElement} */(document.createElement('style'));\n  if (moniker) {\n    style.setAttribute('scope', moniker);\n  }\n  style.textContent = cssText;\n  return style;\n}\n\n/**\n * Track the position of the last added style for placing placeholders\n * @type {Node}\n */\nlet lastHeadApplyNode = null;\n\n// insert a comment node as a styling position placeholder.\n/**\n * @param {string} moniker\n * @return {!Comment}\n */\nexport function applyStylePlaceHolder(moniker) {\n  let placeHolder = document.createComment(' Shady DOM styles for ' +\n    moniker + ' ');\n  let after = lastHeadApplyNode ?\n    lastHeadApplyNode['nextSibling'] : null;\n  let scope = document.head;\n  scope.insertBefore(placeHolder, after || scope.firstChild);\n  lastHeadApplyNode = placeHolder;\n  return placeHolder;\n}\n\n/**\n * @param {HTMLStyleElement} style\n * @param {?Node} target\n * @param {?Node} contextNode\n */\nexport function applyStyle(style, target, contextNode) {\n  target = target || document.head;\n  let after = (contextNode && contextNode.nextSibling) ||\n    target.firstChild;\n  target.insertBefore(style, after);\n  if (!lastHeadApplyNode) {\n    lastHeadApplyNode = style;\n  } else {\n    // only update lastHeadApplyNode if the new style is inserted after the old lastHeadApplyNode\n    let position = style.compareDocumentPosition(lastHeadApplyNode);\n    if (position === Node.DOCUMENT_POSITION_PRECEDING) {\n      lastHeadApplyNode = style;\n    }\n  }\n}\n\n/**\n * @param {string} buildType\n * @return {boolean}\n */\nexport function isTargetedBuild(buildType) {\n  return nativeShadow ? buildType === 'shadow' : buildType === 'shady';\n}\n\n/**\n * Walk from text[start] matching parens and\n * returns position of the outer end paren\n * @param {string} text\n * @param {number} start\n * @return {number}\n */\nexport function findMatchingParen(text, start) {\n  let level = 0;\n  for (let i=start, l=text.length; i < l; i++) {\n    if (text[i] === '(') {\n      level++;\n    } else if (text[i] === ')') {\n      if (--level === 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\n/**\n * @param {string} str\n * @param {function(string, string, string, string)} callback\n */\nexport function processVariableAndFallback(str, callback) {\n  // find 'var('\n  let start = str.indexOf('var(');\n  if (start === -1) {\n    // no var?, everything is prefix\n    return callback(str, '', '', '');\n  }\n  //${prefix}var(${inner})${suffix}\n  let end = findMatchingParen(str, start + 3);\n  let inner = str.substring(start + 4, end);\n  let prefix = str.substring(0, start);\n  // suffix may have other variables\n  let suffix = processVariableAndFallback(str.substring(end + 1), callback);\n  let comma = inner.indexOf(',');\n  // value and fallback args should be trimmed to match in property lookup\n  if (comma === -1) {\n    // variable, no fallback\n    return callback(prefix, inner.trim(), '', suffix);\n  }\n  // var(${value},${fallback})\n  let value = inner.substring(0, comma).trim();\n  let fallback = inner.substring(comma + 1).trim();\n  return callback(prefix, value, fallback, suffix);\n}\n\n/**\n * @param {Element} element\n * @param {string} value\n */\nexport function setElementClassRaw(element, value) {\n  // use native setAttribute provided by ShadyDOM when setAttribute is patched\n  if (nativeShadow) {\n    element.setAttribute('class', value);\n  } else {\n    window['ShadyDOM']['nativeMethods']['setAttribute'].call(element, 'class', value);\n  }\n}\n\n/**\n * @type {function(*):*}\n */\nexport const wrap = window['ShadyDOM'] && window['ShadyDOM']['wrap'] || ((node) => node);\n\n/**\n * @param {Element | {is: string, extends: string}} element\n * @return {{is: string, typeExtension: string}}\n */\nexport function getIsExtends(element) {\n  let localName = element['localName'];\n  let is = '', typeExtension = '';\n  /*\n  NOTE: technically, this can be wrong for certain svg elements\n  with `-` in the name like `<font-face>`\n  */\n  if (localName) {\n    if (localName.indexOf('-') > -1) {\n      is = localName;\n    } else {\n      typeExtension = localName;\n      is = (element.getAttribute && element.getAttribute('is')) || '';\n    }\n  } else {\n    is = /** @type {?} */(element).is;\n    typeExtension = /** @type {?} */(element).extends;\n  }\n  return {is, typeExtension};\n}\n\n/**\n * @param {Element|DocumentFragment} element\n * @return {string}\n */\nexport function gatherStyleText(element) {\n  /** @type {!Array<string>} */\n  const styleTextParts = [];\n  const styles = /** @type {!NodeList<!HTMLStyleElement>} */(element.querySelectorAll('style'));\n  for (let i = 0; i < styles.length; i++) {\n    const style = styles[i];\n    if (isUnscopedStyle(style)) {\n      if (!nativeShadow) {\n        processUnscopedStyle(style);\n        style.parentNode.removeChild(style);\n      }\n    } else {\n      styleTextParts.push(style.textContent);\n      style.parentNode.removeChild(style);\n    }\n  }\n  return styleTextParts.join('').trim();\n}\n\n/**\n * Split a selector separated by commas into an array in a smart way\n * @param {string} selector\n * @return {!Array<string>}\n */\nexport function splitSelectorList(selector) {\n  const parts = [];\n  let part = '';\n  for (let i = 0; i >= 0 && i < selector.length; i++) {\n    // A selector with parentheses will be one complete part\n    if (selector[i] === '(') {\n      // find the matching paren\n      const end = findMatchingParen(selector, i);\n      // push the paren block into the part\n      part += selector.slice(i, end + 1);\n      // move the index to after the paren block\n      i = end;\n    } else if (selector[i] === ',') {\n      parts.push(part);\n      part = '';\n    } else {\n      part += selector[i];\n    }\n  }\n  // catch any pieces after the last comma\n  if (part) {\n    parts.push(part);\n  }\n  return parts;\n}\n\nconst CSS_BUILD_ATTR = 'css-build';\n\n/**\n * Return the polymer-css-build \"build type\" applied to this element\n *\n * @param {!HTMLElement} element\n * @return {string} Can be \"\", \"shady\", or \"shadow\"\n */\nexport function getCssBuild(element) {\n  if (cssBuild !== undefined) {\n    return /** @type {string} */(cssBuild);\n  }\n  if (element.__cssBuild === undefined) {\n    // try attribute first, as it is the common case\n    const attrValue = element.getAttribute(CSS_BUILD_ATTR);\n    if (attrValue) {\n      element.__cssBuild = attrValue;\n    } else {\n      const buildComment = getBuildComment(element);\n      if (buildComment !== '') {\n        // remove build comment so it is not needlessly copied into every element instance\n        removeBuildComment(element);\n      }\n      element.__cssBuild = buildComment;\n    }\n  }\n  return element.__cssBuild || '';\n}\n\n/**\n * Check if the given element, either a <template> or <style>, has been processed\n * by polymer-css-build.\n *\n * If so, then we can make a number of optimizations:\n * - polymer-css-build will decompose mixins into individual CSS Custom Properties,\n * so the ApplyShim can be skipped entirely.\n * - Under native ShadowDOM, the style text can just be copied into each instance\n * without modification\n * - If the build is \"shady\" and ShadyDOM is in use, the styling does not need\n * scoping beyond the shimming of CSS Custom Properties\n *\n * @param {!HTMLElement} element\n * @return {boolean}\n */\nexport function elementHasBuiltCss(element) {\n  return getCssBuild(element) !== '';\n}\n\n/**\n * For templates made with tagged template literals, polymer-css-build will\n * insert a comment of the form `<!--css-build:shadow-->`\n *\n * @param {!HTMLElement} element\n * @return {string}\n */\nexport function getBuildComment(element) {\n  const buildComment = element.localName === 'template' ?\n      /** @type {!HTMLTemplateElement} */ (element).content.firstChild :\n      element.firstChild;\n  if (buildComment instanceof Comment) {\n    const commentParts = buildComment.textContent.trim().split(':');\n    if (commentParts[0] === CSS_BUILD_ATTR) {\n      return commentParts[1];\n    }\n  }\n  return '';\n}\n\n/**\n * Check if the css build status is optimal, and do no unneeded work.\n *\n * @param {string=} cssBuild CSS build status\n * @return {boolean} css build is optimal or not\n */\nexport function isOptimalCssBuild(cssBuild = '') {\n  // CSS custom property shim always requires work\n  if (cssBuild === '' || !nativeCssVariables) {\n    return false;\n  }\n  return nativeShadow ? cssBuild === 'shadow' : cssBuild === 'shady';\n}\n\n/**\n * @param {!HTMLElement} element\n */\nfunction removeBuildComment(element) {\n  const buildComment = element.localName === 'template' ?\n      /** @type {!HTMLTemplateElement} */ (element).content.firstChild :\n      element.firstChild;\n  buildComment.parentNode.removeChild(buildComment);\n}\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport { MIXIN_MATCH, VAR_ASSIGN } from './common-regex.js';\n\n/**\n * @param {Element} element\n * @param {Object=} properties\n */\nexport function updateNativeProperties(element, properties) {\n  // remove previous properties\n  for (let p in properties) {\n    // NOTE: for bc with shim, don't apply null values.\n    if (p === null) {\n      element.style.removeProperty(p);\n    } else {\n      element.style.setProperty(p, properties[p]);\n    }\n  }\n}\n\n/**\n * @param {Element} element\n * @param {string} property\n * @return {string}\n */\nexport function getComputedStyleValue(element, property) {\n  /**\n   * @const {string}\n   */\n  const value = window.getComputedStyle(element).getPropertyValue(property);\n  if (!value) {\n    return '';\n  } else {\n    return value.trim();\n  }\n}\n\n/**\n * return true if `cssText` contains a mixin definition or consumption\n * @param {string} cssText\n * @return {boolean}\n */\nexport function detectMixin(cssText) {\n  const has = MIXIN_MATCH.test(cssText) || VAR_ASSIGN.test(cssText);\n  // reset state of the regexes\n  MIXIN_MATCH.lastIndex = 0;\n  VAR_ASSIGN.lastIndex = 0;\n  return has;\n}\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/*\n * The apply shim simulates the behavior of `@apply` proposed at\n * https://tabatkins.github.io/specs/css-apply-rule/.\n * The approach is to convert a property like this:\n *\n *    --foo: {color: red; background: blue;}\n *\n * to this:\n *\n *    --foo_-_color: red;\n *    --foo_-_background: blue;\n *\n * Then where `@apply --foo` is used, that is converted to:\n *\n *    color: var(--foo_-_color);\n *    background: var(--foo_-_background);\n *\n * This approach generally works but there are some issues and limitations.\n * Consider, for example, that somewhere *between* where `--foo` is set and used,\n * another element sets it to:\n *\n *    --foo: { border: 2px solid red; }\n *\n * We must now ensure that the color and background from the previous setting\n * do not apply. This is accomplished by changing the property set to this:\n *\n *    --foo_-_border: 2px solid red;\n *    --foo_-_color: initial;\n *    --foo_-_background: initial;\n *\n * This works but introduces one new issue.\n * Consider this setup at the point where the `@apply` is used:\n *\n *    background: orange;\n *    `@apply` --foo;\n *\n * In this case the background will be unset (initial) rather than the desired\n * `orange`. We address this by altering the property set to use a fallback\n * value like this:\n *\n *    color: var(--foo_-_color);\n *    background: var(--foo_-_background, orange);\n *    border: var(--foo_-_border);\n *\n * Note that the default is retained in the property set and the `background` is\n * the desired `orange`. This leads us to a limitation.\n *\n * Limitation 1:\n\n * Only properties in the rule where the `@apply`\n * is used are considered as default values.\n * If another rule matches the element and sets `background` with\n * less specificity than the rule in which `@apply` appears,\n * the `background` will not be set.\n *\n * Limitation 2:\n *\n * When using Polymer's `updateStyles` api, new properties may not be set for\n * `@apply` properties.\n\n*/\n\n'use strict';\n\nimport {forEachRule, processVariableAndFallback, rulesForStyle, toCssText, gatherStyleText} from './style-util.js';\nimport {MIXIN_MATCH, VAR_ASSIGN} from './common-regex.js';\nimport {detectMixin} from './common-utils.js';\nimport {StyleNode} from './css-parse.js'; // eslint-disable-line no-unused-vars\n\nconst APPLY_NAME_CLEAN = /;\\s*/m;\nconst INITIAL_INHERIT = /^\\s*(initial)|(inherit)\\s*$/;\nconst IMPORTANT = /\\s*!important/;\n\n// separator used between mixin-name and mixin-property-name when producing properties\n// NOTE: plain '-' may cause collisions in user styles\nconst MIXIN_VAR_SEP = '_-_';\n\n/**\n * @typedef {!Object<string, string>}\n */\nlet PropertyEntry; // eslint-disable-line no-unused-vars\n\n/**\n * @typedef {!Object<string, boolean>}\n */\nlet DependantsEntry; // eslint-disable-line no-unused-vars\n\n/** @typedef {{\n *    properties: PropertyEntry,\n *    dependants: DependantsEntry\n * }}\n */\nlet MixinMapEntry; // eslint-disable-line no-unused-vars\n\n// map of mixin to property names\n// --foo: {border: 2px} -> {properties: {(--foo, ['border'])}, dependants: {'element-name': proto}}\nclass MixinMap {\n  constructor() {\n    /** @type {!Object<string, !MixinMapEntry>} */\n    this._map = {};\n  }\n  /**\n   * @param {string} name\n   * @param {!PropertyEntry} props\n   */\n  set(name, props) {\n    name = name.trim();\n    this._map[name] = {\n      properties: props,\n      dependants: {}\n    }\n  }\n  /**\n   * @param {string} name\n   * @return {MixinMapEntry}\n   */\n  get(name) {\n    name = name.trim();\n    return this._map[name] || null;\n  }\n}\n\n/**\n * Callback for when an element is marked invalid\n * @type {?function(string)}\n */\nlet invalidCallback = null;\n\n/** @unrestricted */\nclass ApplyShim {\n  constructor() {\n    /** @type {?string} */\n    this._currentElement = null;\n    /** @type {HTMLMetaElement} */\n    this._measureElement = null;\n    this._map = new MixinMap();\n  }\n  /**\n   * return true if `cssText` contains a mixin definition or consumption\n   * @param {string} cssText\n   * @return {boolean}\n   */\n  detectMixin(cssText) {\n    return detectMixin(cssText);\n  }\n\n  /**\n   * Gather styles into one style for easier processing\n   * @param {!HTMLTemplateElement} template\n   * @return {HTMLStyleElement}\n   */\n  gatherStyles(template) {\n    const styleText = gatherStyleText(template.content);\n    if (styleText) {\n      const style = /** @type {!HTMLStyleElement} */(document.createElement('style'));\n      style.textContent = styleText;\n      template.content.insertBefore(style, template.content.firstChild);\n      return style;\n    }\n    return null;\n  }\n  /**\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   * @return {StyleNode}\n   */\n  transformTemplate(template, elementName) {\n    if (template._gatheredStyle === undefined) {\n      template._gatheredStyle = this.gatherStyles(template);\n    }\n    /** @type {HTMLStyleElement} */\n    const style = template._gatheredStyle;\n    return style ? this.transformStyle(style, elementName) : null;\n  }\n  /**\n   * @param {!HTMLStyleElement} style\n   * @param {string} elementName\n   * @return {StyleNode}\n   */\n  transformStyle(style, elementName = '') {\n    let ast = rulesForStyle(style);\n    this.transformRules(ast, elementName);\n    style.textContent = toCssText(ast);\n    return ast;\n  }\n  /**\n   * @param {!HTMLStyleElement} style\n   * @return {StyleNode}\n   */\n  transformCustomStyle(style) {\n    let ast = rulesForStyle(style);\n    forEachRule(ast, (rule) => {\n      if (rule['selector'] === ':root') {\n        rule['selector'] = 'html';\n      }\n      this.transformRule(rule);\n    })\n    style.textContent = toCssText(ast);\n    return ast;\n  }\n  /**\n   * @param {StyleNode} rules\n   * @param {string} elementName\n   */\n  transformRules(rules, elementName) {\n    this._currentElement = elementName;\n    forEachRule(rules, (r) => {\n      this.transformRule(r);\n    });\n    this._currentElement = null;\n  }\n  /**\n   * @param {!StyleNode} rule\n   */\n  transformRule(rule) {\n    rule['cssText'] = this.transformCssText(rule['parsedCssText'], rule);\n    // :root was only used for variable assignment in property shim,\n    // but generates invalid selectors with real properties.\n    // replace with `:host > *`, which serves the same effect\n    if (rule['selector'] === ':root') {\n      rule['selector'] = ':host > *';\n    }\n  }\n  /**\n   * @param {string} cssText\n   * @param {!StyleNode} rule\n   * @return {string}\n   */\n  transformCssText(cssText, rule) {\n    // produce variables\n    cssText = cssText.replace(VAR_ASSIGN, (matchText, propertyName, valueProperty, valueMixin) =>\n      this._produceCssProperties(matchText, propertyName, valueProperty, valueMixin, rule));\n    // consume mixins\n    return this._consumeCssProperties(cssText, rule);\n  }\n  /**\n   * @param {string} property\n   * @return {string}\n   */\n  _getInitialValueForProperty(property) {\n    if (!this._measureElement) {\n      this._measureElement = /** @type {HTMLMetaElement} */(document.createElement('meta'));\n      this._measureElement.setAttribute('apply-shim-measure', '');\n      this._measureElement.style.all = 'initial';\n      document.head.appendChild(this._measureElement);\n    }\n    return window.getComputedStyle(this._measureElement).getPropertyValue(property);\n  }\n  /**\n   * Walk over all rules before this rule to find fallbacks for mixins\n   *\n   * @param {!StyleNode} startRule\n   * @return {!Object}\n   */\n  _fallbacksFromPreviousRules(startRule) {\n    // find the \"top\" rule\n    let topRule = startRule;\n    while (topRule['parent']) {\n      topRule = topRule['parent'];\n    }\n    const fallbacks = {};\n    let seenStartRule = false;\n    forEachRule(topRule, (r) => {\n      // stop when we hit the input rule\n      seenStartRule = seenStartRule || r === startRule;\n      if (seenStartRule) {\n        return;\n      }\n      // NOTE: Only matching selectors are \"safe\" for this fallback processing\n      // It would be prohibitive to run `matchesSelector()` on each selector,\n      // so we cheat and only check if the same selector string is used, which\n      // guarantees things like specificity matching\n      if (r['selector'] === startRule['selector']) {\n        Object.assign(fallbacks, this._cssTextToMap(r['parsedCssText']));\n      }\n    });\n    return fallbacks;\n  }\n  /**\n   * replace mixin consumption with variable consumption\n   * @param {string} text\n   * @param {!StyleNode=} rule\n   * @return {string}\n   */\n  _consumeCssProperties(text, rule) {\n    /** @type {Array} */\n    let m = null;\n    // loop over text until all mixins with defintions have been applied\n    while((m = MIXIN_MATCH.exec(text))) {\n      let matchText = m[0];\n      let mixinName = m[1];\n      let idx = m.index;\n      // collect properties before apply to be \"defaults\" if mixin might override them\n      // match includes a \"prefix\", so find the start and end positions of @apply\n      let applyPos = idx + matchText.indexOf('@apply');\n      let afterApplyPos = idx + matchText.length;\n      // find props defined before this @apply\n      let textBeforeApply = text.slice(0, applyPos);\n      let textAfterApply = text.slice(afterApplyPos);\n      let defaults = rule ? this._fallbacksFromPreviousRules(rule) : {};\n      Object.assign(defaults, this._cssTextToMap(textBeforeApply));\n      let replacement = this._atApplyToCssProperties(mixinName, defaults);\n      // use regex match position to replace mixin, keep linear processing time\n      text = `${textBeforeApply}${replacement}${textAfterApply}`;\n      // move regex search to _after_ replacement\n      MIXIN_MATCH.lastIndex = idx + replacement.length;\n    }\n    return text;\n  }\n  /**\n   * produce variable consumption at the site of mixin consumption\n   * `@apply` --foo; -> for all props (${propname}: var(--foo_-_${propname}, ${fallback[propname]}}))\n   * Example:\n   *  border: var(--foo_-_border); padding: var(--foo_-_padding, 2px)\n   *\n   * @param {string} mixinName\n   * @param {Object} fallbacks\n   * @return {string}\n   */\n  _atApplyToCssProperties(mixinName, fallbacks) {\n    mixinName = mixinName.replace(APPLY_NAME_CLEAN, '');\n    let vars = [];\n    let mixinEntry = this._map.get(mixinName);\n    // if we depend on a mixin before it is created\n    // make a sentinel entry in the map to add this element as a dependency for when it is defined.\n    if (!mixinEntry) {\n      this._map.set(mixinName, {});\n      mixinEntry = this._map.get(mixinName);\n    }\n    if (mixinEntry) {\n      if (this._currentElement) {\n        mixinEntry.dependants[this._currentElement] = true;\n      }\n      let p, parts, f;\n      const properties = mixinEntry.properties;\n      for (p in properties) {\n        f = fallbacks && fallbacks[p];\n        parts = [p, ': var(', mixinName, MIXIN_VAR_SEP, p];\n        if (f) {\n          parts.push(',', f.replace(IMPORTANT, ''));\n        }\n        parts.push(')');\n        if (IMPORTANT.test(properties[p])) {\n          parts.push(' !important');\n        }\n        vars.push(parts.join(''));\n      }\n    }\n    return vars.join('; ');\n  }\n\n  /**\n   * @param {string} property\n   * @param {string} value\n   * @return {string}\n   */\n  _replaceInitialOrInherit(property, value) {\n    let match = INITIAL_INHERIT.exec(value);\n    if (match) {\n      if (match[1]) {\n        // initial\n        // replace `initial` with the concrete initial value for this property\n        value = this._getInitialValueForProperty(property);\n      } else {\n        // inherit\n        // with this purposfully illegal value, the variable will be invalid at\n        // compute time (https://www.w3.org/TR/css-variables/#invalid-at-computed-value-time)\n        // and for inheriting values, will behave similarly\n        // we cannot support the same behavior for non inheriting values like 'border'\n        value = 'apply-shim-inherit';\n      }\n    }\n    return value;\n  }\n\n  /**\n   * \"parse\" a mixin definition into a map of properties and values\n   * cssTextToMap('border: 2px solid black') -> ('border', '2px solid black')\n   * @param {string} text\n   * @param {boolean=} replaceInitialOrInherit\n   * @return {!Object<string, string>}\n   */\n  _cssTextToMap(text, replaceInitialOrInherit = false) {\n    let props = text.split(';');\n    let property, value;\n    let out = {};\n    for (let i = 0, p, sp; i < props.length; i++) {\n      p = props[i];\n      if (p) {\n        sp = p.split(':');\n        // ignore lines that aren't definitions like @media\n        if (sp.length > 1) {\n          property = sp[0].trim();\n          // some properties may have ':' in the value, like data urls\n          value = sp.slice(1).join(':');\n          if (replaceInitialOrInherit) {\n            value = this._replaceInitialOrInherit(property, value);\n          }\n          out[property] = value;\n        }\n      }\n    }\n    return out;\n  }\n\n  /**\n   * @param {MixinMapEntry} mixinEntry\n   */\n  _invalidateMixinEntry(mixinEntry) {\n    if (!invalidCallback) {\n      return;\n    }\n    for (let elementName in mixinEntry.dependants) {\n      if (elementName !== this._currentElement) {\n        invalidCallback(elementName);\n      }\n    }\n  }\n\n  /**\n   * @param {string} matchText\n   * @param {string} propertyName\n   * @param {?string} valueProperty\n   * @param {?string} valueMixin\n   * @param {!StyleNode} rule\n   * @return {string}\n   */\n  _produceCssProperties(matchText, propertyName, valueProperty, valueMixin, rule) {\n    // handle case where property value is a mixin\n    if (valueProperty) {\n      // form: --mixin2: var(--mixin1), where --mixin1 is in the map\n      processVariableAndFallback(valueProperty, (prefix, value) => {\n        if (value && this._map.get(value)) {\n          valueMixin = `@apply ${value};`\n        }\n      });\n    }\n    if (!valueMixin) {\n      return matchText;\n    }\n    let mixinAsProperties = this._consumeCssProperties('' + valueMixin, rule);\n    let prefix = matchText.slice(0, matchText.indexOf('--'));\n    // `initial` and `inherit` as properties in a map should be replaced because\n    // these keywords are eagerly evaluated when the mixin becomes CSS Custom Properties,\n    // and would set the variable value, rather than carry the keyword to the `var()` usage.\n    let mixinValues = this._cssTextToMap(mixinAsProperties, true);\n    let combinedProps = mixinValues;\n    let mixinEntry = this._map.get(propertyName);\n    let oldProps = mixinEntry && mixinEntry.properties;\n    if (oldProps) {\n      // NOTE: since we use mixin, the map of properties is updated here\n      // and this is what we want.\n      combinedProps = Object.assign(Object.create(oldProps), mixinValues);\n    } else {\n      this._map.set(propertyName, combinedProps);\n    }\n    let out = [];\n    let p, v;\n    // set variables defined by current mixin\n    let needToInvalidate = false;\n    for (p in combinedProps) {\n      v = mixinValues[p];\n      // if property not defined by current mixin, set initial\n      if (v === undefined) {\n        v = 'initial';\n      }\n      if (oldProps && !(p in oldProps)) {\n        needToInvalidate = true;\n      }\n      out.push(`${propertyName}${MIXIN_VAR_SEP}${p}: ${v}`);\n    }\n    if (needToInvalidate) {\n      this._invalidateMixinEntry(mixinEntry);\n    }\n    if (mixinEntry) {\n      mixinEntry.properties = combinedProps;\n    }\n    // because the mixinMap is global, the mixin might conflict with\n    // a different scope's simple variable definition:\n    // Example:\n    // some style somewhere:\n    // --mixin1:{ ... }\n    // --mixin2: var(--mixin1);\n    // some other element:\n    // --mixin1: 10px solid red;\n    // --foo: var(--mixin1);\n    // In this case, we leave the original variable definition in place.\n    if (valueProperty) {\n      prefix = `${matchText};${prefix}`;\n    }\n    return `${prefix}${out.join('; ')};`;\n  }\n}\n\n/* exports */\n/* eslint-disable no-self-assign */\nApplyShim.prototype['detectMixin'] = ApplyShim.prototype.detectMixin;\nApplyShim.prototype['transformStyle'] = ApplyShim.prototype.transformStyle;\nApplyShim.prototype['transformCustomStyle'] = ApplyShim.prototype.transformCustomStyle;\nApplyShim.prototype['transformRules'] = ApplyShim.prototype.transformRules;\nApplyShim.prototype['transformRule'] = ApplyShim.prototype.transformRule;\nApplyShim.prototype['transformTemplate'] = ApplyShim.prototype.transformTemplate;\nApplyShim.prototype['_separator'] = MIXIN_VAR_SEP;\n/* eslint-enable no-self-assign */\nObject.defineProperty(ApplyShim.prototype, 'invalidCallback', {\n  /** @return {?function(string)} */\n  get() {\n    return invalidCallback;\n  },\n  /** @param {?function(string)} cb */\n  set(cb) {\n    invalidCallback = cb;\n  }\n});\n\nexport default ApplyShim;\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\n/**\n * @const {!Object<string, !HTMLTemplateElement>}\n */\nconst templateMap = {};\nexport default templateMap;\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\nimport templateMap from './template-map.js';\nimport {StyleNode} from './css-parse.js'; // eslint-disable-line no-unused-vars\n\n/*\n * Utilities for handling invalidating apply-shim mixins for a given template.\n *\n * The invalidation strategy involves keeping track of the \"current\" version of a template's mixins, and updating that count when a mixin is invalidated.\n * The template\n */\n\n/** @const {string} */\nconst CURRENT_VERSION = '_applyShimCurrentVersion';\n\n/** @const {string} */\nconst NEXT_VERSION = '_applyShimNextVersion';\n\n/** @const {string} */\nconst VALIDATING_VERSION = '_applyShimValidatingVersion';\n\n/**\n * @const {Promise<void>}\n */\nconst promise = Promise.resolve();\n\n/**\n * @param {string} elementName\n */\nexport function invalidate(elementName){\n  let template = templateMap[elementName];\n  if (template) {\n    invalidateTemplate(template);\n  }\n}\n\n/**\n * This function can be called multiple times to mark a template invalid\n * and signal that the style inside must be regenerated.\n *\n * Use `startValidatingTemplate` to begin an asynchronous validation cycle.\n * During that cycle, call `templateIsValidating` to see if the template must\n * be revalidated\n * @param {HTMLTemplateElement} template\n */\nexport function invalidateTemplate(template) {\n  // default the current version to 0\n  template[CURRENT_VERSION] = template[CURRENT_VERSION] || 0;\n  // ensure the \"validating for\" flag exists\n  template[VALIDATING_VERSION] = template[VALIDATING_VERSION] || 0;\n  // increment the next version\n  template[NEXT_VERSION] = (template[NEXT_VERSION] || 0) + 1;\n}\n\n/**\n * @param {string} elementName\n * @return {boolean}\n */\nexport function isValid(elementName) {\n  let template = templateMap[elementName];\n  if (template) {\n    return templateIsValid(template);\n  }\n  return true;\n}\n\n/**\n * @param {HTMLTemplateElement} template\n * @return {boolean}\n */\nexport function templateIsValid(template) {\n  return template[CURRENT_VERSION] === template[NEXT_VERSION];\n}\n\n/**\n * @param {string} elementName\n * @return {boolean}\n */\nexport function isValidating(elementName) {\n  let template = templateMap[elementName];\n  if (template) {\n    return templateIsValidating(template);\n  }\n  return false;\n}\n\n/**\n * Returns true if the template is currently invalid and `startValidating` has been called since the last invalidation.\n * If false, the template must be validated.\n * @param {HTMLTemplateElement} template\n * @return {boolean}\n */\nexport function templateIsValidating(template) {\n  return !templateIsValid(template) && template[VALIDATING_VERSION] === template[NEXT_VERSION];\n}\n\n/**\n * the template is marked as `validating` for one microtask so that all instances\n * found in the tree crawl of `applyStyle` will update themselves,\n * but the template will only be updated once.\n * @param {string} elementName\n*/\nexport function startValidating(elementName) {\n  let template = templateMap[elementName];\n  startValidatingTemplate(template);\n}\n\n/**\n * Begin an asynchronous invalidation cycle.\n * This should be called after every validation of a template\n *\n * After one microtask, the template will be marked as valid until the next call to `invalidateTemplate`\n * @param {HTMLTemplateElement} template\n */\nexport function startValidatingTemplate(template) {\n  // remember that the current \"next version\" is the reason for this validation cycle\n  template[VALIDATING_VERSION] = template[NEXT_VERSION];\n  // however, there only needs to be one async task to clear the counters\n  if (!template._validating) {\n    template._validating = true;\n    promise.then(function() {\n      // sync the current version to let future invalidations cause a refresh cycle\n      template[CURRENT_VERSION] = template[NEXT_VERSION];\n      template._validating = false;\n    });\n  }\n}\n\n/**\n * @return {boolean}\n */\nexport function elementsAreInvalid() {\n  for (let elementName in templateMap) {\n    let template = templateMap[elementName];\n    if (!templateIsValid(template)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\n/** @type {Promise<void>} */\nlet readyPromise = null;\n\n/** @type {?function(?function())} */\nlet whenReady = window['HTMLImports'] && window['HTMLImports']['whenReady'] || null;\n\n/** @type {function()} */\nlet resolveFn;\n\n/**\n * @param {?function()} callback\n */\nexport default function documentWait(callback) {\n  requestAnimationFrame(function() {\n    if (whenReady) {\n      whenReady(callback)\n    } else {\n      if (!readyPromise) {\n        readyPromise = new Promise((resolve) => {resolveFn = resolve});\n        if (document.readyState === 'complete') {\n          resolveFn();\n        } else {\n          document.addEventListener('readystatechange', () => {\n            if (document.readyState === 'complete') {\n              resolveFn();\n            }\n          });\n        }\n      }\n      readyPromise.then(function(){ callback && callback(); });\n    }\n  });\n}\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport documentWait from './document-wait.js';\n\n/**\n * @typedef {HTMLStyleElement | {getStyle: function():HTMLStyleElement}}\n */\nexport let CustomStyleProvider;\n\nconst SEEN_MARKER = '__seenByShadyCSS';\nconst CACHED_STYLE = '__shadyCSSCachedStyle';\n\n/** @type {?function(!HTMLStyleElement)} */\nlet transformFn = null;\n\n/** @type {?function()} */\nlet validateFn = null;\n\n/**\nThis interface is provided to add document-level <style> elements to ShadyCSS for processing.\nThese styles must be processed by ShadyCSS to simulate ShadowRoot upper-bound encapsulation from outside styles\nIn addition, these styles may also need to be processed for @apply rules and CSS Custom Properties\n\nTo add document-level styles to ShadyCSS, one can call `ShadyCSS.addDocumentStyle(styleElement)` or `ShadyCSS.addDocumentStyle({getStyle: () => styleElement})`\n\nIn addition, if the process used to discover document-level styles can be synchronously flushed, one should set `ShadyCSS.documentStyleFlush`.\nThis function will be called when calculating styles.\n\nAn example usage of the document-level styling api can be found in `examples/document-style-lib.js`\n\n@unrestricted\n*/\nexport default class CustomStyleInterface {\n  constructor() {\n    /** @type {!Array<!CustomStyleProvider>} */\n    this['customStyles'] = [];\n    this['enqueued'] = false;\n    // NOTE(dfreedm): use quotes here to prevent closure inlining to `function(){}`;\n    documentWait(() => {\n      if (window['ShadyCSS']['flushCustomStyles']) {\n        window['ShadyCSS']['flushCustomStyles']();\n      }\n    })\n  }\n  /**\n   * Queue a validation for new custom styles to batch style recalculations\n   */\n  enqueueDocumentValidation() {\n    if (this['enqueued'] || !validateFn) {\n      return;\n    }\n    this['enqueued'] = true;\n    documentWait(validateFn);\n  }\n  /**\n   * @param {!HTMLStyleElement} style\n   */\n  addCustomStyle(style) {\n    if (!style[SEEN_MARKER]) {\n      style[SEEN_MARKER] = true;\n      this['customStyles'].push(style);\n      this.enqueueDocumentValidation();\n    }\n  }\n  /**\n   * @param {!CustomStyleProvider} customStyle\n   * @return {HTMLStyleElement}\n   */\n  getStyleForCustomStyle(customStyle) {\n    if (customStyle[CACHED_STYLE]) {\n      return customStyle[CACHED_STYLE];\n    }\n    let style;\n    if (customStyle['getStyle']) {\n      style = customStyle['getStyle']();\n    } else {\n      style = customStyle;\n    }\n    return style;\n  }\n  /**\n   * @return {!Array<!CustomStyleProvider>}\n   */\n  processStyles() {\n    const cs = this['customStyles'];\n    for (let i = 0; i < cs.length; i++) {\n      const customStyle = cs[i];\n      if (customStyle[CACHED_STYLE]) {\n        continue;\n      }\n      const style = this.getStyleForCustomStyle(customStyle);\n      if (style) {\n        // HTMLImports polyfill may have cloned the style into the main document,\n        // which is referenced with __appliedElement.\n        const styleToTransform = /** @type {!HTMLStyleElement} */(style['__appliedElement'] || style);\n        if (transformFn) {\n          transformFn(styleToTransform);\n        }\n        customStyle[CACHED_STYLE] = styleToTransform;\n      }\n    }\n    return cs;\n  }\n}\n\n/* eslint-disable no-self-assign */\nCustomStyleInterface.prototype['addCustomStyle'] = CustomStyleInterface.prototype.addCustomStyle;\nCustomStyleInterface.prototype['getStyleForCustomStyle'] = CustomStyleInterface.prototype.getStyleForCustomStyle;\nCustomStyleInterface.prototype['processStyles'] = CustomStyleInterface.prototype.processStyles;\n/* eslint-enable no-self-assign */\n\nObject.defineProperties(CustomStyleInterface.prototype, {\n  'transformCallback': {\n    /** @return {?function(!HTMLStyleElement)} */\n    get() {\n      return transformFn;\n    },\n    /** @param {?function(!HTMLStyleElement)} fn */\n    set(fn) {\n      transformFn = fn;\n    }\n  },\n  'validateCallback': {\n    /** @return {?function()} */\n    get() {\n      return validateFn;\n    },\n    /**\n     * @param {?function()} fn\n     * @this {CustomStyleInterface}\n     */\n    set(fn) {\n      let needsEnqueue = false;\n      if (!validateFn) {\n        needsEnqueue = true;\n      }\n      validateFn = fn;\n      if (needsEnqueue) {\n        this.enqueueDocumentValidation();\n      }\n    },\n  }\n})\n\n/** @typedef {{\n * customStyles: !Array<!CustomStyleProvider>,\n * addCustomStyle: function(!CustomStyleProvider),\n * getStyleForCustomStyle: function(!CustomStyleProvider): HTMLStyleElement,\n * findStyles: function(),\n * transformCallback: ?function(!HTMLStyleElement),\n * validateCallback: ?function()\n * }}\n */\nexport const CustomStyleInterfaceInterface = {};\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport ApplyShim from '../src/apply-shim.js';\nimport templateMap from '../src/template-map.js';\nimport {getIsExtends, toCssText, elementHasBuiltCss} from '../src/style-util.js';\nimport * as ApplyShimUtils from '../src/apply-shim-utils.js';\nimport {getComputedStyleValue, updateNativeProperties} from '../src/common-utils.js';\nimport {CustomStyleInterfaceInterface} from '../src/custom-style-interface.js'; // eslint-disable-line no-unused-vars\nimport {nativeCssVariables, nativeShadow, cssBuild, disableRuntime} from '../src/style-settings.js';\n\n/** @const {ApplyShim} */\nconst applyShim = new ApplyShim();\n\nclass ApplyShimInterface {\n  constructor() {\n    /** @type {?CustomStyleInterfaceInterface} */\n    this.customStyleInterface = null;\n    applyShim['invalidCallback'] = ApplyShimUtils.invalidate;\n  }\n  ensure() {\n    if (this.customStyleInterface) {\n      return;\n    }\n    if (window.ShadyCSS.CustomStyleInterface) {\n      this.customStyleInterface =\n          /** @type {!CustomStyleInterfaceInterface} */ (\n              window.ShadyCSS.CustomStyleInterface);\n      this.customStyleInterface['transformCallback'] = (style) => {\n        applyShim.transformCustomStyle(style);\n      };\n      this.customStyleInterface['validateCallback'] = () => {\n        requestAnimationFrame(() => {\n          if (this.customStyleInterface['enqueued']) {\n            this.flushCustomStyles();\n          }\n        });\n      }\n    }\n  }\n  /**\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   */\n  prepareTemplate(template, elementName) {\n    this.ensure();\n    if (elementHasBuiltCss(template)) {\n      return;\n    }\n    templateMap[elementName] = template;\n    let ast = applyShim.transformTemplate(template, elementName);\n    // save original style ast to use for revalidating instances\n    template['_styleAst'] = ast;\n  }\n  flushCustomStyles() {\n    this.ensure();\n    if (!this.customStyleInterface) {\n      return;\n    }\n    let styles = this.customStyleInterface['processStyles']();\n    if (!this.customStyleInterface['enqueued']) {\n      return;\n    }\n    for (let i = 0; i < styles.length; i++ ) {\n      let cs = styles[i];\n      let style = this.customStyleInterface['getStyleForCustomStyle'](cs);\n      if (style) {\n        applyShim.transformCustomStyle(style);\n      }\n    }\n    this.customStyleInterface['enqueued'] = false;\n  }\n  /**\n   * @param {HTMLElement} element\n   * @param {Object=} properties\n   */\n  styleSubtree(element, properties) {\n    this.ensure();\n    if (properties) {\n      updateNativeProperties(element, properties);\n    }\n    if (element.shadowRoot) {\n      this.styleElement(element);\n      let shadowChildren =\n          /** @type {!ParentNode} */ (element.shadowRoot).children ||\n          element.shadowRoot.childNodes;\n      for (let i = 0; i < shadowChildren.length; i++) {\n        this.styleSubtree(/** @type {HTMLElement} */(shadowChildren[i]));\n      }\n    } else {\n      let children = element.children || element.childNodes;\n      for (let i = 0; i < children.length; i++) {\n        this.styleSubtree(/** @type {HTMLElement} */(children[i]));\n      }\n    }\n  }\n  /**\n   * @param {HTMLElement} element\n   */\n  styleElement(element) {\n    this.ensure();\n    let {is} = getIsExtends(element);\n    let template = templateMap[is];\n    if (template && elementHasBuiltCss(template)) {\n      return;\n    }\n    if (template && !ApplyShimUtils.templateIsValid(template)) {\n      // only revalidate template once\n      if (!ApplyShimUtils.templateIsValidating(template)) {\n        this.prepareTemplate(template, is);\n        ApplyShimUtils.startValidatingTemplate(template);\n      }\n      // update this element instance\n      let root = element.shadowRoot;\n      if (root) {\n        let style = /** @type {HTMLStyleElement} */(root.querySelector('style'));\n        if (style) {\n          // reuse the template's style ast, it has all the original css text\n          style['__cssRules'] = template['_styleAst'];\n          style.textContent = toCssText(template['_styleAst'])\n        }\n      }\n    }\n  }\n  /**\n   * @param {Object=} properties\n   */\n  styleDocument(properties) {\n    this.ensure();\n    this.styleSubtree(document.body, properties);\n  }\n}\n\nif (!window.ShadyCSS || !window.ShadyCSS.ScopingShim) {\n  const applyShimInterface = new ApplyShimInterface();\n  let CustomStyleInterface = window.ShadyCSS && window.ShadyCSS.CustomStyleInterface;\n\n  /** @suppress {duplicate} */\n  window.ShadyCSS = {\n    /**\n     * @param {!HTMLTemplateElement} template\n     * @param {string} elementName\n     * @param {string=} elementExtends\n     */\n    prepareTemplate(template, elementName, elementExtends) { // eslint-disable-line no-unused-vars\n      applyShimInterface.flushCustomStyles();\n      applyShimInterface.prepareTemplate(template, elementName);\n    },\n\n    /**\n     * @param {!HTMLTemplateElement} template\n     * @param {string} elementName\n     * @param {string=} elementExtends\n     */\n    prepareTemplateStyles(template, elementName, elementExtends) {\n      window.ShadyCSS.prepareTemplate(template, elementName, elementExtends);\n    },\n\n    /**\n     * @param {!HTMLTemplateElement} template\n     * @param {string} elementName\n     */\n    prepareTemplateDom(template, elementName) {}, // eslint-disable-line no-unused-vars\n\n    /**\n     * @param {!HTMLElement} element\n     * @param {Object=} properties\n     */\n    styleSubtree(element, properties) {\n      applyShimInterface.flushCustomStyles();\n      applyShimInterface.styleSubtree(element, properties);\n    },\n\n    /**\n     * @param {!HTMLElement} element\n     */\n    styleElement(element) {\n      applyShimInterface.flushCustomStyles();\n      applyShimInterface.styleElement(element);\n    },\n\n    /**\n     * @param {Object=} properties\n     */\n    styleDocument(properties) {\n      applyShimInterface.flushCustomStyles();\n      applyShimInterface.styleDocument(properties);\n    },\n\n    /**\n     * @param {Element} element\n     * @param {string} property\n     * @return {string}\n     */\n    getComputedStyleValue(element, property) {\n      return getComputedStyleValue(element, property);\n    },\n\n    flushCustomStyles() {\n      applyShimInterface.flushCustomStyles();\n    },\n\n    nativeCss: nativeCssVariables,\n    nativeShadow: nativeShadow,\n    cssBuild: cssBuild,\n    disableRuntime: disableRuntime,\n  };\n\n  if (CustomStyleInterface) {\n    window.ShadyCSS.CustomStyleInterface = CustomStyleInterface;\n  }\n}\n\nwindow.ShadyCSS.ApplyShim = applyShim;\n", "/**\n * @fileoverview\n * @suppress {checkPrototypalTypes}\n * @license Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt The complete set of authors may be found\n * at http://polymer.github.io/AUTHORS.txt The complete set of contributors may\n * be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by\n * Google as part of the polymer project is also subject to an additional IP\n * rights grant found at http://polymer.github.io/PATENTS.txt\n */\nimport { PropertyAccessors } from './property-accessors.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\n\nconst HOST_DIR = /:host\\(:dir\\((ltr|rtl)\\)\\)/g;\nconst HOST_DIR_REPLACMENT = ':host([dir=\"$1\"])';\n\nconst EL_DIR = /([\\s\\w-#\\.\\[\\]\\*]*):dir\\((ltr|rtl)\\)/g;\nconst EL_DIR_REPLACMENT = ':host([dir=\"$2\"]) $1';\n\nconst DIR_CHECK = /:dir\\((?:ltr|rtl)\\)/;\n\nconst SHIM_SHADOW = Boolean(window['ShadyDOM'] && window['ShadyDOM']['inUse']);\n\n/**\n * @type {!Array<!Polymer_DirMixin>}\n */\nconst DIR_INSTANCES = [];\n\n/** @type {?MutationObserver} */\nlet observer = null;\n\nlet documentDir = '';\n\nfunction getRTL() {\n  documentDir = document.documentElement.getAttribute('dir');\n}\n\n/**\n * @param {!Polymer_DirMixin} instance Instance to set RTL status on\n */\nfunction setRTL(instance) {\n  if (!instance.__autoDirOptOut) {\n    const el = /** @type {!HTMLElement} */(instance);\n    el.setAttribute('dir', documentDir);\n  }\n}\n\nfunction updateDirection() {\n  getRTL();\n  documentDir = document.documentElement.getAttribute('dir');\n  for (let i = 0; i < DIR_INSTANCES.length; i++) {\n    setRTL(DIR_INSTANCES[i]);\n  }\n}\n\nfunction takeRecords() {\n  if (observer && observer.takeRecords().length) {\n    updateDirection();\n  }\n}\n\n/**\n * Element class mixin that allows elements to use the `:dir` CSS Selector to\n * have text direction specific styling.\n *\n * With this mixin, any stylesheet provided in the template will transform\n * `:dir` into `:host([dir])` and sync direction with the page via the\n * element's `dir` attribute.\n *\n * Elements can opt out of the global page text direction by setting the `dir`\n * attribute directly in `ready()` or in HTML.\n *\n * Caveats:\n * - Applications must set `<html dir=\"ltr\">` or `<html dir=\"rtl\">` to sync\n *   direction\n * - Automatic left-to-right or right-to-left styling is sync'd with the\n *   `<html>` element only.\n * - Changing `dir` at runtime is supported.\n * - Opting out of the global direction styling is permanent\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertyAccessors\n * @template T\n * @param {function(new:T)} superClass Class to apply mixin to.\n * @return {function(new:T)} superClass with mixin applied.\n */\nexport const DirMixin = dedupingMixin((base) => {\n\n  if (!SHIM_SHADOW) {\n    if (!observer) {\n      getRTL();\n      observer = new MutationObserver(updateDirection);\n      observer.observe(document.documentElement, {attributes: true, attributeFilter: ['dir']});\n    }\n  }\n\n  /**\n   * @constructor\n   * @implements {Polymer_PropertyAccessors}\n   * @private\n   */\n  const elementBase = PropertyAccessors(base);\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_DirMixin}\n   */\n  class Dir extends elementBase {\n\n    /**\n     * @param {string} cssText .\n     * @param {string} baseURI .\n     * @return {string} .\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     * @nocollapse\n     */\n    static _processStyleText(cssText, baseURI) {\n      // TODO(https://github.com/google/closure-compiler/issues/3240):\n      //     Change back to just super.methodCall()\n      cssText = elementBase._processStyleText.call(this, cssText, baseURI);\n      if (!SHIM_SHADOW && DIR_CHECK.test(cssText)) {\n        cssText = this._replaceDirInCssText(cssText);\n        this.__activateDir = true;\n      }\n      return cssText;\n    }\n\n    /**\n     * Replace `:dir` in the given CSS text\n     *\n     * @param {string} text CSS text to replace DIR\n     * @return {string} Modified CSS\n     * @nocollapse\n     */\n    static _replaceDirInCssText(text) {\n      let replacedText = text;\n      replacedText = replacedText.replace(HOST_DIR, HOST_DIR_REPLACMENT);\n      replacedText = replacedText.replace(EL_DIR, EL_DIR_REPLACMENT);\n      return replacedText;\n    }\n\n    constructor() {\n      super();\n      /** @type {boolean} */\n      this.__autoDirOptOut = false;\n    }\n\n    /**\n     * @override\n     * @suppress {invalidCasts} Closure doesn't understand that `this` is an\n     *     HTMLElement\n     * @return {void}\n     */\n    ready() {\n      super.ready();\n      this.__autoDirOptOut = /** @type {!HTMLElement} */(this).hasAttribute('dir');\n    }\n\n    /**\n     * @override\n     * @suppress {missingProperties} If it exists on elementBase, it can be\n     *   super'd\n     * @return {void}\n     */\n    connectedCallback() {\n      if (elementBase.prototype.connectedCallback) {\n        super.connectedCallback();\n      }\n      if (this.constructor.__activateDir) {\n        takeRecords();\n        DIR_INSTANCES.push(this);\n        setRTL(this);\n      }\n    }\n\n    /**\n     * @override\n     * @suppress {missingProperties} If it exists on elementBase, it can be\n     *   super'd\n     * @return {void}\n     */\n    disconnectedCallback() {\n      if (elementBase.prototype.disconnectedCallback) {\n        super.disconnectedCallback();\n      }\n      if (this.constructor.__activateDir) {\n        const idx = DIR_INSTANCES.indexOf(this);\n        if (idx > -1) {\n          DIR_INSTANCES.splice(idx, 1);\n        }\n      }\n    }\n  }\n\n  Dir.__activateDir = false;\n\n  return Dir;\n});\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Module for scheduling flushable pre-render and post-render tasks.\n *\n * @summary Module for scheduling flushable pre-render and post-render tasks.\n */\n\nimport './boot.js';\n\nlet scheduled = false;\nlet beforeRenderQueue = [];\nlet afterRenderQueue = [];\n\nfunction schedule() {\n  scheduled = true;\n  // before next render\n  requestAnimationFrame(function() {\n    scheduled = false;\n    flushQueue(beforeRenderQueue);\n    // after the render\n    setTimeout(function() {\n      runQueue(afterRenderQueue);\n    });\n  });\n}\n\nfunction flushQueue(queue) {\n  while (queue.length) {\n    callMethod(queue.shift());\n  }\n}\n\nfunction runQueue(queue) {\n  for (let i=0, l=queue.length; i < l; i++) {\n    callMethod(queue.shift());\n  }\n}\n\nfunction callMethod(info) {\n  const context = info[0];\n  const callback = info[1];\n  const args = info[2];\n  try {\n    callback.apply(context, args);\n  } catch(e) {\n    setTimeout(() => {\n      throw e;\n    });\n  }\n}\n\n/**\n * Flushes all `beforeNextRender` tasks, followed by all `afterNextRender`\n * tasks.\n *\n * @return {void}\n */\nexport function flush() {\n  while (beforeRenderQueue.length || afterRenderQueue.length) {\n    flushQueue(beforeRenderQueue);\n    flushQueue(afterRenderQueue);\n  }\n  scheduled = false;\n}\n\n\n/**\n * Enqueues a callback which will be run before the next render, at\n * `requestAnimationFrame` timing.\n *\n * This method is useful for enqueuing work that requires DOM measurement,\n * since measurement may not be reliable in custom element callbacks before\n * the first render, as well as for batching measurement tasks in general.\n *\n * Tasks in this queue may be flushed by calling `flush()`.\n *\n * @param {*} context Context object the callback function will be bound to\n * @param {function(...*):void} callback Callback function\n * @param {!Array=} args An array of arguments to call the callback function with\n * @return {void}\n */\nexport function beforeNextRender(context, callback, args) {\n  if (!scheduled) {\n    schedule();\n  }\n  beforeRenderQueue.push([context, callback, args]);\n}\n\n/**\n * Enqueues a callback which will be run after the next render, equivalent\n * to one task (`setTimeout`) after the next `requestAnimationFrame`.\n *\n * This method is useful for tuning the first-render performance of an\n * element or application by deferring non-critical work until after the\n * first paint.  Typical non-render-critical work may include adding UI\n * event listeners and aria attributes.\n *\n * @param {*} context Context object the callback function will be bound to\n * @param {function(...*):void} callback Callback function\n * @param {!Array=} args An array of arguments to call the callback function with\n * @return {void}\n */\nexport function afterNextRender(context, callback, args) {\n  if (!scheduled) {\n    schedule();\n  }\n  afterRenderQueue.push([context, callback, args]);\n}\n\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nfunction resolve() {\n  document.body.removeAttribute('unresolved');\n}\n\nif (document.readyState === 'interactive' || document.readyState === 'complete') {\n  resolve();\n} else {\n  window.addEventListener('DOMContentLoaded', resolve);\n}\n\nexport {};\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nfunction newSplice(index, removed, addedCount) {\n  return {\n    index: index,\n    removed: removed,\n    addedCount: addedCount\n  };\n}\n\nconst EDIT_LEAVE = 0;\nconst EDIT_UPDATE = 1;\nconst EDIT_ADD = 2;\nconst EDIT_DELETE = 3;\n\n// Note: This function is *based* on the computation of the Levenshtein\n// \"edit\" distance. The one change is that \"updates\" are treated as two\n// edits - not one. With Array splices, an update is really a delete\n// followed by an add. By retaining this, we optimize for \"keeping\" the\n// maximum array items in the original array. For example:\n//\n//   'xxxx123' -> '123yyyy'\n//\n// With 1-edit updates, the shortest path would be just to update all seven\n// characters. With 2-edit updates, we delete 4, leave 3, and add 4. This\n// leaves the substring '123' intact.\nfunction calcEditDistances(current, currentStart, currentEnd,\n                            old, oldStart, oldEnd) {\n  // \"Deletion\" columns\n  let rowCount = oldEnd - oldStart + 1;\n  let columnCount = currentEnd - currentStart + 1;\n  let distances = new Array(rowCount);\n\n  // \"Addition\" rows. Initialize null column.\n  for (let i = 0; i < rowCount; i++) {\n    distances[i] = new Array(columnCount);\n    distances[i][0] = i;\n  }\n\n  // Initialize null row\n  for (let j = 0; j < columnCount; j++)\n    distances[0][j] = j;\n\n  for (let i = 1; i < rowCount; i++) {\n    for (let j = 1; j < columnCount; j++) {\n      if (equals(current[currentStart + j - 1], old[oldStart + i - 1]))\n        distances[i][j] = distances[i - 1][j - 1];\n      else {\n        let north = distances[i - 1][j] + 1;\n        let west = distances[i][j - 1] + 1;\n        distances[i][j] = north < west ? north : west;\n      }\n    }\n  }\n\n  return distances;\n}\n\n// This starts at the final weight, and walks \"backward\" by finding\n// the minimum previous weight recursively until the origin of the weight\n// matrix.\nfunction spliceOperationsFromEditDistances(distances) {\n  let i = distances.length - 1;\n  let j = distances[0].length - 1;\n  let current = distances[i][j];\n  let edits = [];\n  while (i > 0 || j > 0) {\n    if (i == 0) {\n      edits.push(EDIT_ADD);\n      j--;\n      continue;\n    }\n    if (j == 0) {\n      edits.push(EDIT_DELETE);\n      i--;\n      continue;\n    }\n    let northWest = distances[i - 1][j - 1];\n    let west = distances[i - 1][j];\n    let north = distances[i][j - 1];\n\n    let min;\n    if (west < north)\n      min = west < northWest ? west : northWest;\n    else\n      min = north < northWest ? north : northWest;\n\n    if (min == northWest) {\n      if (northWest == current) {\n        edits.push(EDIT_LEAVE);\n      } else {\n        edits.push(EDIT_UPDATE);\n        current = northWest;\n      }\n      i--;\n      j--;\n    } else if (min == west) {\n      edits.push(EDIT_DELETE);\n      i--;\n      current = west;\n    } else {\n      edits.push(EDIT_ADD);\n      j--;\n      current = north;\n    }\n  }\n\n  edits.reverse();\n  return edits;\n}\n\n/**\n * Splice Projection functions:\n *\n * A splice map is a representation of how a previous array of items\n * was transformed into a new array of items. Conceptually it is a list of\n * tuples of\n *\n *   <index, removed, addedCount>\n *\n * which are kept in ascending index order of. The tuple represents that at\n * the |index|, |removed| sequence of items were removed, and counting forward\n * from |index|, |addedCount| items were added.\n */\n\n/**\n * Lacking individual splice mutation information, the minimal set of\n * splices can be synthesized given the previous state and final state of an\n * array. The basic approach is to calculate the edit distance matrix and\n * choose the shortest path through it.\n *\n * Complexity: O(l * p)\n *   l: The length of the current array\n *   p: The length of the old array\n *\n * @param {!Array} current The current \"changed\" array for which to\n * calculate splices.\n * @param {number} currentStart Starting index in the `current` array for\n * which splices are calculated.\n * @param {number} currentEnd Ending index in the `current` array for\n * which splices are calculated.\n * @param {!Array} old The original \"unchanged\" array to compare `current`\n * against to determine splices.\n * @param {number} oldStart Starting index in the `old` array for\n * which splices are calculated.\n * @param {number} oldEnd Ending index in the `old` array for\n * which splices are calculated.\n * @return {!Array} Returns an array of splice record objects. Each of these\n * contains: `index` the location where the splice occurred; `removed`\n * the array of removed items from this location; `addedCount` the number\n * of items added at this location.\n */\nfunction calcSplices(current, currentStart, currentEnd,\n                      old, oldStart, oldEnd) {\n  let prefixCount = 0;\n  let suffixCount = 0;\n  let splice;\n\n  let minLength = Math.min(currentEnd - currentStart, oldEnd - oldStart);\n  if (currentStart == 0 && oldStart == 0)\n    prefixCount = sharedPrefix(current, old, minLength);\n\n  if (currentEnd == current.length && oldEnd == old.length)\n    suffixCount = sharedSuffix(current, old, minLength - prefixCount);\n\n  currentStart += prefixCount;\n  oldStart += prefixCount;\n  currentEnd -= suffixCount;\n  oldEnd -= suffixCount;\n\n  if (currentEnd - currentStart == 0 && oldEnd - oldStart == 0)\n    return [];\n\n  if (currentStart == currentEnd) {\n    splice = newSplice(currentStart, [], 0);\n    while (oldStart < oldEnd)\n      splice.removed.push(old[oldStart++]);\n\n    return [ splice ];\n  } else if (oldStart == oldEnd)\n    return [ newSplice(currentStart, [], currentEnd - currentStart) ];\n\n  let ops = spliceOperationsFromEditDistances(\n      calcEditDistances(current, currentStart, currentEnd,\n                             old, oldStart, oldEnd));\n\n  splice = undefined;\n  let splices = [];\n  let index = currentStart;\n  let oldIndex = oldStart;\n  for (let i = 0; i < ops.length; i++) {\n    switch(ops[i]) {\n      case EDIT_LEAVE:\n        if (splice) {\n          splices.push(splice);\n          splice = undefined;\n        }\n\n        index++;\n        oldIndex++;\n        break;\n      case EDIT_UPDATE:\n        if (!splice)\n          splice = newSplice(index, [], 0);\n\n        splice.addedCount++;\n        index++;\n\n        splice.removed.push(old[oldIndex]);\n        oldIndex++;\n        break;\n      case EDIT_ADD:\n        if (!splice)\n          splice = newSplice(index, [], 0);\n\n        splice.addedCount++;\n        index++;\n        break;\n      case EDIT_DELETE:\n        if (!splice)\n          splice = newSplice(index, [], 0);\n\n        splice.removed.push(old[oldIndex]);\n        oldIndex++;\n        break;\n    }\n  }\n\n  if (splice) {\n    splices.push(splice);\n  }\n  return splices;\n}\n\nfunction sharedPrefix(current, old, searchLength) {\n  for (let i = 0; i < searchLength; i++)\n    if (!equals(current[i], old[i]))\n      return i;\n  return searchLength;\n}\n\nfunction sharedSuffix(current, old, searchLength) {\n  let index1 = current.length;\n  let index2 = old.length;\n  let count = 0;\n  while (count < searchLength && equals(current[--index1], old[--index2]))\n    count++;\n\n  return count;\n}\n\n/**\n * Returns an array of splice records indicating the minimum edits required\n * to transform the `previous` array into the `current` array.\n *\n * Splice records are ordered by index and contain the following fields:\n * - `index`: index where edit started\n * - `removed`: array of removed items from this index\n * - `addedCount`: number of items added at this index\n *\n * This function is based on the Levenshtein \"minimum edit distance\"\n * algorithm. Note that updates are treated as removal followed by addition.\n *\n * The worst-case time complexity of this algorithm is `O(l * p)`\n *   l: The length of the current array\n *   p: The length of the previous array\n *\n * However, the worst-case complexity is reduced by an `O(n)` optimization\n * to detect any shared prefix & suffix between the two arrays and only\n * perform the more expensive minimum edit distance calculation over the\n * non-shared portions of the arrays.\n *\n * @function\n * @param {!Array} current The \"changed\" array for which splices will be\n * calculated.\n * @param {!Array} previous The \"unchanged\" original array to compare\n * `current` against to determine the splices.\n * @return {!Array} Returns an array of splice record objects. Each of these\n * contains: `index` the location where the splice occurred; `removed`\n * the array of removed items from this location; `addedCount` the number\n * of items added at this location.\n */\nexport function calculateSplices(current, previous) {\n  return calcSplices(current, 0, current.length, previous, 0,\n                          previous.length);\n}\n\nfunction equals(currentValue, previousValue) {\n  return currentValue === previousValue;\n}\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nimport { calculateSplices } from './array-splice.js';\nimport { microTask } from './async.js';\nimport { wrap } from './wrap.js';\n\n/**\n * Returns true if `node` is a slot element\n * @param {!Node} node Node to test.\n * @return {boolean} Returns true if the given `node` is a slot\n * @private\n */\nfunction isSlot(node) {\n  return (node.localName === 'slot');\n}\n\n/**\n * Class that listens for changes (additions or removals) to\n * \"flattened nodes\" on a given `node`. The list of flattened nodes consists\n * of a node's children and, for any children that are `<slot>` elements,\n * the expanded flattened list of `assignedNodes`.\n * For example, if the observed node has children `<a></a><slot></slot><b></b>`\n * and the `<slot>` has one `<div>` assigned to it, then the flattened\n * nodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other\n * `<slot>` elements assigned to it, these are flattened as well.\n *\n * The provided `callback` is called whenever any change to this list\n * of flattened nodes occurs, where an addition or removal of a node is\n * considered a change. The `callback` is called with one argument, an object\n * containing an array of any `addedNodes` and `removedNodes`.\n *\n * Note: the callback is called asynchronous to any changes\n * at a microtask checkpoint. This is because observation is performed using\n * `MutationObserver` and the `<slot>` element's `slotchange` event which\n * are asynchronous.\n *\n * An example:\n * ```js\n * class TestSelfObserve extends PolymerElement {\n *   static get is() { return 'test-self-observe';}\n *   connectedCallback() {\n *     super.connectedCallback();\n *     this._observer = new FlattenedNodesObserver(this, (info) => {\n *       this.info = info;\n *     });\n *   }\n *   disconnectedCallback() {\n *     super.disconnectedCallback();\n *     this._observer.disconnect();\n *   }\n * }\n * customElements.define(TestSelfObserve.is, TestSelfObserve);\n * ```\n *\n * @summary Class that listens for changes (additions or removals) to\n * \"flattened nodes\" on a given `node`.\n * @implements {PolymerDomApi.ObserveHandle}\n */\nexport let FlattenedNodesObserver = class {\n\n  /**\n   * Returns the list of flattened nodes for the given `node`.\n   * This list consists of a node's children and, for any children\n   * that are `<slot>` elements, the expanded flattened list of `assignedNodes`.\n   * For example, if the observed node has children `<a></a><slot></slot><b></b>`\n   * and the `<slot>` has one `<div>` assigned to it, then the flattened\n   * nodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other\n   * `<slot>` elements assigned to it, these are flattened as well.\n   *\n   * @param {!HTMLElement|!HTMLSlotElement} node The node for which to\n   *      return the list of flattened nodes.\n   * @return {!Array<!Node>} The list of flattened nodes for the given `node`.\n   * @nocollapse See https://github.com/google/closure-compiler/issues/2763\n   */\n  // eslint-disable-next-line\n  static getFlattenedNodes(node) {\n    const wrapped = wrap(node);\n    if (isSlot(node)) {\n      node = /** @type {!HTMLSlotElement} */(node); // eslint-disable-line no-self-assign\n      return wrapped.assignedNodes({flatten: true});\n    } else {\n      return Array.from(wrapped.childNodes).map((node) => {\n        if (isSlot(node)) {\n          node = /** @type {!HTMLSlotElement} */(node); // eslint-disable-line no-self-assign\n          return wrap(node).assignedNodes({flatten: true});\n        } else {\n          return [node];\n        }\n      }).reduce((a, b) => a.concat(b), []);\n    }\n  }\n\n  /**\n   * @param {!HTMLElement} target Node on which to listen for changes.\n   * @param {?function(this: Element, { target: !HTMLElement, addedNodes: !Array<!Element>, removedNodes: !Array<!Element> }):void} callback Function called when there are additions\n   * or removals from the target's list of flattened nodes.\n   */\n  // eslint-disable-next-line\n  constructor(target, callback) {\n    /**\n     * @type {MutationObserver}\n     * @private\n     */\n    this._shadyChildrenObserver = null;\n    /**\n     * @type {MutationObserver}\n     * @private\n     */\n    this._nativeChildrenObserver = null;\n    this._connected = false;\n    /**\n     * @type {!HTMLElement}\n     * @private\n     */\n    this._target = target;\n    this.callback = callback;\n    this._effectiveNodes = [];\n    this._observer = null;\n    this._scheduled = false;\n    /**\n     * @type {function()}\n     * @private\n     */\n    this._boundSchedule = () => {\n      this._schedule();\n    };\n    this.connect();\n    this._schedule();\n  }\n\n  /**\n   * Activates an observer. This method is automatically called when\n   * a `FlattenedNodesObserver` is created. It should only be called to\n   * re-activate an observer that has been deactivated via the `disconnect` method.\n   *\n   * @return {void}\n   */\n  connect() {\n    if (isSlot(this._target)) {\n      this._listenSlots([this._target]);\n    } else if (wrap(this._target).children) {\n      this._listenSlots(\n          /** @type {!NodeList<!Node>} */ (wrap(this._target).children));\n      if (window.ShadyDOM) {\n        this._shadyChildrenObserver =\n          window.ShadyDOM.observeChildren(this._target, (mutations) => {\n            this._processMutations(mutations);\n          });\n      } else {\n        this._nativeChildrenObserver =\n          new MutationObserver((mutations) => {\n            this._processMutations(mutations);\n          });\n        this._nativeChildrenObserver.observe(this._target, {childList: true});\n      }\n    }\n    this._connected = true;\n  }\n\n  /**\n   * Deactivates the flattened nodes observer. After calling this method\n   * the observer callback will not be called when changes to flattened nodes\n   * occur. The `connect` method may be subsequently called to reactivate\n   * the observer.\n   *\n   * @return {void}\n   * @override\n   */\n  disconnect() {\n    if (isSlot(this._target)) {\n      this._unlistenSlots([this._target]);\n    } else if (wrap(this._target).children) {\n      this._unlistenSlots(\n          /** @type {!NodeList<!Node>} */ (wrap(this._target).children));\n      if (window.ShadyDOM && this._shadyChildrenObserver) {\n        window.ShadyDOM.unobserveChildren(this._shadyChildrenObserver);\n        this._shadyChildrenObserver = null;\n      } else if (this._nativeChildrenObserver) {\n        this._nativeChildrenObserver.disconnect();\n        this._nativeChildrenObserver = null;\n      }\n    }\n    this._connected = false;\n  }\n\n  /**\n   * @return {void}\n   * @private\n   */\n  _schedule() {\n    if (!this._scheduled) {\n      this._scheduled = true;\n      microTask.run(() => this.flush());\n    }\n  }\n\n  /**\n   * @param {Array<MutationRecord>} mutations Mutations signaled by the mutation observer\n   * @return {void}\n   * @private\n   */\n  _processMutations(mutations) {\n    this._processSlotMutations(mutations);\n    this.flush();\n  }\n\n  /**\n   * @param {Array<MutationRecord>} mutations Mutations signaled by the mutation observer\n   * @return {void}\n   * @private\n   */\n  _processSlotMutations(mutations) {\n    if (mutations) {\n      for (let i=0; i < mutations.length; i++) {\n        let mutation = mutations[i];\n        if (mutation.addedNodes) {\n          this._listenSlots(mutation.addedNodes);\n        }\n        if (mutation.removedNodes) {\n          this._unlistenSlots(mutation.removedNodes);\n        }\n      }\n    }\n  }\n\n  /**\n   * Flushes the observer causing any pending changes to be immediately\n   * delivered the observer callback. By default these changes are delivered\n   * asynchronously at the next microtask checkpoint.\n   *\n   * @return {boolean} Returns true if any pending changes caused the observer\n   * callback to run.\n   */\n  flush() {\n    if (!this._connected) {\n      return false;\n    }\n    if (window.ShadyDOM) {\n      ShadyDOM.flush();\n    }\n    if (this._nativeChildrenObserver) {\n      this._processSlotMutations(this._nativeChildrenObserver.takeRecords());\n    } else if (this._shadyChildrenObserver) {\n      this._processSlotMutations(this._shadyChildrenObserver.takeRecords());\n    }\n    this._scheduled = false;\n    let info = {\n      target: this._target,\n      addedNodes: [],\n      removedNodes: []\n    };\n    let newNodes = this.constructor.getFlattenedNodes(this._target);\n    let splices = calculateSplices(newNodes,\n      this._effectiveNodes);\n    // process removals\n    for (let i=0, s; (i<splices.length) && (s=splices[i]); i++) {\n      for (let j=0, n; (j < s.removed.length) && (n=s.removed[j]); j++) {\n        info.removedNodes.push(n);\n      }\n    }\n    // process adds\n    for (let i=0, s; (i<splices.length) && (s=splices[i]); i++) {\n      for (let j=s.index; j < s.index + s.addedCount; j++) {\n        info.addedNodes.push(newNodes[j]);\n      }\n    }\n    // update cache\n    this._effectiveNodes = newNodes;\n    let didFlush = false;\n    if (info.addedNodes.length || info.removedNodes.length) {\n      didFlush = true;\n      this.callback.call(this._target, info);\n    }\n    return didFlush;\n  }\n\n  /**\n   * @param {!Array<!Node>|!NodeList<!Node>} nodeList Nodes that could change\n   * @return {void}\n   * @private\n   */\n  _listenSlots(nodeList) {\n    for (let i=0; i < nodeList.length; i++) {\n      let n = nodeList[i];\n      if (isSlot(n)) {\n        n.addEventListener('slotchange', this._boundSchedule);\n      }\n    }\n  }\n\n  /**\n   * @param {!Array<!Node>|!NodeList<!Node>} nodeList Nodes that could change\n   * @return {void}\n   * @private\n   */\n  _unlistenSlots(nodeList) {\n    for (let i=0; i < nodeList.length; i++) {\n      let n = nodeList[i];\n      if (isSlot(n)) {\n        n.removeEventListener('slotchange', this._boundSchedule);\n      }\n    }\n  }\n\n};", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\nimport {enqueueDebouncer, flushDebouncers} from '../utils/debounce.js';\nexport {enqueueDebouncer};\n\n/**\n * Forces several classes of asynchronously queued tasks to flush:\n * - Debouncers added via `enqueueDebouncer`\n * - ShadyDOM distribution\n *\n * @return {void}\n */\nexport const flush = function() {\n  let shadyDOM, debouncers;\n  do {\n    shadyDOM = window.ShadyDOM && ShadyDOM.flush();\n    if (window.ShadyCSS && window.ShadyCSS.ScopingShim) {\n      window.ShadyCSS.ScopingShim.flush();\n    }\n    debouncers = flushDebouncers();\n  } while (shadyDOM || debouncers);\n};\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\nimport { wrap } from '../utils/wrap.js';\nimport '../utils/settings.js';\nimport { FlattenedNodesObserver } from '../utils/flattened-nodes-observer.js';\nexport { flush, enqueueDebouncer as addDebouncer } from '../utils/flush.js';\n/* eslint-disable no-unused-vars */\nimport { Debouncer } from '../utils/debounce.js';  // used in type annotations\n/* eslint-enable no-unused-vars */\n\nconst p = Element.prototype;\n/**\n * @const {function(this:Node, string): boolean}\n */\nconst normalizedMatchesSelector = p.matches || p.matchesSelector ||\n  p.mozMatchesSelector || p.msMatchesSelector ||\n  p.oMatchesSelector || p.webkitMatchesSelector;\n\n/**\n * Cross-platform `element.matches` shim.\n *\n * @function matchesSelector\n * @param {!Node} node Node to check selector against\n * @param {string} selector Selector to match\n * @return {boolean} True if node matched selector\n */\nexport const matchesSelector = function(node, selector) {\n  return normalizedMatchesSelector.call(node, selector);\n};\n\n/**\n * Node API wrapper class returned from `Polymer.dom.(target)` when\n * `target` is a `Node`.\n * @implements {PolymerDomApi}\n * @unrestricted\n */\nclass DomApiNative {\n\n  /**\n   * @param {!Node} node Node for which to create a Polymer.dom helper object.\n   */\n  constructor(node) {\n    if (window['ShadyDOM'] && window['ShadyDOM']['inUse']) {\n      window['ShadyDOM']['patch'](node);\n    }\n    this.node = node;\n  }\n\n  /**\n   * Returns an instance of `FlattenedNodesObserver` that\n   * listens for node changes on this element.\n   *\n   * @param {function(this:HTMLElement, { target: !HTMLElement, addedNodes: !Array<!Element>, removedNodes: !Array<!Element> }):void} callback Called when direct or distributed children\n   *   of this element changes\n   * @return {!PolymerDomApi.ObserveHandle} Observer instance\n   * @override\n   */\n  observeNodes(callback) {\n    return new FlattenedNodesObserver(\n        /** @type {!HTMLElement} */(this.node), callback);\n  }\n\n  /**\n   * Disconnects an observer previously created via `observeNodes`\n   *\n   * @param {!PolymerDomApi.ObserveHandle} observerHandle Observer instance\n   *   to disconnect.\n   * @return {void}\n   * @override\n   */\n  unobserveNodes(observerHandle) {\n    observerHandle.disconnect();\n  }\n\n  /**\n   * Provided as a backwards-compatible API only.  This method does nothing.\n   * @return {void}\n   */\n  notifyObserver() {}\n\n  /**\n   * Returns true if the provided node is contained with this element's\n   * light-DOM children or shadow root, including any nested shadow roots\n   * of children therein.\n   *\n   * @param {Node} node Node to test\n   * @return {boolean} Returns true if the given `node` is contained within\n   *   this element's light or shadow DOM.\n   * @override\n   */\n  deepContains(node) {\n    if (wrap(this.node).contains(node)) {\n      return true;\n    }\n    let n = node;\n    let doc = node.ownerDocument;\n    // walk from node to `this` or `document`\n    while (n && n !== doc && n !== this.node) {\n      // use logical parentnode, or native ShadowRoot host\n      n = wrap(n).parentNode || wrap(n).host;\n    }\n    return n === this.node;\n  }\n\n  /**\n   * Returns the root node of this node.  Equivalent to `getRootNode()`.\n   *\n   * @return {!Node} Top most element in the dom tree in which the node\n   * exists. If the node is connected to a document this is either a\n   * shadowRoot or the document; otherwise, it may be the node\n   * itself or a node or document fragment containing it.\n   * @override\n   */\n  getOwnerRoot() {\n    return wrap(this.node).getRootNode();\n  }\n\n  /**\n   * For slot elements, returns the nodes assigned to the slot; otherwise\n   * an empty array. It is equivalent to `<slot>.addignedNodes({flatten:true})`.\n   *\n   * @return {!Array<!Node>} Array of assigned nodes\n   * @override\n   */\n  getDistributedNodes() {\n    return (this.node.localName === 'slot') ?\n      wrap(this.node).assignedNodes({flatten: true}) :\n      [];\n  }\n\n  /**\n   * Returns an array of all slots this element was distributed to.\n   *\n   * @return {!Array<!HTMLSlotElement>} Description\n   * @override\n   */\n  getDestinationInsertionPoints() {\n    let ip$ = [];\n    let n = wrap(this.node).assignedSlot;\n    while (n) {\n      ip$.push(n);\n      n = wrap(n).assignedSlot;\n    }\n    return ip$;\n  }\n\n  /**\n   * Calls `importNode` on the `ownerDocument` for this node.\n   *\n   * @param {!Node} node Node to import\n   * @param {boolean} deep True if the node should be cloned deeply during\n   *   import\n   * @return {Node} Clone of given node imported to this owner document\n   */\n  importNode(node, deep) {\n    let doc = this.node instanceof Document ? this.node :\n      this.node.ownerDocument;\n    return wrap(doc).importNode(node, deep);\n  }\n\n  /**\n   * @return {!Array<!Node>} Returns a flattened list of all child nodes and\n   * nodes assigned to child slots.\n   * @override\n   */\n  getEffectiveChildNodes() {\n    return FlattenedNodesObserver.getFlattenedNodes(\n        /** @type {!HTMLElement} */ (this.node));\n  }\n\n  /**\n   * Returns a filtered list of flattened child elements for this element based\n   * on the given selector.\n   *\n   * @param {string} selector Selector to filter nodes against\n   * @return {!Array<!HTMLElement>} List of flattened child elements\n   * @override\n   */\n  queryDistributedElements(selector) {\n    let c$ = this.getEffectiveChildNodes();\n    let list = [];\n    for (let i=0, l=c$.length, c; (i<l) && (c=c$[i]); i++) {\n      if ((c.nodeType === Node.ELEMENT_NODE) &&\n          matchesSelector(c, selector)) {\n        list.push(c);\n      }\n    }\n    return list;\n  }\n\n  /**\n   * For shadow roots, returns the currently focused element within this\n   * shadow root.\n   *\n   * return {Node|undefined} Currently focused element\n   * @override\n   */\n  get activeElement() {\n    let node = this.node;\n    return node._activeElement !== undefined ? node._activeElement : node.activeElement;\n  }\n}\n\nfunction forwardMethods(proto, methods) {\n  for (let i=0; i < methods.length; i++) {\n    let method = methods[i];\n    /* eslint-disable valid-jsdoc */\n    proto[method] = /** @this {DomApiNative} */ function() {\n      return this.node[method].apply(this.node, arguments);\n    };\n    /* eslint-enable */\n  }\n}\n\nfunction forwardReadOnlyProperties(proto, properties) {\n  for (let i=0; i < properties.length; i++) {\n    let name = properties[i];\n    Object.defineProperty(proto, name, {\n      get: function() {\n        const domApi = /** @type {DomApiNative} */(this);\n        return domApi.node[name];\n      },\n      configurable: true\n    });\n  }\n}\n\nfunction forwardProperties(proto, properties) {\n  for (let i=0; i < properties.length; i++) {\n    let name = properties[i];\n    Object.defineProperty(proto, name, {\n      /**\n       * @this {DomApiNative}\n       * @return {*} .\n       */\n      get: function() {\n        return this.node[name];\n      },\n      /**\n       * @this {DomApiNative}\n       * @param {*} value .\n       */\n      set: function(value) {\n        this.node[name] = value;\n      },\n      configurable: true\n    });\n  }\n}\n\n\n/**\n * Event API wrapper class returned from `dom.(target)` when\n * `target` is an `Event`.\n */\nexport class EventApi {\n  constructor(event) {\n    this.event = event;\n  }\n\n  /**\n   * Returns the first node on the `composedPath` of this event.\n   *\n   * @return {!EventTarget} The node this event was dispatched to\n   */\n  get rootTarget() {\n    return this.path[0];\n  }\n\n  /**\n   * Returns the local (re-targeted) target for this event.\n   *\n   * @return {!EventTarget} The local (re-targeted) target for this event.\n   */\n  get localTarget() {\n    return this.event.target;\n  }\n\n  /**\n   * Returns the `composedPath` for this event.\n   * @return {!Array<!EventTarget>} The nodes this event propagated through\n   */\n  get path() {\n    return this.event.composedPath();\n  }\n}\n\n/**\n * @function\n * @param {boolean=} deep\n * @return {!Node}\n */\nDomApiNative.prototype.cloneNode;\n/**\n * @function\n * @param {!Node} node\n * @return {!Node}\n */\nDomApiNative.prototype.appendChild;\n/**\n * @function\n * @param {!Node} newChild\n * @param {Node} refChild\n * @return {!Node}\n */\nDomApiNative.prototype.insertBefore;\n/**\n * @function\n * @param {!Node} node\n * @return {!Node}\n */\nDomApiNative.prototype.removeChild;\n/**\n * @function\n * @param {!Node} oldChild\n * @param {!Node} newChild\n * @return {!Node}\n */\nDomApiNative.prototype.replaceChild;\n/**\n * @function\n * @param {string} name\n * @param {string} value\n * @return {void}\n */\nDomApiNative.prototype.setAttribute;\n/**\n * @function\n * @param {string} name\n * @return {void}\n */\nDomApiNative.prototype.removeAttribute;\n/**\n * @function\n * @param {string} selector\n * @return {?Element}\n */\nDomApiNative.prototype.querySelector;\n/**\n * @function\n * @param {string} selector\n * @return {!NodeList<!Element>}\n */\nDomApiNative.prototype.querySelectorAll;\n\n/** @type {?Node} */\nDomApiNative.prototype.parentNode;\n/** @type {?Node} */\nDomApiNative.prototype.firstChild;\n/** @type {?Node} */\nDomApiNative.prototype.lastChild;\n/** @type {?Node} */\nDomApiNative.prototype.nextSibling;\n/** @type {?Node} */\nDomApiNative.prototype.previousSibling;\n/** @type {?HTMLElement} */\nDomApiNative.prototype.firstElementChild;\n/** @type {?HTMLElement} */\nDomApiNative.prototype.lastElementChild;\n/** @type {?HTMLElement} */\nDomApiNative.prototype.nextElementSibling;\n/** @type {?HTMLElement} */\nDomApiNative.prototype.previousElementSibling;\n/** @type {!Array<!Node>} */\nDomApiNative.prototype.childNodes;\n/** @type {!Array<!HTMLElement>} */\nDomApiNative.prototype.children;\n/** @type {?DOMTokenList} */\nDomApiNative.prototype.classList;\n\n/** @type {string} */\nDomApiNative.prototype.textContent;\n/** @type {string} */\nDomApiNative.prototype.innerHTML;\n\nlet DomApiImpl = DomApiNative;\n\nif (window['ShadyDOM'] && window['ShadyDOM']['inUse'] && window['ShadyDOM']['noPatch'] && window['ShadyDOM']['Wrapper']) {\n\n  /**\n   * @private\n   * @extends {HTMLElement}\n   */\n  class Wrapper extends window['ShadyDOM']['Wrapper'] {}\n\n  // copy bespoke API onto wrapper\n  Object.getOwnPropertyNames(DomApiNative.prototype).forEach((prop) => {\n    if (prop != 'activeElement') {\n      Wrapper.prototype[prop] = DomApiNative.prototype[prop];\n    }\n  });\n\n  // Note, `classList` is here only for legacy compatibility since it does not\n  // trigger distribution in v1 Shadow DOM.\n  forwardReadOnlyProperties(Wrapper.prototype, [\n    'classList'\n  ]);\n\n  DomApiImpl = Wrapper;\n\n  Object.defineProperties(EventApi.prototype, {\n\n    // Returns the \"lowest\" node in the same root as the event's currentTarget.\n    // When in `noPatch` mode, this must be calculated by walking the event's\n    // path.\n    localTarget: {\n      get() {\n        const current = this.event.currentTarget;\n        const currentRoot = current && dom(current).getOwnerRoot();\n        const p$ = this.path;\n        for (let i = 0; i < p$.length; i++) {\n          const e = p$[i];\n          if (dom(e).getOwnerRoot() === currentRoot) {\n            return e;\n          }\n        }\n      },\n      configurable: true\n    },\n\n    path: {\n      get() {\n        return window['ShadyDOM']['composedPath'](this.event);\n      },\n      configurable: true\n    }\n  });\n\n} else {\n\n  // Methods that can provoke distribution or must return the logical, not\n  // composed tree.\n  forwardMethods(DomApiNative.prototype, [\n    'cloneNode', 'appendChild', 'insertBefore', 'removeChild',\n    'replaceChild', 'setAttribute', 'removeAttribute',\n    'querySelector', 'querySelectorAll'\n  ]);\n\n  // Properties that should return the logical, not composed tree. Note, `classList`\n  // is here only for legacy compatibility since it does not trigger distribution\n  // in v1 Shadow DOM.\n  forwardReadOnlyProperties(DomApiNative.prototype, [\n    'parentNode', 'firstChild', 'lastChild',\n    'nextSibling', 'previousSibling', 'firstElementChild',\n    'lastElementChild', 'nextElementSibling', 'previousElementSibling',\n    'childNodes', 'children', 'classList'\n  ]);\n\n  forwardProperties(DomApiNative.prototype, [\n    'textContent', 'innerHTML', 'className'\n  ]);\n}\n\nexport const DomApi = DomApiImpl;\n\n/**\n * Legacy DOM and Event manipulation API wrapper factory used to abstract\n * differences between native Shadow DOM and \"Shady DOM\" when polyfilling on\n * older browsers.\n *\n * Note that in Polymer 2.x use of `Polymer.dom` is no longer required and\n * in the majority of cases simply facades directly to the standard native\n * API.\n *\n * @summary Legacy DOM and Event manipulation API wrapper factory used to\n * abstract differences between native Shadow DOM and \"Shady DOM.\"\n * @param {(Node|Event|DomApiNative|EventApi)=} obj Node or event to operate on\n * @return {!DomApiNative|!EventApi} Wrapper providing either node API or event API\n */\nexport const dom = function(obj) {\n  obj = obj || document;\n  if (obj instanceof DomApiImpl) {\n    return /** @type {!DomApi} */(obj);\n  }\n  if (obj instanceof EventApi) {\n    return /** @type {!EventApi} */(obj);\n  }\n  let helper = obj['__domApi'];\n  if (!helper) {\n    if (obj instanceof Event) {\n      helper = new EventApi(obj);\n    } else {\n      helper = new DomApiImpl(/** @type {Node} */(obj));\n    }\n    obj['__domApi'] = helper;\n  }\n  return helper;\n};\n", "/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport './boot.js';\nimport {wrap} from './wrap.js';\n\nconst ShadyDOM = window.ShadyDOM;\nconst ShadyCSS = window.ShadyCSS;\n\n/**\n * Return true if node scope is correct.\n *\n * @param {!Element} node Node to check scope\n * @param {!Node} scope Scope reference\n * @return {boolean} True if node is in scope\n */\nfunction sameScope(node, scope) {\n  return wrap(node).getRootNode() === scope;\n}\n\n/**\n * Ensure that elements in a ShadowDOM container are scoped correctly.\n * This function is only needed when ShadyDOM is used and unpatched DOM APIs are used in third party code.\n * This can happen in noPatch mode or when specialized APIs like ranges or tables are used to mutate DOM.\n *\n * @param  {!Element} container Container element to scope\n * @param  {boolean=} shouldObserve if true, start a mutation observer for added nodes to the container\n * @return {?MutationObserver} Returns a new MutationObserver on `container` if `shouldObserve` is true.\n */\nexport function scopeSubtree(container, shouldObserve = false) {\n  // If using native ShadowDOM, abort\n  if (!ShadyDOM || !ShadyCSS) {\n    return null;\n  }\n  // ShadyCSS handles DOM mutations when ShadyDOM does not handle scoping itself\n  if (!ShadyDOM['handlesDynamicScoping']) {\n    return null;\n  }\n  const ScopingShim = ShadyCSS['ScopingShim'];\n  // if ScopingShim is not available, abort\n  if (!ScopingShim) {\n    return null;\n  }\n  // capture correct scope for container\n  const containerScope = ScopingShim['scopeForNode'](container);\n  const root = wrap(container).getRootNode();\n\n  const scopify = (node) => {\n    if (!sameScope(node, root)) {\n      return;\n    }\n    // NOTE: native qSA does not honor scoped DOM, but it is faster, and the same behavior as Polymer v1\n    const elements = Array.from(ShadyDOM['nativeMethods']['querySelectorAll'].call(node, '*'));\n    elements.push(node);\n    for (let i = 0; i < elements.length; i++) {\n      const el = elements[i];\n      if (!sameScope(el, root)) {\n        continue;\n      }\n      const currentScope = ScopingShim['currentScopeForNode'](el);\n      if (currentScope !== containerScope) {\n        if (currentScope !== '') {\n          ScopingShim['unscopeNode'](el, currentScope);\n        }\n        ScopingShim['scopeNode'](el, containerScope);\n      }\n    }\n  };\n\n  // scope everything in container\n  scopify(container);\n\n  if (shouldObserve) {\n    const mo = new MutationObserver((mxns) => {\n      for (let i = 0; i < mxns.length; i++) {\n        const mxn = mxns[i];\n        for (let j = 0; j < mxn.addedNodes.length; j++) {\n          const addedNode = mxn.addedNodes[j];\n          if (addedNode.nodeType === Node.ELEMENT_NODE) {\n            scopify(addedNode);\n          }\n        }\n      }\n    });\n    mo.observe(container, {childList: true, subtree: true});\n    return mo;\n  } else {\n    return null;\n  }\n}", "/**\n * @fileoverview\n * @suppress {checkPrototypalTypes}\n * @license Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt The complete set of authors may be found\n * at http://polymer.github.io/AUTHORS.txt The complete set of contributors may\n * be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by\n * Google as part of the polymer project is also subject to an additional IP\n * rights grant found at http://polymer.github.io/PATENTS.txt\n */\nimport { ElementMixin } from './element-mixin.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { wrap } from '../utils/wrap.js';\n\nconst DISABLED_ATTR = 'disable-upgrade';\n\nexport const findObservedAttributesGetter = (ctor) => {\n  while (ctor) {\n    const desc = Object.getOwnPropertyDescriptor(ctor, 'observedAttributes');\n    if (desc) {\n      return desc.get;\n    }\n    ctor = Object.getPrototypeOf(ctor.prototype).constructor;\n  }\n  return () => [];\n};\n\n/**\n * Element class mixin that allows the element to boot up in a non-enabled\n * state when the `disable-upgrade` attribute is present. This mixin is\n * designed to be used with element classes like PolymerElement that perform\n * initial startup work when they are first connected. When the\n * `disable-upgrade` attribute is removed, if the element is connected, it\n * boots up and \"enables\" as it otherwise would; if it is not connected, the\n * element boots up when it is next connected.\n *\n * Using `disable-upgrade` with PolymerElement prevents any data propagation\n * to the element, any element DOM from stamping, or any work done in\n * connected/disconnctedCallback from occuring, but it does not prevent work\n * done in the element constructor.\n *\n * Note, this mixin must be applied on top of any element class that\n * itself implements a `connectedCallback` so that it can control the work\n * done in `connectedCallback`. For example,\n *\n *     MyClass = DisableUpgradeMixin(class extends BaseClass {...});\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin ElementMixin\n * @template T\n * @param {function(new:T)} superClass Class to apply mixin to.\n * @return {function(new:T)} superClass with mixin applied.\n */\nexport const DisableUpgradeMixin = dedupingMixin((base) => {\n  /**\n   * @constructor\n   * @implements {Polymer_ElementMixin}\n   * @extends {HTMLElement}\n   * @private\n   */\n  const superClass = ElementMixin(base);\n\n  // Work around for closure bug #126934458. Using `super` in a property\n  // getter does not work so instead we search the Base prototype for an\n  // implementation of observedAttributes so that we can override and call\n  // the `super` getter. Note, this is done one time ever because we assume\n  // that `Base` is always comes from `Polymer.LegacyElementMixn`.\n  let observedAttributesGetter = findObservedAttributesGetter(superClass);\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_DisableUpgradeMixin}\n   */\n  class DisableUpgradeClass extends superClass {\n\n    constructor() {\n      super();\n      /** @type {boolean|undefined} */\n      this.__isUpgradeDisabled;\n    }\n\n    static get observedAttributes() {\n      return observedAttributesGetter.call(this).concat(DISABLED_ATTR);\n    }\n\n    // Prevent element from initializing properties when it's upgrade disabled.\n    /** @override */\n    _initializeProperties() {\n      if (this.hasAttribute(DISABLED_ATTR)) {\n        this.__isUpgradeDisabled = true;\n      } else {\n        super._initializeProperties();\n      }\n    }\n\n    // Prevent element from enabling properties when it's upgrade disabled.\n    // Normally overriding connectedCallback would be enough, but dom-* elements\n    /** @override */\n    _enableProperties() {\n      if (!this.__isUpgradeDisabled) {\n        super._enableProperties();\n      }\n    }\n\n    // If the element starts upgrade-disabled and a property is set for\n    // which an accessor exists, the default should not be applied.\n    // This additional check is needed because defaults are applied via\n    // `_initializeProperties` which is called after initial properties\n    // have been set when the element starts upgrade-disabled.\n    /** @override */\n    _canApplyPropertyDefault(property) {\n      return super._canApplyPropertyDefault(property) &&\n        !(this.__isUpgradeDisabled && this._isPropertyPending(property));\n    }\n\n    /**\n     * @override\n     * @param {string} name Attribute name.\n     * @param {?string} old The previous value for the attribute.\n     * @param {?string} value The new value for the attribute.\n     * @param {?string} namespace The XML namespace for the attribute.\n     * @return {void}\n     */\n    attributeChangedCallback(name, old, value, namespace) {\n      if (name == DISABLED_ATTR) {\n        // When disable-upgrade is removed, intialize properties and\n        // provoke connectedCallback if the element is already connected.\n        if (this.__isUpgradeDisabled && value == null) {\n          super._initializeProperties();\n          this.__isUpgradeDisabled = false;\n          if (wrap(this).isConnected) {\n            super.connectedCallback();\n          }\n        }\n      } else {\n        super.attributeChangedCallback(\n            name, old, value, /** @type {null|string} */ (namespace));\n      }\n    }\n\n    // Prevent element from connecting when it's upgrade disabled.\n    // This prevents user code in `attached` from being called.\n    /** @override */\n    connectedCallback() {\n      if (!this.__isUpgradeDisabled) {\n        super.connectedCallback();\n      }\n    }\n\n    // Prevent element from disconnecting when it's upgrade disabled.\n    // This avoids allowing user code `detached` from being called without a\n    // paired call to `attached`.\n    /** @override */\n    disconnectedCallback() {\n      if (!this.__isUpgradeDisabled) {\n        super.disconnectedCallback();\n      }\n    }\n\n  }\n\n  return DisableUpgradeClass;\n});\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '@webcomponents/shadycss/entrypoints/apply-shim.js';\nimport { ElementMixin, builtCSS } from '../mixins/element-mixin.js';\nimport { GestureEventListeners } from '../mixins/gesture-event-listeners.js';\nimport { DirMixin } from '../mixins/dir-mixin.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nimport '../utils/render-status.js';\nimport '../utils/unresolved.js';\nimport { dom, matchesSelector } from './polymer.dom.js';\nimport { setTouchAction } from '../utils/gestures.js';\nimport { Debouncer } from '../utils/debounce.js';\nimport { timeOut, microTask } from '../utils/async.js';\nimport { get } from '../utils/path.js';\nimport { wrap } from '../utils/wrap.js';\nimport { scopeSubtree } from '../utils/scope-subtree.js';\nimport { legacyOptimizations, legacyNoObservedAttributes } from '../utils/settings.js';\nimport { findObservedAttributesGetter } from '../mixins/disable-upgrade-mixin.js';\nimport { register } from '../utils/telemetry.js';\n\nconst DISABLED_ATTR = 'disable-upgrade';\n\nlet styleInterface = window.ShadyCSS;\n\n/**\n * Element class mixin that provides Polymer's \"legacy\" API intended to be\n * backward-compatible to the greatest extent possible with the API\n * found on the Polymer 1.x `Polymer.Base` prototype applied to all elements\n * defined using the `Polymer({...})` function.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin ElementMixin\n * @appliesMixin GestureEventListeners\n * @appliesMixin DirMixin\n * @property isAttached {boolean} Set to `true` in this element's\n *   `connectedCallback` and `false` in `disconnectedCallback`\n * @summary Element class mixin that provides Polymer's \"legacy\" API\n */\nexport const LegacyElementMixin = dedupingMixin((base) => {\n\n  // TODO(kschaaf): Note, the `@implements {Polymer_DirMixin}` is required here\n  // (rather than on legacyElementBase) for unknown reasons.\n  /**\n   * @constructor\n   * @implements {Polymer_ElementMixin}\n   * @implements {Polymer_GestureEventListeners}\n   * @implements {Polymer_DirMixin}\n   * @extends {HTMLElement}\n   * @private\n   */\n  const GesturesElement = GestureEventListeners(ElementMixin(base));\n\n  // Note, the DirMixin does nothing if css is built so avoid including it\n  // in that case.\n\n  /**\n   * @constructor\n   * @extends {GesturesElement}\n   * @private\n   */\n  const legacyElementBase = builtCSS ? GesturesElement :\n    DirMixin(GesturesElement);\n\n  const observedAttributesGetter = findObservedAttributesGetter(legacyElementBase);\n\n  /**\n   * Map of simple names to touch action names\n   * @dict\n   */\n  const DIRECTION_MAP = {\n    'x': 'pan-x',\n    'y': 'pan-y',\n    'none': 'none',\n    'all': 'auto'\n  };\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @extends {legacyElementBase}\n   * @implements {Polymer_LegacyElementMixin}\n   * @unrestricted\n   */\n  class LegacyElement extends legacyElementBase {\n\n    constructor() {\n      super();\n      /** @type {boolean} */\n      this.isAttached;\n      /** @type {?WeakMap<!Element, !Object<string, !Function>>} */\n      this.__boundListeners;\n      /** @type {?Object<string, ?Function>} */\n      this._debouncers;\n      // NOTE: Inlined for perf from version of DisableUpgradeMixin.\n      /** @type {boolean|undefined} */\n      this.__isUpgradeDisabled;\n      /** @type {boolean|undefined} */\n      this.__needsAttributesAtConnected;\n      /** @type {boolean|undefined} */\n      this._legacyForceObservedAttributes;\n    }\n\n    /**\n     * Forwards `importMeta` from the prototype (i.e. from the info object\n     * passed to `Polymer({...})`) to the static API.\n     *\n     * @return {!Object} The `import.meta` object set on the prototype\n     * @suppress {missingProperties} `this` is always in the instance in\n     *  closure for some reason even in a static method, rather than the class\n     * @nocollapse\n     */\n    static get importMeta() {\n      return this.prototype.importMeta;\n    }\n\n    /**\n     * Legacy callback called during the `constructor`, for overriding\n     * by the user.\n     * @override\n     * @return {void}\n     */\n    created() {}\n\n    /**\n     * Processes an attribute reaction when the `legacyNoObservedAttributes`\n     * setting is in use.\n     * @param {string} name Name of attribute that changed\n     * @param {?string} old Old attribute value\n     * @param {?string} value New attribute value\n     * @return {void}\n     */\n    __attributeReaction(name, old, value) {\n      if ((this.__dataAttributes && this.__dataAttributes[name]) || name === DISABLED_ATTR) {\n        this.attributeChangedCallback(name, old, value, null);\n      }\n    }\n\n    /**\n     * Sets the value of an attribute.\n     * @override\n     * @param {string} name The name of the attribute to change.\n     * @param {string|number|boolean|!TrustedHTML|!TrustedScriptURL|!TrustedURL} value The new attribute value.\n     */\n    setAttribute(name, value) {\n      if (legacyNoObservedAttributes && !this._legacyForceObservedAttributes) {\n        const oldValue = this.getAttribute(name);\n        super.setAttribute(name, value);\n        // value coerced to String for closure's benefit\n        this.__attributeReaction(name, oldValue, String(value));\n      } else {\n        super.setAttribute(name, value);\n      }\n    }\n\n    /**\n     * Removes an attribute.\n     * @override\n     * @param {string} name The name of the attribute to remove.\n     */\n    removeAttribute(name) {\n      if (legacyNoObservedAttributes && !this._legacyForceObservedAttributes) {\n        const oldValue = this.getAttribute(name);\n        super.removeAttribute(name);\n        this.__attributeReaction(name, oldValue, null);\n      } else {\n        super.removeAttribute(name);\n      }\n    }\n\n    // NOTE: Inlined for perf from version of DisableUpgradeMixin.\n    static get observedAttributes() {\n      if (legacyNoObservedAttributes && !this.prototype._legacyForceObservedAttributes) {\n        // Ensure this element is property registered with the telemetry system.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('__observedAttributes', this))) {\n          this.__observedAttributes = [];\n          register(this.prototype);\n        }\n        return this.__observedAttributes;\n      } else {\n        return observedAttributesGetter.call(this).concat(DISABLED_ATTR);\n      }\n    }\n\n    // NOTE: Inlined for perf from version of DisableUpgradeMixin.\n    // Prevent element from enabling properties when it's upgrade disabled.\n    // Normally overriding connectedCallback would be enough, but dom-* elements\n    /** @override */\n    _enableProperties() {\n      if (!this.__isUpgradeDisabled) {\n        super._enableProperties();\n      }\n    }\n\n    // NOTE: Inlined for perf from version of DisableUpgradeMixin.\n    // If the element starts upgrade-disabled and a property is set for\n    // which an accessor exists, the default should not be applied.\n    // This additional check is needed because defaults are applied via\n    // `_initializeProperties` which is called after initial properties\n    // have been set when the element starts upgrade-disabled.\n    /** @override */\n    _canApplyPropertyDefault(property) {\n      return super._canApplyPropertyDefault(property) &&\n        !(this.__isUpgradeDisabled && this._isPropertyPending(property));\n    }\n\n    /**\n     * Provides an implementation of `connectedCallback`\n     * which adds Polymer legacy API's `attached` method.\n     * @return {void}\n     * @override\n     */\n    connectedCallback() {\n      if (this.__needsAttributesAtConnected) {\n        this._takeAttributes();\n      }\n      // NOTE: Inlined for perf from version of DisableUpgradeMixin.\n      if (!this.__isUpgradeDisabled) {\n        super.connectedCallback();\n        this.isAttached = true;\n        this.attached();\n      }\n    }\n\n    /**\n     * Legacy callback called during `connectedCallback`, for overriding\n     * by the user.\n     * @override\n     * @return {void}\n     */\n    attached() {}\n\n    /**\n     * Provides an implementation of `disconnectedCallback`\n     * which adds Polymer legacy API's `detached` method.\n     * @return {void}\n     * @override\n     */\n    disconnectedCallback() {\n      // NOTE: Inlined for perf from version of DisableUpgradeMixin.\n      if (!this.__isUpgradeDisabled) {\n        super.disconnectedCallback();\n        this.isAttached = false;\n        this.detached();\n      }\n    }\n\n    /**\n     * Legacy callback called during `disconnectedCallback`, for overriding\n     * by the user.\n     * @override\n     * @return {void}\n     */\n    detached() {}\n\n    /**\n     * Provides an override implementation of `attributeChangedCallback`\n     * which adds the Polymer legacy API's `attributeChanged` method.\n     * @param {string} name Name of attribute.\n     * @param {?string} old Old value of attribute.\n     * @param {?string} value Current value of attribute.\n     * @param {?string} namespace Attribute namespace.\n     * @return {void}\n     * @override\n     */\n    attributeChangedCallback(name, old, value, namespace) {\n      if (old !== value) {\n        // NOTE: Inlined for perf from version of DisableUpgradeMixin.\n        if (name == DISABLED_ATTR) {\n          // When disable-upgrade is removed, intialize properties and\n          // provoke connectedCallback if the element is already connected.\n          if (this.__isUpgradeDisabled && value == null) {\n            this._initializeProperties();\n            this.__isUpgradeDisabled = false;\n            if (wrap(this).isConnected) {\n              this.connectedCallback();\n            }\n          }\n        } else {\n          super.attributeChangedCallback(name, old, value, namespace);\n          this.attributeChanged(name, old, value);\n        }\n      }\n    }\n\n    /**\n     * Legacy callback called during `attributeChangedChallback`, for overriding\n     * by the user.\n     * @param {string} name Name of attribute.\n     * @param {?string} old Old value of attribute.\n     * @param {?string} value Current value of attribute.\n     * @return {void}\n     * @override\n     */\n    attributeChanged(name, old, value) {} // eslint-disable-line no-unused-vars\n\n    /**\n     * Overrides the default `Polymer.PropertyEffects` implementation to\n     * add support for class initialization via the `_registered` callback.\n     * This is called only when the first instance of the element is created.\n     *\n     * @return {void}\n     * @override\n     * @suppress {invalidCasts}\n     */\n    _initializeProperties() {\n      // NOTE: Inlined for perf from version of DisableUpgradeMixin.\n      // Only auto-use disable-upgrade if legacyOptimizations is set.\n      if (legacyOptimizations && this.hasAttribute(DISABLED_ATTR)) {\n        this.__isUpgradeDisabled = true;\n      } else {\n        let proto = Object.getPrototypeOf(this);\n        if (!proto.hasOwnProperty(JSCompiler_renameProperty('__hasRegisterFinished', proto))) {\n          this._registered();\n          // backstop in case the `_registered` implementation does not set this\n          proto.__hasRegisterFinished = true;\n        }\n        super._initializeProperties();\n        this.root = /** @type {HTMLElement} */(this);\n        this.created();\n        // Pull all attribute values 1x if `legacyNoObservedAttributes` is set.\n        if (legacyNoObservedAttributes && !this._legacyForceObservedAttributes) {\n          if (this.hasAttributes()) {\n            this._takeAttributes();\n          // Element created from scratch or parser generated\n          } else if (!this.parentNode) {\n            this.__needsAttributesAtConnected = true;\n          }\n        }\n        // Ensure listeners are applied immediately so that they are\n        // added before declarative event listeners. This allows an element to\n        // decorate itself via an event prior to any declarative listeners\n        // seeing the event. Note, this ensures compatibility with 1.x ordering.\n        this._applyListeners();\n      }\n    }\n\n    _takeAttributes() {\n      const a = this.attributes;\n      for (let i=0, l=a.length; i < l; i++) {\n        const attr = a[i];\n        this.__attributeReaction(attr.name, null, attr.value);\n      }\n    }\n\n    /**\n     * Called automatically when an element is initializing.\n     * Users may override this method to perform class registration time\n     * work. The implementation should ensure the work is performed\n     * only once for the class.\n     * @protected\n     * @return {void}\n     * @override\n     */\n    _registered() {}\n\n    /**\n     * Overrides the default `Polymer.PropertyEffects` implementation to\n     * add support for installing `hostAttributes` and `listeners`.\n     *\n     * @return {void}\n     * @override\n     */\n    ready() {\n      this._ensureAttributes();\n      super.ready();\n    }\n\n    /**\n     * Ensures an element has required attributes. Called when the element\n     * is being readied via `ready`. Users should override to set the\n     * element's required attributes. The implementation should be sure\n     * to check and not override existing attributes added by\n     * the user of the element. Typically, setting attributes should be left\n     * to the element user and not done here; reasonable exceptions include\n     * setting aria roles and focusability.\n     * @protected\n     * @return {void}\n     * @override\n     */\n    _ensureAttributes() {}\n\n    /**\n     * Adds element event listeners. Called when the element\n     * is being readied via `ready`. Users should override to\n     * add any required element event listeners.\n     * In performance critical elements, the work done here should be kept\n     * to a minimum since it is done before the element is rendered. In\n     * these elements, consider adding listeners asynchronously so as not to\n     * block render.\n     * @protected\n     * @return {void}\n     * @override\n     */\n    _applyListeners() {}\n\n    /**\n     * Converts a typed JavaScript value to a string.\n     *\n     * Note this method is provided as backward-compatible legacy API\n     * only.  It is not directly called by any Polymer features. To customize\n     * how properties are serialized to attributes for attribute bindings and\n     * `reflectToAttribute: true` properties as well as this method, override\n     * the `_serializeValue` method provided by `Polymer.PropertyAccessors`.\n     *\n     * @param {*} value Value to deserialize\n     * @return {string | undefined} Serialized value\n     * @override\n     */\n    serialize(value) {\n      return this._serializeValue(value);\n    }\n\n    /**\n     * Converts a string to a typed JavaScript value.\n     *\n     * Note this method is provided as backward-compatible legacy API\n     * only.  It is not directly called by any Polymer features.  To customize\n     * how attributes are deserialized to properties for in\n     * `attributeChangedCallback`, override `_deserializeValue` method\n     * provided by `Polymer.PropertyAccessors`.\n     *\n     * @param {string} value String to deserialize\n     * @param {*} type Type to deserialize the string to\n     * @return {*} Returns the deserialized value in the `type` given.\n     * @override\n     */\n    deserialize(value, type) {\n      return this._deserializeValue(value, type);\n    }\n\n    /**\n     * Serializes a property to its associated attribute.\n     *\n     * Note this method is provided as backward-compatible legacy API\n     * only.  It is not directly called by any Polymer features.\n     *\n     * @param {string} property Property name to reflect.\n     * @param {string=} attribute Attribute name to reflect.\n     * @param {*=} value Property value to reflect.\n     * @return {void}\n     * @override\n     */\n    reflectPropertyToAttribute(property, attribute, value) {\n      this._propertyToAttribute(property, attribute, value);\n    }\n\n    /**\n     * Sets a typed value to an HTML attribute on a node.\n     *\n     * Note this method is provided as backward-compatible legacy API\n     * only.  It is not directly called by any Polymer features.\n     *\n     * @param {*} value Value to serialize.\n     * @param {string} attribute Attribute name to serialize to.\n     * @param {Element} node Element to set attribute to.\n     * @return {void}\n     * @override\n     */\n    serializeValueToAttribute(value, attribute, node) {\n      this._valueToNodeAttribute(/** @type {Element} */ (node || this), value, attribute);\n    }\n\n    /**\n     * Copies own properties (including accessor descriptors) from a source\n     * object to a target object.\n     *\n     * @param {Object} prototype Target object to copy properties to.\n     * @param {Object} api Source object to copy properties from.\n     * @return {Object} prototype object that was passed as first argument.\n     * @override\n     */\n    extend(prototype, api) {\n      if (!(prototype && api)) {\n        return prototype || api;\n      }\n      let n$ = Object.getOwnPropertyNames(api);\n      for (let i=0, n; (i<n$.length) && (n=n$[i]); i++) {\n        let pd = Object.getOwnPropertyDescriptor(api, n);\n        if (pd) {\n          Object.defineProperty(prototype, n, pd);\n        }\n      }\n      return prototype;\n    }\n\n    /**\n     * Copies props from a source object to a target object.\n     *\n     * Note, this method uses a simple `for...in` strategy for enumerating\n     * properties.  To ensure only `ownProperties` are copied from source\n     * to target and that accessor implementations are copied, use `extend`.\n     *\n     * @param {!Object} target Target object to copy properties to.\n     * @param {!Object} source Source object to copy properties from.\n     * @return {!Object} Target object that was passed as first argument.\n     * @override\n     */\n    mixin(target, source) {\n      for (let i in source) {\n        target[i] = source[i];\n      }\n      return target;\n    }\n\n    /**\n     * Sets the prototype of an object.\n     *\n     * Note this method is provided as backward-compatible legacy API\n     * only.  It is not directly called by any Polymer features.\n     * @param {Object} object The object on which to set the prototype.\n     * @param {Object} prototype The prototype that will be set on the given\n     * `object`.\n     * @return {Object} Returns the given `object` with its prototype set\n     * to the given `prototype` object.\n     * @override\n     */\n    chainObject(object, prototype) {\n      if (object && prototype && object !== prototype) {\n        object.__proto__ = prototype;\n      }\n      return object;\n    }\n\n    /* **** Begin Template **** */\n\n    /**\n     * Calls `importNode` on the `content` of the `template` specified and\n     * returns a document fragment containing the imported content.\n     *\n     * @param {HTMLTemplateElement} template HTML template element to instance.\n     * @return {!DocumentFragment} Document fragment containing the imported\n     *   template content.\n     * @override\n     * @suppress {missingProperties} go/missingfnprops\n     */\n    instanceTemplate(template) {\n      let content = this.constructor._contentForTemplate(template);\n      let dom = /** @type {!DocumentFragment} */\n        (document.importNode(content, true));\n      return dom;\n    }\n\n    /* **** Begin Events **** */\n\n\n\n    /**\n     * Dispatches a custom event with an optional detail value.\n     *\n     * @param {string} type Name of event type.\n     * @param {*=} detail Detail value containing event-specific\n     *   payload.\n     * @param {{ bubbles: (boolean|undefined), cancelable: (boolean|undefined),\n     *     composed: (boolean|undefined) }=}\n     *  options Object specifying options.  These may include:\n     *  `bubbles` (boolean, defaults to `true`),\n     *  `cancelable` (boolean, defaults to false), and\n     *  `node` on which to fire the event (HTMLElement, defaults to `this`).\n     * @return {!Event} The new event that was fired.\n     * @override\n     */\n    fire(type, detail, options) {\n      options = options || {};\n      detail = (detail === null || detail === undefined) ? {} : detail;\n      let event = new Event(type, {\n        bubbles: options.bubbles === undefined ? true : options.bubbles,\n        cancelable: Boolean(options.cancelable),\n        composed: options.composed === undefined ? true: options.composed\n      });\n      event.detail = detail;\n      let node = options.node || this;\n      wrap(node).dispatchEvent(event);\n      return event;\n    }\n\n    /**\n     * Convenience method to add an event listener on a given element,\n     * late bound to a named method on this element.\n     *\n     * @param {?EventTarget} node Element to add event listener to.\n     * @param {string} eventName Name of event to listen for.\n     * @param {string} methodName Name of handler method on `this` to call.\n     * @return {void}\n     * @override\n     */\n    listen(node, eventName, methodName) {\n      node = /** @type {!EventTarget} */ (node || this);\n      let hbl = this.__boundListeners ||\n        (this.__boundListeners = new WeakMap());\n      let bl = hbl.get(node);\n      if (!bl) {\n        bl = {};\n        hbl.set(node, bl);\n      }\n      let key = eventName + methodName;\n      if (!bl[key]) {\n        bl[key] = this._addMethodEventListenerToNode(\n            /** @type {!Node} */ (node), eventName, methodName, this);\n      }\n    }\n\n    /**\n     * Convenience method to remove an event listener from a given element,\n     * late bound to a named method on this element.\n     *\n     * @param {?EventTarget} node Element to remove event listener from.\n     * @param {string} eventName Name of event to stop listening to.\n     * @param {string} methodName Name of handler method on `this` to not call\n     anymore.\n     * @return {void}\n     * @override\n     */\n    unlisten(node, eventName, methodName) {\n      node = /** @type {!EventTarget} */ (node || this);\n      let bl = this.__boundListeners &&\n          this.__boundListeners.get(/** @type {!Element} */ (node));\n      let key = eventName + methodName;\n      let handler = bl && bl[key];\n      if (handler) {\n        this._removeEventListenerFromNode(\n            /** @type {!Node} */ (node), eventName, handler);\n        bl[key] = /** @type {?} */ (null);\n      }\n    }\n\n    /**\n     * Override scrolling behavior to all direction, one direction, or none.\n     *\n     * Valid scroll directions:\n     *   - 'all': scroll in any direction\n     *   - 'x': scroll only in the 'x' direction\n     *   - 'y': scroll only in the 'y' direction\n     *   - 'none': disable scrolling for this node\n     *\n     * @param {string=} direction Direction to allow scrolling\n     * Defaults to `all`.\n     * @param {Element=} node Element to apply scroll direction setting.\n     * Defaults to `this`.\n     * @return {void}\n     * @override\n     */\n    setScrollDirection(direction, node) {\n      setTouchAction(\n          /** @type {!Element} */ (node || this),\n          DIRECTION_MAP[direction] || 'auto');\n    }\n    /* **** End Events **** */\n\n    /**\n     * Convenience method to run `querySelector` on this local DOM scope.\n     *\n     * This function calls `Polymer.dom(this.root).querySelector(slctr)`.\n     *\n     * @param {string} slctr Selector to run on this local DOM scope\n     * @return {Element} Element found by the selector, or null if not found.\n     * @override\n     */\n    $$(slctr) {\n      // Note, no need to `wrap` this because root is always patched\n      return this.root.querySelector(slctr);\n    }\n\n    /**\n     * Return the element whose local dom within which this element\n     * is contained. This is a shorthand for\n     * `this.getRootNode().host`.\n     * @this {Element}\n     * @return {?Node} The element whose local dom within which this element is\n     * contained.\n     * @override\n     */\n    get domHost() {\n      let root = wrap(this).getRootNode();\n      return (root instanceof DocumentFragment) ? /** @type {ShadowRoot} */ (root).host : root;\n    }\n\n    /**\n     * Force this element to distribute its children to its local dom.\n     * This should not be necessary as of Polymer 2.0.2 and is provided only\n     * for backwards compatibility.\n     * @return {void}\n     * @override\n     */\n    distributeContent() {\n      const thisEl = /** @type {Element} */ (this);\n      const domApi = /** @type {PolymerDomApi} */(dom(thisEl));\n      if (window.ShadyDOM && domApi.shadowRoot) {\n        ShadyDOM.flush();\n      }\n    }\n\n    /**\n     * Returns a list of nodes that are the effective childNodes. The effective\n     * childNodes list is the same as the element's childNodes except that\n     * any `<content>` elements are replaced with the list of nodes distributed\n     * to the `<content>`, the result of its `getDistributedNodes` method.\n     * @return {!Array<!Node>} List of effective child nodes.\n     * @suppress {invalidCasts} LegacyElementMixin must be applied to an\n     *     HTMLElement\n     * @override\n     */\n    getEffectiveChildNodes() {\n      const thisEl = /** @type {Element} */ (this);\n      const domApi = /** @type {PolymerDomApi} */ (dom(thisEl));\n      return domApi.getEffectiveChildNodes();\n    }\n\n    /**\n     * Returns a list of nodes distributed within this element that match\n     * `selector`. These can be dom children or elements distributed to\n     * children that are insertion points.\n     * @param {string} selector Selector to run.\n     * @return {!Array<!Node>} List of distributed elements that match selector.\n     * @suppress {invalidCasts} LegacyElementMixin must be applied to an\n     * HTMLElement\n     * @override\n     */\n    queryDistributedElements(selector) {\n      const thisEl = /** @type {Element} */ (this);\n      const domApi = /** @type {PolymerDomApi} */ (dom(thisEl));\n      return domApi.queryDistributedElements(selector);\n    }\n\n    /**\n     * Returns a list of elements that are the effective children. The effective\n     * children list is the same as the element's children except that\n     * any `<content>` elements are replaced with the list of elements\n     * distributed to the `<content>`.\n     *\n     * @return {!Array<!Node>} List of effective children.\n     * @override\n     */\n    getEffectiveChildren() {\n      let list = this.getEffectiveChildNodes();\n      return list.filter(function(/** @type {!Node} */ n) {\n        return (n.nodeType === Node.ELEMENT_NODE);\n      });\n    }\n\n    /**\n     * Returns a string of text content that is the concatenation of the\n     * text content's of the element's effective childNodes (the elements\n     * returned by <a href=\"#getEffectiveChildNodes>getEffectiveChildNodes</a>.\n     *\n     * @return {string} List of effective children.\n     * @override\n     */\n    getEffectiveTextContent() {\n      let cn = this.getEffectiveChildNodes();\n      let tc = [];\n      for (let i=0, c; (c = cn[i]); i++) {\n        if (c.nodeType !== Node.COMMENT_NODE) {\n          tc.push(c.textContent);\n        }\n      }\n      return tc.join('');\n    }\n\n    /**\n     * Returns the first effective childNode within this element that\n     * match `selector`. These can be dom child nodes or elements distributed\n     * to children that are insertion points.\n     * @param {string} selector Selector to run.\n     * @return {Node} First effective child node that matches selector.\n     * @override\n     */\n    queryEffectiveChildren(selector) {\n      let e$ = this.queryDistributedElements(selector);\n      return e$ && e$[0];\n    }\n\n    /**\n     * Returns a list of effective childNodes within this element that\n     * match `selector`. These can be dom child nodes or elements distributed\n     * to children that are insertion points.\n     * @param {string} selector Selector to run.\n     * @return {!Array<!Node>} List of effective child nodes that match\n     *     selector.\n     * @override\n     */\n    queryAllEffectiveChildren(selector) {\n      return this.queryDistributedElements(selector);\n    }\n\n    /**\n     * Returns a list of nodes distributed to this element's `<slot>`.\n     *\n     * If this element contains more than one `<slot>` in its local DOM,\n     * an optional selector may be passed to choose the desired content.\n     *\n     * @param {string=} slctr CSS selector to choose the desired\n     *   `<slot>`.  Defaults to `content`.\n     * @return {!Array<!Node>} List of distributed nodes for the `<slot>`.\n     * @override\n     */\n    getContentChildNodes(slctr) {\n      // Note, no need to `wrap` this because root is always\n      let content = this.root.querySelector(slctr || 'slot');\n      return content ?\n          /** @type {PolymerDomApi} */ (dom(content)).getDistributedNodes() :\n          [];\n    }\n\n    /**\n     * Returns a list of element children distributed to this element's\n     * `<slot>`.\n     *\n     * If this element contains more than one `<slot>` in its\n     * local DOM, an optional selector may be passed to choose the desired\n     * content.  This method differs from `getContentChildNodes` in that only\n     * elements are returned.\n     *\n     * @param {string=} slctr CSS selector to choose the desired\n     *   `<content>`.  Defaults to `content`.\n     * @return {!Array<!HTMLElement>} List of distributed nodes for the\n     *   `<slot>`.\n     * @suppress {invalidCasts}\n     * @override\n     */\n    getContentChildren(slctr) {\n      let children = /** @type {!Array<!HTMLElement>} */(this.getContentChildNodes(slctr).filter(function(n) {\n        return (n.nodeType === Node.ELEMENT_NODE);\n      }));\n      return children;\n    }\n\n    /**\n     * Checks whether an element is in this element's light DOM tree.\n     *\n     * @param {?Node} node The element to be checked.\n     * @return {boolean} true if node is in this element's light DOM tree.\n     * @suppress {invalidCasts} LegacyElementMixin must be applied to an\n     * HTMLElement\n     * @override\n     */\n    isLightDescendant(node) {\n      const thisNode = /** @type {Node} */ (this);\n      return thisNode !== node && wrap(thisNode).contains(node) &&\n        wrap(thisNode).getRootNode() === wrap(node).getRootNode();\n    }\n\n    /**\n     * Checks whether an element is in this element's local DOM tree.\n     *\n     * @param {!Element} node The element to be checked.\n     * @return {boolean} true if node is in this element's local DOM tree.\n     * @override\n     */\n    isLocalDescendant(node) {\n      return this.root === wrap(node).getRootNode();\n    }\n\n    /**\n     * No-op for backwards compatibility. This should now be handled by\n     * ShadyCss library.\n     * @param  {!Element} container Container element to scope\n     * @param  {boolean=} shouldObserve if true, start a mutation observer for added nodes to the container\n     * @return {?MutationObserver} Returns a new MutationObserver on `container` if `shouldObserve` is true.\n     * @override\n     */\n    scopeSubtree(container, shouldObserve = false) {\n      return scopeSubtree(container, shouldObserve);\n    }\n\n    /**\n     * Returns the computed style value for the given property.\n     * @param {string} property The css property name.\n     * @return {string} Returns the computed css property value for the given\n     * `property`.\n     * @suppress {invalidCasts} LegacyElementMixin must be applied to an\n     *     HTMLElement\n     * @override\n     */\n    getComputedStyleValue(property) {\n      return styleInterface.getComputedStyleValue(/** @type {!Element} */(this), property);\n    }\n\n    // debounce\n\n    /**\n     * Call `debounce` to collapse multiple requests for a named task into\n     * one invocation which is made after the wait time has elapsed with\n     * no new request.  If no wait time is given, the callback will be called\n     * at microtask timing (guaranteed before paint).\n     *\n     *     debouncedClickAction(e) {\n     *       // will not call `processClick` more than once per 100ms\n     *       this.debounce('click', function() {\n     *        this.processClick();\n     *       } 100);\n     *     }\n     *\n     * @param {string} jobName String to identify the debounce job.\n     * @param {function():void} callback Function that is called (with `this`\n     *   context) when the wait time elapses.\n     * @param {number=} wait Optional wait time in milliseconds (ms) after the\n     *   last signal that must elapse before invoking `callback`\n     * @return {!Object} Returns a debouncer object on which exists the\n     * following methods: `isActive()` returns true if the debouncer is\n     * active; `cancel()` cancels the debouncer if it is active;\n     * `flush()` immediately invokes the debounced callback if the debouncer\n     * is active.\n     * @override\n     */\n    debounce(jobName, callback, wait) {\n      this._debouncers = this._debouncers || {};\n      return this._debouncers[jobName] = Debouncer.debounce(\n            this._debouncers[jobName]\n          , wait > 0 ? timeOut.after(wait) : microTask\n          , callback.bind(this));\n    }\n\n    /**\n     * Returns whether a named debouncer is active.\n     *\n     * @param {string} jobName The name of the debouncer started with `debounce`\n     * @return {boolean} Whether the debouncer is active (has not yet fired).\n     * @override\n     */\n    isDebouncerActive(jobName) {\n      this._debouncers = this._debouncers || {};\n      let debouncer = this._debouncers[jobName];\n      return !!(debouncer && debouncer.isActive());\n    }\n\n    /**\n     * Immediately calls the debouncer `callback` and inactivates it.\n     *\n     * @param {string} jobName The name of the debouncer started with `debounce`\n     * @return {void}\n     * @override\n     */\n    flushDebouncer(jobName) {\n      this._debouncers = this._debouncers || {};\n      let debouncer = this._debouncers[jobName];\n      if (debouncer) {\n        debouncer.flush();\n      }\n    }\n\n    /**\n     * Cancels an active debouncer.  The `callback` will not be called.\n     *\n     * @param {string} jobName The name of the debouncer started with `debounce`\n     * @return {void}\n     * @override\n     */\n    cancelDebouncer(jobName) {\n      this._debouncers = this._debouncers || {};\n      let debouncer = this._debouncers[jobName];\n      if (debouncer) {\n        debouncer.cancel();\n      }\n    }\n\n    /**\n     * Runs a callback function asynchronously.\n     *\n     * By default (if no waitTime is specified), async callbacks are run at\n     * microtask timing, which will occur before paint.\n     *\n     * @param {!Function} callback The callback function to run, bound to\n     *     `this`.\n     * @param {number=} waitTime Time to wait before calling the\n     *   `callback`.  If unspecified or 0, the callback will be run at microtask\n     *   timing (before paint).\n     * @return {number} Handle that may be used to cancel the async job.\n     * @override\n     */\n    async(callback, waitTime) {\n      return waitTime > 0 ? timeOut.run(callback.bind(this), waitTime) :\n          ~microTask.run(callback.bind(this));\n    }\n\n    /**\n     * Cancels an async operation started with `async`.\n     *\n     * @param {number} handle Handle returned from original `async` call to\n     *   cancel.\n     * @return {void}\n     * @override\n     */\n    cancelAsync(handle) {\n      handle < 0 ? microTask.cancel(~handle) :\n          timeOut.cancel(handle);\n    }\n\n    // other\n\n    /**\n     * Convenience method for creating an element and configuring it.\n     *\n     * @param {string} tag HTML element tag to create.\n     * @param {Object=} props Object of properties to configure on the\n     *    instance.\n     * @return {!Element} Newly created and configured element.\n     * @override\n     */\n    create(tag, props) {\n      let elt = document.createElement(tag);\n      if (props) {\n        if (elt.setProperties) {\n          elt.setProperties(props);\n        } else {\n          for (let n in props) {\n            elt[n] = props[n];\n          }\n        }\n      }\n      return elt;\n    }\n\n    /**\n     * Polyfill for Element.prototype.matches, which is sometimes still\n     * prefixed.\n     *\n     * @param {string} selector Selector to test.\n     * @param {!Element=} node Element to test the selector against.\n     * @return {boolean} Whether the element matches the selector.\n     * @override\n     */\n    elementMatches(selector, node) {\n      return matchesSelector( (node || this), selector);\n    }\n\n    /**\n     * Toggles an HTML attribute on or off.\n     *\n     * @param {string} name HTML attribute name\n     * @param {boolean=} bool Boolean to force the attribute on or off.\n     *    When unspecified, the state of the attribute will be reversed.\n     * @return {boolean} true if the attribute now exists\n     * @override\n     */\n    toggleAttribute(name, bool) {\n      let node = /** @type {Element} */(this);\n      if (arguments.length === 3) {\n        node = /** @type {Element} */(arguments[2]);\n      }\n      if (arguments.length == 1) {\n        bool = !node.hasAttribute(name);\n      }\n      if (bool) {\n        wrap(node).setAttribute(name, '');\n        return true;\n      } else {\n        wrap(node).removeAttribute(name);\n        return false;\n      }\n    }\n\n\n    /**\n     * Toggles a CSS class on or off.\n     *\n     * @param {string} name CSS class name\n     * @param {boolean=} bool Boolean to force the class on or off.\n     *    When unspecified, the state of the class will be reversed.\n     * @param {Element=} node Node to target.  Defaults to `this`.\n     * @return {void}\n     * @override\n     */\n    toggleClass(name, bool, node) {\n      node = /** @type {Element} */ (node || this);\n      if (arguments.length == 1) {\n        bool = !node.classList.contains(name);\n      }\n      if (bool) {\n        node.classList.add(name);\n      } else {\n        node.classList.remove(name);\n      }\n    }\n\n    /**\n     * Cross-platform helper for setting an element's CSS `transform` property.\n     *\n     * @param {string} transformText Transform setting.\n     * @param {Element=} node Element to apply the transform to.\n     * Defaults to `this`\n     * @return {void}\n     * @override\n     */\n    transform(transformText, node) {\n      node = /** @type {Element} */ (node || this);\n      node.style.webkitTransform = transformText;\n      node.style.transform = transformText;\n    }\n\n    /**\n     * Cross-platform helper for setting an element's CSS `translate3d`\n     * property.\n     *\n     * @param {number|string} x X offset.\n     * @param {number|string} y Y offset.\n     * @param {number|string} z Z offset.\n     * @param {Element=} node Element to apply the transform to.\n     * Defaults to `this`.\n     * @return {void}\n     * @override\n     */\n    translate3d(x, y, z, node) {\n      node = /** @type {Element} */ (node || this);\n      this.transform('translate3d(' + x + ',' + y + ',' + z + ')', node);\n    }\n\n    /**\n     * Removes an item from an array, if it exists.\n     *\n     * If the array is specified by path, a change notification is\n     * generated, so that observers, data bindings and computed\n     * properties watching that path can update.\n     *\n     * If the array is passed directly, **no change\n     * notification is generated**.\n     *\n     * @param {string | !Array<number|string>} arrayOrPath Path to array from\n     *     which to remove the item\n     *   (or the array itself).\n     * @param {*} item Item to remove.\n     * @return {Array} Array containing item removed.\n     * @override\n     */\n    arrayDelete(arrayOrPath, item) {\n      let index;\n      if (Array.isArray(arrayOrPath)) {\n        index = arrayOrPath.indexOf(item);\n        if (index >= 0) {\n          return arrayOrPath.splice(index, 1);\n        }\n      } else {\n        let arr = get(this, arrayOrPath);\n        index = arr.indexOf(item);\n        if (index >= 0) {\n          return this.splice(arrayOrPath, index, 1);\n        }\n      }\n      return null;\n    }\n\n    // logging\n\n    /**\n     * Facades `console.log`/`warn`/`error` as override point.\n     *\n     * @param {string} level One of 'log', 'warn', 'error'\n     * @param {Array} args Array of strings or objects to log\n     * @return {void}\n     * @override\n     */\n    _logger(level, args) {\n      // accept ['foo', 'bar'] and [['foo', 'bar']]\n      if (Array.isArray(args) && args.length === 1 && Array.isArray(args[0])) {\n        args = args[0];\n      }\n      switch(level) {\n        case 'log':\n        case 'warn':\n        case 'error':\n          console[level](...args);\n      }\n    }\n\n    /**\n     * Facades `console.log` as an override point.\n     *\n     * @param {...*} args Array of strings or objects to log\n     * @return {void}\n     * @override\n     */\n    _log(...args) {\n      this._logger('log', args);\n    }\n\n    /**\n     * Facades `console.warn` as an override point.\n     *\n     * @param {...*} args Array of strings or objects to log\n     * @return {void}\n     * @override\n     */\n    _warn(...args) {\n      this._logger('warn', args);\n    }\n\n    /**\n     * Facades `console.error` as an override point.\n     *\n     * @param {...*} args Array of strings or objects to log\n     * @return {void}\n     * @override\n     */\n    _error(...args) {\n      this._logger('error', args);\n    }\n\n    /**\n     * Formats a message using the element type an a method name.\n     *\n     * @param {string} methodName Method name to associate with message\n     * @param {...*} args Array of strings or objects to log\n     * @return {!Array} Array with formatting information for `console`\n     *   logging.\n     * @override\n     */\n    _logf(methodName, ...args) {\n      return ['[%s::%s]', this.is, methodName, ...args];\n    }\n\n  }\n\n  LegacyElement.prototype.is = '';\n\n  return LegacyElement;\n});\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport { LegacyElementMixin } from './legacy-element-mixin.js';\nimport { legacyOptimizations } from '../utils/settings.js';\n\nconst lifecycleProps = {\n  attached: true,\n  detached: true,\n  ready: true,\n  created: true,\n  beforeRegister: true,\n  registered: true,\n  attributeChanged: true,\n  listeners: true,\n  hostAttributes: true\n};\n\nconst excludeOnInfo = {\n  attached: true,\n  detached: true,\n  ready: true,\n  created: true,\n  beforeRegister: true,\n  registered: true,\n  attributeChanged: true,\n  behaviors: true,\n  _noAccessors: true\n};\n\nconst excludeOnBehaviors = Object.assign({\n  listeners: true,\n  hostAttributes: true,\n  properties: true,\n  observers: true,\n}, excludeOnInfo);\n\nfunction copyProperties(source, target, excludeProps) {\n  const noAccessors = source._noAccessors;\n  const propertyNames = Object.getOwnPropertyNames(source);\n  for (let i = 0; i < propertyNames.length; i++) {\n    let p = propertyNames[i];\n    if (p in excludeProps) {\n      continue;\n    }\n    if (noAccessors) {\n      target[p] = source[p];\n    } else {\n      let pd = Object.getOwnPropertyDescriptor(source, p);\n      if (pd) {\n        // ensure property is configurable so that a later behavior can\n        // re-configure it.\n        pd.configurable = true;\n        Object.defineProperty(target, p, pd);\n      }\n    }\n  }\n}\n\n/**\n * Applies a \"legacy\" behavior or array of behaviors to the provided class.\n *\n * Note: this method will automatically also apply the `LegacyElementMixin`\n * to ensure that any legacy behaviors can rely on legacy Polymer API on\n * the underlying element.\n *\n * @function\n * @template T\n * @param {!Object|!Array<!Object>} behaviors Behavior object or array of behaviors.\n * @param {function(new:T)} klass Element class.\n * @return {?} Returns a new Element class extended by the\n * passed in `behaviors` and also by `LegacyElementMixin`.\n * @suppress {invalidCasts, checkTypes}\n */\nexport function mixinBehaviors(behaviors, klass) {\n  return GenerateClassFromInfo({}, LegacyElementMixin(klass), behaviors);\n}\n\n// NOTE:\n// 1.x\n// Behaviors were mixed in *in reverse order* and de-duped on the fly.\n// The rule was that behavior properties were copied onto the element\n// prototype if and only if the property did not already exist.\n// Given: Polymer{ behaviors: [A, B, C, A, B]}, property copy order was:\n// (1), B, (2), A, (3) C. This means prototype properties win over\n// B properties win over A win over C. This mirrors what would happen\n// with inheritance if element extended B extended A extended C.\n//\n// Again given, Polymer{ behaviors: [A, B, C, A, B]}, the resulting\n// `behaviors` array was [C, A, B].\n// Behavior lifecycle methods were called in behavior array order\n// followed by the element, e.g. (1) C.created, (2) A.created,\n// (3) B.created, (4) element.created. There was no support for\n// super, and \"super-behavior\" methods were callable only by name).\n//\n// 2.x\n// Behaviors are made into proper mixins which live in the\n// element's prototype chain. Behaviors are placed in the element prototype\n// eldest to youngest and de-duped youngest to oldest:\n// So, first [A, B, C, A, B] becomes [C, A, B] then,\n// the element prototype becomes (oldest) (1) PolymerElement, (2) class(C),\n// (3) class(A), (4) class(B), (5) class(Polymer({...})).\n// Result:\n// This means element properties win over B properties win over A win\n// over C. (same as 1.x)\n// If lifecycle is called (super then me), order is\n// (1) C.created, (2) A.created, (3) B.created, (4) element.created\n// (again same as 1.x)\nfunction applyBehaviors(proto, behaviors, lifecycle) {\n  for (let i=0; i<behaviors.length; i++) {\n    applyInfo(proto, behaviors[i], lifecycle, excludeOnBehaviors);\n  }\n}\n\nfunction applyInfo(proto, info, lifecycle, excludeProps) {\n  copyProperties(info, proto, excludeProps);\n  for (let p in lifecycleProps) {\n    if (info[p]) {\n      lifecycle[p] = lifecycle[p] || [];\n      lifecycle[p].push(info[p]);\n    }\n  }\n}\n\n/**\n * @param {Array} behaviors List of behaviors to flatten.\n * @param {Array=} list Target list to flatten behaviors into.\n * @param {Array=} exclude List of behaviors to exclude from the list.\n * @return {!Array} Returns the list of flattened behaviors.\n */\nfunction flattenBehaviors(behaviors, list, exclude) {\n  list = list || [];\n  for (let i=behaviors.length-1; i >= 0; i--) {\n    let b = behaviors[i];\n    if (b) {\n      if (Array.isArray(b)) {\n        flattenBehaviors(b, list);\n      } else {\n        // dedup\n        if (list.indexOf(b) < 0 && (!exclude || exclude.indexOf(b) < 0)) {\n          list.unshift(b);\n        }\n      }\n    } else {\n      console.warn('behavior is null, check for missing or 404 import');\n    }\n  }\n  return list;\n}\n\n/**\n * Copies property descriptors from source to target, overwriting all fields\n * of any previous descriptor for a property *except* for `value`, which is\n * merged in from the target if it does not exist on the source.\n *\n * @param {*} target Target properties object\n * @param {*} source Source properties object\n */\nfunction mergeProperties(target, source) {\n  for (const p in source) {\n    const targetInfo = target[p];\n    const sourceInfo = source[p];\n    if (!('value' in sourceInfo) && targetInfo && ('value' in targetInfo)) {\n      target[p] = Object.assign({value: targetInfo.value}, sourceInfo);\n    } else {\n      target[p] = sourceInfo;\n    }\n  }\n}\n\nconst LegacyElement = LegacyElementMixin(HTMLElement);\n\n/* Note about construction and extension of legacy classes.\n  [Changed in Q4 2018 to optimize performance.]\n\n  When calling `Polymer` or `mixinBehaviors`, the generated class below is\n  made. The list of behaviors was previously made into one generated class per\n  behavior, but this is no longer the case as behaviors are now called\n  manually. Note, there may *still* be multiple generated classes in the\n  element's prototype chain if extension is used with `mixinBehaviors`.\n\n  The generated class is directly tied to the info object and behaviors\n  used to create it. That list of behaviors is filtered so it's only the\n  behaviors not active on the superclass. In order to call through to the\n  entire list of lifecycle methods, it's important to call `super`.\n\n  The element's `properties` and `observers` are controlled via the finalization\n  mechanism provided by `PropertiesMixin`. `Properties` and `observers` are\n  collected by manually traversing the prototype chain and merging.\n\n  To limit changes, the `_registered` method is called via `_initializeProperties`\n  and not `_finalizeClass`.\n\n*/\n/**\n * @param {!PolymerInit} info Polymer info object\n * @param {function(new:HTMLElement)} Base base class to extend with info object\n * @param {Object=} behaviors behaviors to copy into the element\n * @return {function(new:HTMLElement)} Generated class\n * @suppress {checkTypes}\n * @private\n */\nfunction GenerateClassFromInfo(info, Base, behaviors) {\n\n  // manages behavior and lifecycle processing (filled in after class definition)\n  let behaviorList;\n  const lifecycle = {};\n\n  /** @private */\n  class PolymerGenerated extends Base {\n\n    // explicitly not calling super._finalizeClass\n    /** @nocollapse */\n    static _finalizeClass() {\n      // if calling via a subclass that hasn't been generated, pass through to super\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('generatedFrom', this))) {\n        // TODO(https://github.com/google/closure-compiler/issues/3240):\n        //     Change back to just super.methodCall()\n        Base._finalizeClass.call(this);\n      } else {\n        // interleave properties and observers per behavior and `info`\n        if (behaviorList) {\n          for (let i=0, b; i < behaviorList.length; i++) {\n            b = behaviorList[i];\n            if (b.properties) {\n              this.createProperties(b.properties);\n            }\n            if (b.observers) {\n              this.createObservers(b.observers, b.properties);\n            }\n          }\n        }\n        if (info.properties) {\n          this.createProperties(info.properties);\n        }\n        if (info.observers) {\n          this.createObservers(info.observers, info.properties);\n        }\n        // make sure to prepare the element template\n        this._prepareTemplate();\n      }\n    }\n\n    /** @nocollapse */\n    static get properties() {\n      const properties = {};\n      if (behaviorList) {\n        for (let i=0; i < behaviorList.length; i++) {\n          mergeProperties(properties, behaviorList[i].properties);\n        }\n      }\n      mergeProperties(properties, info.properties);\n      return properties;\n    }\n\n    /** @nocollapse */\n    static get observers() {\n      let observers = [];\n      if (behaviorList) {\n        for (let i=0, b; i < behaviorList.length; i++) {\n          b = behaviorList[i];\n          if (b.observers) {\n            observers = observers.concat(b.observers);\n          }\n        }\n      }\n      if (info.observers) {\n        observers = observers.concat(info.observers);\n      }\n      return observers;\n    }\n\n    /**\n     * @return {void}\n     */\n    created() {\n      super.created();\n      const list = lifecycle.created;\n      if (list) {\n        for (let i=0; i < list.length; i++) {\n          list[i].call(this);\n        }\n      }\n    }\n\n    /**\n     * @return {void}\n     */\n    _registered() {\n      /* NOTE: `beforeRegister` is called here for bc, but the behavior\n        is different than in 1.x. In 1.0, the method was called *after*\n        mixing prototypes together but *before* processing of meta-objects.\n        However, dynamic effects can still be set here and can be done either\n        in `beforeRegister` or `registered`. It is no longer possible to set\n        `is` in `beforeRegister` as you could in 1.x.\n      */\n      // only proceed if the generated class' prototype has not been registered.\n      const generatedProto = PolymerGenerated.prototype;\n      if (!generatedProto.hasOwnProperty(JSCompiler_renameProperty('__hasRegisterFinished', generatedProto))) {\n        generatedProto.__hasRegisterFinished = true;\n        // ensure superclass is registered first.\n        super._registered();\n        // copy properties onto the generated class lazily if we're optimizing,\n        if (legacyOptimizations) {\n          copyPropertiesToProto(generatedProto);\n        }\n        // make sure legacy lifecycle is called on the *element*'s prototype\n        // and not the generated class prototype; if the element has been\n        // extended, these are *not* the same.\n        const proto = Object.getPrototypeOf(this);\n        let list = lifecycle.beforeRegister;\n        if (list) {\n          for (let i=0; i < list.length; i++) {\n            list[i].call(proto);\n          }\n        }\n        list = lifecycle.registered;\n        if (list) {\n          for (let i=0; i < list.length; i++) {\n            list[i].call(proto);\n          }\n        }\n      }\n    }\n\n    /**\n     * @return {void}\n     */\n    _applyListeners() {\n      super._applyListeners();\n      const list = lifecycle.listeners;\n      if (list) {\n        for (let i=0; i < list.length; i++) {\n          const listeners = list[i];\n          if (listeners) {\n            for (let l in listeners) {\n              this._addMethodEventListenerToNode(this, l, listeners[l]);\n            }\n          }\n        }\n      }\n    }\n\n    // note: exception to \"super then me\" rule;\n    // do work before calling super so that super attributes\n    // only apply if not already set.\n    /**\n     * @return {void}\n     */\n    _ensureAttributes() {\n      const list = lifecycle.hostAttributes;\n      if (list) {\n        for (let i=list.length-1; i >= 0; i--) {\n          const hostAttributes = list[i];\n          for (let a in hostAttributes) {\n              this._ensureAttribute(a, hostAttributes[a]);\n            }\n        }\n      }\n      super._ensureAttributes();\n    }\n\n    /**\n     * @return {void}\n     */\n    ready() {\n      super.ready();\n      let list = lifecycle.ready;\n      if (list) {\n        for (let i=0; i < list.length; i++) {\n          list[i].call(this);\n        }\n      }\n    }\n\n    /**\n     * @return {void}\n     */\n    attached() {\n      super.attached();\n      let list = lifecycle.attached;\n      if (list) {\n        for (let i=0; i < list.length; i++) {\n          list[i].call(this);\n        }\n      }\n    }\n\n    /**\n     * @return {void}\n     */\n    detached() {\n      super.detached();\n      let list = lifecycle.detached;\n      if (list) {\n        for (let i=0; i < list.length; i++) {\n          list[i].call(this);\n        }\n      }\n    }\n\n    /**\n     * Implements native Custom Elements `attributeChangedCallback` to\n     * set an attribute value to a property via `_attributeToProperty`.\n     *\n     * @param {string} name Name of attribute that changed\n     * @param {?string} old Old attribute value\n     * @param {?string} value New attribute value\n     * @return {void}\n     */\n    attributeChanged(name, old, value) {\n      super.attributeChanged();\n      let list = lifecycle.attributeChanged;\n      if (list) {\n        for (let i=0; i < list.length; i++) {\n          list[i].call(this, name, old, value);\n        }\n      }\n    }\n  }\n\n  // apply behaviors, note actual copying is done lazily at first instance creation\n  if (behaviors) {\n    // NOTE: ensure the behavior is extending a class with\n    // legacy element api. This is necessary since behaviors expect to be able\n    // to access 1.x legacy api.\n    if (!Array.isArray(behaviors)) {\n      behaviors = [behaviors];\n    }\n    let superBehaviors = Base.prototype.behaviors;\n    // get flattened, deduped list of behaviors *not* already on super class\n    behaviorList = flattenBehaviors(behaviors, null, superBehaviors);\n    PolymerGenerated.prototype.behaviors = superBehaviors ?\n      superBehaviors.concat(behaviors) : behaviorList;\n  }\n\n  const copyPropertiesToProto = (proto) => {\n    if (behaviorList) {\n      applyBehaviors(proto, behaviorList, lifecycle);\n    }\n    applyInfo(proto, info, lifecycle, excludeOnInfo);\n  };\n\n  // copy properties if we're not optimizing\n  if (!legacyOptimizations) {\n    copyPropertiesToProto(PolymerGenerated.prototype);\n  }\n\n  PolymerGenerated.generatedFrom = info;\n\n  return PolymerGenerated;\n}\n\n/**\n * Generates a class that extends `LegacyElement` based on the\n * provided info object.  Metadata objects on the `info` object\n * (`properties`, `observers`, `listeners`, `behaviors`, `is`) are used\n * for Polymer's meta-programming systems, and any functions are copied\n * to the generated class.\n *\n * Valid \"metadata\" values are as follows:\n *\n * `is`: String providing the tag name to register the element under. In\n * addition, if a `dom-module` with the same id exists, the first template\n * in that `dom-module` will be stamped into the shadow root of this element,\n * with support for declarative event listeners (`on-...`), Polymer data\n * bindings (`[[...]]` and `{{...}}`), and id-based node finding into\n * `this.$`.\n *\n * `properties`: Object describing property-related metadata used by Polymer\n * features (key: property names, value: object containing property metadata).\n * Valid keys in per-property metadata include:\n * - `type` (String|Number|Object|Array|...): Used by\n *   `attributeChangedCallback` to determine how string-based attributes\n *   are deserialized to JavaScript property values.\n * - `notify` (boolean): Causes a change in the property to fire a\n *   non-bubbling event called `<property>-changed`. Elements that have\n *   enabled two-way binding to the property use this event to observe changes.\n * - `readOnly` (boolean): Creates a getter for the property, but no setter.\n *   To set a read-only property, use the private setter method\n *   `_setProperty(property, value)`.\n * - `observer` (string): Observer method name that will be called when\n *   the property changes. The arguments of the method are\n *   `(value, previousValue)`.\n * - `computed` (string): String describing method and dependent properties\n *   for computing the value of this property (e.g. `'computeFoo(bar, zot)'`).\n *   Computed properties are read-only by default and can only be changed\n *   via the return value of the computing method.\n *\n * `observers`: Array of strings describing multi-property observer methods\n *  and their dependent properties (e.g. `'observeABC(a, b, c)'`).\n *\n * `listeners`: Object describing event listeners to be added to each\n *  instance of this element (key: event name, value: method name).\n *\n * `behaviors`: Array of additional `info` objects containing metadata\n * and callbacks in the same format as the `info` object here which are\n * merged into this element.\n *\n * `hostAttributes`: Object listing attributes to be applied to the host\n *  once created (key: attribute name, value: attribute value).  Values\n *  are serialized based on the type of the value.  Host attributes should\n *  generally be limited to attributes such as `tabIndex` and `aria-...`.\n *  Attributes in `hostAttributes` are only applied if a user-supplied\n *  attribute is not already present (attributes in markup override\n *  `hostAttributes`).\n *\n * In addition, the following Polymer-specific callbacks may be provided:\n * - `registered`: called after first instance of this element,\n * - `created`: called during `constructor`\n * - `attached`: called during `connectedCallback`\n * - `detached`: called during `disconnectedCallback`\n * - `ready`: called before first `attached`, after all properties of\n *   this element have been propagated to its template and all observers\n *   have run\n *\n * @param {!PolymerInit} info Object containing Polymer metadata and functions\n *   to become class methods.\n * @template T\n * @param {function(T):T} mixin Optional mixin to apply to legacy base class\n *   before extending with Polymer metaprogramming.\n * @return {function(new:HTMLElement)} Generated class\n */\nexport const Class = function(info, mixin) {\n  if (!info) {\n    console.warn('Polymer.Class requires `info` argument');\n  }\n  let klass = mixin ? mixin(LegacyElement) :\n      LegacyElement;\n  klass = GenerateClassFromInfo(info, klass, info.behaviors);\n  // decorate klass with registration info\n  klass.is = klass.prototype.is = info.is;\n  return klass;\n};\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport { Class } from './class.js';\n\nimport '../utils/boot.js';\n\n/**\n * Legacy class factory and registration helper for defining Polymer\n * elements.\n *\n * This method is equivalent to\n *\n *     import {Class} from '@polymer/polymer/lib/legacy/class.js';\n *     customElements.define(info.is, Class(info));\n *\n * See `Class` for details on valid legacy metadata format for `info`.\n *\n * @global\n * @override\n * @function\n * @param {!PolymerInit} info Object containing Polymer metadata and functions\n *   to become class methods.\n * @return {function(new: HTMLElement)} Generated class\n * @suppress {duplicate, invalidCasts, checkTypes}\n */\nconst Polymer = function(info) {\n  // if input is a `class` (aka a function with a prototype), use the prototype\n  // remember that the `constructor` will never be called\n  let klass;\n  if (typeof info === 'function') {\n    klass = info;\n  } else {\n    klass = Polymer.Class(info);\n  }\n  // Copy opt out for `legacyNoObservedAttributes` from info object to class.\n  if (info._legacyForceObservedAttributes) {\n    klass.prototype._legacyForceObservedAttributes = info._legacyForceObservedAttributes;\n  }\n  customElements.define(klass.is, /** @type {!HTMLElement} */(klass));\n  return klass;\n};\n\nPolymer.Class = Class;\n\nexport { Polymer };", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport { dedupingMixin } from '../utils/mixin.js';\n\n// Common implementation for mixin & behavior\nfunction mutablePropertyChange(inst, property, value, old, mutableData) {\n  let isObject;\n  if (mutableData) {\n    isObject = (typeof value === 'object' && value !== null);\n    // Pull `old` for Objects from temp cache, but treat `null` as a primitive\n    if (isObject) {\n      old = inst.__dataTemp[property];\n    }\n  }\n  // Strict equality check, but return false for NaN===NaN\n  let shouldChange = (old !== value && (old === old || value === value));\n  // Objects are stored in temporary cache (cleared at end of\n  // turn), which is used for dirty-checking\n  if (isObject && shouldChange) {\n    inst.__dataTemp[property] = value;\n  }\n  return shouldChange;\n}\n\n/**\n * Element class mixin to skip strict dirty-checking for objects and arrays\n * (always consider them to be \"dirty\"), for use on elements utilizing\n * `PropertyEffects`\n *\n * By default, `PropertyEffects` performs strict dirty checking on\n * objects, which means that any deep modifications to an object or array will\n * not be propagated unless \"immutable\" data patterns are used (i.e. all object\n * references from the root to the mutation were changed).\n *\n * Polymer also provides a proprietary data mutation and path notification API\n * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient\n * mutation and notification of deep changes in an object graph to all elements\n * bound to the same object graph.\n *\n * In cases where neither immutable patterns nor the data mutation API can be\n * used, applying this mixin will cause Polymer to skip dirty checking for\n * objects and arrays (always consider them to be \"dirty\").  This allows a\n * user to make a deep modification to a bound object graph, and then either\n * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`\n * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all\n * elements that wish to be updated based on deep mutations must apply this\n * mixin or otherwise skip strict dirty checking for objects/arrays.\n * Specifically, any elements in the binding tree between the source of a\n * mutation and the consumption of it must apply this mixin or enable the\n * `OptionalMutableData` mixin.\n *\n * In order to make the dirty check strategy configurable, see\n * `OptionalMutableData`.\n *\n * Note, the performance characteristics of propagating large object graphs\n * will be worse as opposed to using strict dirty checking with immutable\n * patterns or Polymer's path notification API.\n *\n * @mixinFunction\n * @polymer\n * @summary Element class mixin to skip strict dirty-checking for objects\n *   and arrays\n * @template T\n * @param {function(new:T)} superClass Class to apply mixin to.\n * @return {function(new:T)} superClass with mixin applied.\n */\nexport const MutableData = dedupingMixin(superClass => {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_MutableData}\n   */\n  class MutableData extends superClass {\n    /**\n     * Overrides `PropertyEffects` to provide option for skipping\n     * strict equality checking for Objects and Arrays.\n     *\n     * This method pulls the value to dirty check against from the `__dataTemp`\n     * cache (rather than the normal `__data` cache) for Objects.  Since the temp\n     * cache is cleared at the end of a turn, this implementation allows\n     * side-effects of deep object changes to be processed by re-setting the\n     * same object (using the temp cache as an in-turn backstop to prevent\n     * cycles due to 2-way notification).\n     *\n     * @param {string} property Property name\n     * @param {*} value New property value\n     * @param {*} old Previous property value\n     * @return {boolean} Whether the property should be considered a change\n     * @protected\n     */\n    _shouldPropertyChange(property, value, old) {\n      return mutablePropertyChange(this, property, value, old, true);\n    }\n\n  }\n\n  return MutableData;\n\n});\n\n/**\n * Element class mixin to add the optional ability to skip strict\n * dirty-checking for objects and arrays (always consider them to be\n * \"dirty\") by setting a `mutable-data` attribute on an element instance.\n *\n * By default, `PropertyEffects` performs strict dirty checking on\n * objects, which means that any deep modifications to an object or array will\n * not be propagated unless \"immutable\" data patterns are used (i.e. all object\n * references from the root to the mutation were changed).\n *\n * Polymer also provides a proprietary data mutation and path notification API\n * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient\n * mutation and notification of deep changes in an object graph to all elements\n * bound to the same object graph.\n *\n * In cases where neither immutable patterns nor the data mutation API can be\n * used, applying this mixin will allow Polymer to skip dirty checking for\n * objects and arrays (always consider them to be \"dirty\").  This allows a\n * user to make a deep modification to a bound object graph, and then either\n * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`\n * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all\n * elements that wish to be updated based on deep mutations must apply this\n * mixin or otherwise skip strict dirty checking for objects/arrays.\n * Specifically, any elements in the binding tree between the source of a\n * mutation and the consumption of it must enable this mixin or apply the\n * `MutableData` mixin.\n *\n * While this mixin adds the ability to forgo Object/Array dirty checking,\n * the `mutableData` flag defaults to false and must be set on the instance.\n *\n * Note, the performance characteristics of propagating large object graphs\n * will be worse by relying on `mutableData: true` as opposed to using\n * strict dirty checking with immutable patterns or Polymer's path notification\n * API.\n *\n * @mixinFunction\n * @polymer\n * @summary Element class mixin to optionally skip strict dirty-checking\n *   for objects and arrays\n */\nexport const OptionalMutableData = dedupingMixin(superClass => {\n\n  /**\n   * @mixinClass\n   * @polymer\n   * @implements {Polymer_OptionalMutableData}\n   */\n  class OptionalMutableData extends superClass {\n\n    /** @nocollapse */\n    static get properties() {\n      return {\n        /**\n         * Instance-level flag for configuring the dirty-checking strategy\n         * for this element.  When true, Objects and Arrays will skip dirty\n         * checking, otherwise strict equality checking will be used.\n         */\n        mutableData: Boolean\n      };\n    }\n\n    /**\n     * Overrides `PropertyEffects` to provide option for skipping\n     * strict equality checking for Objects and Arrays.\n     *\n     * When `this.mutableData` is true on this instance, this method\n     * pulls the value to dirty check against from the `__dataTemp` cache\n     * (rather than the normal `__data` cache) for Objects.  Since the temp\n     * cache is cleared at the end of a turn, this implementation allows\n     * side-effects of deep object changes to be processed by re-setting the\n     * same object (using the temp cache as an in-turn backstop to prevent\n     * cycles due to 2-way notification).\n     *\n     * @param {string} property Property name\n     * @param {*} value New property value\n     * @param {*} old Previous property value\n     * @return {boolean} Whether the property should be considered a change\n     * @protected\n     */\n    _shouldPropertyChange(property, value, old) {\n      return mutablePropertyChange(this, property, value, old, this.mutableData);\n    }\n  }\n\n  return OptionalMutableData;\n\n});\n\n// Export for use by legacy behavior\nMutableData._mutablePropertyChange = mutablePropertyChange;\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Module for preparing and stamping instances of templates that utilize\n * Polymer's data-binding and declarative event listener features.\n *\n * Example:\n *\n *     // Get a template from somewhere, e.g. light DOM\n *     let template = this.querySelector('template');\n *     // Prepare the template\n *     let TemplateClass = Templatize.templatize(template);\n *     // Instance the template with an initial data model\n *     let instance = new TemplateClass({myProp: 'initial'});\n *     // Insert the instance's DOM somewhere, e.g. element's shadow DOM\n *     this.shadowRoot.appendChild(instance.root);\n *     // Changing a property on the instance will propagate to bindings\n *     // in the template\n *     instance.myProp = 'new value';\n *\n * The `options` dictionary passed to `templatize` allows for customizing\n * features of the generated template class, including how outer-scope host\n * properties should be forwarded into template instances, how any instance\n * properties added into the template's scope should be notified out to\n * the host, and whether the instance should be decorated as a \"parent model\"\n * of any event handlers.\n *\n *     // Customize property forwarding and event model decoration\n *     let TemplateClass = Templatize.templatize(template, this, {\n *       parentModel: true,\n *       forwardHostProp(property, value) {...},\n *       instanceProps: {...},\n *       notifyInstanceProp(instance, property, value) {...},\n *     });\n *\n * @summary Module for preparing and stamping instances of templates\n *   utilizing Polymer templating features.\n */\n\nimport './boot.js';\n\nimport { PropertyEffects } from '../mixins/property-effects.js';\nimport { MutableData } from '../mixins/mutable-data.js';\nimport { strictTemplatePolicy, legacyWarnings } from './settings.js';\nimport { wrap } from './wrap.js';\n\n// Base class for HTMLTemplateElement extension that has property effects\n// machinery for propagating host properties to children. This is an ES5\n// class only because Babel (incorrectly) requires super() in the class\n// constructor even though no `this` is used and it returns an instance.\nlet newInstance = null;\n\n/**\n * @constructor\n * @extends {HTMLTemplateElement}\n * @private\n */\nfunction HTMLTemplateElementExtension() { return newInstance; }\nHTMLTemplateElementExtension.prototype = Object.create(HTMLTemplateElement.prototype, {\n  constructor: {\n    value: HTMLTemplateElementExtension,\n    writable: true\n  }\n});\n\n/**\n * @constructor\n * @implements {Polymer_PropertyEffects}\n * @extends {HTMLTemplateElementExtension}\n * @private\n */\nconst DataTemplate = PropertyEffects(HTMLTemplateElementExtension);\n\n/**\n * @constructor\n * @implements {Polymer_MutableData}\n * @extends {DataTemplate}\n * @private\n */\nconst MutableDataTemplate = MutableData(DataTemplate);\n\n// Applies a DataTemplate subclass to a <template> instance\nfunction upgradeTemplate(template, constructor) {\n  newInstance = template;\n  Object.setPrototypeOf(template, constructor.prototype);\n  new constructor();\n  newInstance = null;\n}\n\n/**\n * Base class for TemplateInstance.\n * @constructor\n * @extends {HTMLElement}\n * @implements {Polymer_PropertyEffects}\n * @private\n */\nconst templateInstanceBase = PropertyEffects(class {});\n\nexport function showHideChildren(hide, children) {\n  for (let i=0; i<children.length; i++) {\n    let n = children[i];\n    // Ignore non-changes\n    if (Boolean(hide) != Boolean(n.__hideTemplateChildren__)) {\n      // clear and restore text\n      if (n.nodeType === Node.TEXT_NODE) {\n        if (hide) {\n          n.__polymerTextContent__ = n.textContent;\n          n.textContent = '';\n        } else {\n          n.textContent = n.__polymerTextContent__;\n        }\n      // remove and replace slot\n      } else if (n.localName === 'slot') {\n        if (hide) {\n          n.__polymerReplaced__ = document.createComment('hidden-slot');\n          wrap(wrap(n).parentNode).replaceChild(n.__polymerReplaced__, n);\n        } else {\n          const replace = n.__polymerReplaced__;\n          if (replace) {\n            wrap(wrap(replace).parentNode).replaceChild(n, replace);\n          }\n        }\n      }\n      // hide and show nodes\n      else if (n.style) {\n        if (hide) {\n          n.__polymerDisplay__ = n.style.display;\n          n.style.display = 'none';\n        } else {\n          n.style.display = n.__polymerDisplay__;\n        }\n      }\n    }\n    n.__hideTemplateChildren__ = hide;\n    if (n._showHideChildren) {\n      n._showHideChildren(hide);\n    }\n  }\n}\n\n/**\n * @polymer\n * @customElement\n * @appliesMixin PropertyEffects\n * @unrestricted\n */\nclass TemplateInstanceBase extends templateInstanceBase {\n  constructor(props) {\n    super();\n    this._configureProperties(props);\n    /** @type {!StampedTemplate} */\n    this.root = this._stampTemplate(this.__dataHost);\n    // Save list of stamped children\n    let children = [];\n    /** @suppress {invalidCasts} */\n    this.children = /** @type {!NodeList} */ (children);\n    // Polymer 1.x did not use `Polymer.dom` here so not bothering.\n    for (let n = this.root.firstChild; n; n=n.nextSibling) {\n      children.push(n);\n      n.__templatizeInstance = this;\n    }\n    if (this.__templatizeOwner &&\n      this.__templatizeOwner.__hideTemplateChildren__) {\n      this._showHideChildren(true);\n    }\n    // Flush props only when props are passed if instance props exist\n    // or when there isn't instance props.\n    let options = this.__templatizeOptions;\n    if ((props && options.instanceProps) || !options.instanceProps) {\n      this._enableProperties();\n    }\n  }\n  /**\n   * Configure the given `props` by calling `_setPendingProperty`. Also\n   * sets any properties stored in `__hostProps`.\n   * @private\n   * @param {Object} props Object of property name-value pairs to set.\n   * @return {void}\n   */\n  _configureProperties(props) {\n    let options = this.__templatizeOptions;\n    if (options.forwardHostProp) {\n      for (let hprop in this.__hostProps) {\n        this._setPendingProperty(hprop, this.__dataHost['_host_' + hprop]);\n      }\n    }\n    // Any instance props passed in the constructor will overwrite host props;\n    // normally this would be a user error but we don't specifically filter them\n    for (let iprop in props) {\n      this._setPendingProperty(iprop, props[iprop]);\n    }\n  }\n  /**\n   * Forwards a host property to this instance.  This method should be\n   * called on instances from the `options.forwardHostProp` callback\n   * to propagate changes of host properties to each instance.\n   *\n   * Note this method enqueues the change, which are flushed as a batch.\n   *\n   * @param {string} prop Property or path name\n   * @param {*} value Value of the property to forward\n   * @return {void}\n   */\n  forwardHostProp(prop, value) {\n    if (this._setPendingPropertyOrPath(prop, value, false, true)) {\n      this.__dataHost._enqueueClient(this);\n    }\n  }\n\n  /**\n   * Override point for adding custom or simulated event handling.\n   *\n   * @override\n   * @param {!Node} node Node to add event listener to\n   * @param {string} eventName Name of event\n   * @param {function(!Event):void} handler Listener function to add\n   * @return {void}\n   */\n  _addEventListenerToNode(node, eventName, handler) {\n    if (this._methodHost && this.__templatizeOptions.parentModel) {\n      // If this instance should be considered a parent model, decorate\n      // events this template instance as `model`\n      this._methodHost._addEventListenerToNode(node, eventName, (e) => {\n        e.model = this;\n        handler(e);\n      });\n    } else {\n      // Otherwise delegate to the template's host (which could be)\n      // another template instance\n      let templateHost = this.__dataHost.__dataHost;\n      if (templateHost) {\n        templateHost._addEventListenerToNode(node, eventName, handler);\n      }\n    }\n  }\n  /**\n   * Shows or hides the template instance top level child elements. For\n   * text nodes, `textContent` is removed while \"hidden\" and replaced when\n   * \"shown.\"\n   * @param {boolean} hide Set to true to hide the children;\n   * set to false to show them.\n   * @return {void}\n   * @protected\n   */\n  _showHideChildren(hide) {\n    showHideChildren(hide, this.children);\n  }\n  /**\n   * Overrides default property-effects implementation to intercept\n   * textContent bindings while children are \"hidden\" and cache in\n   * private storage for later retrieval.\n   *\n   * @override\n   * @param {!Node} node The node to set a property on\n   * @param {string} prop The property to set\n   * @param {*} value The value to set\n   * @return {void}\n   * @protected\n   */\n  _setUnmanagedPropertyToNode(node, prop, value) {\n    if (node.__hideTemplateChildren__ &&\n        node.nodeType == Node.TEXT_NODE && prop == 'textContent') {\n      node.__polymerTextContent__ = value;\n    } else {\n      super._setUnmanagedPropertyToNode(node, prop, value);\n    }\n  }\n  /**\n   * Find the parent model of this template instance.  The parent model\n   * is either another templatize instance that had option `parentModel: true`,\n   * or else the host element.\n   *\n   * @return {!Polymer_PropertyEffects} The parent model of this instance\n   */\n  get parentModel() {\n    let model = this.__parentModel;\n    if (!model) {\n      let options;\n      model = this;\n      do {\n        // A template instance's `__dataHost` is a <template>\n        // `model.__dataHost.__dataHost` is the template's host\n        model = model.__dataHost.__dataHost;\n      } while ((options = model.__templatizeOptions) && !options.parentModel);\n      this.__parentModel = model;\n    }\n    return model;\n  }\n\n  /**\n   * Stub of HTMLElement's `dispatchEvent`, so that effects that may\n   * dispatch events safely no-op.\n   *\n   * @param {Event} event Event to dispatch\n   * @return {boolean} Always true.\n   * @override\n   */\n   dispatchEvent(event) { // eslint-disable-line no-unused-vars\n     return true;\n  }\n}\n\n/** @type {!DataTemplate} */\nTemplateInstanceBase.prototype.__dataHost;\n/** @type {!TemplatizeOptions} */\nTemplateInstanceBase.prototype.__templatizeOptions;\n/** @type {!Polymer_PropertyEffects} */\nTemplateInstanceBase.prototype._methodHost;\n/** @type {!Object} */\nTemplateInstanceBase.prototype.__templatizeOwner;\n/** @type {!Object} */\nTemplateInstanceBase.prototype.__hostProps;\n\n/**\n * @constructor\n * @extends {TemplateInstanceBase}\n * @implements {Polymer_MutableData}\n * @private\n */\nconst MutableTemplateInstanceBase = MutableData(\n    // This cast shouldn't be neccessary, but Closure doesn't understand that\n    // TemplateInstanceBase is a constructor function.\n    /** @type {function(new:TemplateInstanceBase)} */ (TemplateInstanceBase));\n\nfunction findMethodHost(template) {\n  // Technically this should be the owner of the outermost template.\n  // In shadow dom, this is always getRootNode().host, but we can\n  // approximate this via cooperation with our dataHost always setting\n  // `_methodHost` as long as there were bindings (or id's) on this\n  // instance causing it to get a dataHost.\n  let templateHost = template.__dataHost;\n  return templateHost && templateHost._methodHost || templateHost;\n}\n\n/* eslint-disable valid-jsdoc */\n/**\n * @suppress {missingProperties} class.prototype is not defined for some reason\n */\nfunction createTemplatizerClass(template, templateInfo, options) {\n  /**\n   * @constructor\n   * @extends {TemplateInstanceBase}\n   */\n  let templatizerBase = options.mutableData ?\n    MutableTemplateInstanceBase : TemplateInstanceBase;\n\n  // Affordance for global mixins onto TemplatizeInstance\n  if (templatize.mixin) {\n    templatizerBase = templatize.mixin(templatizerBase);\n  }\n\n  /**\n   * Anonymous class created by the templatize\n   * @constructor\n   * @private\n   */\n  let klass = class extends templatizerBase { };\n  /** @override */\n  klass.prototype.__templatizeOptions = options;\n  klass.prototype._bindTemplate(template);\n  addNotifyEffects(klass, template, templateInfo, options);\n  return klass;\n}\n\n/**\n * Adds propagate effects from the template to the template instance for\n * properties that the host binds to the template using the `_host_` prefix.\n *\n * @suppress {missingProperties} class.prototype is not defined for some reason\n */\nfunction addPropagateEffects(target, templateInfo, options, methodHost) {\n  let userForwardHostProp = options.forwardHostProp;\n  if (userForwardHostProp && templateInfo.hasHostProps) {\n    // Under the `removeNestedTemplates` optimization, a custom element like\n    // `dom-if` or `dom-repeat` can itself be treated as the \"template\"; this\n    // flag is used to switch between upgrading a `<template>` to be a property\n    // effects client vs. adding the effects directly to the custom element\n    const isTemplate = target.localName == 'template';\n    // Provide data API and property effects on memoized template class\n    let klass = templateInfo.templatizeTemplateClass;\n    if (!klass) {\n      if (isTemplate) {\n        /**\n         * @constructor\n         * @extends {DataTemplate}\n         */\n        let templatizedBase =\n            options.mutableData ? MutableDataTemplate : DataTemplate;\n\n        // NOTE: due to https://github.com/google/closure-compiler/issues/2928,\n        // combining the next two lines into one assignment causes a spurious\n        // type error.\n        /** @private */\n        class TemplatizedTemplate extends templatizedBase {}\n        klass = templateInfo.templatizeTemplateClass = TemplatizedTemplate;\n      } else {\n        /**\n         * @constructor\n         * @extends {PolymerElement}\n         */\n        const templatizedBase = target.constructor;\n\n        // Create a cached subclass of the base custom element class onto which\n        // to put the template-specific propagate effects\n        // NOTE: due to https://github.com/google/closure-compiler/issues/2928,\n        // combining the next two lines into one assignment causes a spurious\n        // type error.\n        /** @private */\n        class TemplatizedTemplateExtension extends templatizedBase {}\n        klass = templateInfo.templatizeTemplateClass =\n            TemplatizedTemplateExtension;\n      }\n      // Add template - >instances effects\n      // and host <- template effects\n      let hostProps = templateInfo.hostProps;\n      for (let prop in hostProps) {\n        klass.prototype._addPropertyEffect('_host_' + prop,\n          klass.prototype.PROPERTY_EFFECT_TYPES.PROPAGATE,\n          {fn: createForwardHostPropEffect(prop, userForwardHostProp)});\n        klass.prototype._createNotifyingProperty('_host_' + prop);\n      }\n      if (legacyWarnings && methodHost) {\n        warnOnUndeclaredProperties(templateInfo, options, methodHost);\n      }\n    }\n    // Mix any pre-bound data into __data; no need to flush this to\n    // instances since they pull from the template at instance-time\n    if (target.__dataProto) {\n      // Note, generally `__dataProto` could be chained, but it's guaranteed\n      // to not be since this is a vanilla template we just added effects to\n      Object.assign(target.__data, target.__dataProto);\n    }\n    if (isTemplate) {\n      upgradeTemplate(target, klass);\n      // Clear any pending data for performance\n      target.__dataTemp = {};\n      target.__dataPending = null;\n      target.__dataOld = null;\n      target._enableProperties();\n    } else {\n      // Swizzle the cached subclass prototype onto the custom element\n      Object.setPrototypeOf(target, klass.prototype);\n      // Check for any pre-bound instance host properties, and do the\n      // instance property delete/assign dance for those (directly into data;\n      // not need to go through accessor since they are pulled at instance time)\n      const hostProps = templateInfo.hostProps;\n      for (let prop in hostProps) {\n        prop = '_host_' + prop;\n        if (prop in target) {\n          const val = target[prop];\n          delete target[prop];\n          target.__data[prop] = val;\n        }\n      }\n    }\n  }\n}\n/* eslint-enable valid-jsdoc */\n\nfunction createForwardHostPropEffect(hostProp, userForwardHostProp) {\n  return function forwardHostProp(template, prop, props) {\n    userForwardHostProp.call(template.__templatizeOwner,\n      prop.substring('_host_'.length), props[prop]);\n  };\n}\n\nfunction addNotifyEffects(klass, template, templateInfo, options) {\n  let hostProps = templateInfo.hostProps || {};\n  for (let iprop in options.instanceProps) {\n    delete hostProps[iprop];\n    let userNotifyInstanceProp = options.notifyInstanceProp;\n    if (userNotifyInstanceProp) {\n      klass.prototype._addPropertyEffect(iprop,\n        klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,\n        {fn: createNotifyInstancePropEffect(iprop, userNotifyInstanceProp)});\n    }\n  }\n  if (options.forwardHostProp && template.__dataHost) {\n    for (let hprop in hostProps) {\n      // As we're iterating hostProps in this function, note whether\n      // there were any, for an optimization in addPropagateEffects\n      if (!templateInfo.hasHostProps) {\n        templateInfo.hasHostProps = true;\n      }\n      klass.prototype._addPropertyEffect(hprop,\n        klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,\n        {fn: createNotifyHostPropEffect()});\n    }\n  }\n}\n\nfunction createNotifyInstancePropEffect(instProp, userNotifyInstanceProp) {\n  return function notifyInstanceProp(inst, prop, props) {\n    userNotifyInstanceProp.call(inst.__templatizeOwner,\n      inst, prop, props[prop]);\n  };\n}\n\nfunction createNotifyHostPropEffect() {\n  return function notifyHostProp(inst, prop, props) {\n    inst.__dataHost._setPendingPropertyOrPath('_host_' + prop, props[prop], true, true);\n  };\n}\n\n\n/**\n * Returns an anonymous `PropertyEffects` class bound to the\n * `<template>` provided.  Instancing the class will result in the\n * template being stamped into a document fragment stored as the instance's\n * `root` property, after which it can be appended to the DOM.\n *\n * Templates may utilize all Polymer data-binding features as well as\n * declarative event listeners.  Event listeners and inline computing\n * functions in the template will be called on the host of the template.\n *\n * The constructor returned takes a single argument dictionary of initial\n * property values to propagate into template bindings.  Additionally\n * host properties can be forwarded in, and instance properties can be\n * notified out by providing optional callbacks in the `options` dictionary.\n *\n * Valid configuration in `options` are as follows:\n *\n * - `forwardHostProp(property, value)`: Called when a property referenced\n *   in the template changed on the template's host. As this library does\n *   not retain references to templates instanced by the user, it is the\n *   templatize owner's responsibility to forward host property changes into\n *   user-stamped instances.  The `instance.forwardHostProp(property, value)`\n *    method on the generated class should be called to forward host\n *   properties into the template to prevent unnecessary property-changed\n *   notifications. Any properties referenced in the template that are not\n *   defined in `instanceProps` will be notified up to the template's host\n *   automatically.\n * - `instanceProps`: Dictionary of property names that will be added\n *   to the instance by the templatize owner.  These properties shadow any\n *   host properties, and changes within the template to these properties\n *   will result in `notifyInstanceProp` being called.\n * - `mutableData`: When `true`, the generated class will skip strict\n *   dirty-checking for objects and arrays (always consider them to be\n *   \"dirty\").\n * - `notifyInstanceProp(instance, property, value)`: Called when\n *   an instance property changes.  Users may choose to call `notifyPath`\n *   on e.g. the owner to notify the change.\n * - `parentModel`: When `true`, events handled by declarative event listeners\n *   (`on-event=\"handler\"`) will be decorated with a `model` property pointing\n *   to the template instance that stamped it.  It will also be returned\n *   from `instance.parentModel` in cases where template instance nesting\n *   causes an inner model to shadow an outer model.\n *\n * All callbacks are called bound to the `owner`. Any context\n * needed for the callbacks (such as references to `instances` stamped)\n * should be stored on the `owner` such that they can be retrieved via\n * `this`.\n *\n * When `options.forwardHostProp` is declared as an option, any properties\n * referenced in the template will be automatically forwarded from the host of\n * the `<template>` to instances, with the exception of any properties listed in\n * the `options.instanceProps` object.  `instanceProps` are assumed to be\n * managed by the owner of the instances, either passed into the constructor\n * or set after the fact.  Note, any properties passed into the constructor will\n * always be set to the instance (regardless of whether they would normally\n * be forwarded from the host).\n *\n * Note that `templatize()` can be run only once for a given `<template>`.\n * Further calls will result in an error. Also, there is a special\n * behavior if the template was duplicated through a mechanism such as\n * `<dom-repeat>` or `<test-fixture>`. In this case, all calls to\n * `templatize()` return the same class for all duplicates of a template.\n * The class returned from `templatize()` is generated only once using\n * the `options` from the first call. This means that any `options`\n * provided to subsequent calls will be ignored. Therefore, it is very\n * important not to close over any variables inside the callbacks. Also,\n * arrow functions must be avoided because they bind the outer `this`.\n * Inside the callbacks, any contextual information can be accessed\n * through `this`, which points to the `owner`.\n *\n * @param {!HTMLTemplateElement} template Template to templatize\n * @param {Polymer_PropertyEffects=} owner Owner of the template instances;\n *   any optional callbacks will be bound to this owner.\n * @param {Object=} options Options dictionary (see summary for details)\n * @return {function(new:TemplateInstanceBase, Object=)} Generated class bound\n *   to the template provided\n * @suppress {invalidCasts}\n */\nexport function templatize(template, owner, options) {\n  // Under strictTemplatePolicy, the templatized element must be owned\n  // by a (trusted) Polymer element, indicated by existence of _methodHost;\n  // e.g. for dom-if & dom-repeat in main document, _methodHost is null\n  if (strictTemplatePolicy && !findMethodHost(template)) {\n    throw new Error('strictTemplatePolicy: template owner not trusted');\n  }\n  options = /** @type {!TemplatizeOptions} */(options || {});\n  if (template.__templatizeOwner) {\n    throw new Error('A <template> can only be templatized once');\n  }\n  template.__templatizeOwner = owner;\n  const ctor = owner ? owner.constructor : TemplateInstanceBase;\n  let templateInfo = ctor._parseTemplate(template);\n  // Get memoized base class for the prototypical template, which\n  // includes property effects for binding template & forwarding\n  /**\n   * @constructor\n   * @extends {TemplateInstanceBase}\n   */\n  let baseClass = templateInfo.templatizeInstanceClass;\n  if (!baseClass) {\n    baseClass = createTemplatizerClass(template, templateInfo, options);\n    templateInfo.templatizeInstanceClass = baseClass;\n  }\n  const methodHost = findMethodHost(template);\n  // Host property forwarding must be installed onto template instance\n  addPropagateEffects(template, templateInfo, options, methodHost);\n  // Subclass base class and add reference for this specific template\n  /** @private */\n  let klass = class TemplateInstance extends baseClass {};\n  /** @override */\n  klass.prototype._methodHost = methodHost;\n  /** @override */\n  klass.prototype.__dataHost = /** @type {!DataTemplate} */ (template);\n  /** @override */\n  klass.prototype.__templatizeOwner = /** @type {!Object} */ (owner);\n  /** @override */\n  klass.prototype.__hostProps = templateInfo.hostProps;\n  klass = /** @type {function(new:TemplateInstanceBase)} */(klass); //eslint-disable-line no-self-assign\n  return klass;\n}\n\nfunction warnOnUndeclaredProperties(templateInfo, options, methodHost) {\n  const declaredProps = methodHost.constructor._properties;\n  const {propertyEffects} = templateInfo;\n  const {instanceProps} = options;\n  for (let prop in propertyEffects) {\n    // Ensure properties with template effects are declared on the outermost\n    // host (`methodHost`), unless they are instance props or static functions\n    if (!declaredProps[prop] && !(instanceProps && instanceProps[prop])) {\n      const effects = propertyEffects[prop];\n      for (let i=0; i<effects.length; i++) {\n        const {part} = effects[i].info;\n        if (!(part.signature && part.signature.static)) {\n          console.warn(`Property '${prop}' used in template but not ` +\n            `declared in 'properties'; attribute will not be observed.`);\n          break;\n        }\n      }\n    }\n  }\n}\n\n/**\n * Returns the template \"model\" associated with a given element, which\n * serves as the binding scope for the template instance the element is\n * contained in. A template model is an instance of\n * `TemplateInstanceBase`, and should be used to manipulate data\n * associated with this template instance.\n *\n * Example:\n *\n *   let model = modelForElement(el);\n *   if (model.index < 10) {\n *     model.set('item.checked', true);\n *   }\n *\n * @param {HTMLElement} template The model will be returned for\n *   elements stamped from this template (accepts either an HTMLTemplateElement)\n *   or a `<dom-if>`/`<dom-repeat>` element when using `removeNestedTemplates`\n *   optimization.\n * @param {Node=} node Node for which to return a template model.\n * @return {TemplateInstanceBase} Template instance representing the\n *   binding scope for the element\n */\nexport function modelForElement(template, node) {\n  let model;\n  while (node) {\n    // An element with a __templatizeInstance marks the top boundary\n    // of a scope; walk up until we find one, and then ensure that\n    // its __dataHost matches `this`, meaning this dom-repeat stamped it\n    if ((model = node.__dataHost ? node : node.__templatizeInstance)) {\n      // Found an element stamped by another template; keep walking up\n      // from its __dataHost\n      if (model.__dataHost != template) {\n        node = model.__dataHost;\n      } else {\n        return model;\n      }\n    } else {\n      // Still in a template scope, keep going up until\n      // a __templatizeInstance is found\n      node = wrap(node).parentNode;\n    }\n  }\n  return null;\n}\n\nexport { TemplateInstanceBase };\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport { TemplateInstanceBase, templatize, modelForElement } from '../utils/templatize.js'; // eslint-disable-line no-unused-vars\n\n/**\n * @typedef {{\n *   _templatizerTemplate: HTMLTemplateElement,\n *   _parentModel: boolean,\n *   _instanceProps: Object,\n *   _forwardHostPropV2: Function,\n *   _notifyInstancePropV2: Function,\n *   ctor: function(new:TemplateInstanceBase, Object=)\n * }}\n */\nlet TemplatizerUser; // eslint-disable-line\n\n/**\n * The `Templatizer` behavior adds methods to generate instances of\n * templates that are each managed by an anonymous `PropertyEffects`\n * instance where data-bindings in the stamped template content are bound to\n * accessors on itself.\n *\n * This behavior is provided in Polymer 2.x-3.x as a hybrid-element convenience\n * only.  For non-hybrid usage, the `Templatize` library\n * should be used instead.\n *\n * Example:\n *\n *     import {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\n *     // Get a template from somewhere, e.g. light DOM\n *     let template = this.querySelector('template');\n *     // Prepare the template\n *     this.templatize(template);\n *     // Instance the template with an initial data model\n *     let instance = this.stamp({myProp: 'initial'});\n *     // Insert the instance's DOM somewhere, e.g. light DOM\n *     dom(this).appendChild(instance.root);\n *     // Changing a property on the instance will propagate to bindings\n *     // in the template\n *     instance.myProp = 'new value';\n *\n * Users of `Templatizer` may need to implement the following abstract\n * API's to determine how properties and paths from the host should be\n * forwarded into to instances:\n *\n *     _forwardHostPropV2: function(prop, value)\n *\n * Likewise, users may implement these additional abstract API's to determine\n * how instance-specific properties that change on the instance should be\n * forwarded out to the host, if necessary.\n *\n *     _notifyInstancePropV2: function(inst, prop, value)\n *\n * In order to determine which properties are instance-specific and require\n * custom notification via `_notifyInstanceProp`, define an `_instanceProps`\n * object containing keys for each instance prop, for example:\n *\n *     _instanceProps: {\n *       item: true,\n *       index: true\n *     }\n *\n * Any properties used in the template that are not defined in _instanceProp\n * will be forwarded out to the Templatize `owner` automatically.\n *\n * Users may also implement the following abstract function to show or\n * hide any DOM generated using `stamp`:\n *\n *     _showHideChildren: function(shouldHide)\n *\n * Note that some callbacks are suffixed with `V2` in the Polymer 2.x behavior\n * as the implementations will need to differ from the callbacks required\n * by the 1.x Templatizer API due to changes in the `TemplateInstance` API\n * between versions 1.x and 2.x.\n *\n * @polymerBehavior\n */\nexport const Templatizer = {\n\n  /**\n   * Generates an anonymous `TemplateInstance` class (stored as `this.ctor`)\n   * for the provided template.  This method should be called once per\n   * template to prepare an element for stamping the template, followed\n   * by `stamp` to create new instances of the template.\n   *\n   * @param {!HTMLTemplateElement} template Template to prepare\n   * @param {boolean=} mutableData When `true`, the generated class will skip\n   *   strict dirty-checking for objects and arrays (always consider them to\n   *   be \"dirty\"). Defaults to false.\n   * @return {void}\n   * @this {TemplatizerUser}\n   */\n  templatize(template, mutableData) {\n    this._templatizerTemplate = template;\n    this.ctor =\n        templatize(template, /** @type {!Polymer_PropertyEffects} */ (this), {\n          mutableData: Boolean(mutableData),\n          parentModel: this._parentModel,\n          instanceProps: this._instanceProps,\n          forwardHostProp: this._forwardHostPropV2,\n          notifyInstanceProp: this._notifyInstancePropV2\n        });\n  },\n\n  /**\n   * Creates an instance of the template prepared by `templatize`.  The object\n   * returned is an instance of the anonymous class generated by `templatize`\n   * whose `root` property is a document fragment containing newly cloned\n   * template content, and which has property accessors corresponding to\n   * properties referenced in template bindings.\n   *\n   * @param {Object=} model Object containing initial property values to\n   *   populate into the template bindings.\n   * @return {TemplateInstanceBase} Returns the created instance of\n   * the template prepared by `templatize`.\n   * @this {TemplatizerUser}\n   */\n  stamp(model) {\n    return new this.ctor(model);\n  },\n\n  /**\n   * Returns the template \"model\" (`TemplateInstance`) associated with\n   * a given element, which serves as the binding scope for the template\n   * instance the element is contained in.  A template model should be used\n   * to manipulate data associated with this template instance.\n   *\n   * @param {HTMLElement} el Element for which to return a template model.\n   * @return {TemplateInstanceBase} Model representing the binding scope for\n   *   the element.\n   * @this {TemplatizerUser}\n   */\n  modelForElement(el) {\n    return modelForElement(this._templatizerTemplate, el);\n  }\n};\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * @fileoverview\n *\n * Module to hide `<dom-bind>`, `<dom-if>`, and `<dom-repeat>` elements\n * optimally in ShadyDOM\n */\n\nimport {legacyOptimizations, useShadow} from './settings.js';\n\nlet elementsHidden = false;\n\n/**\n * @return {boolean} True if elements will be hidden globally\n */\nexport function hideElementsGlobally() {\n  if (legacyOptimizations && !useShadow) {\n    if (!elementsHidden) {\n      elementsHidden = true;\n      const style = document.createElement('style');\n      style.textContent = 'dom-bind,dom-if,dom-repeat{display:none;}';\n      document.head.appendChild(style);\n    }\n    return true;\n  }\n  return false;\n}", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { PropertyEffects } from '../mixins/property-effects.js';\nimport { OptionalMutableData } from '../mixins/mutable-data.js';\nimport { GestureEventListeners } from '../mixins/gesture-event-listeners.js';\nimport { strictTemplatePolicy } from '../utils/settings.js';\nimport { wrap } from '../utils/wrap.js';\nimport { hideElementsGlobally } from '../utils/hide-template-controls.js';\n\n/**\n * @constructor\n * @extends {HTMLElement}\n * @implements {Polymer_PropertyEffects}\n * @implements {Polymer_OptionalMutableData}\n * @implements {Polymer_GestureEventListeners}\n * @private\n */\nconst domBindBase =\n  GestureEventListeners(\n    OptionalMutableData(\n      PropertyEffects(HTMLElement)));\n\n/**\n * Custom element to allow using Polymer's template features (data binding,\n * declarative event listeners, etc.) in the main document without defining\n * a new custom element.\n *\n * `<template>` tags utilizing bindings may be wrapped with the `<dom-bind>`\n * element, which will immediately stamp the wrapped template into the main\n * document and bind elements to the `dom-bind` element itself as the\n * binding scope.\n *\n * @polymer\n * @customElement\n * @appliesMixin PropertyEffects\n * @appliesMixin OptionalMutableData\n * @appliesMixin GestureEventListeners\n * @extends {domBindBase}\n * @summary Custom element to allow using Polymer's template features (data\n *   binding, declarative event listeners, etc.) in the main document.\n */\nexport class DomBind extends domBindBase {\n\n  static get observedAttributes() { return ['mutable-data']; }\n\n  constructor() {\n    super();\n    if (strictTemplatePolicy) {\n      throw new Error(`strictTemplatePolicy: dom-bind not allowed`);\n    }\n    this.root = null;\n    this.$ = null;\n    this.__children = null;\n  }\n\n  /* eslint-disable no-unused-vars */\n  /**\n   * @override\n   * @param {string} name Name of attribute that changed\n   * @param {?string} old Old attribute value\n   * @param {?string} value New attribute value\n   * @param {?string} namespace Attribute namespace.\n   * @return {void}\n   */\n  attributeChangedCallback(name, old, value, namespace) {\n    // assumes only one observed attribute\n    this.mutableData = true;\n  }\n\n  /**\n   * @override\n   * @return {void}\n   */\n  connectedCallback() {\n    if (!hideElementsGlobally()) {\n      this.style.display = 'none';\n    }\n    this.render();\n  }\n\n  /**\n   * @override\n   * @return {void}\n   */\n  disconnectedCallback() {\n    this.__removeChildren();\n  }\n\n  __insertChildren() {\n    wrap(wrap(this).parentNode).insertBefore(this.root, this);\n  }\n\n  __removeChildren() {\n    if (this.__children) {\n      for (let i=0; i<this.__children.length; i++) {\n        this.root.appendChild(this.__children[i]);\n      }\n    }\n  }\n\n  /**\n   * Forces the element to render its content. This is typically only\n   * necessary to call if HTMLImports with the async attribute are used.\n   * @return {void}\n   */\n  render() {\n    let template;\n    if (!this.__children) {\n      template = /** @type {?HTMLTemplateElement} */(template || this.querySelector('template'));\n      if (!template) {\n        // Wait until childList changes and template should be there by then\n        let observer = new MutationObserver(() => {\n          template = /** @type {HTMLTemplateElement} */(this.querySelector('template'));\n          if (template) {\n            observer.disconnect();\n            this.render();\n          } else {\n            throw new Error('dom-bind requires a <template> child');\n          }\n        });\n        observer.observe(this, {childList: true});\n        return;\n      }\n      this.root = this._stampTemplate(\n        /** @type {!HTMLTemplateElement} */(template));\n      this.$ = this.root.$;\n      this.__children = [];\n      for (let n=this.root.firstChild; n; n=n.nextSibling) {\n        this.__children[this.__children.length] = n;\n      }\n      this._enableProperties();\n    }\n    this.__insertChildren();\n    this.dispatchEvent(new CustomEvent('dom-change', {\n      bubbles: true,\n      composed: true\n    }));\n  }\n\n}\n\ncustomElements.define('dom-bind', DomBind);\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport { PolymerElement } from '../../polymer-element.js';\n\nimport { TemplateInstanceBase, templatize, modelForElement } from '../utils/templatize.js'; // eslint-disable-line no-unused-vars\nimport { Debouncer } from '../utils/debounce.js';\nimport { enqueueDebouncer, flush } from '../utils/flush.js';\nimport { OptionalMutableData } from '../mixins/mutable-data.js';\nimport { matches, translate } from '../utils/path.js';\nimport { timeOut, microTask } from '../utils/async.js';\nimport { wrap } from '../utils/wrap.js';\nimport { hideElementsGlobally } from '../utils/hide-template-controls.js';\nimport { suppressTemplateNotifications } from '../utils/settings.js';\n\n/**\n * @constructor\n * @implements {Polymer_OptionalMutableData}\n * @extends {PolymerElement}\n * @private\n */\nconst domRepeatBase = OptionalMutableData(PolymerElement);\n\n/**\n * The `<dom-repeat>` element will automatically stamp and binds one instance\n * of template content to each object in a user-provided array.\n * `dom-repeat` accepts an `items` property, and one instance of the template\n * is stamped for each item into the DOM at the location of the `dom-repeat`\n * element.  The `item` property will be set on each instance's binding\n * scope, thus templates should bind to sub-properties of `item`.\n *\n * Example:\n *\n * ```html\n * <dom-module id=\"employee-list\">\n *\n *   <template>\n *\n *     <div> Employee list: </div>\n *     <dom-repeat items=\"{{employees}}\">\n *       <template>\n *         <div>First name: <span>{{item.first}}</span></div>\n *         <div>Last name: <span>{{item.last}}</span></div>\n *       </template>\n *     </dom-repeat>\n *\n *   </template>\n *\n * </dom-module>\n * ```\n *\n * With the following custom element definition:\n *\n * ```js\n * class EmployeeList extends PolymerElement {\n *   static get is() { return 'employee-list'; }\n *   static get properties() {\n *     return {\n *       employees: {\n *         value() {\n *           return [\n *             {first: 'Bob', last: 'Smith'},\n *             {first: 'Sally', last: 'Johnson'},\n *             ...\n *           ];\n *         }\n *       }\n *     };\n *   }\n * }\n * ```\n *\n * Notifications for changes to items sub-properties will be forwarded to template\n * instances, which will update via the normal structured data notification system.\n *\n * Mutations to the `items` array itself should be made using the Array\n * mutation API's on the PropertyEffects mixin (`push`, `pop`, `splice`,\n * `shift`, `unshift`), and template instances will be kept in sync with the\n * data in the array.\n *\n * Events caught by event handlers within the `dom-repeat` template will be\n * decorated with a `model` property, which represents the binding scope for\n * each template instance.  The model should be used to manipulate data on the\n * instance, for example `event.model.set('item.checked', true);`.\n *\n * Alternatively, the model for a template instance for an element stamped by\n * a `dom-repeat` can be obtained using the `modelForElement` API on the\n * `dom-repeat` that stamped it, for example\n * `this.$.domRepeat.modelForElement(event.target).set('item.checked', true);`.\n * This may be useful for manipulating instance data of event targets obtained\n * by event handlers on parents of the `dom-repeat` (event delegation).\n *\n * A view-specific filter/sort may be applied to each `dom-repeat` by supplying a\n * `filter` and/or `sort` property.  This may be a string that names a function on\n * the host, or a function may be assigned to the property directly.  The functions\n * should implemented following the standard `Array` filter/sort API.\n *\n * In order to re-run the filter or sort functions based on changes to sub-fields\n * of `items`, the `observe` property may be set as a space-separated list of\n * `item` sub-fields that should cause a re-filter/sort when modified.  If\n * the filter or sort function depends on properties not contained in `items`,\n * the user should observe changes to those properties and call `render` to update\n * the view based on the dependency change.\n *\n * For example, for an `dom-repeat` with a filter of the following:\n *\n * ```js\n * isEngineer(item) {\n *   return item.type == 'engineer' || item.manager.type == 'engineer';\n * }\n * ```\n *\n * Then the `observe` property should be configured as follows:\n *\n * ```html\n * <dom-repeat items=\"{{employees}}\" filter=\"isEngineer\" observe=\"type manager.type\">\n * ```\n *\n * @customElement\n * @polymer\n * @extends {domRepeatBase}\n * @appliesMixin OptionalMutableData\n * @summary Custom element for stamping instance of a template bound to\n *   items in an array.\n */\nexport class DomRepeat extends domRepeatBase {\n\n  // Not needed to find template; can be removed once the analyzer\n  // can find the tag name from customElements.define call\n  static get is() { return 'dom-repeat'; }\n\n  static get template() { return null; }\n\n  static get properties() {\n\n    /**\n     * Fired whenever DOM is added or removed by this template (by\n     * default, rendering occurs lazily).  To force immediate rendering, call\n     * `render`.\n     *\n     * @event dom-change\n     */\n    return {\n\n      /**\n       * An array containing items determining how many instances of the template\n       * to stamp and that that each template instance should bind to.\n       */\n      items: {\n        type: Array\n      },\n\n      /**\n       * The name of the variable to add to the binding scope for the array\n       * element associated with a given template instance.\n       */\n      as: {\n        type: String,\n        value: 'item'\n      },\n\n      /**\n       * The name of the variable to add to the binding scope with the index\n       * of the instance in the sorted and filtered list of rendered items.\n       * Note, for the index in the `this.items` array, use the value of the\n       * `itemsIndexAs` property.\n       */\n      indexAs: {\n        type: String,\n        value: 'index'\n      },\n\n      /**\n       * The name of the variable to add to the binding scope with the index\n       * of the instance in the `this.items` array. Note, for the index of\n       * this instance in the sorted and filtered list of rendered items,\n       * use the value of the `indexAs` property.\n       */\n      itemsIndexAs: {\n        type: String,\n        value: 'itemsIndex'\n      },\n\n      /**\n       * A function that should determine the sort order of the items.  This\n       * property should either be provided as a string, indicating a method\n       * name on the element's host, or else be an actual function.  The\n       * function should match the sort function passed to `Array.sort`.\n       * Using a sort function has no effect on the underlying `items` array.\n       */\n      sort: {\n        type: Function,\n        observer: '__sortChanged'\n      },\n\n      /**\n       * A function that can be used to filter items out of the view.  This\n       * property should either be provided as a string, indicating a method\n       * name on the element's host, or else be an actual function.  The\n       * function should match the sort function passed to `Array.filter`.\n       * Using a filter function has no effect on the underlying `items` array.\n       */\n      filter: {\n        type: Function,\n        observer: '__filterChanged'\n      },\n\n      /**\n       * When using a `filter` or `sort` function, the `observe` property\n       * should be set to a space-separated list of the names of item\n       * sub-fields that should trigger a re-sort or re-filter when changed.\n       * These should generally be fields of `item` that the sort or filter\n       * function depends on.\n       */\n      observe: {\n        type: String,\n        observer: '__observeChanged'\n      },\n\n      /**\n       * When using a `filter` or `sort` function, the `delay` property\n       * determines a debounce time in ms after a change to observed item\n       * properties that must pass before the filter or sort is re-run.\n       * This is useful in rate-limiting shuffling of the view when\n       * item changes may be frequent.\n       */\n      delay: Number,\n\n      /**\n       * Count of currently rendered items after `filter` (if any) has been applied.\n       * If \"chunking mode\" is enabled, `renderedItemCount` is updated each time a\n       * set of template instances is rendered.\n       *\n       */\n      renderedItemCount: {\n        type: Number,\n        notify: !suppressTemplateNotifications,\n        readOnly: true\n      },\n\n      /**\n       * When greater than zero, defines an initial count of template instances\n       * to render after setting the `items` array, before the next paint, and\n       * puts the `dom-repeat` into \"chunking mode\".  The remaining items (and\n       * any future items as a result of pushing onto the array) will be created\n       * and rendered incrementally at each animation frame thereof until all\n       * instances have been rendered.\n       */\n      initialCount: {\n        type: Number\n      },\n\n      /**\n       * When `initialCount` is used, this property defines a frame rate (in\n       * fps) to target by throttling the number of instances rendered each\n       * frame to not exceed the budget for the target frame rate.  The\n       * framerate is effectively the number of `requestAnimationFrame`s that\n       * it tries to allow to actually fire in a given second. It does this\n       * by measuring the time between `rAF`s and continuously adjusting the\n       * number of items created each `rAF` to maintain the target framerate.\n       * Setting this to a higher number allows lower latency and higher\n       * throughput for event handlers and other tasks, but results in a\n       * longer time for the remaining items to complete rendering.\n       */\n      targetFramerate: {\n        type: Number,\n        value: 20\n      },\n\n      _targetFrameTime: {\n        type: Number,\n        computed: '__computeFrameTime(targetFramerate)'\n      },\n\n      /**\n       * When the global `suppressTemplateNotifications` setting is used, setting\n       * `notifyDomChange: true` will enable firing `dom-change` events on this\n       * element.\n       */\n      notifyDomChange: {\n        type: Boolean\n      },\n\n      /**\n       * When chunking is enabled via `initialCount` and the `items` array is\n       * set to a new array, this flag controls whether the previously rendered\n       * instances are reused or not.\n       *\n       * When `true`, any previously rendered template instances are updated in\n       * place to their new item values synchronously in one shot, and then any\n       * further items (if any) are chunked out.  When `false`, the list is\n       * returned back to its `initialCount` (any instances over the initial\n       * count are discarded) and the remainder of the list is chunked back in.\n       * Set this to `true` to avoid re-creating the list and losing scroll\n       * position, although note that when changing the list to completely\n       * different data the render thread will be blocked until all existing\n       * instances are updated to their new data.\n       */\n      reuseChunkedInstances: {\n        type: Boolean\n      }\n\n    };\n\n  }\n\n  static get observers() {\n    return [ '__itemsChanged(items.*)' ];\n  }\n\n  constructor() {\n    super();\n    this.__instances = [];\n    this.__renderDebouncer = null;\n    this.__itemsIdxToInstIdx = {};\n    this.__chunkCount = null;\n    this.__renderStartTime = null;\n    this.__itemsArrayChanged = false;\n    this.__shouldMeasureChunk = false;\n    this.__shouldContinueChunking = false;\n    this.__chunkingId = 0;\n    this.__sortFn = null;\n    this.__filterFn = null;\n    this.__observePaths = null;\n    /** @type {?function(new:TemplateInstanceBase, Object=)} */\n    this.__ctor = null;\n    this.__isDetached = true;\n    this.template = null;\n    /** @type {TemplateInfo} */\n    this._templateInfo;\n  }\n\n  /**\n   * @override\n   * @return {void}\n   */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.__isDetached = true;\n    for (let i=0; i<this.__instances.length; i++) {\n      this.__detachInstance(i);\n    }\n  }\n\n  /**\n   * @override\n   * @return {void}\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    if (!hideElementsGlobally()) {\n      this.style.display = 'none';\n    }\n    // only perform attachment if the element was previously detached.\n    if (this.__isDetached) {\n      this.__isDetached = false;\n      let wrappedParent = wrap(wrap(this).parentNode);\n      for (let i=0; i<this.__instances.length; i++) {\n        this.__attachInstance(i, wrappedParent);\n      }\n    }\n  }\n\n  __ensureTemplatized() {\n    // Templatizing (generating the instance constructor) needs to wait\n    // until ready, since won't have its template content handed back to\n    // it until then\n    if (!this.__ctor) {\n      // When `removeNestedTemplates` is true, the \"template\" is the element\n      // itself, which has been given a `_templateInfo` property\n      const thisAsTemplate = /** @type {!HTMLTemplateElement} */ (\n          /** @type {!HTMLElement} */ (this));\n      let template = this.template = thisAsTemplate._templateInfo ?\n          thisAsTemplate :\n          /** @type {!HTMLTemplateElement} */ (this.querySelector('template'));\n      if (!template) {\n        // Wait until childList changes and template should be there by then\n        let observer = new MutationObserver(() => {\n          if (this.querySelector('template')) {\n            observer.disconnect();\n            this.__render();\n          } else {\n            throw new Error('dom-repeat requires a <template> child');\n          }\n        });\n        observer.observe(this, {childList: true});\n        return false;\n      }\n      // Template instance props that should be excluded from forwarding\n      let instanceProps = {};\n      instanceProps[this.as] = true;\n      instanceProps[this.indexAs] = true;\n      instanceProps[this.itemsIndexAs] = true;\n      this.__ctor = templatize(template, this, {\n        mutableData: this.mutableData,\n        parentModel: true,\n        instanceProps: instanceProps,\n        /**\n         * @this {DomRepeat}\n         * @param {string} prop Property to set\n         * @param {*} value Value to set property to\n         */\n        forwardHostProp: function(prop, value) {\n          let i$ = this.__instances;\n          for (let i=0, inst; (i<i$.length) && (inst=i$[i]); i++) {\n            inst.forwardHostProp(prop, value);\n          }\n        },\n        /**\n         * @this {DomRepeat}\n         * @param {Object} inst Instance to notify\n         * @param {string} prop Property to notify\n         * @param {*} value Value to notify\n         */\n        notifyInstanceProp: function(inst, prop, value) {\n          if (matches(this.as, prop)) {\n            let idx = inst[this.itemsIndexAs];\n            if (prop == this.as) {\n              this.items[idx] = value;\n            }\n            let path = translate(this.as, `${JSCompiler_renameProperty('items', this)}.${idx}`, prop);\n            this.notifyPath(path, value);\n          }\n        }\n      });\n    }\n    return true;\n  }\n\n  __getMethodHost() {\n    // Technically this should be the owner of the outermost template.\n    // In shadow dom, this is always getRootNode().host, but we can\n    // approximate this via cooperation with our dataHost always setting\n    // `_methodHost` as long as there were bindings (or id's) on this\n    // instance causing it to get a dataHost.\n    return this.__dataHost._methodHost || this.__dataHost;\n  }\n\n  __functionFromPropertyValue(functionOrMethodName) {\n    if (typeof functionOrMethodName === 'string') {\n      let methodName = functionOrMethodName;\n      let obj = this.__getMethodHost();\n      return function() { return obj[methodName].apply(obj, arguments); };\n    }\n\n    return functionOrMethodName;\n  }\n\n  __sortChanged(sort) {\n    this.__sortFn = this.__functionFromPropertyValue(sort);\n    if (this.items) { this.__debounceRender(this.__render); }\n  }\n\n  __filterChanged(filter) {\n    this.__filterFn = this.__functionFromPropertyValue(filter);\n    if (this.items) { this.__debounceRender(this.__render); }\n  }\n\n  __computeFrameTime(rate) {\n    return Math.ceil(1000/rate);\n  }\n\n  __observeChanged() {\n    this.__observePaths = this.observe &&\n      this.observe.replace('.*', '.').split(' ');\n  }\n\n  __handleObservedPaths(path) {\n    // Handle cases where path changes should cause a re-sort/filter\n    if (this.__sortFn || this.__filterFn) {\n      if (!path) {\n        // Always re-render if the item itself changed\n        this.__debounceRender(this.__render, this.delay);\n      } else if (this.__observePaths) {\n        // Otherwise, re-render if the path changed matches an observed path\n        let paths = this.__observePaths;\n        for (let i=0; i<paths.length; i++) {\n          if (path.indexOf(paths[i]) === 0) {\n            this.__debounceRender(this.__render, this.delay);\n          }\n        }\n      }\n    }\n  }\n\n  __itemsChanged(change) {\n    if (this.items && !Array.isArray(this.items)) {\n      console.warn('dom-repeat expected array for `items`, found', this.items);\n    }\n    // If path was to an item (e.g. 'items.3' or 'items.3.foo'), forward the\n    // path to that instance synchronously (returns false for non-item paths)\n    if (!this.__handleItemPath(change.path, change.value)) {\n      // Otherwise, the array was reset ('items') or spliced ('items.splices'),\n      // so queue a render.  Restart chunking when the items changed (for\n      // backward compatibility), unless `reuseChunkedInstances` option is set\n      if (change.path === 'items') {\n        this.__itemsArrayChanged = true;\n      }\n      this.__debounceRender(this.__render);\n    }\n  }\n\n  /**\n   * @param {function(this:DomRepeat)} fn Function to debounce.\n   * @param {number=} delay Delay in ms to debounce by.\n   */\n  __debounceRender(fn, delay = 0) {\n    this.__renderDebouncer = Debouncer.debounce(\n          this.__renderDebouncer\n        , delay > 0 ? timeOut.after(delay) : microTask\n        , fn.bind(this));\n    enqueueDebouncer(this.__renderDebouncer);\n  }\n\n  /**\n   * Forces the element to render its content. Normally rendering is\n   * asynchronous to a provoking change. This is done for efficiency so\n   * that multiple changes trigger only a single render. The render method\n   * should be called if, for example, template rendering is required to\n   * validate application state.\n   * @return {void}\n   */\n  render() {\n    // Queue this repeater, then flush all in order\n    this.__debounceRender(this.__render);\n    flush();\n  }\n\n  __render() {\n    if (!this.__ensureTemplatized()) {\n      // No template found yet\n      return;\n    }\n    let items = this.items || [];\n    // Sort and filter the items into a mapping array from instance->item\n    const isntIdxToItemsIdx = this.__sortAndFilterItems(items);\n    // If we're chunking, increase the limit if there are new instances to\n    // create and schedule the next chunk\n    const limit = this.__calculateLimit(isntIdxToItemsIdx.length);\n    // Create, update, and/or remove instances\n    this.__updateInstances(items, limit, isntIdxToItemsIdx);\n    // If we're chunking, schedule a rAF task to measure/continue chunking.     \n    // Do this before any notifying events (renderedItemCount & dom-change)\n    // since those could modify items and enqueue a new full render which will\n    // pre-empt this measurement.\n    if (this.initialCount &&\n       (this.__shouldMeasureChunk || this.__shouldContinueChunking)) {\n      cancelAnimationFrame(this.__chunkingId);\n      this.__chunkingId = requestAnimationFrame(() => this.__continueChunking());\n    }\n    // Set rendered item count\n    this._setRenderedItemCount(this.__instances.length);\n    // Notify users\n    if (!suppressTemplateNotifications || this.notifyDomChange) {\n      this.dispatchEvent(new CustomEvent('dom-change', {\n        bubbles: true,\n        composed: true\n      }));\n    }\n  }\n\n  __sortAndFilterItems(items) {\n    // Generate array maping the instance index to the items array index\n    let isntIdxToItemsIdx = new Array(items.length);\n    for (let i=0; i<items.length; i++) {\n      isntIdxToItemsIdx[i] = i;\n    }\n    // Apply user filter\n    if (this.__filterFn) {\n      isntIdxToItemsIdx = isntIdxToItemsIdx.filter((i, idx, array) =>\n        this.__filterFn(items[i], idx, array));\n    }\n    // Apply user sort\n    if (this.__sortFn) {\n      isntIdxToItemsIdx.sort((a, b) => this.__sortFn(items[a], items[b]));\n    }\n    return isntIdxToItemsIdx;\n  }\n\n  __calculateLimit(filteredItemCount) {\n    let limit = filteredItemCount;\n    const currentCount = this.__instances.length;\n    // When chunking, we increase the limit from the currently rendered count\n    // by the chunk count that is re-calculated after each rAF (with special\n    // cases for reseting the limit to initialCount after changing items)\n    if (this.initialCount) {\n      let newCount;\n      if (!this.__chunkCount ||\n        (this.__itemsArrayChanged && !this.reuseChunkedInstances)) {\n        // Limit next render to the initial count\n        limit = Math.min(filteredItemCount, this.initialCount);\n        // Subtract off any existing instances to determine the number of\n        // instances that will be created\n        newCount = Math.max(limit - currentCount, 0);\n        // Initialize the chunk size with how many items we're creating\n        this.__chunkCount = newCount || 1;\n      } else {\n        // The number of new instances that will be created is based on the\n        // existing instances, the new list size, and the chunk size\n        newCount = Math.min(\n          Math.max(filteredItemCount - currentCount, 0), \n          this.__chunkCount);\n        // Update the limit based on how many new items we're making, limited\n        // buy the total size of the list\n        limit = Math.min(currentCount + newCount, filteredItemCount);\n      }\n      // Record some state about chunking for use in `__continueChunking`\n      this.__shouldMeasureChunk = newCount === this.__chunkCount;\n      this.__shouldContinueChunking = limit < filteredItemCount;\n      this.__renderStartTime = performance.now();\n    }\n    this.__itemsArrayChanged = false;\n    return limit;\n  }\n\n  __continueChunking() {\n    // Simple auto chunkSize throttling algorithm based on feedback loop:\n    // measure actual time between frames and scale chunk count by ratio of\n    // target/actual frame time.  Only modify chunk size if our measurement\n    // reflects the cost of a creating a full chunk's worth of instances; this\n    // avoids scaling up the chunk size if we e.g. quickly re-rendered instances\n    // in place\n    if (this.__shouldMeasureChunk) {\n      const renderTime = performance.now() - this.__renderStartTime;\n      const ratio = this._targetFrameTime / renderTime;\n      this.__chunkCount = Math.round(this.__chunkCount * ratio) || 1;\n    }\n    // Enqueue a new render if we haven't reached the full size of the list\n    if (this.__shouldContinueChunking) {\n      this.__debounceRender(this.__render);\n    }\n  }\n  \n  __updateInstances(items, limit, isntIdxToItemsIdx) {\n    // items->inst map kept for item path forwarding\n    const itemsIdxToInstIdx = this.__itemsIdxToInstIdx = {};\n    let instIdx;\n    // Generate instances and assign items\n    for (instIdx=0; instIdx<limit; instIdx++) {\n      let inst = this.__instances[instIdx];\n      let itemIdx = isntIdxToItemsIdx[instIdx];\n      let item = items[itemIdx];\n      itemsIdxToInstIdx[itemIdx] = instIdx;\n      if (inst) {\n        inst._setPendingProperty(this.as, item);\n        inst._setPendingProperty(this.indexAs, instIdx);\n        inst._setPendingProperty(this.itemsIndexAs, itemIdx);\n        inst._flushProperties();\n      } else {\n        this.__insertInstance(item, instIdx, itemIdx);\n      }\n    }\n    // Remove any extra instances from previous state\n    for (let i=this.__instances.length-1; i>=instIdx; i--) {\n      this.__detachAndRemoveInstance(i);\n    }\n  }\n\n  __detachInstance(idx) {\n    let inst = this.__instances[idx];\n    const wrappedRoot = wrap(inst.root);\n    for (let i=0; i<inst.children.length; i++) {\n      let el = inst.children[i];\n      wrappedRoot.appendChild(el);\n    }\n    return inst;\n  }\n\n  __attachInstance(idx, parent) {\n    let inst = this.__instances[idx];\n    // Note, this is pre-wrapped as an optimization\n    parent.insertBefore(inst.root, this);\n  }\n\n  __detachAndRemoveInstance(idx) {\n    this.__detachInstance(idx);\n    this.__instances.splice(idx, 1);\n  }\n\n  __stampInstance(item, instIdx, itemIdx) {\n    let model = {};\n    model[this.as] = item;\n    model[this.indexAs] = instIdx;\n    model[this.itemsIndexAs] = itemIdx;\n    return new this.__ctor(model);\n  }\n\n  __insertInstance(item, instIdx, itemIdx) {\n    const inst = this.__stampInstance(item, instIdx, itemIdx);\n    let beforeRow = this.__instances[instIdx + 1];\n    let beforeNode = beforeRow ? beforeRow.children[0] : this;\n    wrap(wrap(this).parentNode).insertBefore(inst.root, beforeNode);\n    this.__instances[instIdx] = inst;\n    return inst;\n  }\n\n  // Implements extension point from Templatize mixin\n  /**\n   * Shows or hides the template instance top level child elements. For\n   * text nodes, `textContent` is removed while \"hidden\" and replaced when\n   * \"shown.\"\n   * @param {boolean} hidden Set to true to hide the children;\n   * set to false to show them.\n   * @return {void}\n   * @protected\n   */\n  _showHideChildren(hidden) {\n    for (let i=0; i<this.__instances.length; i++) {\n      this.__instances[i]._showHideChildren(hidden);\n    }\n  }\n\n  // Called as a side effect of a host items.<key>.<path> path change,\n  // responsible for notifying item.<path> changes to inst for key\n  __handleItemPath(path, value) {\n    let itemsPath = path.slice(6); // 'items.'.length == 6\n    let dot = itemsPath.indexOf('.');\n    let itemsIdx = dot < 0 ? itemsPath : itemsPath.substring(0, dot);\n    // If path was index into array...\n    if (itemsIdx == parseInt(itemsIdx, 10)) {\n      let itemSubPath = dot < 0 ? '' : itemsPath.substring(dot+1);\n      // If the path is observed, it will trigger a full refresh\n      this.__handleObservedPaths(itemSubPath);\n      // Note, even if a rull refresh is triggered, always do the path\n      // notification because unless mutableData is used for dom-repeat\n      // and all elements in the instance subtree, a full refresh may\n      // not trigger the proper update.\n      let instIdx = this.__itemsIdxToInstIdx[itemsIdx];\n      let inst = this.__instances[instIdx];\n      if (inst) {\n        let itemPath = this.as + (itemSubPath ? '.' + itemSubPath : '');\n        // This is effectively `notifyPath`, but avoids some of the overhead\n        // of the public API\n        inst._setPendingPropertyOrPath(itemPath, value, false, true);\n        inst._flushProperties();\n      }\n      return true;\n    }\n  }\n\n  /**\n   * Returns the item associated with a given element stamped by\n   * this `dom-repeat`.\n   *\n   * Note, to modify sub-properties of the item,\n   * `modelForElement(el).set('item.<sub-prop>', value)`\n   * should be used.\n   *\n   * @param {!HTMLElement} el Element for which to return the item.\n   * @return {*} Item associated with the element.\n   */\n  itemForElement(el) {\n    let instance = this.modelForElement(el);\n    return instance && instance[this.as];\n  }\n\n  /**\n   * Returns the inst index for a given element stamped by this `dom-repeat`.\n   * If `sort` is provided, the index will reflect the sorted order (rather\n   * than the original array order).\n   *\n   * @param {!HTMLElement} el Element for which to return the index.\n   * @return {?number} Row index associated with the element (note this may\n   *   not correspond to the array index if a user `sort` is applied).\n   */\n  indexForElement(el) {\n    let instance = this.modelForElement(el);\n    return instance && instance[this.indexAs];\n  }\n\n  /**\n   * Returns the template \"model\" associated with a given element, which\n   * serves as the binding scope for the template instance the element is\n   * contained in. A template model\n   * should be used to manipulate data associated with this template instance.\n   *\n   * Example:\n   *\n   *   let model = modelForElement(el);\n   *   if (model.index < 10) {\n   *     model.set('item.checked', true);\n   *   }\n   *\n   * @param {!HTMLElement} el Element for which to return a template model.\n   * @return {TemplateInstanceBase} Model representing the binding scope for\n   *   the element.\n   */\n  modelForElement(el) {\n    return modelForElement(this.template, el);\n  }\n\n}\n\ncustomElements.define(DomRepeat.is, DomRepeat);\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport { PolymerElement } from '../../polymer-element.js';\n\nimport { Debouncer } from '../utils/debounce.js';\nimport { enqueueDebouncer, flush } from '../utils/flush.js';\nimport { microTask } from '../utils/async.js';\nimport { root } from '../utils/path.js';\nimport { wrap } from '../utils/wrap.js';\nimport { hideElementsGlobally } from '../utils/hide-template-controls.js';\nimport { fastDomIf, strictTemplatePolicy, suppressTemplateNotifications } from '../utils/settings.js';\nimport { showHideChildren, templatize } from '../utils/templatize.js';\n\n/**\n * @customElement\n * @polymer\n * @extends PolymerElement\n * @summary Base class for dom-if element; subclassed into concrete\n *   implementation.\n */\nclass DomIfBase extends PolymerElement {\n\n  // Not needed to find template; can be removed once the analyzer\n  // can find the tag name from customElements.define call\n  static get is() { return 'dom-if'; }\n\n  static get template() { return null; }\n\n  static get properties() {\n\n    return {\n\n      /**\n       * Fired whenever DOM is added or removed/hidden by this template (by\n       * default, rendering occurs lazily).  To force immediate rendering, call\n       * `render`.\n       *\n       * @event dom-change\n       */\n\n      /**\n       * A boolean indicating whether this template should stamp.\n       */\n      if: {\n        type: Boolean,\n        observer: '__debounceRender'\n      },\n\n      /**\n       * When true, elements will be removed from DOM and discarded when `if`\n       * becomes false and re-created and added back to the DOM when `if`\n       * becomes true.  By default, stamped elements will be hidden but left\n       * in the DOM when `if` becomes false, which is generally results\n       * in better performance.\n       */\n      restamp: {\n        type: Boolean,\n        observer: '__debounceRender'\n      },\n\n      /**\n       * When the global `suppressTemplateNotifications` setting is used, setting\n       * `notifyDomChange: true` will enable firing `dom-change` events on this\n       * element.\n       */\n      notifyDomChange: {\n        type: Boolean\n      }\n    };\n\n  }\n\n  constructor() {\n    super();\n    this.__renderDebouncer = null;\n    this._lastIf = false;\n    this.__hideTemplateChildren__ = false;\n    /** @type {!HTMLTemplateElement|undefined} */\n    this.__template;\n    /** @type {!TemplateInfo|undefined} */\n    this._templateInfo;\n  }\n\n  __debounceRender() {\n    // Render is async for 2 reasons:\n    // 1. To eliminate dom creation trashing if user code thrashes `if` in the\n    //    same turn. This was more common in 1.x where a compound computed\n    //    property could result in the result changing multiple times, but is\n    //    mitigated to a large extent by batched property processing in 2.x.\n    // 2. To avoid double object propagation when a bag including values bound\n    //    to the `if` property as well as one or more hostProps could enqueue\n    //    the <dom-if> to flush before the <template>'s host property\n    //    forwarding. In that scenario creating an instance would result in\n    //    the host props being set once, and then the enqueued changes on the\n    //    template would set properties a second time, potentially causing an\n    //    object to be set to an instance more than once.  Creating the\n    //    instance async from flushing data ensures this doesn't happen. If\n    //    we wanted a sync option in the future, simply having <dom-if> flush\n    //    (or clear) its template's pending host properties before creating\n    //    the instance would also avoid the problem.\n    this.__renderDebouncer = Debouncer.debounce(\n          this.__renderDebouncer\n        , microTask\n        , () => this.__render());\n    enqueueDebouncer(this.__renderDebouncer);\n  }\n\n  /**\n   * @override\n   * @return {void}\n   */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    const parent = wrap(this).parentNode;\n    if (!parent || (parent.nodeType == Node.DOCUMENT_FRAGMENT_NODE &&\n        !wrap(parent).host)) {\n      this.__teardownInstance();\n    }\n  }\n\n  /**\n   * @override\n   * @return {void}\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    if (!hideElementsGlobally()) {\n      this.style.display = 'none';\n    }\n    if (this.if) {\n      this.__debounceRender();\n    }\n  }\n\n  /**\n   * Ensures a template has been assigned to `this.__template`.  If it has not\n   * yet been, it querySelectors for it in its children and if it does not yet\n   * exist (e.g. in parser-generated case), opens a mutation observer and\n   * waits for it to appear (returns false if it has not yet been found,\n   * otherwise true).  In the `removeNestedTemplates` case, the \"template\" will\n   * be the `dom-if` element itself.\n   *\n   * @return {boolean} True when a template has been found, false otherwise\n   */\n  __ensureTemplate() {\n    if (!this.__template) {\n      // When `removeNestedTemplates` is true, the \"template\" is the element\n      // itself, which has been given a `_templateInfo` property\n      const thisAsTemplate = /** @type {!HTMLTemplateElement} */ (\n          /** @type {!HTMLElement} */ (this));\n      let template = thisAsTemplate._templateInfo ?\n          thisAsTemplate :\n          /** @type {!HTMLTemplateElement} */\n          (wrap(thisAsTemplate).querySelector('template'));\n      if (!template) {\n        // Wait until childList changes and template should be there by then\n        let observer = new MutationObserver(() => {\n          if (wrap(this).querySelector('template')) {\n            observer.disconnect();\n            this.__render();\n          } else {\n            throw new Error('dom-if requires a <template> child');\n          }\n        });\n        observer.observe(this, {childList: true});\n        return false;\n      }\n      this.__template = template;\n    }\n    return true;\n  }\n\n  /**\n   * Ensures a an instance of the template has been created and inserted. This\n   * method may return false if the template has not yet been found or if\n   * there is no `parentNode` to insert the template into (in either case,\n   * connection or the template-finding mutation observer firing will queue\n   * another render, causing this method to be called again at a more\n   * appropriate time).\n   *\n   * Subclasses should implement the following methods called here:\n   * - `__hasInstance`\n   * - `__createAndInsertInstance`\n   * - `__getInstanceNodes`\n   *\n   * @return {boolean} True if the instance was created, false otherwise.\n   */\n  __ensureInstance() {\n    let parentNode = wrap(this).parentNode;\n    if (!this.__hasInstance()) {\n      // Guard against element being detached while render was queued\n      if (!parentNode) {\n        return false;\n      }\n      // Find the template (when false, there was no template yet)\n      if (!this.__ensureTemplate()) {\n        return false;\n      }\n      this.__createAndInsertInstance(parentNode);\n    } else {\n      // Move instance children if necessary\n      let children = this.__getInstanceNodes();\n      if (children && children.length) {\n        // Detect case where dom-if was re-attached in new position\n        let lastChild = wrap(this).previousSibling;\n        if (lastChild !== children[children.length-1]) {\n          for (let i=0, n; (i<children.length) && (n=children[i]); i++) {\n            wrap(parentNode).insertBefore(n, this);\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Forces the element to render its content. Normally rendering is\n   * asynchronous to a provoking change. This is done for efficiency so\n   * that multiple changes trigger only a single render. The render method\n   * should be called if, for example, template rendering is required to\n   * validate application state.\n   *\n   * @return {void}\n   */\n  render() {\n    flush();\n  }\n\n  /**\n   * Performs the key rendering steps:\n   * 1. Ensure a template instance has been stamped (when true)\n   * 2. Remove the template instance (when false and restamp:true)\n   * 3. Sync the hidden state of the instance nodes with the if/restamp state\n   * 4. Fires the `dom-change` event when necessary\n   *\n   * @return {void}\n   */\n  __render() {\n    if (this.if) {\n      if (!this.__ensureInstance()) {\n        // No template found yet\n        return;\n      }\n    } else if (this.restamp) {\n      this.__teardownInstance();\n    }\n    this._showHideChildren();\n    if ((!suppressTemplateNotifications || this.notifyDomChange)\n        && this.if != this._lastIf) {\n      this.dispatchEvent(new CustomEvent('dom-change', {\n        bubbles: true,\n        composed: true\n      }));\n      this._lastIf = this.if;\n    }\n  }\n\n  // Ideally these would be annotated as abstract methods in an abstract class,\n  // but closure compiler is finnicky\n  /* eslint-disable valid-jsdoc */\n  /**\n   * Abstract API to be implemented by subclass: Returns true if a template\n   * instance has been created and inserted.\n   *\n   * @protected\n   * @return {boolean} True when an instance has been created.\n   */\n  __hasInstance() { }\n\n  /**\n   * Abstract API to be implemented by subclass: Returns the child nodes stamped\n   * from a template instance.\n   *\n   * @protected\n   * @return {Array<Node>} Array of child nodes stamped from the template\n   * instance.\n   */\n  __getInstanceNodes() { }\n\n  /**\n   * Abstract API to be implemented by subclass: Creates an instance of the\n   * template and inserts it into the given parent node.\n   *\n   * @protected\n   * @param {Node} parentNode The parent node to insert the instance into\n   * @return {void}\n   */\n  __createAndInsertInstance(parentNode) { } // eslint-disable-line no-unused-vars\n\n  /**\n   * Abstract API to be implemented by subclass: Removes nodes created by an\n   * instance of a template and any associated cleanup.\n   *\n   * @protected\n   * @return {void}\n   */\n  __teardownInstance() { }\n\n  /**\n   * Abstract API to be implemented by subclass: Shows or hides any template\n   * instance childNodes based on the `if` state of the element and its\n   * `__hideTemplateChildren__` property.\n   *\n   * @protected\n   * @return {void}\n   */\n  _showHideChildren() { }\n  /* eslint-enable valid-jsdoc */\n}\n\n/**\n * The version of DomIf used when `fastDomIf` setting is in use, which is\n * optimized for first-render (but adds a tax to all subsequent property updates\n * on the host, whether they were used in a given `dom-if` or not).\n *\n * This implementation avoids use of `Templatizer`, which introduces a new scope\n * (a non-element PropertyEffects instance), which is not strictly necessary\n * since `dom-if` never introduces new properties to its scope (unlike\n * `dom-repeat`). Taking advantage of this fact, the `dom-if` reaches up to its\n * `__dataHost` and stamps the template directly from the host using the host's\n * runtime `_stampTemplate` API, which binds the property effects of the\n * template directly to the host. This both avoids the intermediary\n * `Templatizer` instance, but also avoids the need to bind host properties to\n * the `<template>` element and forward those into the template instance.\n *\n * In this version of `dom-if`, the `this.__instance` method is the\n * `DocumentFragment` returned from `_stampTemplate`, which also serves as the\n * handle for later removing it using the `_removeBoundDom` method.\n */\nclass DomIfFast extends DomIfBase {\n\n  constructor() {\n    super();\n    this.__instance = null;\n    this.__syncInfo = null;\n  }\n\n  /**\n   * Implementation of abstract API needed by DomIfBase.\n   *\n   * @override\n   * @return {boolean} True when an instance has been created.\n   */\n  __hasInstance() {\n    return Boolean(this.__instance);\n  }\n\n  /**\n   * Implementation of abstract API needed by DomIfBase.\n   *\n   * @override\n   * @return {Array<Node>} Array of child nodes stamped from the template\n   * instance.\n   */\n  __getInstanceNodes() {\n    return this.__instance.templateInfo.childNodes;\n  }\n\n  /**\n   * Implementation of abstract API needed by DomIfBase.\n   *\n   * Stamps the template by calling `_stampTemplate` on the `__dataHost` of this\n   * element and then inserts the resulting nodes into the given `parentNode`.\n   *\n   * @override\n   * @param {Node} parentNode The parent node to insert the instance into\n   * @return {void}\n   */\n  __createAndInsertInstance(parentNode) {\n    const host = this.__dataHost || this;\n    if (strictTemplatePolicy) {\n      if (!this.__dataHost) {\n        throw new Error('strictTemplatePolicy: template owner not trusted');\n      }\n    }\n    // Pre-bind and link the template into the effects system\n    const templateInfo = host._bindTemplate(\n        /** @type {!HTMLTemplateElement} */ (this.__template), true);\n    // Install runEffects hook that prevents running property effects\n    // (and any nested template effects) when the `if` is false\n    templateInfo.runEffects = (runEffects, changedProps, hasPaths) => {\n      let syncInfo = this.__syncInfo;\n      if (this.if) {\n        // Mix any props that changed while the `if` was false into `changedProps`\n        if (syncInfo) {\n          // If there were properties received while the `if` was false, it is\n          // important to sync the hidden state with the element _first_, so that\n          // new bindings to e.g. `textContent` do not get stomped on by\n          // pre-hidden values if `_showHideChildren` were to be called later at\n          // the next render. Clearing `__invalidProps` here ensures\n          // `_showHideChildren`'s call to `__syncHostProperties` no-ops, so\n          // that we don't call `runEffects` more often than necessary.\n          this.__syncInfo = null;\n          this._showHideChildren();\n          changedProps = Object.assign(syncInfo.changedProps, changedProps);\n        }\n        runEffects(changedProps, hasPaths);\n      } else {\n        // Accumulate any values changed while `if` was false, along with the\n        // runEffects method to sync them, so that we can replay them once `if`\n        // becomes true\n        if (this.__instance) {\n          if (!syncInfo) {\n            syncInfo = this.__syncInfo = { runEffects, changedProps: {} };\n          }\n          if (hasPaths) {\n            // Store root object of any paths; this will ensure direct bindings\n            // like [[obj.foo]] bindings run after a `set('obj.foo', v)`, but\n            // note that path notifications like `set('obj.foo.bar', v)` will\n            // not propagate. Since batched path notifications are not\n            // supported, we cannot simply accumulate path notifications. This\n            // is equivalent to the non-fastDomIf case, which stores root(p) in\n            // __invalidProps.\n            for (const p in changedProps) {\n              const rootProp = root(p);\n              syncInfo.changedProps[rootProp] = this.__dataHost[rootProp];\n            }\n          } else {\n            Object.assign(syncInfo.changedProps, changedProps);\n          }\n        }\n      }\n    };\n    // Stamp the template, and set its DocumentFragment to the \"instance\"\n    this.__instance = host._stampTemplate(\n        /** @type {!HTMLTemplateElement} */ (this.__template), templateInfo);\n    wrap(parentNode).insertBefore(this.__instance, this);\n  }\n\n  /**\n   * Run effects for any properties that changed while the `if` was false.\n   *\n   * @return {void}\n   */\n  __syncHostProperties() {\n    const syncInfo = this.__syncInfo;\n    if (syncInfo) {\n      this.__syncInfo = null;\n      syncInfo.runEffects(syncInfo.changedProps, false);\n    }\n  }\n\n  /**\n   * Implementation of abstract API needed by DomIfBase.\n   *\n   * Remove the instance and any nodes it created.  Uses the `__dataHost`'s\n   * runtime `_removeBoundDom` method.\n   *\n   * @override\n   * @return {void}\n   */\n  __teardownInstance() {\n    const host = this.__dataHost || this;\n    if (this.__instance) {\n      host._removeBoundDom(this.__instance);\n      this.__instance = null;\n      this.__syncInfo = null;\n    }\n  }\n\n  /**\n   * Implementation of abstract API needed by DomIfBase.\n   *\n   * Shows or hides the template instance top level child nodes. For\n   * text nodes, `textContent` is removed while \"hidden\" and replaced when\n   * \"shown.\"\n   *\n   * @override\n   * @return {void}\n   * @protected\n   * @suppress {visibility}\n   */\n  _showHideChildren() {\n    const hidden = this.__hideTemplateChildren__ || !this.if;\n    if (this.__instance && Boolean(this.__instance.__hidden) !== hidden) {\n      this.__instance.__hidden = hidden;\n      showHideChildren(hidden, this.__instance.templateInfo.childNodes);\n    }\n    if (!hidden) {\n      this.__syncHostProperties();\n    }\n  }\n}\n\n/**\n * The \"legacy\" implementation of `dom-if`, implemented using `Templatizer`.\n *\n * In this version, `this.__instance` is the `TemplateInstance` returned\n * from the templatized constructor.\n */\nclass DomIfLegacy extends DomIfBase {\n\n  constructor() {\n    super();\n    this.__ctor = null;\n    this.__instance = null;\n    this.__invalidProps = null;\n  }\n\n  /**\n   * Implementation of abstract API needed by DomIfBase.\n   *\n   * @override\n   * @return {boolean} True when an instance has been created.\n   */\n  __hasInstance() {\n    return Boolean(this.__instance);\n  }\n\n  /**\n   * Implementation of abstract API needed by DomIfBase.\n   *\n   * @override\n   * @return {Array<Node>} Array of child nodes stamped from the template\n   * instance.\n   */\n  __getInstanceNodes() {\n    return this.__instance.children;\n  }\n\n  /**\n   * Implementation of abstract API needed by DomIfBase.\n   *\n   * Stamps the template by creating a new instance of the templatized\n   * constructor (which is created lazily if it does not yet exist), and then\n   * inserts its resulting `root` doc fragment into the given `parentNode`.\n   *\n   * @override\n   * @param {Node} parentNode The parent node to insert the instance into\n   * @return {void}\n   */\n  __createAndInsertInstance(parentNode) {\n    // Ensure we have an instance constructor\n    if (!this.__ctor) {\n      this.__ctor = templatize(\n          /** @type {!HTMLTemplateElement} */ (this.__template), this, {\n            // dom-if templatizer instances require `mutable: true`, as\n            // `__syncHostProperties` relies on that behavior to sync objects\n            mutableData: true,\n            /**\n             * @param {string} prop Property to forward\n             * @param {*} value Value of property\n             * @this {DomIfLegacy}\n             */\n            forwardHostProp: function(prop, value) {\n              if (this.__instance) {\n                if (this.if) {\n                  this.__instance.forwardHostProp(prop, value);\n                } else {\n                  // If we have an instance but are squelching host property\n                  // forwarding due to if being false, note the invalidated\n                  // properties so `__syncHostProperties` can sync them the next\n                  // time `if` becomes true\n                  this.__invalidProps =\n                      this.__invalidProps || Object.create(null);\n                  this.__invalidProps[root(prop)] = true;\n                }\n              }\n            }\n          });\n    }\n    // Create and insert the instance\n    this.__instance = new this.__ctor();\n    wrap(parentNode).insertBefore(this.__instance.root, this);\n  }\n\n  /**\n   * Implementation of abstract API needed by DomIfBase.\n   *\n   * Removes the instance and any nodes it created.\n   *\n   * @override\n   * @return {void}\n   */\n  __teardownInstance() {\n    if (this.__instance) {\n      let c$ = this.__instance.children;\n      if (c$ && c$.length) {\n        // use first child parent, for case when dom-if may have been detached\n        let parent = wrap(c$[0]).parentNode;\n        // Instance children may be disconnected from parents when dom-if\n        // detaches if a tree was innerHTML'ed\n        if (parent) {\n          parent = wrap(parent);\n          for (let i=0, n; (i<c$.length) && (n=c$[i]); i++) {\n            parent.removeChild(n);\n          }\n        }\n      }\n      this.__invalidProps = null;\n      this.__instance = null;\n    }\n  }\n\n  /**\n   * Forwards any properties that changed while the `if` was false into the\n   * template instance and flushes it.\n   *\n   * @return {void}\n   */\n  __syncHostProperties() {\n    let props = this.__invalidProps;\n    if (props) {\n      this.__invalidProps = null;\n      for (let prop in props) {\n        this.__instance._setPendingProperty(prop, this.__dataHost[prop]);\n      }\n      this.__instance._flushProperties();\n    }\n  }\n\n  /**\n   * Implementation of abstract API needed by DomIfBase.\n   *\n   * Shows or hides the template instance top level child elements. For\n   * text nodes, `textContent` is removed while \"hidden\" and replaced when\n   * \"shown.\"\n   *\n   * @override\n   * @protected\n   * @return {void}\n   * @suppress {visibility}\n   */\n  _showHideChildren() {\n    const hidden = this.__hideTemplateChildren__ || !this.if;\n    if (this.__instance && Boolean(this.__instance.__hidden) !== hidden) {\n      this.__instance.__hidden = hidden;\n      this.__instance._showHideChildren(hidden);\n    }\n    if (!hidden) {\n      this.__syncHostProperties();\n    }\n  }\n}\n\n/**\n * The `<dom-if>` element will stamp a light-dom `<template>` child when\n * the `if` property becomes truthy, and the template can use Polymer\n * data-binding and declarative event features when used in the context of\n * a Polymer element's template.\n *\n * When `if` becomes falsy, the stamped content is hidden but not\n * removed from dom. When `if` subsequently becomes truthy again, the content\n * is simply re-shown. This approach is used due to its favorable performance\n * characteristics: the expense of creating template content is paid only\n * once and lazily.\n *\n * Set the `restamp` property to true to force the stamped content to be\n * created / destroyed when the `if` condition changes.\n *\n * @customElement\n * @polymer\n * @extends DomIfBase\n * @constructor\n * @summary Custom element that conditionally stamps and hides or removes\n *   template content based on a boolean flag.\n */\nexport const DomIf = fastDomIf ? DomIfFast : DomIfLegacy;\n\ncustomElements.define(DomIf.is, DomIf);\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport { PolymerElement } from '../../polymer-element.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { calculateSplices } from '../utils/array-splice.js';\nimport { ElementMixin } from '../mixins/element-mixin.js';\n\n/**\n * Element mixin for recording dynamic associations between item paths in a\n * master `items` array and a `selected` array such that path changes to the\n * master array (at the host) element or elsewhere via data-binding) are\n * correctly propagated to items in the selected array and vice-versa.\n *\n * The `items` property accepts an array of user data, and via the\n * `select(item)` and `deselect(item)` API, updates the `selected` property\n * which may be bound to other parts of the application, and any changes to\n * sub-fields of `selected` item(s) will be kept in sync with items in the\n * `items` array.  When `multi` is false, `selected` is a property\n * representing the last selected item.  When `multi` is true, `selected`\n * is an array of multiply selected items.\n *\n * @polymer\n * @mixinFunction\n * @appliesMixin ElementMixin\n * @summary Element mixin for recording dynamic associations between item paths in a\n * master `items` array and a `selected` array\n */\nlet ArraySelectorMixin = dedupingMixin(superClass => {\n\n  /**\n   * @constructor\n   * @implements {Polymer_ElementMixin}\n   * @private\n   */\n  let elementBase = ElementMixin(superClass);\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_ArraySelectorMixin}\n   * @unrestricted\n   */\n  class ArraySelectorMixin extends elementBase {\n\n    static get properties() {\n      return {\n\n        /**\n         * An array containing items from which selection will be made.\n         */\n        items: {\n          type: Array,\n        },\n\n        /**\n         * When `true`, multiple items may be selected at once (in this case,\n         * `selected` is an array of currently selected items).  When `false`,\n         * only one item may be selected at a time.\n         */\n        multi: {\n          type: Boolean,\n          value: false,\n        },\n\n        /**\n         * When `multi` is true, this is an array that contains any selected.\n         * When `multi` is false, this is the currently selected item, or `null`\n         * if no item is selected.\n         * @type {?Object|?Array<!Object>}\n         */\n        selected: {type: Object, notify: true},\n\n        /**\n         * When `multi` is false, this is the currently selected item, or `null`\n         * if no item is selected.\n         * @type {?Object}\n         */\n        selectedItem: {type: Object, notify: true},\n\n        /**\n         * When `true`, calling `select` on an item that is already selected\n         * will deselect the item.\n         */\n        toggle: {type: Boolean, value: false}\n\n      };\n    }\n\n    static get observers() {\n      return ['__updateSelection(multi, items.*)'];\n    }\n\n    constructor() {\n      super();\n      this.__lastItems = null;\n      this.__lastMulti = null;\n      this.__selectedMap = null;\n    }\n\n    __updateSelection(multi, itemsInfo) {\n      let path = itemsInfo.path;\n      if (path == JSCompiler_renameProperty('items', this)) {\n        // Case 1 - items array changed, so diff against previous array and\n        // deselect any removed items and adjust selected indices\n        let newItems = itemsInfo.base || [];\n        let lastItems = this.__lastItems;\n        let lastMulti = this.__lastMulti;\n        if (multi !== lastMulti) {\n          this.clearSelection();\n        }\n        if (lastItems) {\n          let splices = calculateSplices(newItems, lastItems);\n          this.__applySplices(splices);\n        }\n        this.__lastItems = newItems;\n        this.__lastMulti = multi;\n      } else if (itemsInfo.path == `${JSCompiler_renameProperty('items', this)}.splices`) {\n        // Case 2 - got specific splice information describing the array mutation:\n        // deselect any removed items and adjust selected indices\n        this.__applySplices(itemsInfo.value.indexSplices);\n      } else {\n        // Case 3 - an array element was changed, so deselect the previous\n        // item for that index if it was previously selected\n        let part = path.slice(`${JSCompiler_renameProperty('items', this)}.`.length);\n        let idx = parseInt(part, 10);\n        if ((part.indexOf('.') < 0) && part == idx) {\n          this.__deselectChangedIdx(idx);\n        }\n      }\n    }\n\n    __applySplices(splices) {\n      let selected = this.__selectedMap;\n      // Adjust selected indices and mark removals\n      for (let i=0; i<splices.length; i++) {\n        let s = splices[i];\n        selected.forEach((idx, item) => {\n          if (idx < s.index) {\n            // no change\n          } else if (idx >= s.index + s.removed.length) {\n            // adjust index\n            selected.set(item, idx + s.addedCount - s.removed.length);\n          } else {\n            // remove index\n            selected.set(item, -1);\n          }\n        });\n        for (let j=0; j<s.addedCount; j++) {\n          let idx = s.index + j;\n          if (selected.has(this.items[idx])) {\n            selected.set(this.items[idx], idx);\n          }\n        }\n      }\n      // Update linked paths\n      this.__updateLinks();\n      // Remove selected items that were removed from the items array\n      let sidx = 0;\n      selected.forEach((idx, item) => {\n        if (idx < 0) {\n          if (this.multi) {\n            this.splice(JSCompiler_renameProperty('selected', this), sidx, 1);\n          } else {\n            this.selected = this.selectedItem = null;\n          }\n          selected.delete(item);\n        } else {\n          sidx++;\n        }\n      });\n    }\n\n    __updateLinks() {\n      this.__dataLinkedPaths = {};\n      if (this.multi) {\n        let sidx = 0;\n        this.__selectedMap.forEach(idx => {\n          if (idx >= 0) {\n            this.linkPaths(\n                `${JSCompiler_renameProperty('items', this)}.${idx}`,\n                `${JSCompiler_renameProperty('selected', this)}.${sidx++}`);\n          }\n        });\n      } else {\n        this.__selectedMap.forEach(idx => {\n          this.linkPaths(\n              JSCompiler_renameProperty('selected', this),\n              `${JSCompiler_renameProperty('items', this)}.${idx}`);\n          this.linkPaths(\n              JSCompiler_renameProperty('selectedItem', this),\n              `${JSCompiler_renameProperty('items', this)}.${idx}`);\n        });\n      }\n    }\n\n    /**\n     * Clears the selection state.\n     * @override\n     * @return {void}\n     */\n    clearSelection() {\n      // Unbind previous selection\n      this.__dataLinkedPaths = {};\n      // The selected map stores 3 pieces of information:\n      // key: items array object\n      // value: items array index\n      // order: selected array index\n      this.__selectedMap = new Map();\n      // Initialize selection\n      this.selected = this.multi ? [] : null;\n      this.selectedItem = null;\n    }\n\n    /**\n     * Returns whether the item is currently selected.\n     *\n     * @override\n     * @param {*} item Item from `items` array to test\n     * @return {boolean} Whether the item is selected\n     */\n    isSelected(item) {\n      return this.__selectedMap.has(item);\n    }\n\n    /**\n     * Returns whether the item is currently selected.\n     *\n     * @override\n     * @param {number} idx Index from `items` array to test\n     * @return {boolean} Whether the item is selected\n     */\n    isIndexSelected(idx) {\n      return this.isSelected(this.items[idx]);\n    }\n\n    __deselectChangedIdx(idx) {\n      let sidx = this.__selectedIndexForItemIndex(idx);\n      if (sidx >= 0) {\n        let i = 0;\n        this.__selectedMap.forEach((idx, item) => {\n          if (sidx == i++) {\n            this.deselect(item);\n          }\n        });\n      }\n    }\n\n    __selectedIndexForItemIndex(idx) {\n      let selected = this.__dataLinkedPaths[`${JSCompiler_renameProperty('items', this)}.${idx}`];\n      if (selected) {\n        return parseInt(selected.slice(`${JSCompiler_renameProperty('selected', this)}.`.length), 10);\n      }\n    }\n\n    /**\n     * Deselects the given item if it is already selected.\n     *\n     * @override\n     * @param {*} item Item from `items` array to deselect\n     * @return {void}\n     */\n    deselect(item) {\n      let idx = this.__selectedMap.get(item);\n      if (idx >= 0) {\n        this.__selectedMap.delete(item);\n        let sidx;\n        if (this.multi) {\n          sidx = this.__selectedIndexForItemIndex(idx);\n        }\n        this.__updateLinks();\n        if (this.multi) {\n          this.splice(JSCompiler_renameProperty('selected', this), sidx, 1);\n        } else {\n          this.selected = this.selectedItem = null;\n        }\n      }\n    }\n\n    /**\n     * Deselects the given index if it is already selected.\n     *\n     * @override\n     * @param {number} idx Index from `items` array to deselect\n     * @return {void}\n     */\n    deselectIndex(idx) {\n      this.deselect(this.items[idx]);\n    }\n\n    /**\n     * Selects the given item.  When `toggle` is true, this will automatically\n     * deselect the item if already selected.\n     *\n     * @override\n     * @param {*} item Item from `items` array to select\n     * @return {void}\n     */\n    select(item) {\n      this.selectIndex(this.items.indexOf(item));\n    }\n\n    /**\n     * Selects the given index.  When `toggle` is true, this will automatically\n     * deselect the item if already selected.\n     *\n     * @override\n     * @param {number} idx Index from `items` array to select\n     * @return {void}\n     */\n    selectIndex(idx) {\n      let item = this.items[idx];\n      if (!this.isSelected(item)) {\n        if (!this.multi) {\n          this.__selectedMap.clear();\n        }\n        this.__selectedMap.set(item, idx);\n        this.__updateLinks();\n        if (this.multi) {\n          this.push(JSCompiler_renameProperty('selected', this), item);\n        } else {\n          this.selected = this.selectedItem = item;\n        }\n      } else if (this.toggle) {\n        this.deselectIndex(idx);\n      }\n    }\n\n  }\n\n  return ArraySelectorMixin;\n\n});\n\n// export mixin\nexport { ArraySelectorMixin };\n\n/**\n * @constructor\n * @extends {PolymerElement}\n * @implements {Polymer_ArraySelectorMixin}\n * @private\n */\nlet baseArraySelector = ArraySelectorMixin(PolymerElement);\n\n/**\n * Element implementing the `ArraySelector` mixin, which records\n * dynamic associations between item paths in a master `items` array and a\n * `selected` array such that path changes to the master array (at the host)\n * element or elsewhere via data-binding) are correctly propagated to items\n * in the selected array and vice-versa.\n *\n * The `items` property accepts an array of user data, and via the\n * `select(item)` and `deselect(item)` API, updates the `selected` property\n * which may be bound to other parts of the application, and any changes to\n * sub-fields of `selected` item(s) will be kept in sync with items in the\n * `items` array.  When `multi` is false, `selected` is a property\n * representing the last selected item.  When `multi` is true, `selected`\n * is an array of multiply selected items.\n *\n * Example:\n *\n * ```js\n * import {PolymerElement} from '@polymer/polymer';\n * import '@polymer/polymer/lib/elements/array-selector.js';\n *\n * class EmployeeList extends PolymerElement {\n *   static get _template() {\n *     return html`\n *         <div> Employee list: </div>\n *         <dom-repeat id=\"employeeList\" items=\"{{employees}}\">\n *           <template>\n *             <div>First name: <span>{{item.first}}</span></div>\n *               <div>Last name: <span>{{item.last}}</span></div>\n *               <button on-click=\"toggleSelection\">Select</button>\n *           </template>\n *         </dom-repeat>\n *\n *         <array-selector id=\"selector\"\n *                         items=\"{{employees}}\"\n *                         selected=\"{{selected}}\"\n *                         multi toggle></array-selector>\n *\n *         <div> Selected employees: </div>\n *         <dom-repeat items=\"{{selected}}\">\n *           <template>\n *             <div>First name: <span>{{item.first}}</span></div>\n *             <div>Last name: <span>{{item.last}}</span></div>\n *           </template>\n *         </dom-repeat>`;\n *   }\n *   static get is() { return 'employee-list'; }\n *   static get properties() {\n *     return {\n *       employees: {\n *         value() {\n *           return [\n *             {first: 'Bob', last: 'Smith'},\n *             {first: 'Sally', last: 'Johnson'},\n *             ...\n *           ];\n *         }\n *       }\n *     };\n *   }\n *   toggleSelection(e) {\n *     const item = this.$.employeeList.itemForElement(e.target);\n *     this.$.selector.select(item);\n *   }\n * }\n * ```\n *\n * @polymer\n * @customElement\n * @extends {baseArraySelector}\n * @appliesMixin ArraySelectorMixin\n * @summary Custom element that links paths between an input `items` array and\n *   an output `selected` item or array based on calls to its selection API.\n */\nclass ArraySelector extends baseArraySelector {\n  // Not needed to find template; can be removed once the analyzer\n  // can find the tag name from customElements.define call\n  static get is() { return 'array-selector'; }\n  static get template() { return null; }\n}\ncustomElements.define(ArraySelector.is, ArraySelector);\nexport { ArraySelector };\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport CustomStyleInterface from '../src/custom-style-interface.js';\nimport {getComputedStyleValue, updateNativeProperties} from '../src/common-utils.js';\nimport {nativeCssVariables, nativeShadow, cssBuild, disableRuntime} from '../src/style-settings.js';\n\nconst customStyleInterface = new CustomStyleInterface();\n\nif (!window.ShadyCSS) {\n  window.ShadyCSS = {\n    /**\n     * @param {!HTMLTemplateElement} template\n     * @param {string} elementName\n     * @param {string=} elementExtends\n     */\n    prepareTemplate(template, elementName, elementExtends) {}, // eslint-disable-line no-unused-vars\n\n    /**\n     * @param {!HTMLTemplateElement} template\n     * @param {string} elementName\n     */\n    prepareTemplateDom(template, elementName) {}, // eslint-disable-line no-unused-vars\n\n    /**\n     * @param {!HTMLTemplateElement} template\n     * @param {string} elementName\n     * @param {string=} elementExtends\n     */\n    prepareTemplateStyles(template, elementName, elementExtends) {}, // eslint-disable-line no-unused-vars\n\n    /**\n     * @param {Element} element\n     * @param {Object=} properties\n     */\n    styleSubtree(element, properties) {\n      customStyleInterface.processStyles();\n      updateNativeProperties(element, properties);\n    },\n\n    /**\n     * @param {Element} element\n     */\n    styleElement(element) { // eslint-disable-line no-unused-vars\n      customStyleInterface.processStyles();\n    },\n\n    /**\n     * @param {Object=} properties\n     */\n    styleDocument(properties) {\n      customStyleInterface.processStyles();\n      updateNativeProperties(document.body, properties);\n    },\n\n    /**\n     * @param {Element} element\n     * @param {string} property\n     * @return {string}\n     */\n    getComputedStyleValue(element, property) {\n      return getComputedStyleValue(element, property);\n    },\n\n    flushCustomStyles() {},\n    nativeCss: nativeCssVariables,\n    nativeShadow: nativeShadow,\n    cssBuild: cssBuild,\n    disableRuntime: disableRuntime,\n  }\n}\n\nwindow.ShadyCSS.CustomStyleInterface = customStyleInterface;", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '@webcomponents/shadycss/entrypoints/custom-style-interface.js';\n\nimport { cssFromModules } from '../utils/style-gather.js';\n\nconst attr = 'include';\n\nconst CustomStyleInterface = window.ShadyCSS.CustomStyleInterface;\n\n/**\n * Custom element for defining styles in the main document that can take\n * advantage of [shady DOM](https://github.com/webcomponents/shadycss) shims\n * for style encapsulation, custom properties, and custom mixins.\n *\n * - Document styles defined in a `<custom-style>` are shimmed to ensure they\n *   do not leak into local DOM when running on browsers without native\n *   Shadow DOM.\n * - Custom properties can be defined in a `<custom-style>`. Use the `html` selector\n *   to define custom properties that apply to all custom elements.\n * - Custom mixins can be defined in a `<custom-style>`, if you import the optional\n *   [apply shim](https://github.com/webcomponents/shadycss#about-applyshim)\n *   (`shadycss/apply-shim.html`).\n *\n * To use:\n *\n * - Import `custom-style.html`.\n * - Place a `<custom-style>` element in the main document, wrapping an inline `<style>` tag that\n *   contains the CSS rules you want to shim.\n *\n * For example:\n *\n * ```html\n * <!-- import apply shim--only required if using mixins -->\n * <link rel=\"import\" href=\"bower_components/shadycss/apply-shim.html\">\n * <!-- import custom-style element -->\n * <link rel=\"import\" href=\"bower_components/polymer/lib/elements/custom-style.html\">\n *\n * <custom-style>\n *   <style>\n *     html {\n *       --custom-color: blue;\n *       --custom-mixin: {\n *         font-weight: bold;\n *         color: red;\n *       };\n *     }\n *   </style>\n * </custom-style>\n * ```\n *\n * @customElement\n * @extends HTMLElement\n * @summary Custom element for defining styles in the main document that can\n *   take advantage of Polymer's style scoping and custom properties shims.\n */\nexport class CustomStyle extends HTMLElement {\n  constructor() {\n    super();\n    this._style = null;\n    CustomStyleInterface.addCustomStyle(this);\n  }\n  /**\n   * Returns the light-DOM `<style>` child this element wraps.  Upon first\n   * call any style modules referenced via the `include` attribute will be\n   * concatenated to this element's `<style>`.\n   *\n   * @export\n   * @return {HTMLStyleElement} This element's light-DOM `<style>`\n   */\n  getStyle() {\n    if (this._style) {\n      return this._style;\n    }\n    const style = /** @type {HTMLStyleElement} */(this.querySelector('style'));\n    if (!style) {\n      return null;\n    }\n    this._style = style;\n    const include = style.getAttribute(attr);\n    if (include) {\n      style.removeAttribute(attr);\n      /** @suppress {deprecated} */\n      style.textContent = cssFromModules(include) + style.textContent;\n    }\n    /*\n    HTML Imports styling the main document are deprecated in Chrome\n    https://crbug.com/523952\n\n    If this element is not in the main document, then it must be in an HTML Import document.\n    In that case, move the custom style to the main document.\n\n    The ordering of `<custom-style>` should stay the same as when loaded by HTML Imports, but there may be odd\n    cases of ordering w.r.t the main document styles.\n    */\n    if (this.ownerDocument !== window.document) {\n      window.document.head.appendChild(this);\n    }\n    return this._style;\n  }\n}\n\nwindow.customElements.define('custom-style', CustomStyle);\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport { MutableData } from '../mixins/mutable-data.js';\n\nlet mutablePropertyChange;\n/** @suppress {missingProperties} */\n(() => {\n  mutablePropertyChange = MutableData._mutablePropertyChange;\n})();\n\n/**\n * Legacy element behavior to skip strict dirty-checking for objects and arrays,\n * (always consider them to be \"dirty\") for use on legacy API Polymer elements.\n *\n * By default, `Polymer.PropertyEffects` performs strict dirty checking on\n * objects, which means that any deep modifications to an object or array will\n * not be propagated unless \"immutable\" data patterns are used (i.e. all object\n * references from the root to the mutation were changed).\n *\n * Polymer also provides a proprietary data mutation and path notification API\n * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient\n * mutation and notification of deep changes in an object graph to all elements\n * bound to the same object graph.\n *\n * In cases where neither immutable patterns nor the data mutation API can be\n * used, applying this mixin will cause Polymer to skip dirty checking for\n * objects and arrays (always consider them to be \"dirty\").  This allows a\n * user to make a deep modification to a bound object graph, and then either\n * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`\n * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all\n * elements that wish to be updated based on deep mutations must apply this\n * mixin or otherwise skip strict dirty checking for objects/arrays.\n * Specifically, any elements in the binding tree between the source of a\n * mutation and the consumption of it must apply this behavior or enable the\n * `Polymer.OptionalMutableDataBehavior`.\n *\n * In order to make the dirty check strategy configurable, see\n * `Polymer.OptionalMutableDataBehavior`.\n *\n * Note, the performance characteristics of propagating large object graphs\n * will be worse as opposed to using strict dirty checking with immutable\n * patterns or Polymer's path notification API.\n *\n * @polymerBehavior\n * @summary Behavior to skip strict dirty-checking for objects and\n *   arrays\n */\nexport const MutableDataBehavior = {\n\n  /**\n   * Overrides `Polymer.PropertyEffects` to provide option for skipping\n   * strict equality checking for Objects and Arrays.\n   *\n   * This method pulls the value to dirty check against from the `__dataTemp`\n   * cache (rather than the normal `__data` cache) for Objects.  Since the temp\n   * cache is cleared at the end of a turn, this implementation allows\n   * side-effects of deep object changes to be processed by re-setting the\n   * same object (using the temp cache as an in-turn backstop to prevent\n   * cycles due to 2-way notification).\n   *\n   * @param {string} property Property name\n   * @param {*} value New property value\n   * @param {*} old Previous property value\n   * @return {boolean} Whether the property should be considered a change\n   * @protected\n   * @override\n   */\n  _shouldPropertyChange(property, value, old) {\n    return mutablePropertyChange(this, property, value, old, true);\n  }\n};\n\n/**\n * Legacy element behavior to add the optional ability to skip strict\n * dirty-checking for objects and arrays (always consider them to be\n * \"dirty\") by setting a `mutable-data` attribute on an element instance.\n *\n * By default, `Polymer.PropertyEffects` performs strict dirty checking on\n * objects, which means that any deep modifications to an object or array will\n * not be propagated unless \"immutable\" data patterns are used (i.e. all object\n * references from the root to the mutation were changed).\n *\n * Polymer also provides a proprietary data mutation and path notification API\n * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient\n * mutation and notification of deep changes in an object graph to all elements\n * bound to the same object graph.\n *\n * In cases where neither immutable patterns nor the data mutation API can be\n * used, applying this mixin will allow Polymer to skip dirty checking for\n * objects and arrays (always consider them to be \"dirty\").  This allows a\n * user to make a deep modification to a bound object graph, and then either\n * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`\n * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all\n * elements that wish to be updated based on deep mutations must apply this\n * mixin or otherwise skip strict dirty checking for objects/arrays.\n * Specifically, any elements in the binding tree between the source of a\n * mutation and the consumption of it must enable this behavior or apply the\n * `Polymer.OptionalMutableDataBehavior`.\n *\n * While this behavior adds the ability to forgo Object/Array dirty checking,\n * the `mutableData` flag defaults to false and must be set on the instance.\n *\n * Note, the performance characteristics of propagating large object graphs\n * will be worse by relying on `mutableData: true` as opposed to using\n * strict dirty checking with immutable patterns or Polymer's path notification\n * API.\n *\n * @polymerBehavior\n * @summary Behavior to optionally skip strict dirty-checking for objects and\n *   arrays\n */\nexport const OptionalMutableDataBehavior = {\n\n  properties: {\n    /**\n     * Instance-level flag for configuring the dirty-checking strategy\n     * for this element.  When true, Objects and Arrays will skip dirty\n     * checking, otherwise strict equality checking will be used.\n     */\n    mutableData: Boolean\n  },\n\n  /**\n   * Overrides `Polymer.PropertyEffects` to skip strict equality checking\n   * for Objects and Arrays.\n   *\n   * Pulls the value to dirty check against from the `__dataTemp` cache\n   * (rather than the normal `__data` cache) for Objects.  Since the temp\n   * cache is cleared at the end of a turn, this implementation allows\n   * side-effects of deep object changes to be processed by re-setting the\n   * same object (using the temp cache as an in-turn backstop to prevent\n   * cycles due to 2-way notification).\n   *\n   * @param {string} property Property name\n   * @param {*} value New property value\n   * @param {*} old Previous property value\n   * @return {boolean} Whether the property should be considered a change\n   * @protected\n   * @override\n   */\n  _shouldPropertyChange(property, value, old) {\n    return mutablePropertyChange(this, property, value, old, this.mutableData);\n  }\n};\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport { LegacyElementMixin } from './lib/legacy/legacy-element-mixin.js';\nexport { Polymer } from  './lib/legacy/polymer-fn.js';\n/* template elements */\nimport './lib/legacy/templatizer-behavior.js';\nimport './lib/elements/dom-bind.js';\nimport './lib/elements/dom-repeat.js';\nimport './lib/elements/dom-if.js';\nimport './lib/elements/array-selector.js';\n/* custom-style */\nimport './lib/elements/custom-style.js';\n/* bc behaviors */\nimport './lib/legacy/mutable-data-behavior.js';\n/* import html-tag to export html */\nexport { html } from './lib/utils/html-tag.js';\n\n// bc\nexport const Base = LegacyElementMixin(HTMLElement).prototype;\n", "/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\n/**\n * Chrome uses an older version of DOM Level 3 Keyboard Events\n *\n * Most keys are labeled as text, but some are Unicode codepoints.\n * Values taken from:\n * http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/keyset.html#KeySet-Set\n */\nvar KEY_IDENTIFIER = {\n  'U+0008': 'backspace',\n  'U+0009': 'tab',\n  'U+001B': 'esc',\n  'U+0020': 'space',\n  'U+007F': 'del'\n};\n\n/**\n * Special table for KeyboardEvent.keyCode.\n * KeyboardEvent.keyIdentifier is better, and KeyBoardEvent.key is even better\n * than that.\n *\n * Values from:\n * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent.keyCode#Value_of_keyCode\n */\nvar KEY_CODE = {\n  8: 'backspace',\n  9: 'tab',\n  13: 'enter',\n  27: 'esc',\n  33: 'pageup',\n  34: 'pagedown',\n  35: 'end',\n  36: 'home',\n  32: 'space',\n  37: 'left',\n  38: 'up',\n  39: 'right',\n  40: 'down',\n  46: 'del',\n  106: '*'\n};\n\n/**\n * MODIFIER_KEYS maps the short name for modifier keys used in a key\n * combo string to the property name that references those same keys\n * in a KeyboardEvent instance.\n */\nvar MODIFIER_KEYS = {\n  'shift': 'shiftKey',\n  'ctrl': 'ctrlKey',\n  'alt': 'altKey',\n  'meta': 'metaKey'\n};\n\n/**\n * KeyboardEvent.key is mostly represented by printable character made by\n * the keyboard, with unprintable keys labeled nicely.\n *\n * However, on OS X, Alt+char can make a Unicode character that follows an\n * Apple-specific mapping. In this case, we fall back to .keyCode.\n */\nvar KEY_CHAR = /[a-z0-9*]/;\n\n/**\n * Matches a keyIdentifier string.\n */\nvar IDENT_CHAR = /U\\+/;\n\n/**\n * Matches arrow keys in Gecko 27.0+\n */\nvar ARROW_KEY = /^arrow/;\n\n/**\n * Matches space keys everywhere (notably including IE10's exceptional name\n * `spacebar`).\n */\nvar SPACE_KEY = /^space(bar)?/;\n\n/**\n * Matches ESC key.\n *\n * Value from: http://w3c.github.io/uievents-key/#key-Escape\n */\nvar ESC_KEY = /^escape$/;\n\n/**\n * Transforms the key.\n * @param {string} key The KeyBoardEvent.key\n * @param {Boolean} [noSpecialChars] Limits the transformation to\n * alpha-numeric characters.\n */\nfunction transformKey(key, noSpecialChars) {\n  var validKey = '';\n  if (key) {\n    var lKey = key.toLowerCase();\n    if (lKey === ' ' || SPACE_KEY.test(lKey)) {\n      validKey = 'space';\n    } else if (ESC_KEY.test(lKey)) {\n      validKey = 'esc';\n    } else if (lKey.length == 1) {\n      if (!noSpecialChars || KEY_CHAR.test(lKey)) {\n        validKey = lKey;\n      }\n    } else if (ARROW_KEY.test(lKey)) {\n      validKey = lKey.replace('arrow', '');\n    } else if (lKey == 'multiply') {\n      // numpad '*' can map to Multiply on IE/Windows\n      validKey = '*';\n    } else {\n      validKey = lKey;\n    }\n  }\n  return validKey;\n}\n\nfunction transformKeyIdentifier(keyIdent) {\n  var validKey = '';\n  if (keyIdent) {\n    if (keyIdent in KEY_IDENTIFIER) {\n      validKey = KEY_IDENTIFIER[keyIdent];\n    } else if (IDENT_CHAR.test(keyIdent)) {\n      keyIdent = parseInt(keyIdent.replace('U+', '0x'), 16);\n      validKey = String.fromCharCode(keyIdent).toLowerCase();\n    } else {\n      validKey = keyIdent.toLowerCase();\n    }\n  }\n  return validKey;\n}\n\nfunction transformKeyCode(keyCode) {\n  var validKey = '';\n  if (Number(keyCode)) {\n    if (keyCode >= 65 && keyCode <= 90) {\n      // ascii a-z\n      // lowercase is 32 offset from uppercase\n      validKey = String.fromCharCode(32 + keyCode);\n    } else if (keyCode >= 112 && keyCode <= 123) {\n      // function keys f1-f12\n      validKey = 'f' + (keyCode - 112 + 1);\n    } else if (keyCode >= 48 && keyCode <= 57) {\n      // top 0-9 keys\n      validKey = String(keyCode - 48);\n    } else if (keyCode >= 96 && keyCode <= 105) {\n      // num pad 0-9\n      validKey = String(keyCode - 96);\n    } else {\n      validKey = KEY_CODE[keyCode];\n    }\n  }\n  return validKey;\n}\n\n/**\n * Calculates the normalized key for a KeyboardEvent.\n * @param {KeyboardEvent} keyEvent\n * @param {Boolean} [noSpecialChars] Set to true to limit keyEvent.key\n * transformation to alpha-numeric chars. This is useful with key\n * combinations like shift + 2, which on FF for MacOS produces\n * keyEvent.key = @\n * To get 2 returned, set noSpecialChars = true\n * To get @ returned, set noSpecialChars = false\n */\nfunction normalizedKeyForEvent(keyEvent, noSpecialChars) {\n  // Fall back from .key, to .detail.key for artifical keyboard events,\n  // and then to deprecated .keyIdentifier and .keyCode.\n  if (keyEvent.key) {\n    return transformKey(keyEvent.key, noSpecialChars);\n  }\n  if (keyEvent.detail && keyEvent.detail.key) {\n    return transformKey(keyEvent.detail.key, noSpecialChars);\n  }\n  return transformKeyIdentifier(keyEvent.keyIdentifier) ||\n      transformKeyCode(keyEvent.keyCode) || '';\n}\n\nfunction keyComboMatchesEvent(keyCombo, event) {\n  // For combos with modifiers we support only alpha-numeric keys\n  var keyEvent = normalizedKeyForEvent(event, keyCombo.hasModifiers);\n  return keyEvent === keyCombo.key &&\n      (!keyCombo.hasModifiers ||\n       (!!event.shiftKey === !!keyCombo.shiftKey &&\n        !!event.ctrlKey === !!keyCombo.ctrlKey &&\n        !!event.altKey === !!keyCombo.altKey &&\n        !!event.metaKey === !!keyCombo.metaKey));\n}\n\nfunction parseKeyComboString(keyComboString) {\n  if (keyComboString.length === 1) {\n    return {combo: keyComboString, key: keyComboString, event: 'keydown'};\n  }\n  return keyComboString.split('+')\n      .reduce(function(parsedKeyCombo, keyComboPart) {\n        var eventParts = keyComboPart.split(':');\n        var keyName = eventParts[0];\n        var event = eventParts[1];\n\n        if (keyName in MODIFIER_KEYS) {\n          parsedKeyCombo[MODIFIER_KEYS[keyName]] = true;\n          parsedKeyCombo.hasModifiers = true;\n        } else {\n          parsedKeyCombo.key = keyName;\n          parsedKeyCombo.event = event || 'keydown';\n        }\n\n        return parsedKeyCombo;\n      }, {combo: keyComboString.split(':').shift()});\n}\n\nfunction parseEventString(eventString) {\n  return eventString.trim().split(' ').map(function(keyComboString) {\n    return parseKeyComboString(keyComboString);\n  });\n}\n\n/**\n * `Polymer.IronA11yKeysBehavior` provides a normalized interface for processing\n * keyboard commands that pertain to [WAI-ARIA best\n * practices](http://www.w3.org/TR/wai-aria-practices/#kbd_general_binding). The\n * element takes care of browser differences with respect to Keyboard events and\n * uses an expressive syntax to filter key presses.\n *\n * Use the `keyBindings` prototype property to express what combination of keys\n * will trigger the callback. A key binding has the format\n * `\"KEY+MODIFIER:EVENT\": \"callback\"` (`\"KEY\": \"callback\"` or\n * `\"KEY:EVENT\": \"callback\"` are valid as well). Some examples:\n *\n *      keyBindings: {\n *        'space': '_onKeydown', // same as 'space:keydown'\n *        'shift+tab': '_onKeydown',\n *        'enter:keypress': '_onKeypress',\n *        'esc:keyup': '_onKeyup'\n *      }\n *\n * The callback will receive with an event containing the following information\n * in `event.detail`:\n *\n *      _onKeydown: function(event) {\n *        console.log(event.detail.combo); // KEY+MODIFIER, e.g. \"shift+tab\"\n *        console.log(event.detail.key); // KEY only, e.g. \"tab\"\n *        console.log(event.detail.event); // EVENT, e.g. \"keydown\"\n *        console.log(event.detail.keyboardEvent); // the original KeyboardEvent\n *      }\n *\n * Use the `keyEventTarget` attribute to set up event handlers on a specific\n * node.\n *\n * See the [demo source\n * code](https://github.com/PolymerElements/iron-a11y-keys-behavior/blob/master/demo/x-key-aware.html)\n * for an example.\n *\n * @demo demo/index.html\n * @polymerBehavior\n */\nexport const IronA11yKeysBehavior = {\n  properties: {\n    /**\n     * The EventTarget that will be firing relevant KeyboardEvents. Set it to\n     * `null` to disable the listeners.\n     * @type {?EventTarget}\n     */\n    keyEventTarget: {\n      type: Object,\n      value: function() {\n        return this;\n      }\n    },\n\n    /**\n     * If true, this property will cause the implementing element to\n     * automatically stop propagation on any handled KeyboardEvents.\n     */\n    stopKeyboardEventPropagation: {type: Boolean, value: false},\n\n    _boundKeyHandlers: {\n      type: Array,\n      value: function() {\n        return [];\n      }\n    },\n\n    // We use this due to a limitation in IE10 where instances will have\n    // own properties of everything on the \"prototype\".\n    _imperativeKeyBindings: {\n      type: Object,\n      value: function() {\n        return {};\n      }\n    }\n  },\n\n  observers: ['_resetKeyEventListeners(keyEventTarget, _boundKeyHandlers)'],\n\n\n  /**\n   * To be used to express what combination of keys  will trigger the relative\n   * callback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`\n   * @type {!Object}\n   */\n  keyBindings: {},\n\n  registered: function() {\n    this._prepKeyBindings();\n  },\n\n  attached: function() {\n    this._listenKeyEventListeners();\n  },\n\n  detached: function() {\n    this._unlistenKeyEventListeners();\n  },\n\n  /**\n   * Can be used to imperatively add a key binding to the implementing\n   * element. This is the imperative equivalent of declaring a keybinding\n   * in the `keyBindings` prototype property.\n   *\n   * @param {string} eventString\n   * @param {string} handlerName\n   */\n  addOwnKeyBinding: function(eventString, handlerName) {\n    this._imperativeKeyBindings[eventString] = handlerName;\n    this._prepKeyBindings();\n    this._resetKeyEventListeners();\n  },\n\n  /**\n   * When called, will remove all imperatively-added key bindings.\n   */\n  removeOwnKeyBindings: function() {\n    this._imperativeKeyBindings = {};\n    this._prepKeyBindings();\n    this._resetKeyEventListeners();\n  },\n\n  /**\n   * Returns true if a keyboard event matches `eventString`.\n   *\n   * @param {KeyboardEvent} event\n   * @param {string} eventString\n   * @return {boolean}\n   */\n  keyboardEventMatchesKeys: function(event, eventString) {\n    var keyCombos = parseEventString(eventString);\n    for (var i = 0; i < keyCombos.length; ++i) {\n      if (keyComboMatchesEvent(keyCombos[i], event)) {\n        return true;\n      }\n    }\n    return false;\n  },\n\n  _collectKeyBindings: function() {\n    var keyBindings = this.behaviors.map(function(behavior) {\n      return behavior.keyBindings;\n    });\n\n    if (keyBindings.indexOf(this.keyBindings) === -1) {\n      keyBindings.push(this.keyBindings);\n    }\n\n    return keyBindings;\n  },\n\n  _prepKeyBindings: function() {\n    this._keyBindings = {};\n\n    this._collectKeyBindings().forEach(function(keyBindings) {\n      for (var eventString in keyBindings) {\n        this._addKeyBinding(eventString, keyBindings[eventString]);\n      }\n    }, this);\n\n    for (var eventString in this._imperativeKeyBindings) {\n      this._addKeyBinding(\n          eventString, this._imperativeKeyBindings[eventString]);\n    }\n\n    // Give precedence to combos with modifiers to be checked first.\n    for (var eventName in this._keyBindings) {\n      this._keyBindings[eventName].sort(function(kb1, kb2) {\n        var b1 = kb1[0].hasModifiers;\n        var b2 = kb2[0].hasModifiers;\n        return (b1 === b2) ? 0 : b1 ? -1 : 1;\n      })\n    }\n  },\n\n  _addKeyBinding: function(eventString, handlerName) {\n    parseEventString(eventString).forEach(function(keyCombo) {\n      this._keyBindings[keyCombo.event] =\n          this._keyBindings[keyCombo.event] || [];\n\n      this._keyBindings[keyCombo.event].push([keyCombo, handlerName]);\n    }, this);\n  },\n\n  _resetKeyEventListeners: function() {\n    this._unlistenKeyEventListeners();\n\n    if (this.isAttached) {\n      this._listenKeyEventListeners();\n    }\n  },\n\n  _listenKeyEventListeners: function() {\n    if (!this.keyEventTarget) {\n      return;\n    }\n    Object.keys(this._keyBindings).forEach(function(eventName) {\n      var keyBindings = this._keyBindings[eventName];\n      var boundKeyHandler = this._onKeyBindingEvent.bind(this, keyBindings);\n\n      this._boundKeyHandlers.push(\n          [this.keyEventTarget, eventName, boundKeyHandler]);\n\n      this.keyEventTarget.addEventListener(eventName, boundKeyHandler);\n    }, this);\n  },\n\n  _unlistenKeyEventListeners: function() {\n    var keyHandlerTuple;\n    var keyEventTarget;\n    var eventName;\n    var boundKeyHandler;\n\n    while (this._boundKeyHandlers.length) {\n      // My kingdom for block-scope binding and destructuring assignment..\n      keyHandlerTuple = this._boundKeyHandlers.pop();\n      keyEventTarget = keyHandlerTuple[0];\n      eventName = keyHandlerTuple[1];\n      boundKeyHandler = keyHandlerTuple[2];\n\n      keyEventTarget.removeEventListener(eventName, boundKeyHandler);\n    }\n  },\n\n  _onKeyBindingEvent: function(keyBindings, event) {\n    if (this.stopKeyboardEventPropagation) {\n      event.stopPropagation();\n    }\n\n    // if event has been already prevented, don't do anything\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    for (var i = 0; i < keyBindings.length; i++) {\n      var keyCombo = keyBindings[i][0];\n      var handlerName = keyBindings[i][1];\n      if (keyComboMatchesEvent(keyCombo, event)) {\n        this._triggerKeyHandler(keyCombo, handlerName, event);\n        // exit the loop if eventDefault was prevented\n        if (event.defaultPrevented) {\n          return;\n        }\n      }\n    }\n  },\n\n  _triggerKeyHandler: function(keyCombo, handlerName, keyboardEvent) {\n    var detail = Object.create(keyCombo);\n    detail.keyboardEvent = keyboardEvent;\n    var event =\n        new CustomEvent(keyCombo.event, {detail: detail, cancelable: true});\n    this[handlerName].call(this, event);\n    if (event.defaultPrevented) {\n      keyboardEvent.preventDefault();\n    }\n  }\n};\n", "/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\n/**\n  IronFormElementBehavior adds a `name`, `value` and `required` properties to\n  a custom element. It mostly exists for backcompatibility with Polymer 1.x, and\n  is probably not something you want to use.\n\n  @demo demo/index.html\n  @polymerBehavior\n */\nexport const IronFormElementBehavior = {\n\n  properties: {\n    /**\n     * The name of this element.\n     */\n    name: {type: String},\n\n    /**\n     * The value for this element.\n     * @type {*}\n     */\n    value: {notify: true, type: String},\n\n    /**\n     * Set to true to mark the input as required. If used in a form, a\n     * custom element that uses this behavior should also use\n     * IronValidatableBehavior and define a custom validation method.\n     * Otherwise, a `required` element will always be considered valid.\n     * It's also strongly recommended to provide a visual style for the element\n     * when its value is invalid.\n     */\n    required: {type: Boolean, value: false},\n  },\n\n  // Empty implementations for backcompatibility.\n  attached: function() {},\n  detached: function() {}\n};\n", "/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\n\n/**\n * @demo demo/index.html\n * @polymerBehavior\n */\nexport const IronControlState = {\n\n  properties: {\n\n    /**\n     * If true, the element currently has focus.\n     */\n    focused: {\n      type: Boolean,\n      value: false,\n      notify: true,\n      readOnly: true,\n      reflectToAttribute: true\n    },\n\n    /**\n     * If true, the user cannot interact with this element.\n     */\n    disabled: {\n      type: Boolean,\n      value: false,\n      notify: true,\n      observer: '_disabledChanged',\n      reflectToAttribute: true\n    },\n\n    /**\n     * Value of the `tabindex` attribute before `disabled` was activated.\n     * `null` means the attribute was not present.\n     * @type {?string|undefined}\n     */\n    _oldTabIndex: {type: String},\n\n    _boundFocusBlurHandler: {\n      type: Function,\n      value: function() {\n        return this._focusBlurHandler.bind(this);\n      }\n    }\n  },\n\n  observers: ['_changedControlState(focused, disabled)'],\n\n  /**\n   * @return {void}\n   */\n  ready: function() {\n    this.addEventListener('focus', this._boundFocusBlurHandler, true);\n    this.addEventListener('blur', this._boundFocusBlurHandler, true);\n  },\n\n  _focusBlurHandler: function(event) {\n    // Polymer takes care of retargeting events.\n    this._setFocused(event.type === 'focus');\n    return;\n  },\n\n  _disabledChanged: function(disabled, old) {\n    this.setAttribute('aria-disabled', disabled ? 'true' : 'false');\n    this.style.pointerEvents = disabled ? 'none' : '';\n    if (disabled) {\n      // Read the `tabindex` attribute instead of the `tabIndex` property.\n      // The property returns `-1` if there is no `tabindex` attribute.\n      // This distinction is important when restoring the value because\n      // leaving `-1` hides shadow root children from the tab order.\n      this._oldTabIndex = this.getAttribute('tabindex');\n      this._setFocused(false);\n      this.tabIndex = -1;\n      this.blur();\n    } else if (this._oldTabIndex !== undefined) {\n      if (this._oldTabIndex === null) {\n        this.removeAttribute('tabindex');\n      } else {\n        this.setAttribute('tabindex', this._oldTabIndex);\n      }\n    }\n  },\n\n  _changedControlState: function() {\n    // _controlStateChanged is abstract, follow-on behaviors may implement it\n    if (this._controlStateChanged) {\n      this._controlStateChanged();\n    }\n  }\n\n};\n", "/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport './iron-control-state.js';\n\nimport {IronA11yKeysBehavior} from '@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\n\n/**\n * @demo demo/index.html\n * @polymerBehavior IronButtonState\n */\nexport const IronButtonStateImpl = {\n\n  properties: {\n\n    /**\n     * If true, the user is currently holding down the button.\n     */\n    pressed: {\n      type: Boolean,\n      readOnly: true,\n      value: false,\n      reflectToAttribute: true,\n      observer: '_pressedChanged'\n    },\n\n    /**\n     * If true, the button toggles the active state with each tap or press\n     * of the spacebar.\n     */\n    toggles: {type: Boolean, value: false, reflectToAttribute: true},\n\n    /**\n     * If true, the button is a toggle and is currently in the active state.\n     */\n    active:\n        {type: Boolean, value: false, notify: true, reflectToAttribute: true},\n\n    /**\n     * True if the element is currently being pressed by a \"pointer,\" which\n     * is loosely defined as mouse or touch input (but specifically excluding\n     * keyboard input).\n     */\n    pointerDown: {type: Boolean, readOnly: true, value: false},\n\n    /**\n     * True if the input device that caused the element to receive focus\n     * was a keyboard.\n     */\n    receivedFocusFromKeyboard: {type: Boolean, readOnly: true},\n\n    /**\n     * The aria attribute to be set if the button is a toggle and in the\n     * active state.\n     */\n    ariaActiveAttribute: {\n      type: String,\n      value: 'aria-pressed',\n      observer: '_ariaActiveAttributeChanged'\n    }\n  },\n\n  listeners: {down: '_downHandler', up: '_upHandler', tap: '_tapHandler'},\n\n  observers:\n      ['_focusChanged(focused)', '_activeChanged(active, ariaActiveAttribute)'],\n\n  /**\n   * @type {!Object}\n   */\n  keyBindings: {\n    'enter:keydown': '_asyncClick',\n    'space:keydown': '_spaceKeyDownHandler',\n    'space:keyup': '_spaceKeyUpHandler',\n  },\n\n  _mouseEventRe: /^mouse/,\n\n  _tapHandler: function() {\n    if (this.toggles) {\n      // a tap is needed to toggle the active state\n      this._userActivate(!this.active);\n    } else {\n      this.active = false;\n    }\n  },\n\n  _focusChanged: function(focused) {\n    this._detectKeyboardFocus(focused);\n\n    if (!focused) {\n      this._setPressed(false);\n    }\n  },\n\n  _detectKeyboardFocus: function(focused) {\n    this._setReceivedFocusFromKeyboard(!this.pointerDown && focused);\n  },\n\n  // to emulate native checkbox, (de-)activations from a user interaction fire\n  // 'change' events\n  _userActivate: function(active) {\n    if (this.active !== active) {\n      this.active = active;\n      this.fire('change');\n    }\n  },\n\n  _downHandler: function(event) {\n    this._setPointerDown(true);\n    this._setPressed(true);\n    this._setReceivedFocusFromKeyboard(false);\n  },\n\n  _upHandler: function() {\n    this._setPointerDown(false);\n    this._setPressed(false);\n  },\n\n  /**\n   * @param {!KeyboardEvent} event .\n   */\n  _spaceKeyDownHandler: function(event) {\n    var keyboardEvent = event.detail.keyboardEvent;\n    var target = dom(keyboardEvent).localTarget;\n\n    // Ignore the event if this is coming from a focused light child, since that\n    // element will deal with it.\n    if (this.isLightDescendant(/** @type {Node} */ (target)))\n      return;\n\n    keyboardEvent.preventDefault();\n    keyboardEvent.stopImmediatePropagation();\n    this._setPressed(true);\n  },\n\n  /**\n   * @param {!KeyboardEvent} event .\n   */\n  _spaceKeyUpHandler: function(event) {\n    var keyboardEvent = event.detail.keyboardEvent;\n    var target = dom(keyboardEvent).localTarget;\n\n    // Ignore the event if this is coming from a focused light child, since that\n    // element will deal with it.\n    if (this.isLightDescendant(/** @type {Node} */ (target)))\n      return;\n\n    if (this.pressed) {\n      this._asyncClick();\n    }\n    this._setPressed(false);\n  },\n\n  // trigger click asynchronously, the asynchrony is useful to allow one\n  // event handler to unwind before triggering another event\n  _asyncClick: function() {\n    this.async(function() {\n      this.click();\n    }, 1);\n  },\n\n  // any of these changes are considered a change to button state\n\n  _pressedChanged: function(pressed) {\n    this._changedButtonState();\n  },\n\n  _ariaActiveAttributeChanged: function(value, oldValue) {\n    if (oldValue && oldValue != value && this.hasAttribute(oldValue)) {\n      this.removeAttribute(oldValue);\n    }\n  },\n\n  _activeChanged: function(active, ariaActiveAttribute) {\n    if (this.toggles) {\n      this.setAttribute(this.ariaActiveAttribute, active ? 'true' : 'false');\n    } else {\n      this.removeAttribute(this.ariaActiveAttribute);\n    }\n    this._changedButtonState();\n  },\n\n  _controlStateChanged: function() {\n    if (this.disabled) {\n      this._setPressed(false);\n    } else {\n      this._changedButtonState();\n    }\n  },\n\n  // provide hook for follow-on behaviors to react to button-state\n\n  _changedButtonState: function() {\n    if (this._buttonStateChanged) {\n      this._buttonStateChanged();  // abstract\n    }\n  }\n\n};\n\n/** @polymerBehavior */\nexport const IronButtonState = [IronA11yKeysBehavior, IronButtonStateImpl];\n", "/**\n@license\nCopyright (c) 2014 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {IronA11yKeysBehavior} from '@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\nvar Utility = {\n  distance: function(x1, y1, x2, y2) {\n    var xDelta = (x1 - x2);\n    var yDelta = (y1 - y2);\n\n    return Math.sqrt(xDelta * xDelta + yDelta * yDelta);\n  },\n\n  now: window.performance && window.performance.now ?\n      window.performance.now.bind(window.performance) :\n      Date.now\n};\n\n/**\n * @param {HTMLElement} element\n * @constructor\n */\nfunction ElementMetrics(element) {\n  this.element = element;\n  this.width = this.boundingRect.width;\n  this.height = this.boundingRect.height;\n\n  this.size = Math.max(this.width, this.height);\n}\n\nElementMetrics.prototype = {\n  get boundingRect() {\n    return this.element.getBoundingClientRect();\n  },\n\n  furthestCornerDistanceFrom: function(x, y) {\n    var topLeft = Utility.distance(x, y, 0, 0);\n    var topRight = Utility.distance(x, y, this.width, 0);\n    var bottomLeft = Utility.distance(x, y, 0, this.height);\n    var bottomRight = Utility.distance(x, y, this.width, this.height);\n\n    return Math.max(topLeft, topRight, bottomLeft, bottomRight);\n  }\n};\n\n/**\n * @param {HTMLElement} element\n * @constructor\n */\nfunction Ripple(element) {\n  this.element = element;\n  this.color = window.getComputedStyle(element).color;\n\n  this.wave = document.createElement('div');\n  this.waveContainer = document.createElement('div');\n  this.wave.style.backgroundColor = this.color;\n  this.wave.classList.add('wave');\n  this.waveContainer.classList.add('wave-container');\n  dom(this.waveContainer).appendChild(this.wave);\n\n  this.resetInteractionState();\n}\n\nRipple.MAX_RADIUS = 300;\n\nRipple.prototype = {\n  get recenters() {\n    return this.element.recenters;\n  },\n\n  get center() {\n    return this.element.center;\n  },\n\n  get mouseDownElapsed() {\n    var elapsed;\n\n    if (!this.mouseDownStart) {\n      return 0;\n    }\n\n    elapsed = Utility.now() - this.mouseDownStart;\n\n    if (this.mouseUpStart) {\n      elapsed -= this.mouseUpElapsed;\n    }\n\n    return elapsed;\n  },\n\n  get mouseUpElapsed() {\n    return this.mouseUpStart ? Utility.now() - this.mouseUpStart : 0;\n  },\n\n  get mouseDownElapsedSeconds() {\n    return this.mouseDownElapsed / 1000;\n  },\n\n  get mouseUpElapsedSeconds() {\n    return this.mouseUpElapsed / 1000;\n  },\n\n  get mouseInteractionSeconds() {\n    return this.mouseDownElapsedSeconds + this.mouseUpElapsedSeconds;\n  },\n\n  get initialOpacity() {\n    return this.element.initialOpacity;\n  },\n\n  get opacityDecayVelocity() {\n    return this.element.opacityDecayVelocity;\n  },\n\n  get radius() {\n    var width2 = this.containerMetrics.width * this.containerMetrics.width;\n    var height2 = this.containerMetrics.height * this.containerMetrics.height;\n    var waveRadius =\n        Math.min(Math.sqrt(width2 + height2), Ripple.MAX_RADIUS) * 1.1 + 5;\n\n    var duration = 1.1 - 0.2 * (waveRadius / Ripple.MAX_RADIUS);\n    var timeNow = this.mouseInteractionSeconds / duration;\n    var size = waveRadius * (1 - Math.pow(80, -timeNow));\n\n    return Math.abs(size);\n  },\n\n  get opacity() {\n    if (!this.mouseUpStart) {\n      return this.initialOpacity;\n    }\n\n    return Math.max(\n        0,\n        this.initialOpacity -\n            this.mouseUpElapsedSeconds * this.opacityDecayVelocity);\n  },\n\n  get outerOpacity() {\n    // Linear increase in background opacity, capped at the opacity\n    // of the wavefront (waveOpacity).\n    var outerOpacity = this.mouseUpElapsedSeconds * 0.3;\n    var waveOpacity = this.opacity;\n\n    return Math.max(0, Math.min(outerOpacity, waveOpacity));\n  },\n\n  get isOpacityFullyDecayed() {\n    return this.opacity < 0.01 &&\n        this.radius >= Math.min(this.maxRadius, Ripple.MAX_RADIUS);\n  },\n\n  get isRestingAtMaxRadius() {\n    return this.opacity >= this.initialOpacity &&\n        this.radius >= Math.min(this.maxRadius, Ripple.MAX_RADIUS);\n  },\n\n  get isAnimationComplete() {\n    return this.mouseUpStart ? this.isOpacityFullyDecayed :\n                               this.isRestingAtMaxRadius;\n  },\n\n  get translationFraction() {\n    return Math.min(\n        1, this.radius / this.containerMetrics.size * 2 / Math.sqrt(2));\n  },\n\n  get xNow() {\n    if (this.xEnd) {\n      return this.xStart + this.translationFraction * (this.xEnd - this.xStart);\n    }\n\n    return this.xStart;\n  },\n\n  get yNow() {\n    if (this.yEnd) {\n      return this.yStart + this.translationFraction * (this.yEnd - this.yStart);\n    }\n\n    return this.yStart;\n  },\n\n  get isMouseDown() {\n    return this.mouseDownStart && !this.mouseUpStart;\n  },\n\n  resetInteractionState: function() {\n    this.maxRadius = 0;\n    this.mouseDownStart = 0;\n    this.mouseUpStart = 0;\n\n    this.xStart = 0;\n    this.yStart = 0;\n    this.xEnd = 0;\n    this.yEnd = 0;\n    this.slideDistance = 0;\n\n    this.containerMetrics = new ElementMetrics(this.element);\n  },\n\n  draw: function() {\n    var scale;\n    var dx;\n    var dy;\n\n    this.wave.style.opacity = this.opacity;\n\n    scale = this.radius / (this.containerMetrics.size / 2);\n    dx = this.xNow - (this.containerMetrics.width / 2);\n    dy = this.yNow - (this.containerMetrics.height / 2);\n\n\n    // 2d transform for safari because of border-radius and overflow:hidden\n    // clipping bug. https://bugs.webkit.org/show_bug.cgi?id=98538\n    this.waveContainer.style.webkitTransform =\n        'translate(' + dx + 'px, ' + dy + 'px)';\n    this.waveContainer.style.transform =\n        'translate3d(' + dx + 'px, ' + dy + 'px, 0)';\n    this.wave.style.webkitTransform = 'scale(' + scale + ',' + scale + ')';\n    this.wave.style.transform = 'scale3d(' + scale + ',' + scale + ',1)';\n  },\n\n  /** @param {Event=} event */\n  downAction: function(event) {\n    var xCenter = this.containerMetrics.width / 2;\n    var yCenter = this.containerMetrics.height / 2;\n\n    this.resetInteractionState();\n    this.mouseDownStart = Utility.now();\n\n    if (this.center) {\n      this.xStart = xCenter;\n      this.yStart = yCenter;\n      this.slideDistance =\n          Utility.distance(this.xStart, this.yStart, this.xEnd, this.yEnd);\n    } else {\n      this.xStart = event ?\n          event.detail.x - this.containerMetrics.boundingRect.left :\n          this.containerMetrics.width / 2;\n      this.yStart = event ?\n          event.detail.y - this.containerMetrics.boundingRect.top :\n          this.containerMetrics.height / 2;\n    }\n\n    if (this.recenters) {\n      this.xEnd = xCenter;\n      this.yEnd = yCenter;\n      this.slideDistance =\n          Utility.distance(this.xStart, this.yStart, this.xEnd, this.yEnd);\n    }\n\n    this.maxRadius = this.containerMetrics.furthestCornerDistanceFrom(\n        this.xStart, this.yStart);\n\n    this.waveContainer.style.top =\n        (this.containerMetrics.height - this.containerMetrics.size) / 2 + 'px';\n    this.waveContainer.style.left =\n        (this.containerMetrics.width - this.containerMetrics.size) / 2 + 'px';\n\n    this.waveContainer.style.width = this.containerMetrics.size + 'px';\n    this.waveContainer.style.height = this.containerMetrics.size + 'px';\n  },\n\n  /** @param {Event=} event */\n  upAction: function(event) {\n    if (!this.isMouseDown) {\n      return;\n    }\n\n    this.mouseUpStart = Utility.now();\n  },\n\n  remove: function() {\n    dom(dom(this.waveContainer).parentNode).removeChild(this.waveContainer);\n  }\n};\n\n/**\nMaterial design: [Surface\nreaction](https://www.google.com/design/spec/animation/responsive-interaction.html#responsive-interaction-surface-reaction)\n\n`paper-ripple` provides a visual effect that other paper elements can\nuse to simulate a rippling effect emanating from the point of contact.  The\neffect can be visualized as a concentric circle with motion.\n\nExample:\n\n    <div style=\"position:relative\">\n      <paper-ripple></paper-ripple>\n    </div>\n\nNote, it's important that the parent container of the ripple be relative\nposition, otherwise the ripple will emanate outside of the desired container.\n\n`paper-ripple` listens to \"mousedown\" and \"mouseup\" events so it would display\nripple effect when touches on it.  You can also defeat the default behavior and\nmanually route the down and up actions to the ripple element.  Note that it is\nimportant if you call `downAction()` you will have to make sure to call\n`upAction()` so that `paper-ripple` would end the animation loop.\n\nExample:\n\n    <paper-ripple id=\"ripple\" style=\"pointer-events: none;\"></paper-ripple>\n    ...\n    downAction: function(e) {\n      this.$.ripple.downAction(e.detail);\n    },\n    upAction: function(e) {\n      this.$.ripple.upAction();\n    }\n\nStyling ripple effect:\n\n  Use CSS color property to style the ripple:\n\n    paper-ripple {\n      color: #4285f4;\n    }\n\n  Note that CSS color property is inherited so it is not required to set it on\n  the `paper-ripple` element directly.\n\nBy default, the ripple is centered on the point of contact.  Apply the\n`recenters` attribute to have the ripple grow toward the center of its\ncontainer.\n\n    <paper-ripple recenters></paper-ripple>\n\nYou can also  center the ripple inside its container from the start.\n\n    <paper-ripple center></paper-ripple>\n\nApply `circle` class to make the rippling effect within a circle.\n\n    <paper-ripple class=\"circle\"></paper-ripple>\n\n@element paper-ripple\n@demo demo/index.html\n*/\nPolymer({\n  /** @override */\n  _template: html`\n    <style>\n      :host {\n        display: block;\n        position: absolute;\n        border-radius: inherit;\n        overflow: hidden;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n\n        /* See PolymerElements/paper-behaviors/issues/34. On non-Chrome browsers,\n         * creating a node (with a position:absolute) in the middle of an event\n         * handler \"interrupts\" that event handler (which happens when the\n         * ripple is created on demand) */\n        pointer-events: none;\n      }\n\n      :host([animating]) {\n        /* This resolves a rendering issue in Chrome (as of 40) where the\n           ripple is not properly clipped by its parent (which may have\n           rounded corners). See: http://jsbin.com/temexa/4\n\n           Note: We only apply this style conditionally. Otherwise, the browser\n           will create a new compositing layer for every ripple element on the\n           page, and that would be bad. */\n        -webkit-transform: translate(0, 0);\n        transform: translate3d(0, 0, 0);\n      }\n\n      #background,\n      #waves,\n      .wave-container,\n      .wave {\n        pointer-events: none;\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n      }\n\n      #background,\n      .wave {\n        opacity: 0;\n      }\n\n      #waves,\n      .wave {\n        overflow: hidden;\n      }\n\n      .wave-container,\n      .wave {\n        border-radius: 50%;\n      }\n\n      :host(.circle) #background,\n      :host(.circle) #waves {\n        border-radius: 50%;\n      }\n\n      :host(.circle) .wave-container {\n        overflow: hidden;\n      }\n    </style>\n\n    <div id=\"background\"></div>\n    <div id=\"waves\"></div>\n`,\n\n  is: 'paper-ripple',\n  behaviors: [IronA11yKeysBehavior],\n\n  properties: {\n    /**\n     * The initial opacity set on the wave.\n     * @type number\n     * @default 0.25\n     */\n    initialOpacity: {type: Number, value: 0.25},\n\n    /**\n     * How fast (opacity per second) the wave fades out.\n     *\n     * @type number\n     * @default 0.8\n     */\n    opacityDecayVelocity: {type: Number, value: 0.8},\n\n    /**\n     * If true, ripples will exhibit a gravitational pull towards\n     * the center of their container as they fade away.\n     *\n     * @type boolean\n     * @default false\n     */\n    recenters: {type: Boolean, value: false},\n\n    /**\n     * If true, ripples will center inside its container\n     *\n     * @type boolean\n     * @default false\n     */\n    center: {type: Boolean, value: false},\n\n    /**\n     * A list of the visual ripples.\n     *\n     * @type Array\n     * @default []\n     */\n    ripples: {\n      type: Array,\n      value: function() {\n        return [];\n      }\n    },\n\n    /**\n     * True when there are visible ripples animating within the\n     * element.\n     */\n    animating:\n        {type: Boolean, readOnly: true, reflectToAttribute: true, value: false},\n\n    /**\n     * If true, the ripple will remain in the \"down\" state until `holdDown`\n     * is set to false again.\n     */\n    holdDown: {type: Boolean, value: false, observer: '_holdDownChanged'},\n\n    /**\n     * If true, the ripple will not generate a ripple effect\n     * via pointer interaction.\n     * Calling ripple's imperative api like `simulatedRipple` will\n     * still generate the ripple effect.\n     */\n    noink: {type: Boolean, value: false},\n\n    _animating: {type: Boolean},\n\n    _boundAnimate: {\n      type: Function,\n      value: function() {\n        return this.animate.bind(this);\n      }\n    }\n  },\n\n  get target() {\n    return this.keyEventTarget;\n  },\n\n  /**\n   * @type {!Object}\n   */\n  keyBindings: {\n    'enter:keydown': '_onEnterKeydown',\n    'space:keydown': '_onSpaceKeydown',\n    'space:keyup': '_onSpaceKeyup'\n  },\n\n  /** @override */\n  attached: function() {\n    // Set up a11yKeysBehavior to listen to key events on the target,\n    // so that space and enter activate the ripple even if the target doesn't\n    // handle key events. The key handlers deal with `noink` themselves.\n    if (dom(this).parentNode.nodeType == 11) {  // DOCUMENT_FRAGMENT_NODE\n      this.keyEventTarget = dom(this).getOwnerRoot().host;\n    } else {\n      this.keyEventTarget = dom(this).parentNode;\n    }\n    var keyEventTarget = /** @type {!EventTarget} */ (this.keyEventTarget);\n    this.listen(keyEventTarget, 'up', 'uiUpAction');\n    this.listen(keyEventTarget, 'down', 'uiDownAction');\n  },\n\n  /** @override */\n  detached: function() {\n    this.unlisten(this.keyEventTarget, 'up', 'uiUpAction');\n    this.unlisten(this.keyEventTarget, 'down', 'uiDownAction');\n    this.keyEventTarget = null;\n  },\n\n  get shouldKeepAnimating() {\n    for (var index = 0; index < this.ripples.length; ++index) {\n      if (!this.ripples[index].isAnimationComplete) {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  simulatedRipple: function() {\n    this.downAction(null);\n\n    // Please see polymer/polymer#1305\n    this.async(function() {\n      this.upAction();\n    }, 1);\n  },\n\n  /**\n   * Provokes a ripple down effect via a UI event,\n   * respecting the `noink` property.\n   * @param {Event=} event\n   */\n  uiDownAction: function(event) {\n    if (!this.noink) {\n      this.downAction(event);\n    }\n  },\n\n  /**\n   * Provokes a ripple down effect via a UI event,\n   * *not* respecting the `noink` property.\n   * @param {Event=} event\n   */\n  downAction: function(event) {\n    if (this.holdDown && this.ripples.length > 0) {\n      return;\n    }\n\n    var ripple = this.addRipple();\n\n    ripple.downAction(event);\n\n    if (!this._animating) {\n      this._animating = true;\n      this.animate();\n    }\n  },\n\n  /**\n   * Provokes a ripple up effect via a UI event,\n   * respecting the `noink` property.\n   * @param {Event=} event\n   */\n  uiUpAction: function(event) {\n    if (!this.noink) {\n      this.upAction(event);\n    }\n  },\n\n  /**\n   * Provokes a ripple up effect via a UI event,\n   * *not* respecting the `noink` property.\n   * @param {Event=} event\n   */\n  upAction: function(event) {\n    if (this.holdDown) {\n      return;\n    }\n\n    this.ripples.forEach(function(ripple) {\n      ripple.upAction(event);\n    });\n\n    this._animating = true;\n    this.animate();\n  },\n\n  onAnimationComplete: function() {\n    this._animating = false;\n    this.$.background.style.backgroundColor = '';\n    this.fire('transitionend');\n  },\n\n  addRipple: function() {\n    var ripple = new Ripple(this);\n\n    dom(this.$.waves).appendChild(ripple.waveContainer);\n    this.$.background.style.backgroundColor = ripple.color;\n    this.ripples.push(ripple);\n\n    this._setAnimating(true);\n\n    return ripple;\n  },\n\n  removeRipple: function(ripple) {\n    var rippleIndex = this.ripples.indexOf(ripple);\n\n    if (rippleIndex < 0) {\n      return;\n    }\n\n    this.ripples.splice(rippleIndex, 1);\n\n    ripple.remove();\n\n    if (!this.ripples.length) {\n      this._setAnimating(false);\n    }\n  },\n\n  /**\n   * Deprecated. Please use animateRipple() instead.\n   *\n   * This method name conflicts with Element#animate().\n   * https://developer.mozilla.org/en-US/docs/Web/API/Element/animate.\n   *\n   * @suppress {checkTypes}\n   * @override\n   */\n  animate: function() {\n    if (!this._animating) {\n      return;\n    }\n    var index;\n    var ripple;\n\n    for (index = 0; index < this.ripples.length; ++index) {\n      ripple = this.ripples[index];\n\n      ripple.draw();\n\n      this.$.background.style.opacity = ripple.outerOpacity;\n\n      if (ripple.isOpacityFullyDecayed && !ripple.isRestingAtMaxRadius) {\n        this.removeRipple(ripple);\n      }\n    }\n\n    if (!this.shouldKeepAnimating && this.ripples.length === 0) {\n      this.onAnimationComplete();\n    } else {\n      window.requestAnimationFrame(this._boundAnimate);\n    }\n  },\n\n  /**\n   * An alias for animate() whose name does not conflict with the platform\n   * Element.animate() method.\n   */\n  animateRipple: function() {\n    return this.animate();\n  },\n\n  _onEnterKeydown: function() {\n    this.uiDownAction();\n    this.async(this.uiUpAction, 1);\n  },\n\n  _onSpaceKeydown: function() {\n    this.uiDownAction();\n  },\n\n  _onSpaceKeyup: function() {\n    this.uiUpAction();\n  },\n\n  // note: holdDown does not respect noink since it can be a focus based\n  // effect.\n  _holdDownChanged: function(newVal, oldVal) {\n    if (oldVal === undefined) {\n      return;\n    }\n    if (newVal) {\n      this.downAction();\n    } else {\n      this.upAction();\n    }\n  }\n\n  /**\n  Fired when the animation finishes.\n  This is useful if you want to wait until\n  the ripple animation finishes to perform some action.\n\n  @event transitionend\n  @param {{node: Object}} detail Contains the animated node.\n  */\n});\n", "/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/paper-ripple/paper-ripple.js';\n\nimport {IronButtonStateImpl} from '@polymer/iron-behaviors/iron-button-state.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\n\n/**\n * `PaperRippleBehavior` dynamically implements a ripple when the element has\n * focus via pointer or keyboard.\n *\n * NOTE: This behavior is intended to be used in conjunction with and after\n * `IronButtonState` and `IronControlState`.\n *\n * @polymerBehavior PaperRippleBehavior\n */\nexport const PaperRippleBehavior = {\n  properties: {\n    /**\n     * If true, the element will not produce a ripple effect when interacted\n     * with via the pointer.\n     */\n    noink: {type: Boolean, observer: '_noinkChanged'},\n\n    /**\n     * @type {Element|undefined}\n     */\n    _rippleContainer: {\n      type: Object,\n    }\n  },\n\n  /**\n   * Ensures a `<paper-ripple>` element is available when the element is\n   * focused.\n   */\n  _buttonStateChanged: function() {\n    if (this.focused) {\n      this.ensureRipple();\n    }\n  },\n\n  /**\n   * In addition to the functionality provided in `IronButtonState`, ensures\n   * a ripple effect is created when the element is in a `pressed` state.\n   */\n  _downHandler: function(event) {\n    IronButtonStateImpl._downHandler.call(this, event);\n    if (this.pressed) {\n      this.ensureRipple(event);\n    }\n  },\n\n  /**\n   * Ensures this element contains a ripple effect. For startup efficiency\n   * the ripple effect is dynamically on demand when needed.\n   * @param {!Event=} optTriggeringEvent (optional) event that triggered the\n   * ripple.\n   */\n  ensureRipple: function(optTriggeringEvent) {\n    if (!this.hasRipple()) {\n      this._ripple = this._createRipple();\n      this._ripple.noink = this.noink;\n      var rippleContainer = this._rippleContainer || this.root;\n      if (rippleContainer) {\n        dom(rippleContainer).appendChild(this._ripple);\n      }\n      if (optTriggeringEvent) {\n        // Check if the event happened inside of the ripple container\n        // Fall back to host instead of the root because distributed text\n        // nodes are not valid event targets\n        var domContainer = dom(this._rippleContainer || this);\n        var target = dom(optTriggeringEvent).rootTarget;\n        if (domContainer.deepContains(/** @type {Node} */ (target))) {\n          this._ripple.uiDownAction(optTriggeringEvent);\n        }\n      }\n    }\n  },\n\n  /**\n   * Returns the `<paper-ripple>` element used by this element to create\n   * ripple effects. The element's ripple is created on demand, when\n   * necessary, and calling this method will force the\n   * ripple to be created.\n   */\n  getRipple: function() {\n    this.ensureRipple();\n    return this._ripple;\n  },\n\n  /**\n   * Returns true if this element currently contains a ripple effect.\n   * @return {boolean}\n   */\n  hasRipple: function() {\n    return Boolean(this._ripple);\n  },\n\n  /**\n   * Create the element's ripple effect via creating a `<paper-ripple>`.\n   * Override this method to customize the ripple element.\n   * @return {!PaperRippleElement} Returns a `<paper-ripple>` element.\n   */\n  _createRipple: function() {\n    var element = /** @type {!PaperRippleElement} */ (\n        document.createElement('paper-ripple'));\n    return element;\n  },\n\n  _noinkChanged: function(noink) {\n    if (this.hasRipple()) {\n      this._ripple.noink = noink;\n    }\n  }\n};\n", "/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {IronButtonState} from '@polymer/iron-behaviors/iron-button-state.js';\nimport {IronControlState} from '@polymer/iron-behaviors/iron-control-state.js';\n\nimport {PaperRippleBehavior} from './paper-ripple-behavior.js';\n\n/**\n * `PaperInkyFocusBehavior` implements a ripple when the element has keyboard\n * focus.\n *\n * @polymerBehavior PaperInkyFocusBehavior\n */\nexport const PaperInkyFocusBehaviorImpl = {\n  observers: ['_focusedChanged(receivedFocusFromKeyboard)'],\n\n  _focusedChanged: function(receivedFocusFromKeyboard) {\n    if (receivedFocusFromKeyboard) {\n      this.ensureRipple();\n    }\n    if (this.hasRipple()) {\n      this._ripple.holdDown = receivedFocusFromKeyboard;\n    }\n  },\n\n  _createRipple: function() {\n    var ripple = PaperRippleBehavior._createRipple();\n    ripple.id = 'ink';\n    ripple.setAttribute('center', '');\n    ripple.classList.add('circle');\n    return ripple;\n  }\n};\n\n/** @polymerBehavior */\nexport const PaperInkyFocusBehavior = [\n  IronButtonState,\n  IronControlState,\n  PaperRippleBehavior,\n  PaperInkyFocusBehaviorImpl\n];\n", "/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\n/**\n * `iron-range-behavior` provides the behavior for something with a minimum to\n * maximum range.\n *\n * @demo demo/index.html\n * @polymerBehavior\n */\nexport const IronRangeBehavior = {\n\n  properties: {\n\n    /**\n     * The number that represents the current value.\n     */\n    value: {type: Number, value: 0, notify: true, reflectToAttribute: true},\n\n    /**\n     * The number that indicates the minimum value of the range.\n     */\n    min: {type: Number, value: 0, notify: true},\n\n    /**\n     * The number that indicates the maximum value of the range.\n     */\n    max: {type: Number, value: 100, notify: true},\n\n    /**\n     * Specifies the value granularity of the range's value.\n     */\n    step: {type: Number, value: 1, notify: true},\n\n    /**\n     * Returns the ratio of the value.\n     */\n    ratio: {type: Number, value: 0, readOnly: true, notify: true},\n  },\n\n  observers: ['_update(value, min, max, step)'],\n\n  _calcRatio: function(value) {\n    return (this._clampValue(value) - this.min) / (this.max - this.min);\n  },\n\n  _clampValue: function(value) {\n    return Math.min(this.max, Math.max(this.min, this._calcStep(value)));\n  },\n\n  _calcStep: function(value) {\n    // polymer/issues/2493\n    value = parseFloat(value);\n\n    if (!this.step) {\n      return value;\n    }\n\n    var numSteps = Math.round((value - this.min) / this.step);\n    if (this.step < 1) {\n      /**\n       * For small values of this.step, if we calculate the step using\n       * `Math.round(value / step) * step` we may hit a precision point issue\n       * eg. 0.1 * 0.2 =  0.020000000000000004\n       * http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html\n       *\n       * as a work around we can divide by the reciprocal of `step`\n       */\n      return numSteps / (1 / this.step) + this.min;\n    } else {\n      return numSteps * this.step + this.min;\n    }\n  },\n\n  _validateValue: function() {\n    var v = this._clampValue(this.value);\n    this.value = this.oldValue = isNaN(v) ? this.oldValue : v;\n    return this.value !== v;\n  },\n\n  _update: function() {\n    this._validateValue();\n    this._setRatio(this._calcRatio(this.value) * 100);\n  }\n\n};\n", "/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\nThe `<iron-flex-layout>` component provides simple ways to use\n[CSS flexible box\nlayout](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes),\nalso known as flexbox. Note that this is an old element, that was written\nbefore all modern browsers had non-prefixed flex styles. As such, nowadays you\ndon't really need to use this element anymore, and can use CSS flex styles\ndirectly in your code.\n\nThis component provides two different ways to use flexbox:\n\n1. [Layout\nclasses](https://github.com/PolymerElements/iron-flex-layout/tree/master/iron-flex-layout-classes.html).\nThe layout class stylesheet provides a simple set of class-based flexbox rules,\nthat let you specify layout properties directly in markup. You must include this\nfile in every element that needs to use them.\n\n    Sample use:\n\n    ```\n    <custom-element-demo>\n      <template>\n        <script src=\"../webcomponentsjs/webcomponents-lite.js\"></script>\n        <next-code-block></next-code-block>\n      </template>\n    </custom-element-demo>\n    ```\n\n    ```js\n    import {html} from '@polymer/polymer/lib/utils/html-tag.js';\n    import '@polymer/iron-flex-layout/iron-flex-layout-classes.js';\n\n    const template = html`\n      <style is=\"custom-style\" include=\"iron-flex iron-flex-alignment\"></style>\n      <style>\n        .test { width: 100px; }\n      </style>\n      <div class=\"layout horizontal center-center\">\n        <div class=\"test\">horizontal layout center alignment</div>\n      </div>\n    `;\n    document.body.appendChild(template.content);\n    ```\n\n2. [Custom CSS\nmixins](https://github.com/PolymerElements/iron-flex-layout/blob/master/iron-flex-layout.html).\nThe mixin stylesheet includes custom CSS mixins that can be applied inside a CSS\nrule using the `@apply` function.\n\nPlease note that the old [/deep/ layout\nclasses](https://github.com/PolymerElements/iron-flex-layout/tree/master/classes)\nare deprecated, and should not be used. To continue using layout properties\ndirectly in markup, please switch to using the new `dom-module`-based\n[layout\nclasses](https://github.com/PolymerElements/iron-flex-layout/tree/master/iron-flex-layout-classes.html).\nPlease note that the new version does not use `/deep/`, and therefore requires\nyou to import the `dom-modules` in every element that needs to use them.\n\n@group Iron Elements\n@pseudoElement iron-flex-layout\n@demo demo/index.html\n*/\nconst template = html`\n<custom-style>\n  <style is=\"custom-style\">\n    [hidden] {\n      display: none !important;\n    }\n  </style>\n</custom-style>\n<custom-style>\n  <style is=\"custom-style\">\n    html {\n\n      --layout: {\n        display: -ms-flexbox;\n        display: -webkit-flex;\n        display: flex;\n      };\n\n      --layout-inline: {\n        display: -ms-inline-flexbox;\n        display: -webkit-inline-flex;\n        display: inline-flex;\n      };\n\n      --layout-horizontal: {\n        @apply --layout;\n\n        -ms-flex-direction: row;\n        -webkit-flex-direction: row;\n        flex-direction: row;\n      };\n\n      --layout-horizontal-reverse: {\n        @apply --layout;\n\n        -ms-flex-direction: row-reverse;\n        -webkit-flex-direction: row-reverse;\n        flex-direction: row-reverse;\n      };\n\n      --layout-vertical: {\n        @apply --layout;\n\n        -ms-flex-direction: column;\n        -webkit-flex-direction: column;\n        flex-direction: column;\n      };\n\n      --layout-vertical-reverse: {\n        @apply --layout;\n\n        -ms-flex-direction: column-reverse;\n        -webkit-flex-direction: column-reverse;\n        flex-direction: column-reverse;\n      };\n\n      --layout-wrap: {\n        -ms-flex-wrap: wrap;\n        -webkit-flex-wrap: wrap;\n        flex-wrap: wrap;\n      };\n\n      --layout-wrap-reverse: {\n        -ms-flex-wrap: wrap-reverse;\n        -webkit-flex-wrap: wrap-reverse;\n        flex-wrap: wrap-reverse;\n      };\n\n      --layout-flex-auto: {\n        -ms-flex: 1 1 auto;\n        -webkit-flex: 1 1 auto;\n        flex: 1 1 auto;\n      };\n\n      --layout-flex-none: {\n        -ms-flex: none;\n        -webkit-flex: none;\n        flex: none;\n      };\n\n      --layout-flex: {\n        -ms-flex: 1 1 0.000000001px;\n        -webkit-flex: 1;\n        flex: 1;\n        -webkit-flex-basis: 0.000000001px;\n        flex-basis: 0.000000001px;\n      };\n\n      --layout-flex-2: {\n        -ms-flex: 2;\n        -webkit-flex: 2;\n        flex: 2;\n      };\n\n      --layout-flex-3: {\n        -ms-flex: 3;\n        -webkit-flex: 3;\n        flex: 3;\n      };\n\n      --layout-flex-4: {\n        -ms-flex: 4;\n        -webkit-flex: 4;\n        flex: 4;\n      };\n\n      --layout-flex-5: {\n        -ms-flex: 5;\n        -webkit-flex: 5;\n        flex: 5;\n      };\n\n      --layout-flex-6: {\n        -ms-flex: 6;\n        -webkit-flex: 6;\n        flex: 6;\n      };\n\n      --layout-flex-7: {\n        -ms-flex: 7;\n        -webkit-flex: 7;\n        flex: 7;\n      };\n\n      --layout-flex-8: {\n        -ms-flex: 8;\n        -webkit-flex: 8;\n        flex: 8;\n      };\n\n      --layout-flex-9: {\n        -ms-flex: 9;\n        -webkit-flex: 9;\n        flex: 9;\n      };\n\n      --layout-flex-10: {\n        -ms-flex: 10;\n        -webkit-flex: 10;\n        flex: 10;\n      };\n\n      --layout-flex-11: {\n        -ms-flex: 11;\n        -webkit-flex: 11;\n        flex: 11;\n      };\n\n      --layout-flex-12: {\n        -ms-flex: 12;\n        -webkit-flex: 12;\n        flex: 12;\n      };\n\n      /* alignment in cross axis */\n\n      --layout-start: {\n        -ms-flex-align: start;\n        -webkit-align-items: flex-start;\n        align-items: flex-start;\n      };\n\n      --layout-center: {\n        -ms-flex-align: center;\n        -webkit-align-items: center;\n        align-items: center;\n      };\n\n      --layout-end: {\n        -ms-flex-align: end;\n        -webkit-align-items: flex-end;\n        align-items: flex-end;\n      };\n\n      --layout-baseline: {\n        -ms-flex-align: baseline;\n        -webkit-align-items: baseline;\n        align-items: baseline;\n      };\n\n      /* alignment in main axis */\n\n      --layout-start-justified: {\n        -ms-flex-pack: start;\n        -webkit-justify-content: flex-start;\n        justify-content: flex-start;\n      };\n\n      --layout-center-justified: {\n        -ms-flex-pack: center;\n        -webkit-justify-content: center;\n        justify-content: center;\n      };\n\n      --layout-end-justified: {\n        -ms-flex-pack: end;\n        -webkit-justify-content: flex-end;\n        justify-content: flex-end;\n      };\n\n      --layout-around-justified: {\n        -ms-flex-pack: distribute;\n        -webkit-justify-content: space-around;\n        justify-content: space-around;\n      };\n\n      --layout-justified: {\n        -ms-flex-pack: justify;\n        -webkit-justify-content: space-between;\n        justify-content: space-between;\n      };\n\n      --layout-center-center: {\n        @apply --layout-center;\n        @apply --layout-center-justified;\n      };\n\n      /* self alignment */\n\n      --layout-self-start: {\n        -ms-align-self: flex-start;\n        -webkit-align-self: flex-start;\n        align-self: flex-start;\n      };\n\n      --layout-self-center: {\n        -ms-align-self: center;\n        -webkit-align-self: center;\n        align-self: center;\n      };\n\n      --layout-self-end: {\n        -ms-align-self: flex-end;\n        -webkit-align-self: flex-end;\n        align-self: flex-end;\n      };\n\n      --layout-self-stretch: {\n        -ms-align-self: stretch;\n        -webkit-align-self: stretch;\n        align-self: stretch;\n      };\n\n      --layout-self-baseline: {\n        -ms-align-self: baseline;\n        -webkit-align-self: baseline;\n        align-self: baseline;\n      };\n\n      /* multi-line alignment in main axis */\n\n      --layout-start-aligned: {\n        -ms-flex-line-pack: start;  /* IE10 */\n        -ms-align-content: flex-start;\n        -webkit-align-content: flex-start;\n        align-content: flex-start;\n      };\n\n      --layout-end-aligned: {\n        -ms-flex-line-pack: end;  /* IE10 */\n        -ms-align-content: flex-end;\n        -webkit-align-content: flex-end;\n        align-content: flex-end;\n      };\n\n      --layout-center-aligned: {\n        -ms-flex-line-pack: center;  /* IE10 */\n        -ms-align-content: center;\n        -webkit-align-content: center;\n        align-content: center;\n      };\n\n      --layout-between-aligned: {\n        -ms-flex-line-pack: justify;  /* IE10 */\n        -ms-align-content: space-between;\n        -webkit-align-content: space-between;\n        align-content: space-between;\n      };\n\n      --layout-around-aligned: {\n        -ms-flex-line-pack: distribute;  /* IE10 */\n        -ms-align-content: space-around;\n        -webkit-align-content: space-around;\n        align-content: space-around;\n      };\n\n      /*******************************\n                Other Layout\n      *******************************/\n\n      --layout-block: {\n        display: block;\n      };\n\n      --layout-invisible: {\n        visibility: hidden !important;\n      };\n\n      --layout-relative: {\n        position: relative;\n      };\n\n      --layout-fit: {\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n      };\n\n      --layout-scroll: {\n        -webkit-overflow-scrolling: touch;\n        overflow: auto;\n      };\n\n      --layout-fullbleed: {\n        margin: 0;\n        height: 100vh;\n      };\n\n      /* fixed position */\n\n      --layout-fixed-top: {\n        position: fixed;\n        top: 0;\n        left: 0;\n        right: 0;\n      };\n\n      --layout-fixed-right: {\n        position: fixed;\n        top: 0;\n        right: 0;\n        bottom: 0;\n      };\n\n      --layout-fixed-bottom: {\n        position: fixed;\n        right: 0;\n        bottom: 0;\n        left: 0;\n      };\n\n      --layout-fixed-left: {\n        position: fixed;\n        top: 0;\n        bottom: 0;\n        left: 0;\n      };\n\n    }\n  </style>\n</custom-style>`;\n\ntemplate.setAttribute('style', 'display: none;');\ndocument.head.appendChild(template.content);\n\nvar style = document.createElement('style');\nstyle.textContent = '[hidden] { display: none !important; }';\ndocument.head.appendChild(style);\n", "/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\nconst template = html`\n<custom-style>\n  <style is=\"custom-style\">\n    html {\n\n      /* Material Design color palette for Google products */\n\n      --google-red-100: #f4c7c3;\n      --google-red-300: #e67c73;\n      --google-red-500: #db4437;\n      --google-red-700: #c53929;\n\n      --google-blue-100: #c6dafc;\n      --google-blue-300: #7baaf7;\n      --google-blue-500: #4285f4;\n      --google-blue-700: #3367d6;\n\n      --google-green-100: #b7e1cd;\n      --google-green-300: #57bb8a;\n      --google-green-500: #0f9d58;\n      --google-green-700: #0b8043;\n\n      --google-yellow-100: #fce8b2;\n      --google-yellow-300: #f7cb4d;\n      --google-yellow-500: #f4b400;\n      --google-yellow-700: #f09300;\n\n      --google-grey-100: #f5f5f5;\n      --google-grey-300: #e0e0e0;\n      --google-grey-500: #9e9e9e;\n      --google-grey-700: #616161;\n\n      /* Material Design color palette from online spec document */\n\n      --paper-red-50: #ffebee;\n      --paper-red-100: #ffcdd2;\n      --paper-red-200: #ef9a9a;\n      --paper-red-300: #e57373;\n      --paper-red-400: #ef5350;\n      --paper-red-500: #f44336;\n      --paper-red-600: #e53935;\n      --paper-red-700: #d32f2f;\n      --paper-red-800: #c62828;\n      --paper-red-900: #b71c1c;\n      --paper-red-a100: #ff8a80;\n      --paper-red-a200: #ff5252;\n      --paper-red-a400: #ff1744;\n      --paper-red-a700: #d50000;\n\n      --paper-pink-50: #fce4ec;\n      --paper-pink-100: #f8bbd0;\n      --paper-pink-200: #f48fb1;\n      --paper-pink-300: #f06292;\n      --paper-pink-400: #ec407a;\n      --paper-pink-500: #e91e63;\n      --paper-pink-600: #d81b60;\n      --paper-pink-700: #c2185b;\n      --paper-pink-800: #ad1457;\n      --paper-pink-900: #880e4f;\n      --paper-pink-a100: #ff80ab;\n      --paper-pink-a200: #ff4081;\n      --paper-pink-a400: #f50057;\n      --paper-pink-a700: #c51162;\n\n      --paper-purple-50: #f3e5f5;\n      --paper-purple-100: #e1bee7;\n      --paper-purple-200: #ce93d8;\n      --paper-purple-300: #ba68c8;\n      --paper-purple-400: #ab47bc;\n      --paper-purple-500: #9c27b0;\n      --paper-purple-600: #8e24aa;\n      --paper-purple-700: #7b1fa2;\n      --paper-purple-800: #6a1b9a;\n      --paper-purple-900: #4a148c;\n      --paper-purple-a100: #ea80fc;\n      --paper-purple-a200: #e040fb;\n      --paper-purple-a400: #d500f9;\n      --paper-purple-a700: #aa00ff;\n\n      --paper-deep-purple-50: #ede7f6;\n      --paper-deep-purple-100: #d1c4e9;\n      --paper-deep-purple-200: #b39ddb;\n      --paper-deep-purple-300: #9575cd;\n      --paper-deep-purple-400: #7e57c2;\n      --paper-deep-purple-500: #673ab7;\n      --paper-deep-purple-600: #5e35b1;\n      --paper-deep-purple-700: #512da8;\n      --paper-deep-purple-800: #4527a0;\n      --paper-deep-purple-900: #311b92;\n      --paper-deep-purple-a100: #b388ff;\n      --paper-deep-purple-a200: #7c4dff;\n      --paper-deep-purple-a400: #651fff;\n      --paper-deep-purple-a700: #6200ea;\n\n      --paper-indigo-50: #e8eaf6;\n      --paper-indigo-100: #c5cae9;\n      --paper-indigo-200: #9fa8da;\n      --paper-indigo-300: #7986cb;\n      --paper-indigo-400: #5c6bc0;\n      --paper-indigo-500: #3f51b5;\n      --paper-indigo-600: #3949ab;\n      --paper-indigo-700: #303f9f;\n      --paper-indigo-800: #283593;\n      --paper-indigo-900: #1a237e;\n      --paper-indigo-a100: #8c9eff;\n      --paper-indigo-a200: #536dfe;\n      --paper-indigo-a400: #3d5afe;\n      --paper-indigo-a700: #304ffe;\n\n      --paper-blue-50: #e3f2fd;\n      --paper-blue-100: #bbdefb;\n      --paper-blue-200: #90caf9;\n      --paper-blue-300: #64b5f6;\n      --paper-blue-400: #42a5f5;\n      --paper-blue-500: #2196f3;\n      --paper-blue-600: #1e88e5;\n      --paper-blue-700: #1976d2;\n      --paper-blue-800: #1565c0;\n      --paper-blue-900: #0d47a1;\n      --paper-blue-a100: #82b1ff;\n      --paper-blue-a200: #448aff;\n      --paper-blue-a400: #2979ff;\n      --paper-blue-a700: #2962ff;\n\n      --paper-light-blue-50: #e1f5fe;\n      --paper-light-blue-100: #b3e5fc;\n      --paper-light-blue-200: #81d4fa;\n      --paper-light-blue-300: #4fc3f7;\n      --paper-light-blue-400: #29b6f6;\n      --paper-light-blue-500: #03a9f4;\n      --paper-light-blue-600: #039be5;\n      --paper-light-blue-700: #0288d1;\n      --paper-light-blue-800: #0277bd;\n      --paper-light-blue-900: #01579b;\n      --paper-light-blue-a100: #80d8ff;\n      --paper-light-blue-a200: #40c4ff;\n      --paper-light-blue-a400: #00b0ff;\n      --paper-light-blue-a700: #0091ea;\n\n      --paper-cyan-50: #e0f7fa;\n      --paper-cyan-100: #b2ebf2;\n      --paper-cyan-200: #80deea;\n      --paper-cyan-300: #4dd0e1;\n      --paper-cyan-400: #26c6da;\n      --paper-cyan-500: #00bcd4;\n      --paper-cyan-600: #00acc1;\n      --paper-cyan-700: #0097a7;\n      --paper-cyan-800: #00838f;\n      --paper-cyan-900: #006064;\n      --paper-cyan-a100: #84ffff;\n      --paper-cyan-a200: #18ffff;\n      --paper-cyan-a400: #00e5ff;\n      --paper-cyan-a700: #00b8d4;\n\n      --paper-teal-50: #e0f2f1;\n      --paper-teal-100: #b2dfdb;\n      --paper-teal-200: #80cbc4;\n      --paper-teal-300: #4db6ac;\n      --paper-teal-400: #26a69a;\n      --paper-teal-500: #009688;\n      --paper-teal-600: #00897b;\n      --paper-teal-700: #00796b;\n      --paper-teal-800: #00695c;\n      --paper-teal-900: #004d40;\n      --paper-teal-a100: #a7ffeb;\n      --paper-teal-a200: #64ffda;\n      --paper-teal-a400: #1de9b6;\n      --paper-teal-a700: #00bfa5;\n\n      --paper-green-50: #e8f5e9;\n      --paper-green-100: #c8e6c9;\n      --paper-green-200: #a5d6a7;\n      --paper-green-300: #81c784;\n      --paper-green-400: #66bb6a;\n      --paper-green-500: #4caf50;\n      --paper-green-600: #43a047;\n      --paper-green-700: #388e3c;\n      --paper-green-800: #2e7d32;\n      --paper-green-900: #1b5e20;\n      --paper-green-a100: #b9f6ca;\n      --paper-green-a200: #69f0ae;\n      --paper-green-a400: #00e676;\n      --paper-green-a700: #00c853;\n\n      --paper-light-green-50: #f1f8e9;\n      --paper-light-green-100: #dcedc8;\n      --paper-light-green-200: #c5e1a5;\n      --paper-light-green-300: #aed581;\n      --paper-light-green-400: #9ccc65;\n      --paper-light-green-500: #8bc34a;\n      --paper-light-green-600: #7cb342;\n      --paper-light-green-700: #689f38;\n      --paper-light-green-800: #558b2f;\n      --paper-light-green-900: #33691e;\n      --paper-light-green-a100: #ccff90;\n      --paper-light-green-a200: #b2ff59;\n      --paper-light-green-a400: #76ff03;\n      --paper-light-green-a700: #64dd17;\n\n      --paper-lime-50: #f9fbe7;\n      --paper-lime-100: #f0f4c3;\n      --paper-lime-200: #e6ee9c;\n      --paper-lime-300: #dce775;\n      --paper-lime-400: #d4e157;\n      --paper-lime-500: #cddc39;\n      --paper-lime-600: #c0ca33;\n      --paper-lime-700: #afb42b;\n      --paper-lime-800: #9e9d24;\n      --paper-lime-900: #827717;\n      --paper-lime-a100: #f4ff81;\n      --paper-lime-a200: #eeff41;\n      --paper-lime-a400: #c6ff00;\n      --paper-lime-a700: #aeea00;\n\n      --paper-yellow-50: #fffde7;\n      --paper-yellow-100: #fff9c4;\n      --paper-yellow-200: #fff59d;\n      --paper-yellow-300: #fff176;\n      --paper-yellow-400: #ffee58;\n      --paper-yellow-500: #ffeb3b;\n      --paper-yellow-600: #fdd835;\n      --paper-yellow-700: #fbc02d;\n      --paper-yellow-800: #f9a825;\n      --paper-yellow-900: #f57f17;\n      --paper-yellow-a100: #ffff8d;\n      --paper-yellow-a200: #ffff00;\n      --paper-yellow-a400: #ffea00;\n      --paper-yellow-a700: #ffd600;\n\n      --paper-amber-50: #fff8e1;\n      --paper-amber-100: #ffecb3;\n      --paper-amber-200: #ffe082;\n      --paper-amber-300: #ffd54f;\n      --paper-amber-400: #ffca28;\n      --paper-amber-500: #ffc107;\n      --paper-amber-600: #ffb300;\n      --paper-amber-700: #ffa000;\n      --paper-amber-800: #ff8f00;\n      --paper-amber-900: #ff6f00;\n      --paper-amber-a100: #ffe57f;\n      --paper-amber-a200: #ffd740;\n      --paper-amber-a400: #ffc400;\n      --paper-amber-a700: #ffab00;\n\n      --paper-orange-50: #fff3e0;\n      --paper-orange-100: #ffe0b2;\n      --paper-orange-200: #ffcc80;\n      --paper-orange-300: #ffb74d;\n      --paper-orange-400: #ffa726;\n      --paper-orange-500: #ff9800;\n      --paper-orange-600: #fb8c00;\n      --paper-orange-700: #f57c00;\n      --paper-orange-800: #ef6c00;\n      --paper-orange-900: #e65100;\n      --paper-orange-a100: #ffd180;\n      --paper-orange-a200: #ffab40;\n      --paper-orange-a400: #ff9100;\n      --paper-orange-a700: #ff6500;\n\n      --paper-deep-orange-50: #fbe9e7;\n      --paper-deep-orange-100: #ffccbc;\n      --paper-deep-orange-200: #ffab91;\n      --paper-deep-orange-300: #ff8a65;\n      --paper-deep-orange-400: #ff7043;\n      --paper-deep-orange-500: #ff5722;\n      --paper-deep-orange-600: #f4511e;\n      --paper-deep-orange-700: #e64a19;\n      --paper-deep-orange-800: #d84315;\n      --paper-deep-orange-900: #bf360c;\n      --paper-deep-orange-a100: #ff9e80;\n      --paper-deep-orange-a200: #ff6e40;\n      --paper-deep-orange-a400: #ff3d00;\n      --paper-deep-orange-a700: #dd2c00;\n\n      --paper-brown-50: #efebe9;\n      --paper-brown-100: #d7ccc8;\n      --paper-brown-200: #bcaaa4;\n      --paper-brown-300: #a1887f;\n      --paper-brown-400: #8d6e63;\n      --paper-brown-500: #795548;\n      --paper-brown-600: #6d4c41;\n      --paper-brown-700: #5d4037;\n      --paper-brown-800: #4e342e;\n      --paper-brown-900: #3e2723;\n\n      --paper-grey-50: #fafafa;\n      --paper-grey-100: #f5f5f5;\n      --paper-grey-200: #eeeeee;\n      --paper-grey-300: #e0e0e0;\n      --paper-grey-400: #bdbdbd;\n      --paper-grey-500: #9e9e9e;\n      --paper-grey-600: #757575;\n      --paper-grey-700: #616161;\n      --paper-grey-800: #424242;\n      --paper-grey-900: #212121;\n\n      --paper-blue-grey-50: #eceff1;\n      --paper-blue-grey-100: #cfd8dc;\n      --paper-blue-grey-200: #b0bec5;\n      --paper-blue-grey-300: #90a4ae;\n      --paper-blue-grey-400: #78909c;\n      --paper-blue-grey-500: #607d8b;\n      --paper-blue-grey-600: #546e7a;\n      --paper-blue-grey-700: #455a64;\n      --paper-blue-grey-800: #37474f;\n      --paper-blue-grey-900: #263238;\n\n      /* opacity for dark text on a light background */\n      --dark-divider-opacity: 0.12;\n      --dark-disabled-opacity: 0.38; /* or hint text or icon */\n      --dark-secondary-opacity: 0.54;\n      --dark-primary-opacity: 0.87;\n\n      /* opacity for light text on a dark background */\n      --light-divider-opacity: 0.12;\n      --light-disabled-opacity: 0.3; /* or hint text or icon */\n      --light-secondary-opacity: 0.7;\n      --light-primary-opacity: 1.0;\n\n    }\n\n  </style>\n</custom-style>\n`;\ntemplate.setAttribute('style', 'display: none;');\ndocument.head.appendChild(template.content);\n", "/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport '@polymer/paper-styles/color.js';\n\nimport {IronRangeBehavior} from '@polymer/iron-range-behavior/iron-range-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\nMaterial design: [Progress &\nactivity](https://www.google.com/design/spec/components/progress-activity.html)\n\nThe progress bars are for situations where the percentage completed can be\ndetermined. They give users a quick sense of how much longer an operation\nwill take.\n\nExample:\n\n    <paper-progress value=\"10\"></paper-progress>\n\nThere is also a secondary progress which is useful for displaying intermediate\nprogress, such as the buffer level during a streaming playback progress bar.\n\nExample:\n\n    <paper-progress value=\"10\" secondary-progress=\"30\"></paper-progress>\n\n### Styling progress bar:\n\nTo change the active progress bar color:\n\n    paper-progress {\n       --paper-progress-active-color: #e91e63;\n    }\n\nTo change the secondary progress bar color:\n\n    paper-progress {\n      --paper-progress-secondary-color: #f8bbd0;\n    }\n\nTo change the progress bar background color:\n\n    paper-progress {\n      --paper-progress-container-color: #64ffda;\n    }\n\nAdd the class `transiting` to a paper-progress to animate the progress bar when\nthe value changed. You can also customize the transition:\n\n    paper-progress {\n      --paper-progress-transition-duration: 0.08s;\n      --paper-progress-transition-timing-function: ease;\n      --paper-progress-transition-delay: 0s;\n    }\n\nTo change the duration of the indeterminate cycle:\n\n    paper-progress {\n      --paper-progress-indeterminate-cycle-duration: 2s;\n    }\n\nThe following mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|---------\n`--paper-progress-container` | Mixin applied to container | `{}`\n`--paper-progress-transition-duration` | Duration of the transition | `0.08s`\n`--paper-progress-transition-timing-function` | The timing function for the transition | `ease`\n`--paper-progress-transition-delay` | delay for the transition | `0s`\n`--paper-progress-container-color` | Color of the container | `--google-grey-300`\n`--paper-progress-active-color` | The color of the active bar | `--google-green-500`\n`--paper-progress-secondary-color` | The color of the secondary bar | `--google-green-100`\n`--paper-progress-disabled-active-color` | The color of the active bar if disabled | `--google-grey-500`\n`--paper-progress-disabled-secondary-color` | The color of the secondary bar if disabled  | `--google-grey-300`\n`--paper-progress-height` | The height of the progress bar | `4px`\n`--paper-progress-indeterminate-cycle-duration` | Duration of an indeterminate cycle | `2s`\n\n@group Paper Elements\n@element paper-progress\n@demo demo/index.html\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: block;\n        width: 200px;\n        position: relative;\n        overflow: hidden;\n      }\n\n      :host([hidden]), [hidden] {\n        display: none !important;\n      }\n\n      #progressContainer {\n        @apply --paper-progress-container;\n        position: relative;\n      }\n\n      #progressContainer,\n      /* the stripe for the indeterminate animation*/\n      .indeterminate::after {\n        height: var(--paper-progress-height, 4px);\n      }\n\n      #primaryProgress,\n      #secondaryProgress,\n      .indeterminate::after {\n        @apply --layout-fit;\n      }\n\n      #progressContainer,\n      .indeterminate::after {\n        background: var(--paper-progress-container-color, var(--google-grey-300));\n      }\n\n      :host(.transiting) #primaryProgress,\n      :host(.transiting) #secondaryProgress {\n        -webkit-transition-property: -webkit-transform;\n        transition-property: transform;\n\n        /* Duration */\n        -webkit-transition-duration: var(--paper-progress-transition-duration, 0.08s);\n        transition-duration: var(--paper-progress-transition-duration, 0.08s);\n\n        /* Timing function */\n        -webkit-transition-timing-function: var(--paper-progress-transition-timing-function, ease);\n        transition-timing-function: var(--paper-progress-transition-timing-function, ease);\n\n        /* Delay */\n        -webkit-transition-delay: var(--paper-progress-transition-delay, 0s);\n        transition-delay: var(--paper-progress-transition-delay, 0s);\n      }\n\n      #primaryProgress,\n      #secondaryProgress {\n        @apply --layout-fit;\n        -webkit-transform-origin: left center;\n        transform-origin: left center;\n        -webkit-transform: scaleX(0);\n        transform: scaleX(0);\n        will-change: transform;\n      }\n\n      #primaryProgress {\n        background: var(--paper-progress-active-color, var(--google-green-500));\n      }\n\n      #secondaryProgress {\n        background: var(--paper-progress-secondary-color, var(--google-green-100));\n      }\n\n      :host([disabled]) #primaryProgress {\n        background: var(--paper-progress-disabled-active-color, var(--google-grey-500));\n      }\n\n      :host([disabled]) #secondaryProgress {\n        background: var(--paper-progress-disabled-secondary-color, var(--google-grey-300));\n      }\n\n      :host(:not([disabled])) #primaryProgress.indeterminate {\n        -webkit-transform-origin: right center;\n        transform-origin: right center;\n        -webkit-animation: indeterminate-bar var(--paper-progress-indeterminate-cycle-duration, 2s) linear infinite;\n        animation: indeterminate-bar var(--paper-progress-indeterminate-cycle-duration, 2s) linear infinite;\n      }\n\n      :host(:not([disabled])) #primaryProgress.indeterminate::after {\n        content: \"\";\n        -webkit-transform-origin: center center;\n        transform-origin: center center;\n\n        -webkit-animation: indeterminate-splitter var(--paper-progress-indeterminate-cycle-duration, 2s) linear infinite;\n        animation: indeterminate-splitter var(--paper-progress-indeterminate-cycle-duration, 2s) linear infinite;\n      }\n\n      @-webkit-keyframes indeterminate-bar {\n        0% {\n          -webkit-transform: scaleX(1) translateX(-100%);\n        }\n        50% {\n          -webkit-transform: scaleX(1) translateX(0%);\n        }\n        75% {\n          -webkit-transform: scaleX(1) translateX(0%);\n          -webkit-animation-timing-function: cubic-bezier(.28,.62,.37,.91);\n        }\n        100% {\n          -webkit-transform: scaleX(0) translateX(0%);\n        }\n      }\n\n      @-webkit-keyframes indeterminate-splitter {\n        0% {\n          -webkit-transform: scaleX(.75) translateX(-125%);\n        }\n        30% {\n          -webkit-transform: scaleX(.75) translateX(-125%);\n          -webkit-animation-timing-function: cubic-bezier(.42,0,.6,.8);\n        }\n        90% {\n          -webkit-transform: scaleX(.75) translateX(125%);\n        }\n        100% {\n          -webkit-transform: scaleX(.75) translateX(125%);\n        }\n      }\n\n      @keyframes indeterminate-bar {\n        0% {\n          transform: scaleX(1) translateX(-100%);\n        }\n        50% {\n          transform: scaleX(1) translateX(0%);\n        }\n        75% {\n          transform: scaleX(1) translateX(0%);\n          animation-timing-function: cubic-bezier(.28,.62,.37,.91);\n        }\n        100% {\n          transform: scaleX(0) translateX(0%);\n        }\n      }\n\n      @keyframes indeterminate-splitter {\n        0% {\n          transform: scaleX(.75) translateX(-125%);\n        }\n        30% {\n          transform: scaleX(.75) translateX(-125%);\n          animation-timing-function: cubic-bezier(.42,0,.6,.8);\n        }\n        90% {\n          transform: scaleX(.75) translateX(125%);\n        }\n        100% {\n          transform: scaleX(.75) translateX(125%);\n        }\n      }\n    </style>\n\n    <div id=\"progressContainer\">\n      <div id=\"secondaryProgress\" hidden\\$=\"[[_hideSecondaryProgress(secondaryRatio)]]\"></div>\n      <div id=\"primaryProgress\"></div>\n    </div>\n`,\n\n  is: 'paper-progress',\n  behaviors: [IronRangeBehavior],\n\n  properties: {\n    /**\n     * The number that represents the current secondary progress.\n     */\n    secondaryProgress: {type: Number, value: 0},\n\n    /**\n     * The secondary ratio\n     */\n    secondaryRatio: {type: Number, value: 0, readOnly: true},\n\n    /**\n     * Use an indeterminate progress indicator.\n     */\n    indeterminate:\n        {type: Boolean, value: false, observer: '_toggleIndeterminate'},\n\n    /**\n     * True if the progress is disabled.\n     */\n    disabled: {\n      type: Boolean,\n      value: false,\n      reflectToAttribute: true,\n      observer: '_disabledChanged'\n    }\n  },\n\n  observers:\n      ['_progressChanged(secondaryProgress, value, min, max, indeterminate)'],\n\n  hostAttributes: {role: 'progressbar'},\n\n  _toggleIndeterminate: function(indeterminate) {\n    // If we use attribute/class binding, the animation sometimes doesn't\n    // translate properly on Safari 7.1. So instead, we toggle the class here in\n    // the update method.\n    this.toggleClass('indeterminate', indeterminate, this.$.primaryProgress);\n  },\n\n  _transformProgress: function(progress, ratio) {\n    var transform = 'scaleX(' + (ratio / 100) + ')';\n    progress.style.transform = progress.style.webkitTransform = transform;\n  },\n\n  _mainRatioChanged: function(ratio) {\n    this._transformProgress(this.$.primaryProgress, ratio);\n  },\n\n  _progressChanged: function(\n      secondaryProgress, value, min, max, indeterminate) {\n    secondaryProgress = this._clampValue(secondaryProgress);\n    value = this._clampValue(value);\n\n    var secondaryRatio = this._calcRatio(secondaryProgress) * 100;\n    var mainRatio = this._calcRatio(value) * 100;\n\n    this._setSecondaryRatio(secondaryRatio);\n    this._transformProgress(this.$.secondaryProgress, secondaryRatio);\n    this._transformProgress(this.$.primaryProgress, mainRatio);\n\n    this.secondaryProgress = secondaryProgress;\n\n    if (indeterminate) {\n      this.removeAttribute('aria-valuenow');\n    } else {\n      this.setAttribute('aria-valuenow', value);\n    }\n    this.setAttribute('aria-valuemin', min);\n    this.setAttribute('aria-valuemax', max);\n  },\n\n  _disabledChanged: function(disabled) {\n    this.setAttribute('aria-disabled', disabled ? 'true' : 'false');\n  },\n\n  _hideSecondaryProgress: function(secondaryRatio) {\n    return secondaryRatio === 0;\n  }\n});\n", "/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\n`iron-a11y-announcer` is a singleton element that is intended to add a11y\nto features that require on-demand announcement from screen readers. In\norder to make use of the announcer, it is best to request its availability\nin the announcing element.\n\nExample:\n\n    Polymer({\n\n      is: 'x-chatty',\n\n      attached: function() {\n        // This will create the singleton element if it has not\n        // been created yet:\n        Polymer.IronA11yAnnouncer.requestAvailability();\n      }\n    });\n\nAfter the `iron-a11y-announcer` has been made available, elements can\nmake announces by firing bubbling `iron-announce` events.\n\nExample:\n\n    this.fire('iron-announce', {\n      text: 'This is an announcement!'\n    }, { bubbles: true });\n\nNote: announcements are only audible if you have a screen reader enabled.\n\n@demo demo/index.html\n*/\nexport const IronA11yAnnouncer = Polymer({\n  /** @override */\n  _template: html`\n    <style>\n      :host {\n        display: inline-block;\n        position: fixed;\n        clip: rect(0px,0px,0px,0px);\n      }\n    </style>\n    <div aria-live$=\"[[mode]]\">[[_text]]</div>\n`,\n\n  is: 'iron-a11y-announcer',\n\n  properties: {\n\n    /**\n     * The value of mode is used to set the `aria-live` attribute\n     * for the element that will be announced. Valid values are: `off`,\n     * `polite` and `assertive`.\n     */\n    mode: {type: String, value: 'polite'},\n\n    /**\n     * The timeout on refreshing the announcement text. Larger timeouts are\n     * needed for certain screen readers to re-announce the same message.\n     */\n    timeout: {type: Number, value: 150},\n\n    _text: {type: String, value: ''},\n  },\n\n  /** @override */\n  created: function() {\n    if (!IronA11yAnnouncer.instance) {\n      IronA11yAnnouncer.instance = this;\n    }\n\n    document.addEventListener('iron-announce', this._onIronAnnounce.bind(this));\n  },\n\n  /**\n   * Cause a text string to be announced by screen readers.\n   *\n   * @param {string} text The text that should be announced.\n   */\n  announce: function(text) {\n    this._text = '';\n    this.async(function() {\n      this._text = text;\n    }, this.timeout);\n  },\n\n  _onIronAnnounce: function(event) {\n    if (event.detail && event.detail.text) {\n      this.announce(event.detail.text);\n    }\n  }\n});\n\nIronA11yAnnouncer.instance = null;\n\nIronA11yAnnouncer.requestAvailability = function() {\n  if (!IronA11yAnnouncer.instance) {\n    IronA11yAnnouncer.instance = document.createElement('iron-a11y-announcer');\n  }\n\n  if (document.body) {\n    document.body.appendChild(IronA11yAnnouncer.instance);\n  } else {\n    document.addEventListener('load', function() {\n      document.body.appendChild(IronA11yAnnouncer.instance);\n    });\n  }\n};\n", "/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\n\nexport class IronMeta {\n  /**\n   * @param {{\n   *   type: (string|null|undefined),\n   *   key: (string|null|undefined),\n   *   value: *,\n   * }=} options\n   */\n  constructor(options) {\n    IronMeta[' '](options);\n\n    /** @type {string} */\n    this.type = (options && options.type) || 'default';\n    /** @type {string|null|undefined} */\n    this.key = options && options.key;\n    if (options && 'value' in options) {\n      /** @type {*} */\n      this.value = options.value;\n    }\n  }\n\n  /** @return {*} */\n  get value() {\n    var type = this.type;\n    var key = this.key;\n\n    if (type && key) {\n      return IronMeta.types[type] && IronMeta.types[type][key];\n    }\n  }\n\n  /** @param {*} value */\n  set value(value) {\n    var type = this.type;\n    var key = this.key;\n\n    if (type && key) {\n      type = IronMeta.types[type] = IronMeta.types[type] || {};\n      if (value == null) {\n        delete type[key];\n      } else {\n        type[key] = value;\n      }\n    }\n  }\n\n  /** @return {!Array<*>} */\n  get list() {\n    var type = this.type;\n\n    if (type) {\n      var items = IronMeta.types[this.type];\n      if (!items) {\n        return [];\n      }\n\n      return Object.keys(items).map(function(key) {\n        return metaDatas[this.type][key];\n      }, this);\n    }\n  }\n\n  /**\n   * @param {string} key\n   * @return {*}\n   */\n  byKey(key) {\n    this.key = key;\n    return this.value;\n  }\n};\n\n// This function is used to convince Closure not to remove constructor calls\n// for instances that are not held anywhere. For example, when\n// `new IronMeta({...})` is used only for the side effect of adding a value.\nIronMeta[' '] = function() {};\n\nIronMeta.types = {};\n\nvar metaDatas = IronMeta.types;\n\n/**\n`iron-meta` is a generic element you can use for sharing information across the\nDOM tree. It uses [monostate pattern](http://c2.com/cgi/wiki?MonostatePattern)\nsuch that any instance of iron-meta has access to the shared information. You\ncan use `iron-meta` to share whatever you want (or create an extension [like\nx-meta] for enhancements).\n\nThe `iron-meta` instances containing your actual data can be loaded in an\nimport, or constructed in any way you see fit. The only requirement is that you\ncreate them before you try to access them.\n\nExamples:\n\nIf I create an instance like this:\n\n    <iron-meta key=\"info\" value=\"foo/bar\"></iron-meta>\n\nNote that value=\"foo/bar\" is the metadata I've defined. I could define more\nattributes or use child nodes to define additional metadata.\n\nNow I can access that element (and it's metadata) from any iron-meta instance\nvia the byKey method, e.g.\n\n    meta.byKey('info');\n\nPure imperative form would be like:\n\n    document.createElement('iron-meta').byKey('info');\n\nOr, in a Polymer element, you can include a meta in your template:\n\n    <iron-meta id=\"meta\"></iron-meta>\n    ...\n    this.$.meta.byKey('info');\n\n@group Iron Elements\n@demo demo/index.html\n@element iron-meta\n*/\nPolymer({\n\n  is: 'iron-meta',\n\n  properties: {\n\n    /**\n     * The type of meta-data.  All meta-data of the same type is stored\n     * together.\n     * @type {string}\n     */\n    type: {\n      type: String,\n      value: 'default',\n    },\n\n    /**\n     * The key used to store `value` under the `type` namespace.\n     * @type {?string}\n     */\n    key: {\n      type: String,\n    },\n\n    /**\n     * The meta-data to store or retrieve.\n     * @type {*}\n     */\n    value: {\n      type: String,\n      notify: true,\n    },\n\n    /**\n     * If true, `value` is set to the iron-meta instance itself.\n     */\n    self: {type: Boolean, observer: '_selfChanged'},\n\n    __meta: {type: Boolean, computed: '__computeMeta(type, key, value)'}\n  },\n\n  hostAttributes: {hidden: true},\n\n  __computeMeta: function(type, key, value) {\n    var meta = new IronMeta({type: type, key: key});\n\n    if (value !== undefined && value !== meta.value) {\n      meta.value = value;\n    } else if (this.value !== meta.value) {\n      this.value = meta.value;\n    }\n\n    return meta;\n  },\n\n  get list() {\n    return this.__meta && this.__meta.list;\n  },\n\n  _selfChanged: function(self) {\n    if (self) {\n      this.value = this;\n    }\n  },\n\n  /**\n   * Retrieves meta data value by key.\n   *\n   * @method byKey\n   * @param {string} key The key of the meta-data to be returned.\n   * @return {*}\n   */\n  byKey: function(key) {\n    return new IronMeta({type: this.type, key: key}).value;\n  }\n});\n", "/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {IronMeta} from '@polymer/iron-meta/iron-meta.js';\n\n/**\n * Singleton IronMeta instance.\n */\nexport let IronValidatableBehaviorMeta = null;\n\n/**\n * `Use IronValidatableBehavior` to implement an element that validates\n * user input. Use the related `IronValidatorBehavior` to add custom\n * validation logic to an iron-input.\n *\n * By default, an `<iron-form>` element validates its fields when the user\n * presses the submit button. To validate a form imperatively, call the form's\n * `validate()` method, which in turn will call `validate()` on all its\n * children. By using `IronValidatableBehavior`, your custom element\n * will get a public `validate()`, which will return the validity of the\n * element, and a corresponding `invalid` attribute, which can be used for\n * styling.\n *\n * To implement the custom validation logic of your element, you must override\n * the protected `_getValidity()` method of this behaviour, rather than\n * `validate()`. See\n * [this](https://github.com/PolymerElements/iron-form/blob/master/demo/simple-element.html)\n * for an example.\n *\n * ### Accessibility\n *\n * Changing the `invalid` property, either manually or by calling `validate()`\n * will update the `aria-invalid` attribute.\n *\n * @demo demo/index.html\n * @polymerBehavior\n */\nexport const IronValidatableBehavior = {\n\n  properties: {\n    /**\n     * Name of the validator to use.\n     */\n    validator: {type: String},\n\n    /**\n     * True if the last call to `validate` is invalid.\n     */\n    invalid: {\n      notify: true,\n      reflectToAttribute: true,\n      type: Boolean,\n      value: false,\n      observer: '_invalidChanged'\n    },\n  },\n\n  registered: function() {\n    IronValidatableBehaviorMeta = new IronMeta({type: 'validator'});\n  },\n\n  _invalidChanged: function() {\n    if (this.invalid) {\n      this.setAttribute('aria-invalid', 'true');\n    } else {\n      this.removeAttribute('aria-invalid');\n    }\n  },\n\n  /* Recompute this every time it's needed, because we don't know if the\n   * underlying IronValidatableBehaviorMeta has changed. */\n  get _validator() {\n    return IronValidatableBehaviorMeta &&\n        IronValidatableBehaviorMeta.byKey(this.validator);\n  },\n\n  /**\n   * @return {boolean} True if the validator `validator` exists.\n   */\n  hasValidator: function() {\n    return this._validator != null;\n  },\n\n  /**\n   * Returns true if the `value` is valid, and updates `invalid`. If you want\n   * your element to have custom validation logic, do not override this method;\n   * override `_getValidity(value)` instead.\n\n   * @param {Object} value Deprecated: The value to be validated. By default,\n   * it is passed to the validator's `validate()` function, if a validator is\n   set.\n   * If this argument is not specified, then the element's `value` property\n   * is used, if it exists.\n   * @return {boolean} True if `value` is valid.\n   */\n  validate: function(value) {\n    // If this is an element that also has a value property, and there was\n    // no explicit value argument passed, use the element's property instead.\n    if (value === undefined && this.value !== undefined)\n      this.invalid = !this._getValidity(this.value);\n    else\n      this.invalid = !this._getValidity(value);\n    return !this.invalid;\n  },\n\n  /**\n   * Returns true if `value` is valid.  By default, it is passed\n   * to the validator's `validate()` function, if a validator is set. You\n   * should override this method if you want to implement custom validity\n   * logic for your element.\n   *\n   * @param {Object} value The value to be validated.\n   * @return {boolean} True if `value` is valid.\n   */\n\n  _getValidity: function(value) {\n    if (this.hasValidator()) {\n      return this._validator.validate(value);\n    }\n    return true;\n  }\n};\n", "/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {IronA11yAnnouncer} from '@polymer/iron-a11y-announcer/iron-a11y-announcer.js';\nimport {IronValidatableBehavior} from '@polymer/iron-validatable-behavior/iron-validatable-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\n`<iron-input>` is a wrapper to a native `<input>` element, that adds two-way\nbinding and prevention of invalid input. To use it, you must distribute a native\n`<input>` yourself. You can continue to use the native `input` as you would\nnormally:\n\n    <iron-input>\n      <input>\n    </iron-input>\n\n    <iron-input>\n      <input type=\"email\" disabled>\n    </iron-input>\n\n### Two-way binding\n\nBy default you can only get notified of changes to a native `<input>`'s `value`\ndue to user input:\n\n    <input value=\"{{myValue::input}}\">\n\nThis means that if you imperatively set the value (i.e. `someNativeInput.value =\n'foo'`), no events will be fired and this change cannot be observed.\n\n`iron-input` adds the `bind-value` property that mirrors the native `input`'s\n'`value` property; this property can be used for two-way data binding.\n`bind-value` will notify if it is changed either by user input or by script.\n\n    <iron-input bind-value=\"{{myValue}}\">\n      <input>\n    </iron-input>\n\nNote: this means that if you want to imperatively set the native `input`'s, you\n_must_ set `bind-value` instead, so that the wrapper `iron-input` can be\nnotified.\n\n### Validation\n\n`iron-input` uses the native `input`'s validation. For simplicity, `iron-input`\nhas a `validate()` method (which internally just checks the distributed\n`input`'s validity), which sets an `invalid` attribute that can also be used for\nstyling.\n\nTo validate automatically as you type, you can use the `auto-validate`\nattribute.\n\n`iron-input` also fires an `iron-input-validate` event after `validate()` is\ncalled. You can use it to implement a custom validator:\n\n    var CatsOnlyValidator = {\n      validate: function(ironInput) {\n        var valid = !ironInput.bindValue || ironInput.bindValue === 'cat';\n        ironInput.invalid = !valid;\n        return valid;\n      }\n    }\n    ironInput.addEventListener('iron-input-validate', function() {\n      CatsOnly.validate(input2);\n    });\n\nYou can also use an element implementing an\n[`IronValidatorBehavior`](/element/PolymerElements/iron-validatable-behavior).\nThis example can also be found in the demo for this element:\n\n    <iron-input validator=\"cats-only\">\n      <input>\n    </iron-input>\n\n### Preventing invalid input\n\nIt may be desirable to only allow users to enter certain characters. You can use\nthe `allowed-pattern` attribute to accomplish this. This feature is separate\nfrom validation, and `allowed-pattern` does not affect how the input is\nvalidated.\n\n    // Only allow typing digits, but a valid input has exactly 5 digits.\n    <iron-input allowed-pattern=\"[0-9]\">\n      <input pattern=\"\\d{5}\">\n    </iron-input>\n\n@demo demo/index.html\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: inline-block;\n      }\n    </style>\n    <slot id=\"content\"></slot>\n`,\n\n  is: 'iron-input',\n  behaviors: [IronValidatableBehavior],\n\n  /**\n   * Fired whenever `validate()` is called.\n   *\n   * @event iron-input-validate\n   */\n\n  properties: {\n\n    /**\n     * Use this property instead of `value` for two-way data binding, or to\n     * set a default value for the input. **Do not** use the distributed\n     * input's `value` property to set a default value.\n     */\n    bindValue: {type: String, value: ''},\n\n    /**\n     * Computed property that echoes `bindValue` (mostly used for Polymer 1.0\n     * backcompatibility, if you were one-way binding to the Polymer 1.0\n     * `input is=\"iron-input\"` value attribute).\n     */\n    value: {type: String, computed: '_computeValue(bindValue)'},\n\n    /**\n     * Regex-like list of characters allowed as input; all characters not in the\n     * list will be rejected. The recommended format should be a list of allowed\n     * characters, for example, `[a-zA-Z0-9.+-!;:]`.\n     *\n     * This pattern represents the allowed characters for the field; as the user\n     * inputs text, each individual character will be checked against the\n     * pattern (rather than checking the entire value as a whole). If a\n     * character is not a match, it will be rejected.\n     *\n     * Pasted input will have each character checked individually; if any\n     * character doesn't match `allowedPattern`, the entire pasted string will\n     * be rejected.\n     *\n     * Note: if you were using `iron-input` in 1.0, you were also required to\n     * set `prevent-invalid-input`. This is no longer needed as of Polymer 2.0,\n     * and will be set automatically for you if an `allowedPattern` is provided.\n     *\n     */\n    allowedPattern: {type: String},\n\n    /**\n     * Set to true to auto-validate the input value as you type.\n     */\n    autoValidate: {type: Boolean, value: false},\n\n    /**\n     * The native input element.\n     */\n    _inputElement: Object,\n  },\n\n  observers: ['_bindValueChanged(bindValue, _inputElement)'],\n  listeners: {'input': '_onInput', 'keypress': '_onKeypress'},\n\n  created: function() {\n    IronA11yAnnouncer.requestAvailability();\n    this._previousValidInput = '';\n    this._patternAlreadyChecked = false;\n  },\n\n  attached: function() {\n    // If the input is added at a later time, update the internal reference.\n    this._observer = dom(this).observeNodes(function(info) {\n      this._initSlottedInput();\n    }.bind(this));\n  },\n\n  detached: function() {\n    if (this._observer) {\n      dom(this).unobserveNodes(this._observer);\n      this._observer = null;\n    }\n  },\n\n  /**\n   * Returns the distributed input element.\n   */\n  get inputElement() {\n    return this._inputElement;\n  },\n\n  _initSlottedInput: function() {\n    this._inputElement = this.getEffectiveChildren()[0];\n\n    if (this.inputElement && this.inputElement.value) {\n      this.bindValue = this.inputElement.value;\n    }\n\n    this.fire('iron-input-ready');\n  },\n\n  get _patternRegExp() {\n    var pattern;\n    if (this.allowedPattern) {\n      pattern = new RegExp(this.allowedPattern);\n    } else {\n      switch (this.inputElement.type) {\n        case 'number':\n          pattern = /[0-9.,e-]/;\n          break;\n      }\n    }\n    return pattern;\n  },\n\n  /**\n   * @suppress {checkTypes}\n   */\n  _bindValueChanged: function(bindValue, inputElement) {\n    // The observer could have run before attached() when we have actually\n    // initialized this property.\n    if (!inputElement) {\n      return;\n    }\n\n    if (bindValue === undefined) {\n      inputElement.value = null;\n    } else if (bindValue !== inputElement.value) {\n      this.inputElement.value = bindValue;\n    }\n\n    if (this.autoValidate) {\n      this.validate();\n    }\n\n    // manually notify because we don't want to notify until after setting value\n    this.fire('bind-value-changed', {value: bindValue});\n  },\n\n  _onInput: function() {\n    // Need to validate each of the characters pasted if they haven't\n    // been validated inside `_onKeypress` already.\n    if (this.allowedPattern && !this._patternAlreadyChecked) {\n      var valid = this._checkPatternValidity();\n      if (!valid) {\n        this._announceInvalidCharacter(\n            'Invalid string of characters not entered.');\n        this.inputElement.value = this._previousValidInput;\n      }\n    }\n    this.bindValue = this._previousValidInput = this.inputElement.value;\n    this._patternAlreadyChecked = false;\n  },\n\n  _isPrintable: function(event) {\n    // What a control/printable character is varies wildly based on the browser.\n    // - most control characters (arrows, backspace) do not send a `keypress`\n    // event\n    //   in Chrome, but the *do* on Firefox\n    // - in Firefox, when they do send a `keypress` event, control chars have\n    //   a charCode = 0, keyCode = xx (for ex. 40 for down arrow)\n    // - printable characters always send a keypress event.\n    // - in Firefox, printable chars always have a keyCode = 0. In Chrome, the\n    // keyCode\n    //   always matches the charCode.\n    // None of this makes any sense.\n\n    // For these keys, ASCII code == browser keycode.\n    var anyNonPrintable = (event.keyCode == 8) ||  // backspace\n        (event.keyCode == 9) ||                    // tab\n        (event.keyCode == 13) ||                   // enter\n        (event.keyCode == 27);                     // escape\n\n    // For these keys, make sure it's a browser keycode and not an ASCII code.\n    var mozNonPrintable = (event.keyCode == 19) ||  // pause\n        (event.keyCode == 20) ||                    // caps lock\n        (event.keyCode == 45) ||                    // insert\n        (event.keyCode == 46) ||                    // delete\n        (event.keyCode == 144) ||                   // num lock\n        (event.keyCode == 145) ||                   // scroll lock\n        (event.keyCode > 32 &&\n         event.keyCode < 41) ||  // page up/down, end, home, arrows\n        (event.keyCode > 111 && event.keyCode < 124);  // fn keys\n\n    return !anyNonPrintable && !(event.charCode == 0 && mozNonPrintable);\n  },\n\n  _onKeypress: function(event) {\n    if (!this.allowedPattern && this.inputElement.type !== 'number') {\n      return;\n    }\n    var regexp = this._patternRegExp;\n    if (!regexp) {\n      return;\n    }\n\n    // Handle special keys and backspace\n    if (event.metaKey || event.ctrlKey || event.altKey) {\n      return;\n    }\n\n    // Check the pattern either here or in `_onInput`, but not in both.\n    this._patternAlreadyChecked = true;\n\n    var thisChar = String.fromCharCode(event.charCode);\n    if (this._isPrintable(event) && !regexp.test(thisChar)) {\n      event.preventDefault();\n      this._announceInvalidCharacter(\n          'Invalid character ' + thisChar + ' not entered.');\n    }\n  },\n\n  _checkPatternValidity: function() {\n    var regexp = this._patternRegExp;\n    if (!regexp) {\n      return true;\n    }\n    for (var i = 0; i < this.inputElement.value.length; i++) {\n      if (!regexp.test(this.inputElement.value[i])) {\n        return false;\n      }\n    }\n    return true;\n  },\n\n  /**\n   * Returns true if `value` is valid. The validator provided in `validator`\n   * will be used first, then any constraints.\n   * @return {boolean} True if the value is valid.\n   */\n  validate: function() {\n    if (!this.inputElement) {\n      this.invalid = false;\n      return true;\n    }\n\n    // Use the nested input's native validity.\n    var valid = this.inputElement.checkValidity();\n\n    // Only do extra checking if the browser thought this was valid.\n    if (valid) {\n      // Empty, required input is invalid\n      if (this.required && this.bindValue === '') {\n        valid = false;\n      } else if (this.hasValidator()) {\n        valid = IronValidatableBehavior.validate.call(this, this.bindValue);\n      }\n    }\n\n    this.invalid = !valid;\n    this.fire('iron-input-validate');\n    return valid;\n  },\n\n  _announceInvalidCharacter: function(message) {\n    this.fire('iron-announce', {text: message});\n  },\n\n  _computeValue: function(bindValue) {\n    return bindValue;\n  }\n});\n", "/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n\nexport {}; // ensure this file can only be parsed as a module.\n\n// Give the user the choice to opt out of font loading.\nif (!window.polymerSkipLoadingFontRoboto) {\n  const link = document.createElement('link');\n  link.rel = 'stylesheet';\n  link.type = 'text/css';\n  link.crossOrigin = 'anonymous';\n  link.href =\n      'https://fonts.googleapis.com/css?family=Roboto+Mono:400,700|Roboto:400,300,300italic,400italic,500,500italic,700,700italic';\n  document.head.appendChild(link);\n}\n", "/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n/*\nTypographic styles are provided matching the Material Design standard styles:\nhttp://www.google.com/design/spec/style/typography.html#typography-standard-styles\n\nNote that these are English/Latin centric styles. You may need to further adjust\nline heights and weights for CJK typesetting. See the notes in the Material\nDesign typography section.\n*/\n\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/font-roboto/roboto.js';\n\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\nconst template = html`<custom-style>\n  <style is=\"custom-style\">\n    html {\n\n      /* Shared Styles */\n      --paper-font-common-base: {\n        font-family: 'Roboto', 'Noto', sans-serif;\n        -webkit-font-smoothing: antialiased;\n      };\n\n      --paper-font-common-code: {\n        font-family: 'Roboto Mono', 'Consolas', 'Menlo', monospace;\n        -webkit-font-smoothing: antialiased;\n      };\n\n      --paper-font-common-expensive-kerning: {\n        text-rendering: optimizeLegibility;\n      };\n\n      --paper-font-common-nowrap: {\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n      };\n\n      /* Material Font Styles */\n\n      --paper-font-display4: {\n        @apply --paper-font-common-base;\n        @apply --paper-font-common-nowrap;\n\n        font-size: 112px;\n        font-weight: 300;\n        letter-spacing: -.044em;\n        line-height: 120px;\n      };\n\n      --paper-font-display3: {\n        @apply --paper-font-common-base;\n        @apply --paper-font-common-nowrap;\n\n        font-size: 56px;\n        font-weight: 400;\n        letter-spacing: -.026em;\n        line-height: 60px;\n      };\n\n      --paper-font-display2: {\n        @apply --paper-font-common-base;\n\n        font-size: 45px;\n        font-weight: 400;\n        letter-spacing: -.018em;\n        line-height: 48px;\n      };\n\n      --paper-font-display1: {\n        @apply --paper-font-common-base;\n\n        font-size: 34px;\n        font-weight: 400;\n        letter-spacing: -.01em;\n        line-height: 40px;\n      };\n\n      --paper-font-headline: {\n        @apply --paper-font-common-base;\n\n        font-size: 24px;\n        font-weight: 400;\n        letter-spacing: -.012em;\n        line-height: 32px;\n      };\n\n      --paper-font-title: {\n        @apply --paper-font-common-base;\n        @apply --paper-font-common-nowrap;\n\n        font-size: 20px;\n        font-weight: 500;\n        line-height: 28px;\n      };\n\n      --paper-font-subhead: {\n        @apply --paper-font-common-base;\n\n        font-size: 16px;\n        font-weight: 400;\n        line-height: 24px;\n      };\n\n      --paper-font-body2: {\n        @apply --paper-font-common-base;\n\n        font-size: 14px;\n        font-weight: 500;\n        line-height: 24px;\n      };\n\n      --paper-font-body1: {\n        @apply --paper-font-common-base;\n\n        font-size: 14px;\n        font-weight: 400;\n        line-height: 20px;\n      };\n\n      --paper-font-caption: {\n        @apply --paper-font-common-base;\n        @apply --paper-font-common-nowrap;\n\n        font-size: 12px;\n        font-weight: 400;\n        letter-spacing: 0.011em;\n        line-height: 20px;\n      };\n\n      --paper-font-menu: {\n        @apply --paper-font-common-base;\n        @apply --paper-font-common-nowrap;\n\n        font-size: 13px;\n        font-weight: 500;\n        line-height: 24px;\n      };\n\n      --paper-font-button: {\n        @apply --paper-font-common-base;\n        @apply --paper-font-common-nowrap;\n\n        font-size: 14px;\n        font-weight: 500;\n        letter-spacing: 0.018em;\n        line-height: 24px;\n        text-transform: uppercase;\n      };\n\n      --paper-font-code2: {\n        @apply --paper-font-common-code;\n\n        font-size: 14px;\n        font-weight: 700;\n        line-height: 20px;\n      };\n\n      --paper-font-code1: {\n        @apply --paper-font-common-code;\n\n        font-size: 14px;\n        font-weight: 500;\n        line-height: 20px;\n      };\n\n    }\n\n  </style>\n</custom-style>`;\ntemplate.setAttribute('style', 'display: none;');\ndocument.head.appendChild(template.content);\n", "/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\n/**\n * Use `Polymer.PaperInputAddonBehavior` to implement an add-on for\n * `<paper-input-container>`. A add-on appears below the input, and may display\n * information based on the input value and validity such as a character counter\n * or an error message.\n * @polymerBehavior\n */\nexport const PaperInputAddonBehavior = {\n  attached: function() {\n    this.fire('addon-attached');\n  },\n\n  /**\n   * The function called by `<paper-input-container>` when the input value or\n   * validity changes.\n   * @param {{\n   *   invalid: boolean,\n   *   inputElement: (Element|undefined),\n   *   value: (string|undefined)\n   * }} state -\n   *     inputElement: The input element.\n   *     value: The input value.\n   *     invalid: True if the input value is invalid.\n   */\n  update: function(state) {}\n\n};\n", "/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/paper-styles/typography.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\nimport {PaperInputAddonBehavior} from './paper-input-addon-behavior.js';\n\n/*\n`<paper-input-char-counter>` is a character counter for use with\n`<paper-input-container>`. It shows the number of characters entered in the\ninput and the max length if it is specified.\n\n    <paper-input-container>\n      <input maxlength=\"20\">\n      <paper-input-char-counter></paper-input-char-counter>\n    </paper-input-container>\n\n### Styling\n\nThe following mixin is available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-input-char-counter` | Mixin applied to the element | `{}`\n*/\nPolymer({\n  /** @override */\n  _template: html`\n    <style>\n      :host {\n        display: inline-block;\n        float: right;\n\n        @apply --paper-font-caption;\n        @apply --paper-input-char-counter;\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      :host(:dir(rtl)) {\n        float: left;\n      }\n    </style>\n\n    <span>[[_charCounterStr]]</span>\n`,\n\n  is: 'paper-input-char-counter',\n  behaviors: [PaperInputAddonBehavior],\n  properties: {_charCounterStr: {type: String, value: '0'}},\n\n  /**\n   * This overrides the update function in PaperInputAddonBehavior.\n   * @param {{\n   *   inputElement: (Element|undefined),\n   *   value: (string|undefined),\n   *   invalid: boolean\n   * }} state -\n   *     inputElement: The input element.\n   *     value: The input value.\n   *     invalid: True if the input value is invalid.\n   */\n  update: function(state) {\n    if (!state.inputElement) {\n      return;\n    }\n\n    state.value = state.value || '';\n\n    var counter = state.value.toString().length.toString();\n\n    if (state.inputElement.hasAttribute('maxlength')) {\n      counter += '/' + state.inputElement.getAttribute('maxlength');\n    }\n\n    this._charCounterStr = counter;\n  }\n});\n", "/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n/* Taken from\n * https://www.google.com/design/spec/style/color.html#color-ui-color-application\n */\nimport '@polymer/polymer/polymer-legacy.js';\nimport './color.js';\n\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\nconst template = html`\n<custom-style>\n  <style is=\"custom-style\">\n    html {\n      /*\n       * You can use these generic variables in your elements for easy theming.\n       * For example, if all your elements use \\`--primary-text-color\\` as its main\n       * color, then switching from a light to a dark theme is just a matter of\n       * changing the value of \\`--primary-text-color\\` in your application.\n       */\n      --primary-text-color: var(--light-theme-text-color);\n      --primary-background-color: var(--light-theme-background-color);\n      --secondary-text-color: var(--light-theme-secondary-color);\n      --disabled-text-color: var(--light-theme-disabled-color);\n      --divider-color: var(--light-theme-divider-color);\n      --error-color: var(--paper-deep-orange-a700);\n\n      /*\n       * Primary and accent colors. Also see color.js for more colors.\n       */\n      --primary-color: var(--paper-indigo-500);\n      --light-primary-color: var(--paper-indigo-100);\n      --dark-primary-color: var(--paper-indigo-700);\n\n      --accent-color: var(--paper-pink-a200);\n      --light-accent-color: var(--paper-pink-a100);\n      --dark-accent-color: var(--paper-pink-a400);\n\n\n      /*\n       * Material Design Light background theme\n       */\n      --light-theme-background-color: #ffffff;\n      --light-theme-base-color: #000000;\n      --light-theme-text-color: var(--paper-grey-900);\n      --light-theme-secondary-color: #737373;  /* for secondary text and icons */\n      --light-theme-disabled-color: #9b9b9b;  /* disabled/hint text */\n      --light-theme-divider-color: #dbdbdb;\n\n      /*\n       * Material Design Dark background theme\n       */\n      --dark-theme-background-color: var(--paper-grey-900);\n      --dark-theme-base-color: #ffffff;\n      --dark-theme-text-color: #ffffff;\n      --dark-theme-secondary-color: #bcbcbc;  /* for secondary text and icons */\n      --dark-theme-disabled-color: #646464;  /* disabled/hint text */\n      --dark-theme-divider-color: #3c3c3c;\n\n      /*\n       * Deprecated values because of their confusing names.\n       */\n      --text-primary-color: var(--dark-theme-text-color);\n      --default-primary-color: var(--primary-color);\n    }\n  </style>\n</custom-style>`;\ntemplate.setAttribute('style', 'display: none;');\ndocument.head.appendChild(template.content);\n", "/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport '@polymer/paper-styles/default-theme.js';\nimport '@polymer/paper-styles/typography.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {dashToCamelCase} from '@polymer/polymer/lib/utils/case-map.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\nconst template = html`\n<custom-style>\n  <style is=\"custom-style\">\n    html {\n      --paper-input-container-shared-input-style: {\n        position: relative; /* to make a stacking context */\n        outline: none;\n        box-shadow: none;\n        padding: 0;\n        margin: 0;\n        width: 100%;\n        max-width: 100%;\n        background: transparent;\n        border: none;\n        color: var(--paper-input-container-input-color, var(--primary-text-color));\n        -webkit-appearance: none;\n        text-align: inherit;\n        vertical-align: var(--paper-input-container-input-align, bottom);\n\n        @apply --paper-font-subhead;\n      };\n    }\n  </style>\n</custom-style>\n`;\ntemplate.setAttribute('style', 'display: none;');\ndocument.head.appendChild(template.content);\n\n/*\n`<paper-input-container>` is a container for a `<label>`, an `<iron-input>` or\n`<textarea>` and optional add-on elements such as an error message or character\ncounter, used to implement Material Design text fields.\n\nFor example:\n\n    <paper-input-container>\n      <label slot=\"label\">Your name</label>\n      <iron-input slot=\"input\">\n        <input>\n      </iron-input>\n      // In Polymer 1.0, you would use `<input is=\"iron-input\" slot=\"input\">`\ninstead of the above.\n    </paper-input-container>\n\nYou can style the nested `<input>` however you want; if you want it to look like\na Material Design input, you can style it with the\n--paper-input-container-shared-input-style mixin.\n\nDo not wrap `<paper-input-container>` around elements that already include it,\nsuch as `<paper-input>`. Doing so may cause events to bounce infinitely between\nthe container and its contained element.\n\n### Listening for input changes\n\nBy default, it listens for changes on the `bind-value` attribute on its children\nnodes and perform tasks such as auto-validating and label styling when the\n`bind-value` changes. You can configure the attribute it listens to with the\n`attr-for-value` attribute.\n\n### Using a custom input element\n\nYou can use a custom input element in a `<paper-input-container>`, for example\nto implement a compound input field like a social security number input. The\ncustom input element should have the `paper-input-input` class, have a\n`notify:true` value property and optionally implements\n`Polymer.IronValidatableBehavior` if it is validatable.\n\n    <paper-input-container attr-for-value=\"ssn-value\">\n      <label slot=\"label\">Social security number</label>\n      <ssn-input slot=\"input\" class=\"paper-input-input\"></ssn-input>\n    </paper-input-container>\n\n\nIf you're using a `<paper-input-container>` imperatively, it's important to make\nsure that you attach its children (the `iron-input` and the optional `label`)\nbefore you attach the `<paper-input-container>` itself, so that it can be set up\ncorrectly.\n\n### Validation\n\nIf the `auto-validate` attribute is set, the input container will validate the\ninput and update the container styling when the input value changes.\n\n### Add-ons\n\nAdd-ons are child elements of a `<paper-input-container>` with the `add-on`\nattribute and implements the `Polymer.PaperInputAddonBehavior` behavior. They\nare notified when the input value or validity changes, and may implement\nfunctionality such as error messages or character counters. They appear at the\nbottom of the input.\n\n### Prefixes and suffixes\nThese are child elements of a `<paper-input-container>` with the `prefix`\nor `suffix` attribute, and are displayed inline with the input, before or after.\n\n    <paper-input-container>\n      <div slot=\"prefix\">$</div>\n      <label slot=\"label\">Total</label>\n      <iron-input slot=\"input\">\n        <input>\n      </iron-input>\n      // In Polymer 1.0, you would use `<input is=\"iron-input\" slot=\"input\">`\ninstead of the above. <paper-icon-button slot=\"suffix\"\nicon=\"clear\"></paper-icon-button>\n    </paper-input-container>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-input-container-color` | Label and underline color when the input is not focused | `--secondary-text-color`\n`--paper-input-container-focus-color` | Label and underline color when the input is focused | `--primary-color`\n`--paper-input-container-invalid-color` | Label and underline color when the input is is invalid | `--error-color`\n`--paper-input-container-input-color` | Input foreground color | `--primary-text-color`\n`--paper-input-container` | Mixin applied to the container | `{}`\n`--paper-input-container-disabled` | Mixin applied to the container when it's disabled | `{}`\n`--paper-input-container-label` | Mixin applied to the label | `{}`\n`--paper-input-container-label-focus` | Mixin applied to the label when the input is focused | `{}`\n`--paper-input-container-label-floating` | Mixin applied to the label when floating | `{}`\n`--paper-input-container-input` | Mixin applied to the input | `{}`\n`--paper-input-container-input-align` | The vertical-align property of the input | `bottom`\n`--paper-input-container-input-disabled` | Mixin applied to the input when the component is disabled | `{}`\n`--paper-input-container-input-focus` | Mixin applied to the input when focused | `{}`\n`--paper-input-container-input-invalid` | Mixin applied to the input when invalid | `{}`\n`--paper-input-container-input-webkit-spinner` | Mixin applied to the webkit spinner | `{}`\n`--paper-input-container-input-webkit-clear` | Mixin applied to the webkit clear button | `{}`\n`--paper-input-container-input-webkit-calendar-picker-indicator` | Mixin applied to the webkit calendar picker indicator | `{}`\n`--paper-input-container-ms-clear` | Mixin applied to the Internet Explorer clear button | `{}`\n`--paper-input-container-underline` | Mixin applied to the underline | `{}`\n`--paper-input-container-underline-focus` | Mixin applied to the underline when the input is focused | `{}`\n`--paper-input-container-underline-disabled` | Mixin applied to the underline when the input is disabled | `{}`\n`--paper-input-prefix` | Mixin applied to the input prefix | `{}`\n`--paper-input-suffix` | Mixin applied to the input suffix | `{}`\n`--paper-input-container-label-before` | Mixin applied to label before pseudo element | {}\n`--paper-input-container-label-after` | Mixin applied to label after pseudo element (useful for required asterisk) | {}\n\nThis element is `display:block` by default, but you can set the `inline`\nattribute to make it `display:inline-block`.\n*/\nPolymer({\n  /** @override */\n  _template: html`\n    <style>\n      :host {\n        display: block;\n        padding: 8px 0;\n        @apply --paper-input-container;\n      }\n\n      :host([inline]) {\n        display: inline-block;\n      }\n\n      :host([disabled]) {\n        pointer-events: none;\n        opacity: 0.33;\n\n        @apply --paper-input-container-disabled;\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      [hidden] {\n        display: none !important;\n      }\n\n      .floated-label-placeholder {\n        @apply --paper-font-caption;\n      }\n\n      .underline {\n        height: 2px;\n        position: relative;\n      }\n\n      .focused-line {\n        @apply --layout-fit;\n        border-bottom: 2px solid var(--paper-input-container-focus-color, var(--primary-color));\n\n        -webkit-transform-origin: center center;\n        transform-origin: center center;\n        -webkit-transform: scale3d(0,1,1);\n        transform: scale3d(0,1,1);\n\n        @apply --paper-input-container-underline-focus;\n      }\n\n      .underline.is-highlighted .focused-line {\n        -webkit-transform: none;\n        transform: none;\n        -webkit-transition: -webkit-transform 0.25s;\n        transition: transform 0.25s;\n\n        @apply --paper-transition-easing;\n      }\n\n      .underline.is-invalid .focused-line {\n        border-color: var(--paper-input-container-invalid-color, var(--error-color));\n        -webkit-transform: none;\n        transform: none;\n        -webkit-transition: -webkit-transform 0.25s;\n        transition: transform 0.25s;\n\n        @apply --paper-transition-easing;\n      }\n\n      .unfocused-line {\n        @apply --layout-fit;\n        border-bottom: 1px solid var(--paper-input-container-color, var(--secondary-text-color));\n        @apply --paper-input-container-underline;\n      }\n\n      :host([disabled]) .unfocused-line {\n        border-bottom: 1px dashed;\n        border-color: var(--paper-input-container-color, var(--secondary-text-color));\n        @apply --paper-input-container-underline-disabled;\n      }\n\n      .input-wrapper {\n        @apply --layout-horizontal;\n        @apply --layout-center;\n        position: relative;\n      }\n\n      .input-content {\n        @apply --layout-flex-auto;\n        @apply --layout-relative;\n        max-width: 100%;\n      }\n\n      .input-content ::slotted(label),\n      .input-content ::slotted(.paper-input-label) {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        font: inherit;\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n        -webkit-transition: -webkit-transform 0.25s, width 0.25s;\n        transition: transform 0.25s, width 0.25s;\n        -webkit-transform-origin: left top;\n        transform-origin: left top;\n        /* Fix for safari not focusing 0-height date/time inputs with -webkit-apperance: none; */\n        min-height: 1px;\n\n        @apply --paper-font-common-nowrap;\n        @apply --paper-font-subhead;\n        @apply --paper-input-container-label;\n        @apply --paper-transition-easing;\n      }\n\n\n      .input-content ::slotted(label):before,\n      .input-content ::slotted(.paper-input-label):before {\n        @apply --paper-input-container-label-before;\n      }\n\n      .input-content ::slotted(label):after,\n      .input-content ::slotted(.paper-input-label):after {\n        @apply --paper-input-container-label-after;\n      }\n\n      .input-content.label-is-floating ::slotted(label),\n      .input-content.label-is-floating ::slotted(.paper-input-label) {\n        -webkit-transform: translateY(-75%) scale(0.75);\n        transform: translateY(-75%) scale(0.75);\n\n        /* Since we scale to 75/100 of the size, we actually have 100/75 of the\n        original space now available */\n        width: 133%;\n\n        @apply --paper-input-container-label-floating;\n      }\n\n      :host(:dir(rtl)) .input-content.label-is-floating ::slotted(label),\n      :host(:dir(rtl)) .input-content.label-is-floating ::slotted(.paper-input-label) {\n        right: 0;\n        left: auto;\n        -webkit-transform-origin: right top;\n        transform-origin: right top;\n      }\n\n      .input-content.label-is-highlighted ::slotted(label),\n      .input-content.label-is-highlighted ::slotted(.paper-input-label) {\n        color: var(--paper-input-container-focus-color, var(--primary-color));\n\n        @apply --paper-input-container-label-focus;\n      }\n\n      .input-content.is-invalid ::slotted(label),\n      .input-content.is-invalid ::slotted(.paper-input-label) {\n        color: var(--paper-input-container-invalid-color, var(--error-color));\n      }\n\n      .input-content.label-is-hidden ::slotted(label),\n      .input-content.label-is-hidden ::slotted(.paper-input-label) {\n        visibility: hidden;\n      }\n\n      .input-content ::slotted(input),\n      .input-content ::slotted(iron-input),\n      .input-content ::slotted(textarea),\n      .input-content ::slotted(iron-autogrow-textarea),\n      .input-content ::slotted(.paper-input-input) {\n        @apply --paper-input-container-shared-input-style;\n        /* The apply shim doesn't apply the nested color custom property,\n          so we have to re-apply it here. */\n        color: var(--paper-input-container-input-color, var(--primary-text-color));\n        @apply --paper-input-container-input;\n      }\n\n      .input-content ::slotted(input)::-webkit-outer-spin-button,\n      .input-content ::slotted(input)::-webkit-inner-spin-button {\n        @apply --paper-input-container-input-webkit-spinner;\n      }\n\n      .input-content.focused ::slotted(input),\n      .input-content.focused ::slotted(iron-input),\n      .input-content.focused ::slotted(textarea),\n      .input-content.focused ::slotted(iron-autogrow-textarea),\n      .input-content.focused ::slotted(.paper-input-input) {\n        @apply --paper-input-container-input-focus;\n      }\n\n      .input-content.is-invalid ::slotted(input),\n      .input-content.is-invalid ::slotted(iron-input),\n      .input-content.is-invalid ::slotted(textarea),\n      .input-content.is-invalid ::slotted(iron-autogrow-textarea),\n      .input-content.is-invalid ::slotted(.paper-input-input) {\n        @apply --paper-input-container-input-invalid;\n      }\n\n      .prefix ::slotted(*) {\n        display: inline-block;\n        @apply --paper-font-subhead;\n        @apply --layout-flex-none;\n        @apply --paper-input-prefix;\n      }\n\n      .suffix ::slotted(*) {\n        display: inline-block;\n        @apply --paper-font-subhead;\n        @apply --layout-flex-none;\n\n        @apply --paper-input-suffix;\n      }\n\n      /* Firefox sets a min-width on the input, which can cause layout issues */\n      .input-content ::slotted(input) {\n        min-width: 0;\n      }\n\n      .input-content ::slotted(textarea) {\n        resize: none;\n      }\n\n      .add-on-content {\n        position: relative;\n      }\n\n      .add-on-content.is-invalid ::slotted(*) {\n        color: var(--paper-input-container-invalid-color, var(--error-color));\n      }\n\n      .add-on-content.is-highlighted ::slotted(*) {\n        color: var(--paper-input-container-focus-color, var(--primary-color));\n      }\n    </style>\n\n    <div class=\"floated-label-placeholder\" aria-hidden=\"true\" hidden=\"[[noLabelFloat]]\">&nbsp;</div>\n\n    <div class=\"input-wrapper\">\n      <span class=\"prefix\"><slot name=\"prefix\"></slot></span>\n\n      <div class$=\"[[_computeInputContentClass(noLabelFloat,alwaysFloatLabel,focused,invalid,_inputHasContent)]]\" id=\"labelAndInputContainer\">\n        <slot name=\"label\"></slot>\n        <slot name=\"input\"></slot>\n      </div>\n\n      <span class=\"suffix\"><slot name=\"suffix\"></slot></span>\n    </div>\n\n    <div class$=\"[[_computeUnderlineClass(focused,invalid)]]\">\n      <div class=\"unfocused-line\"></div>\n      <div class=\"focused-line\"></div>\n    </div>\n\n    <div class$=\"[[_computeAddOnContentClass(focused,invalid)]]\">\n      <slot name=\"add-on\"></slot>\n    </div>\n`,\n\n  is: 'paper-input-container',\n\n  properties: {\n    /**\n     * Set to true to disable the floating label. The label disappears when the\n     * input value is not null.\n     */\n    noLabelFloat: {type: Boolean, value: false},\n\n    /**\n     * Set to true to always float the floating label.\n     */\n    alwaysFloatLabel: {type: Boolean, value: false},\n\n    /**\n     * The attribute to listen for value changes on.\n     */\n    attrForValue: {type: String, value: 'bind-value'},\n\n    /**\n     * Set to true to auto-validate the input value when it changes.\n     */\n    autoValidate: {type: Boolean, value: false},\n\n    /**\n     * True if the input is invalid. This property is set automatically when the\n     * input value changes if auto-validating, or when the `iron-input-validate`\n     * event is heard from a child.\n     */\n    invalid: {observer: '_invalidChanged', type: Boolean, value: false},\n\n    /**\n     * True if the input has focus.\n     */\n    focused: {readOnly: true, type: Boolean, value: false, notify: true},\n\n    _addons: {\n      type: Array\n      // do not set a default value here intentionally - it will be initialized\n      // lazily when a distributed child is attached, which may occur before\n      // configuration for this element in polyfill.\n    },\n\n    _inputHasContent: {type: Boolean, value: false},\n\n    _inputSelector:\n        {type: String, value: 'input,iron-input,textarea,.paper-input-input'},\n\n    _boundOnFocus: {\n      type: Function,\n      value: function() {\n        return this._onFocus.bind(this);\n      }\n    },\n\n    _boundOnBlur: {\n      type: Function,\n      value: function() {\n        return this._onBlur.bind(this);\n      }\n    },\n\n    _boundOnInput: {\n      type: Function,\n      value: function() {\n        return this._onInput.bind(this);\n      }\n    },\n\n    _boundValueChanged: {\n      type: Function,\n      value: function() {\n        return this._onValueChanged.bind(this);\n      }\n    }\n  },\n\n  listeners: {\n    'addon-attached': '_onAddonAttached',\n    'iron-input-validate': '_onIronInputValidate'\n  },\n\n  get _valueChangedEvent() {\n    return this.attrForValue + '-changed';\n  },\n\n  get _propertyForValue() {\n    return dashToCamelCase(this.attrForValue);\n  },\n\n  get _inputElement() {\n    return dom(this).querySelector(this._inputSelector);\n  },\n\n  get _inputElementValue() {\n    return this._inputElement[this._propertyForValue] ||\n        this._inputElement.value;\n  },\n\n  /** @override */\n  ready: function() {\n    // Paper-input treats a value of undefined differently at startup than\n    // the rest of the time (specifically: it does not validate it at startup,\n    // but it does after that. We need to track whether the first time we\n    // encounter the value is basically this first time, so that we can validate\n    // it correctly the rest of the time. See\n    // https://github.com/PolymerElements/paper-input/issues/605\n    this.__isFirstValueUpdate = true;\n    if (!this._addons) {\n      this._addons = [];\n    }\n    this.addEventListener('focus', this._boundOnFocus, true);\n    this.addEventListener('blur', this._boundOnBlur, true);\n  },\n\n  /** @override */\n  attached: function() {\n    if (this.attrForValue) {\n      this._inputElement.addEventListener(\n          this._valueChangedEvent, this._boundValueChanged);\n    } else {\n      this.addEventListener('input', this._onInput);\n    }\n\n    // Only validate when attached if the input already has a value.\n    if (this._inputElementValue && this._inputElementValue != '') {\n      this._handleValueAndAutoValidate(this._inputElement);\n    } else {\n      this._handleValue(this._inputElement);\n    }\n  },\n\n  /** @private */\n  _onAddonAttached: function(event) {\n    if (!this._addons) {\n      this._addons = [];\n    }\n    var target = event.target;\n    if (this._addons.indexOf(target) === -1) {\n      this._addons.push(target);\n      if (this.isAttached) {\n        this._handleValue(this._inputElement);\n      }\n    }\n  },\n\n  /** @private */\n  _onFocus: function() {\n    this._setFocused(true);\n  },\n\n  /** @private */\n  _onBlur: function() {\n    this._setFocused(false);\n    this._handleValueAndAutoValidate(this._inputElement);\n  },\n\n  /** @private */\n  _onInput: function(event) {\n    this._handleValueAndAutoValidate(event.target);\n  },\n\n  /** @private */\n  _onValueChanged: function(event) {\n    var input = event.target;\n\n    // Paper-input treats a value of undefined differently at startup than\n    // the rest of the time (specifically: it does not validate it at startup,\n    // but it does after that. If this is in fact the bootup case, ignore\n    // validation, just this once.\n    if (this.__isFirstValueUpdate) {\n      this.__isFirstValueUpdate = false;\n      if (input.value === undefined || input.value === '') {\n        return;\n      }\n    }\n\n    this._handleValueAndAutoValidate(event.target);\n  },\n\n  /** @private */\n  _handleValue: function(inputElement) {\n    var value = this._inputElementValue;\n\n    // type=\"number\" hack needed because this.value is empty until it's valid\n    if (value || value === 0 ||\n        (inputElement.type === 'number' && !inputElement.checkValidity())) {\n      this._inputHasContent = true;\n    } else {\n      this._inputHasContent = false;\n    }\n\n    this.updateAddons(\n        {inputElement: inputElement, value: value, invalid: this.invalid});\n  },\n\n  /** @private */\n  _handleValueAndAutoValidate: function(inputElement) {\n    if (this.autoValidate && inputElement) {\n      var valid;\n\n      if (inputElement.validate) {\n        valid = inputElement.validate(this._inputElementValue);\n      } else {\n        valid = inputElement.checkValidity();\n      }\n      this.invalid = !valid;\n    }\n\n    // Call this last to notify the add-ons.\n    this._handleValue(inputElement);\n  },\n\n  /** @private */\n  _onIronInputValidate: function(event) {\n    this.invalid = this._inputElement.invalid;\n  },\n\n  /** @private */\n  _invalidChanged: function() {\n    if (this._addons) {\n      this.updateAddons({invalid: this.invalid});\n    }\n  },\n\n  /**\n   * Call this to update the state of add-ons.\n   * @param {Object} state Add-on state.\n   */\n  updateAddons: function(state) {\n    for (var addon, index = 0; addon = this._addons[index]; index++) {\n      addon.update(state);\n    }\n  },\n\n  /** @private */\n  _computeInputContentClass: function(\n      noLabelFloat, alwaysFloatLabel, focused, invalid, _inputHasContent) {\n    var cls = 'input-content';\n    if (!noLabelFloat) {\n      var label = this.querySelector('label');\n\n      if (alwaysFloatLabel || _inputHasContent) {\n        cls += ' label-is-floating';\n        // If the label is floating, ignore any offsets that may have been\n        // applied from a prefix element.\n        this.$.labelAndInputContainer.style.position = 'static';\n\n        if (invalid) {\n          cls += ' is-invalid';\n        } else if (focused) {\n          cls += ' label-is-highlighted';\n        }\n      } else {\n        // When the label is not floating, it should overlap the input element.\n        if (label) {\n          this.$.labelAndInputContainer.style.position = 'relative';\n        }\n        if (invalid) {\n          cls += ' is-invalid';\n        }\n      }\n    } else {\n      if (_inputHasContent) {\n        cls += ' label-is-hidden';\n      }\n      if (invalid) {\n        cls += ' is-invalid';\n      }\n    }\n    if (focused) {\n      cls += ' focused';\n    }\n    return cls;\n  },\n\n  /** @private */\n  _computeUnderlineClass: function(focused, invalid) {\n    var cls = 'underline';\n    if (invalid) {\n      cls += ' is-invalid';\n    } else if (focused) {\n      cls += ' is-highlighted'\n    }\n    return cls;\n  },\n\n  /** @private */\n  _computeAddOnContentClass: function(focused, invalid) {\n    var cls = 'add-on-content';\n    if (invalid) {\n      cls += ' is-invalid';\n    } else if (focused) {\n      cls += ' is-highlighted'\n    }\n    return cls;\n  }\n});\n", "/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/paper-styles/default-theme.js';\nimport '@polymer/paper-styles/typography.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\nimport {PaperInputAddonBehavior} from './paper-input-addon-behavior.js';\n\n/*\n`<paper-input-error>` is an error message for use with\n`<paper-input-container>`. The error is displayed when the\n`<paper-input-container>` is `invalid`.\n\n    <paper-input-container>\n      <input pattern=\"[0-9]*\">\n      <paper-input-error slot=\"add-on\">Only numbers are\nallowed!</paper-input-error>\n    </paper-input-container>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-input-container-invalid-color` | The foreground color of the error | `--error-color`\n`--paper-input-error` | Mixin applied to the error | `{}`\n*/\nPolymer({\n  /** @override */\n  _template: html`\n    <style>\n      :host {\n        display: inline-block;\n        visibility: hidden;\n\n        color: var(--paper-input-container-invalid-color, var(--error-color));\n\n        @apply --paper-font-caption;\n        @apply --paper-input-error;\n        position: absolute;\n        left:0;\n        right:0;\n      }\n\n      :host([invalid]) {\n        visibility: visible;\n      }\n\n      #a11yWrapper {\n        visibility: hidden;\n      }\n\n      :host([invalid]) #a11yWrapper {\n        visibility: visible;\n      }\n    </style>\n\n    <!--\n    If the paper-input-error element is directly referenced by an\n    \\`aria-describedby\\` attribute, such as when used as a paper-input add-on,\n    then applying \\`visibility: hidden;\\` to the paper-input-error element itself\n    does not hide the error.\n\n    For more information, see:\n    https://www.w3.org/TR/accname-1.1/#mapping_additional_nd_description\n    -->\n    <div id=\"a11yWrapper\">\n      <slot></slot>\n    </div>\n`,\n\n  is: 'paper-input-error',\n  behaviors: [PaperInputAddonBehavior],\n\n  properties: {\n    /**\n     * True if the error is showing.\n     */\n    invalid: {readOnly: true, reflectToAttribute: true, type: Boolean}\n  },\n\n  /**\n   * This overrides the update function in PaperInputAddonBehavior.\n   * @param {{\n   *   inputElement: (Element|undefined),\n   *   value: (string|undefined),\n   *   invalid: boolean\n   * }} state -\n   *     inputElement: The input element.\n   *     value: The input value.\n   *     invalid: True if the input value is invalid.\n   */\n  update: function(state) {\n    this._setInvalid(state.invalid);\n  }\n});\n", "/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {IronA11yKeysBehavior} from '@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js';\nimport {IronControlState} from '@polymer/iron-behaviors/iron-control-state.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {PolymerElement} from '@polymer/polymer/polymer-element.js';\n\n// Generate unique, monotonically increasing IDs for labels (needed by\n// aria-labelledby) and add-ons.\nexport const PaperInputHelper = {};\n\nPaperInputHelper.NextLabelID = 1;\nPaperInputHelper.NextAddonID = 1;\nPaperInputHelper.NextInputID = 1;\n\n/**\n * Use `PaperInputBehavior` to implement inputs with `<paper-input-container>`.\n * This behavior is implemented by `<paper-input>`. It exposes a number of\n * properties from `<paper-input-container>` and `<input is=\"iron-input\">` and\n * they should be bound in your template.\n *\n * The input element can be accessed by the `inputElement` property if you need\n * to access properties or methods that are not exposed.\n * @polymerBehavior PaperInputBehavior\n */\nexport const PaperInputBehaviorImpl = {\n\n  properties: {\n    /**\n     * Fired when the input changes due to user interaction.\n     *\n     * @event change\n     */\n\n    /**\n     * The label for this input. If you're using PaperInputBehavior to\n     * implement your own paper-input-like element, bind this to\n     * `<label>`'s content and `hidden` property, e.g.\n     * `<label hidden$=\"[[!label]]\">[[label]]</label>` in your `template`\n     */\n    label: {type: String},\n\n    /**\n     * The value for this input. If you're using PaperInputBehavior to\n     * implement your own paper-input-like element, bind this to\n     * the `<iron-input>`'s `bindValue`\n     * property, or the value property of your input that is `notify:true`.\n     * @type {*}\n     */\n    value: {notify: true, type: String},\n\n    /**\n     * Set to true to disable this input. If you're using PaperInputBehavior to\n     * implement your own paper-input-like element, bind this to\n     * both the `<paper-input-container>`'s and the input's `disabled` property.\n     */\n    disabled: {type: Boolean, value: false},\n\n    /**\n     * Returns true if the value is invalid. If you're using PaperInputBehavior\n     * to implement your own paper-input-like element, bind this to both the\n     * `<paper-input-container>`'s and the input's `invalid` property.\n     *\n     * If `autoValidate` is true, the `invalid` attribute is managed\n     * automatically, which can clobber attempts to manage it manually.\n     */\n    invalid: {type: Boolean, value: false, notify: true},\n\n    /**\n     * Set this to specify the pattern allowed by `preventInvalidInput`. If\n     * you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `allowedPattern`\n     * property.\n     */\n    allowedPattern: {type: String},\n\n    /**\n     * The type of the input. The supported types are the\n     * [native input's\n     * types](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_<input>_types).\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the (Polymer 1) `<input is=\"iron-input\">`'s or\n     * (Polymer 2)\n     * `<iron-input>`'s `type` property.\n     */\n    type: {type: String},\n\n    /**\n     * The datalist of the input (if any). This should match the id of an\n     * existing `<datalist>`. If you're using PaperInputBehavior to implement\n     * your own paper-input-like element, bind this to the `<input\n     * is=\"iron-input\">`'s `list` property.\n     */\n    list: {type: String},\n\n    /**\n     * A pattern to validate the `input` with. If you're using\n     * PaperInputBehavior to implement your own paper-input-like element, bind\n     * this to the `<input is=\"iron-input\">`'s `pattern` property.\n     */\n    pattern: {type: String},\n\n    /**\n     * Set to true to mark the input as required. If you're using\n     * PaperInputBehavior to implement your own paper-input-like element, bind\n     * this to the `<input is=\"iron-input\">`'s `required` property.\n     */\n    required: {type: Boolean, value: false},\n\n    /**\n     * The error message to display when the input is invalid. If you're using\n     * PaperInputBehavior to implement your own paper-input-like element,\n     * bind this to the `<paper-input-error>`'s content, if using.\n     */\n    errorMessage: {type: String},\n\n    /**\n     * Set to true to show a character counter.\n     */\n    charCounter: {type: Boolean, value: false},\n\n    /**\n     * Set to true to disable the floating label. If you're using\n     * PaperInputBehavior to implement your own paper-input-like element, bind\n     * this to the `<paper-input-container>`'s `noLabelFloat` property.\n     */\n    noLabelFloat: {type: Boolean, value: false},\n\n    /**\n     * Set to true to always float the label. If you're using PaperInputBehavior\n     * to implement your own paper-input-like element, bind this to the\n     * `<paper-input-container>`'s `alwaysFloatLabel` property.\n     */\n    alwaysFloatLabel: {type: Boolean, value: false},\n\n    /**\n     * Set to true to auto-validate the input value. If you're using\n     * PaperInputBehavior to implement your own paper-input-like element, bind\n     * this to the `<paper-input-container>`'s `autoValidate` property.\n     */\n    autoValidate: {type: Boolean, value: false},\n\n    /**\n     * Name of the validator to use. If you're using PaperInputBehavior to\n     * implement your own paper-input-like element, bind this to\n     * the `<input is=\"iron-input\">`'s `validator` property.\n     */\n    validator: {type: String},\n\n    // HTMLInputElement attributes for binding if needed\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `autocomplete`\n     * property.\n     */\n    autocomplete: {type: String, value: 'off'},\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `autofocus`\n     * property.\n     *\n     * @type {!boolean}\n     */\n    autofocus: {type: Boolean, observer: '_autofocusChanged'},\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `inputmode`\n     * property.\n     */\n    inputmode: {type: String},\n\n    /**\n     * The minimum length of the input value.\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `minlength`\n     * property.\n     */\n    minlength: {type: Number},\n\n    /**\n     * The maximum length of the input value.\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `maxlength`\n     * property.\n     */\n    maxlength: {type: Number},\n\n    /**\n     * The minimum (numeric or date-time) input value.\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `min` property.\n     */\n    min: {type: String},\n\n    /**\n     * The maximum (numeric or date-time) input value.\n     * Can be a String (e.g. `\"2000-01-01\"`) or a Number (e.g. `2`).\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `max` property.\n     */\n    max: {type: String},\n\n    /**\n     * Limits the numeric or date-time increments.\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `step` property.\n     */\n    step: {type: String},\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `name` property.\n     */\n    name: {type: String},\n\n    /**\n     * A placeholder string in addition to the label. If this is set, the label\n     * will always float.\n     */\n    placeholder: {\n      type: String,\n      // need to set a default so _computeAlwaysFloatLabel is run\n      value: ''\n    },\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `readonly`\n     * property.\n     */\n    readonly: {type: Boolean, value: false},\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `size` property.\n     */\n    size: {type: Number},\n\n    // Nonstandard attributes for binding if needed\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `autocapitalize`\n     * property.\n     *\n     * @type {string}\n     */\n    autocapitalize: {type: String, value: 'none'},\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `autocorrect`\n     * property.\n     */\n    autocorrect: {type: String, value: 'off'},\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `autosave`\n     * property, used with type=search.\n     */\n    autosave: {type: String},\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `results` property,\n     * used with type=search.\n     */\n    results: {type: Number},\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `accept` property,\n     * used with type=file.\n     */\n    accept: {type: String},\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the`<input is=\"iron-input\">`'s `multiple` property,\n     * used with type=file.\n     */\n    multiple: {type: Boolean},\n\n    /** @private */\n    _ariaDescribedBy: {type: String, value: ''},\n\n    /** @private */\n    _ariaLabelledBy: {type: String, value: ''},\n\n    /** @private */\n    _inputId: {type: String, value: ''}\n  },\n\n  listeners: {\n    'addon-attached': '_onAddonAttached',\n  },\n\n  /**\n   * @type {!Object}\n   */\n  keyBindings: {'shift+tab:keydown': '_onShiftTabDown'},\n\n  /** @private */\n  hostAttributes: {tabindex: 0},\n\n  /**\n   * Returns a reference to the input element.\n   * @return {!HTMLElement}\n   */\n  get inputElement() {\n    // Chrome generates audit errors if an <input type=\"password\"> has a\n    // duplicate ID, which is almost always true in Shady DOM. Generate\n    // a unique ID instead.\n    if (!this.$) {\n      this.$ = {}\n    }\n    if (!this.$.input) {\n      this._generateInputId();\n      this.$.input = this.$$('#' + this._inputId);\n    }\n    return this.$.input;\n  },\n\n  /**\n   * Returns a reference to the focusable element.\n   * @return {!HTMLElement}\n   */\n  get _focusableElement() {\n    return this.inputElement;\n  },\n\n  /** @override */\n  created: function() {\n    // These types have some default placeholder text; overlapping\n    // the label on top of it looks terrible. Auto-float the label in this case.\n    this._typesThatHaveText =\n        ['date', 'datetime', 'datetime-local', 'month', 'time', 'week', 'file'];\n  },\n\n  /** @override */\n  attached: function() {\n    this._updateAriaLabelledBy();\n\n    // In the 2.0 version of the element, this is handled in `onIronInputReady`,\n    // i.e. after the native input has finished distributing. In the 1.0\n    // version, the input is in the shadow tree, so it's already available.\n    if (!PolymerElement && this.inputElement &&\n        this._typesThatHaveText.indexOf(this.inputElement.type) !== -1) {\n      this.alwaysFloatLabel = true;\n    }\n  },\n\n  _appendStringWithSpace: function(str, more) {\n    if (str) {\n      str = str + ' ' + more;\n    } else {\n      str = more;\n    }\n    return str;\n  },\n\n  _onAddonAttached: function(event) {\n    var target = dom(event).rootTarget;\n    if (target.id) {\n      this._ariaDescribedBy =\n          this._appendStringWithSpace(this._ariaDescribedBy, target.id);\n    } else {\n      var id = 'paper-input-add-on-' + PaperInputHelper.NextAddonID++;\n      target.id = id;\n      this._ariaDescribedBy =\n          this._appendStringWithSpace(this._ariaDescribedBy, id);\n    }\n  },\n\n  /**\n   * Validates the input element and sets an error style if needed.\n   *\n   * @return {boolean}\n   */\n  validate: function() {\n    return this.inputElement.validate();\n  },\n\n  /**\n   * Forward focus to inputElement. Overriden from IronControlState.\n   */\n  _focusBlurHandler: function(event) {\n    IronControlState._focusBlurHandler.call(this, event);\n\n    // Forward the focus to the nested input.\n    if (this.focused && !this._shiftTabPressed && this._focusableElement) {\n      this._focusableElement.focus();\n    }\n  },\n\n  /**\n   * Handler that is called when a shift+tab keypress is detected by the menu.\n   *\n   * @param {CustomEvent} event A key combination event.\n   */\n  _onShiftTabDown: function(event) {\n    var oldTabIndex = this.getAttribute('tabindex');\n    this._shiftTabPressed = true;\n    this.setAttribute('tabindex', '-1');\n    this.async(function() {\n      this.setAttribute('tabindex', oldTabIndex);\n      this._shiftTabPressed = false;\n    }, 1);\n  },\n\n  /**\n   * If `autoValidate` is true, then validates the element.\n   */\n  _handleAutoValidate: function() {\n    if (this.autoValidate)\n      this.validate();\n  },\n\n  /**\n   * Restores the cursor to its original position after updating the value.\n   * @param {string} newValue The value that should be saved.\n   */\n  updateValueAndPreserveCaret: function(newValue) {\n    // Not all elements might have selection, and even if they have the\n    // right properties, accessing them might throw an exception (like for\n    // <input type=number>)\n    try {\n      var start = this.inputElement.selectionStart;\n      this.value = newValue;\n\n      // The cursor automatically jumps to the end after re-setting the value,\n      // so restore it to its original position.\n      this.inputElement.selectionStart = start;\n      this.inputElement.selectionEnd = start;\n    } catch (e) {\n      // Just set the value and give up on the caret.\n      this.value = newValue;\n    }\n  },\n\n  _computeAlwaysFloatLabel: function(alwaysFloatLabel, placeholder) {\n    return placeholder || alwaysFloatLabel;\n  },\n\n  _updateAriaLabelledBy: function() {\n    var label = dom(this.root).querySelector('label');\n    if (!label) {\n      this._ariaLabelledBy = '';\n      return;\n    }\n    var labelledBy;\n    if (label.id) {\n      labelledBy = label.id;\n    } else {\n      labelledBy = 'paper-input-label-' + PaperInputHelper.NextLabelID++;\n      label.id = labelledBy;\n    }\n    this._ariaLabelledBy = labelledBy;\n  },\n\n  _generateInputId: function() {\n    if (!this._inputId || this._inputId === '') {\n      this._inputId = 'input-' + PaperInputHelper.NextInputID++;\n    }\n  },\n\n  _onChange: function(event) {\n    // In the Shadow DOM, the `change` event is not leaked into the\n    // ancestor tree, so we must do this manually.\n    // See\n    // https://w3c.github.io/webcomponents/spec/shadow/#events-that-are-not-leaked-into-ancestor-trees.\n    if (this.shadowRoot) {\n      this.fire(\n          event.type,\n          {sourceEvent: event},\n          {node: this, bubbles: event.bubbles, cancelable: event.cancelable});\n    }\n  },\n\n  _autofocusChanged: function() {\n    // Firefox doesn't respect the autofocus attribute if it's applied after\n    // the page is loaded (Chrome/WebKit do respect it), preventing an\n    // autofocus attribute specified in markup from taking effect when the\n    // element is upgraded. As a workaround, if the autofocus property is set,\n    // and the focus hasn't already been moved elsewhere, we take focus.\n    if (this.autofocus && this._focusableElement) {\n      // In IE 11, the default document.activeElement can be the page's\n      // outermost html element, but there are also cases (under the\n      // polyfill?) in which the activeElement is not a real HTMLElement, but\n      // just a plain object. We identify the latter case as having no valid\n      // activeElement.\n      var activeElement = document.activeElement;\n      var isActiveElementValid = activeElement instanceof HTMLElement;\n\n      // Has some other element has already taken the focus?\n      var isSomeElementActive = isActiveElementValid &&\n          activeElement !== document.body &&\n          activeElement !== document.documentElement; /* IE 11 */\n      if (!isSomeElementActive) {\n        // No specific element has taken the focus yet, so we can take it.\n        this._focusableElement.focus();\n      }\n    }\n  }\n};\n\n/** @polymerBehavior */\nexport const PaperInputBehavior =\n    [IronControlState, IronA11yKeysBehavior, PaperInputBehaviorImpl];\n", "/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-input/iron-input.js';\nimport './paper-input-char-counter.js';\nimport './paper-input-container.js';\nimport './paper-input-error.js';\n\nimport {IronFormElementBehavior} from '@polymer/iron-form-element-behavior/iron-form-element-behavior.js';\nimport {DomModule} from '@polymer/polymer/lib/elements/dom-module.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\nimport {PaperInputBehavior} from './paper-input-behavior.js';\n\n/**\nMaterial design: [Text\nfields](https://www.google.com/design/spec/components/text-fields.html)\n\n`<paper-input>` is a single-line text field with Material Design styling.\n\n    <paper-input label=\"Input label\"></paper-input>\n\nIt may include an optional error message or character counter.\n\n    <paper-input error-message=\"Invalid input!\" label=\"Input\n    label\"></paper-input> <paper-input char-counter label=\"Input\n    label\"></paper-input>\n\nIt can also include custom prefix or suffix elements, which are displayed\nbefore or after the text input itself. In order for an element to be\nconsidered as a prefix, it must have the `prefix` attribute (and similarly\nfor `suffix`).\n\n    <paper-input label=\"total\">\n      <div prefix>$</div>\n      <paper-icon-button slot=\"suffix\" icon=\"clear\"></paper-icon-button>\n    </paper-input>\n\nA `paper-input` can use the native `type=search` or `type=file` features.\nHowever, since we can't control the native styling of the input (search icon,\nfile button, date placeholder, etc.), in these cases the label will be\nautomatically floated. The `placeholder` attribute can still be used for\nadditional informational text.\n\n    <paper-input label=\"search!\" type=\"search\"\n        placeholder=\"search for cats\" autosave=\"test\" results=\"5\">\n    </paper-input>\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Focus\n\nTo focus a paper-input, you can call the native `focus()` method as long as the\npaper input has a tab index. Similarly, `blur()` will blur the element.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element.\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-input-container-ms-clear` | Mixin applied to the Internet Explorer reveal button (the eyeball) | {}\n\n@element paper-input\n@demo demo/index.html\n*/\nPolymer({\n  is: 'paper-input',\n  /** @override */\n  _template: html`\n    <style>\n      :host {\n        display: block;\n      }\n\n      :host([focused]) {\n        outline: none;\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      input {\n        /* Firefox sets a min-width on the input, which can cause layout issues */\n        min-width: 0;\n      }\n\n      /* In 1.x, the <input> is distributed to paper-input-container, which styles it.\n      In 2.x the <iron-input> is distributed to paper-input-container, which styles\n      it, but in order for this to work correctly, we need to reset some\n      of the native input's properties to inherit (from the iron-input) */\n      iron-input > input {\n        @apply --paper-input-container-shared-input-style;\n        font-family: inherit;\n        font-weight: inherit;\n        font-size: inherit;\n        letter-spacing: inherit;\n        word-spacing: inherit;\n        line-height: inherit;\n        text-shadow: inherit;\n        color: inherit;\n        cursor: inherit;\n      }\n\n      input:disabled {\n        @apply --paper-input-container-input-disabled;\n      }\n\n      input::-webkit-outer-spin-button,\n      input::-webkit-inner-spin-button {\n        @apply --paper-input-container-input-webkit-spinner;\n      }\n\n      input::-webkit-clear-button {\n        @apply --paper-input-container-input-webkit-clear;\n      }\n\n      input::-webkit-calendar-picker-indicator {\n        @apply --paper-input-container-input-webkit-calendar-picker-indicator;\n      }\n\n      input::-webkit-input-placeholder {\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n      }\n\n      input:-moz-placeholder {\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n      }\n\n      input::-moz-placeholder {\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n      }\n\n      input::-ms-clear {\n        @apply --paper-input-container-ms-clear;\n      }\n\n      input::-ms-reveal {\n        @apply --paper-input-container-ms-reveal;\n      }\n\n      input:-ms-input-placeholder {\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n      }\n\n      label {\n        pointer-events: none;\n      }\n    </style>\n\n    <paper-input-container id=\"container\" no-label-float=\"[[noLabelFloat]]\" always-float-label=\"[[_computeAlwaysFloatLabel(alwaysFloatLabel,placeholder)]]\" auto-validate$=\"[[autoValidate]]\" disabled$=\"[[disabled]]\" invalid=\"[[invalid]]\">\n\n      <slot name=\"prefix\" slot=\"prefix\"></slot>\n\n      <label hidden$=\"[[!label]]\" aria-hidden=\"true\" for$=\"[[_inputId]]\" slot=\"label\">[[label]]</label>\n\n      <!-- Need to bind maxlength so that the paper-input-char-counter works correctly -->\n      <iron-input bind-value=\"{{value}}\" slot=\"input\" class=\"input-element\" id$=\"[[_inputId]]\" maxlength$=\"[[maxlength]]\" allowed-pattern=\"[[allowedPattern]]\" invalid=\"{{invalid}}\" validator=\"[[validator]]\">\n        <input aria-labelledby$=\"[[_ariaLabelledBy]]\" aria-describedby$=\"[[_ariaDescribedBy]]\" disabled$=\"[[disabled]]\" title$=\"[[title]]\" type$=\"[[type]]\" pattern$=\"[[pattern]]\" required$=\"[[required]]\" autocomplete$=\"[[autocomplete]]\" autofocus$=\"[[autofocus]]\" inputmode$=\"[[inputmode]]\" minlength$=\"[[minlength]]\" maxlength$=\"[[maxlength]]\" min$=\"[[min]]\" max$=\"[[max]]\" step$=\"[[step]]\" name$=\"[[name]]\" placeholder$=\"[[placeholder]]\" readonly$=\"[[readonly]]\" list$=\"[[list]]\" size$=\"[[size]]\" autocapitalize$=\"[[autocapitalize]]\" autocorrect$=\"[[autocorrect]]\" on-change=\"_onChange\" tabindex$=\"[[tabIndex]]\" autosave$=\"[[autosave]]\" results$=\"[[results]]\" accept$=\"[[accept]]\" multiple$=\"[[multiple]]\" role$=\"[[inputRole]]\" aria-haspopup$=\"[[inputAriaHaspopup]]\">\n      </iron-input>\n\n      <slot name=\"suffix\" slot=\"suffix\"></slot>\n\n      <template is=\"dom-if\" if=\"[[errorMessage]]\">\n        <paper-input-error aria-live=\"assertive\" slot=\"add-on\">[[errorMessage]]</paper-input-error>\n      </template>\n\n      <template is=\"dom-if\" if=\"[[charCounter]]\">\n        <paper-input-char-counter slot=\"add-on\"></paper-input-char-counter>\n      </template>\n\n    </paper-input-container>\n  `,\n\n  behaviors: [PaperInputBehavior, IronFormElementBehavior],\n\n  properties: {\n    value: {\n      // Required for the correct TypeScript type-generation\n      type: String\n    },\n\n    inputRole: {\n      type: String,\n      value: undefined,\n    },\n\n    inputAriaHaspopup: {\n      type: String,\n      value: undefined,\n    },\n  },\n\n  /**\n   * Returns a reference to the focusable element. Overridden from\n   * PaperInputBehavior to correctly focus the native input.\n   *\n   * @return {!HTMLElement}\n   */\n  get _focusableElement() {\n    return this.inputElement._inputElement;\n  },\n\n  // Note: This event is only available in the 1.0 version of this element.\n  // In 2.0, the functionality of `_onIronInputReady` is done in\n  // PaperInputBehavior::attached.\n  listeners: {'iron-input-ready': '_onIronInputReady'},\n\n  _onIronInputReady: function() {\n    // Even though this is only used in the next line, save this for\n    // backwards compatibility, since the native input had this ID until 2.0.5.\n    if (!this.$.nativeInput) {\n      this.$.nativeInput = /** @type {!Element} */ (this.$$('input'));\n    }\n    if (this.inputElement &&\n        this._typesThatHaveText.indexOf(this.$.nativeInput.type) !== -1) {\n      this.alwaysFloatLabel = true;\n    }\n\n    // Only validate when attached if the input already has a value.\n    if (!!this.inputElement.bindValue) {\n      this.$.container._handleValueAndAutoValidate(this.inputElement);\n    }\n  },\n});\n", "import { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\r\nimport { mixinBehaviors } from '@polymer/polymer/lib/legacy/class.js';\r\nimport { IronA11yKeysBehavior } from '@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js'\r\nimport { IronFormElementBehavior } from '@polymer/iron-form-element-behavior/iron-form-element-behavior.js'\r\nimport { PaperInkyFocusBehavior, PaperInkyFocusBehaviorImpl } from '@polymer/paper-behaviors/paper-inky-focus-behavior.js'\r\nimport { IronRangeBehavior } from '@polymer/iron-range-behavior/iron-range-behavior.js'\r\n\r\nimport '@polymer/paper-progress/paper-progress.js'\r\nimport '@polymer/paper-input/paper-input.js'\r\n/**\r\n * `paper-single-range-slider`\r\n *\r\n *\r\n * @customElement\r\n * @polymer\r\n */\r\nclass PaperSingleRangeSlider extends\r\n    mixinBehaviors([ IronA11yKeysBehavior,\r\n                     IronFormElementBehavior,\r\n                     PaperInkyFocusBehavior,\r\n                     PaperInkyFocusBehaviorImpl,\r\n                     IronRangeBehavior ], PolymerElement) {\r\n\r\n    static get template() {\r\n        return html`\r\n            <!--<template strip-whitespace> -->\r\n                <style>\r\n                  :host {\r\n                    @apply --layout;\r\n                    @apply --layout-justified;\r\n                    @apply --layout-center;\r\n                    width: 200px;\r\n                    cursor: default;\r\n                    -webkit-user-select: none;\r\n                    -moz-user-select: none;\r\n                    -ms-user-select: none;\r\n                    user-select: none;\r\n                    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n                    --paper-progress-active-color: var(--paper-single-range-slider-active-color, var(--google-blue-700));\r\n                    --paper-progress-secondary-color: var(--paper-single-range-slider-secondary-color, var(--google-blue-300));\r\n                    --paper-progress-disabled-active-color: var(--paper-single-range-slider-disabled-active-color, var(--paper-grey-400));\r\n                    --paper-progress-disabled-secondary-color: var(--paper-single-range-slider-disabled-secondary-color, var(--paper-grey-400));\r\n                    --calculated-paper-single-range-slider-height: var(--paper-single-range-slider-height, 2px);\r\n                  }\r\n            \r\n                  /* focus shows the ripple */\r\n                  :host(:focus) {\r\n                    outline: none;\r\n                  }\r\n            \r\n                  /** \r\n                   * NOTE(keanulee): Though :host-context is not universally supported, some pages\r\n                   * still rely on paper-single-range-slider being flipped when dir=\"rtl\" is set on body. For full\r\n                   * compatability, dir=\"rtl\" must be explicitly set on paper-single-range-slider.\r\n                   */\r\n                  :host-context([dir=\"rtl\"]) #sliderContainer {\r\n                    -webkit-transform: scaleX(-1);\r\n                    transform: scaleX(-1);\r\n                  }\r\n            \r\n                  /** \r\n                   * NOTE(keanulee): This is separate from the rule above because :host-context may\r\n                   * not be recognized.\r\n                   */\r\n                  :host([dir=\"rtl\"]) #sliderContainer {\r\n                    -webkit-transform: scaleX(-1);\r\n                    transform: scaleX(-1);\r\n                  }\r\n            \r\n                  /** \r\n                   * NOTE(keanulee): Needed to override the :host-context rule (where supported)\r\n                   * to support LTR sliders in RTL pages.\r\n                   */\r\n                  :host([dir=\"ltr\"]) #sliderContainer {\r\n                    -webkit-transform: scaleX(1);\r\n                    transform: scaleX(1);\r\n                  }\r\n            \r\n                  #sliderContainer {\r\n                    position: relative;\r\n                    width: 100%;\r\n                    height: calc(30px + var(--calculated-paper-single-range-slider-height));\r\n                    margin-left: calc(15px + var(--calculated-paper-single-range-slider-height)/2);\r\n                    margin-right: calc(15px + var(--calculated-paper-single-range-slider-height)/2);\r\n                  }\r\n            \r\n                  #sliderContainer:focus {\r\n                    outline: 0;\r\n                  }\r\n            \r\n                  #sliderContainer.editable {\r\n                    margin-top: 12px;\r\n                    margin-bottom: 12px;\r\n                  }\r\n            \r\n                  .bar-container {\r\n                    position: absolute;\r\n                    top: 0;\r\n                    bottom: 0;\r\n                    left: 0;\r\n                    right: 0;\r\n                    overflow: hidden;\r\n                  }\r\n            \r\n                  .ring > .bar-container {\r\n                    left: calc(5px + var(--calculated-paper-single-range-slider-height)/2);\r\n                    transition: left 0.18s ease;\r\n                  }\r\n            \r\n                  .ring.expand.dragging > .bar-container {\r\n                    transition: none;\r\n                  }\r\n            \r\n                  .ring.expand:not(.pin) > .bar-container {\r\n                    left: calc(8px + var(--calculated-paper-single-range-slider-height)/2);\r\n                  }\r\n            \r\n                  #sliderBar {\r\n                    padding: 15px 0;\r\n                    width: 100%;\r\n                    background-color: var(--paper-single-range-slider-bar-color, transparent);\r\n                    --paper-progress-container-color: var(--paper-single-range-slider-container-color, var(--paper-grey-400));\r\n                    --paper-progress-height: var(--calculated-paper-single-range-slider-height);\r\n                  }\r\n            \r\n                  .slider-markers {\r\n                    position: absolute;\r\n                    top: calc(14px + var(--paper-single-range-slider-height,2px)/2);\r\n                    height: var(--calculated-paper-single-range-slider-height);\r\n                    left: 0;\r\n                    right: -1px;\r\n                    box-sizing: border-box;\r\n                    pointer-events: none;\r\n                    @apply --layout-horizontal;\r\n                  }\r\n            \r\n                  .slider-marker {\r\n                    @apply --layout-flex;\r\n                  }\r\n                  .slider-markers::after,\r\n                  .slider-marker::after {\r\n                    content: \"\";\r\n                    display: block;\r\n                    margin-left: -1px;\r\n                    width: 2px;\r\n                    height: var(--calculated-paper-single-range-slider-height);\r\n                    border-radius: 50%;\r\n                    background-color: var(--paper-single-range-slider-markers-color, #000);\r\n                  }\r\n            \r\n                  .slider-knob {\r\n                    position: absolute;\r\n                    left: 0;\r\n                    top: 0;\r\n                    margin-left: calc(-15px - var(--calculated-paper-single-range-slider-height)/2);\r\n                    width: calc(30px + var(--calculated-paper-single-range-slider-height));\r\n                    height: calc(30px + var(--calculated-paper-single-range-slider-height));\r\n                  }\r\n            \r\n                  .transiting > .slider-knob {\r\n                    transition: left 0.08s ease;\r\n                  }\r\n            \r\n                  .slider-knob:focus {\r\n                    outline: none;\r\n                  }\r\n            \r\n                  .slider-knob.dragging {\r\n                    transition: none;\r\n                  }\r\n            \r\n                  .snaps > .slider-knob.dragging {\r\n                    transition: -webkit-transform 0.08s ease;\r\n                    transition: transform 0.08s ease;\r\n                  }\r\n            \r\n                  .slider-knob-inner {\r\n                    margin: 10px;\r\n                    width: calc(100% - 20px);\r\n                    height: calc(100% - 20px);\r\n                    background-color: var(--paper-single-range-slider-knob-color, var(--google-blue-700));\r\n                    border: 2px solid var(--paper-single-range-slider-knob-color, var(--google-blue-700));\r\n                    border-radius: 50%;\r\n            \r\n                    -moz-box-sizing: border-box;\r\n                    box-sizing: border-box;\r\n            \r\n                    transition-property: -webkit-transform, background-color, border;\r\n                    transition-property: transform, background-color, border;\r\n                    transition-duration: 0.18s;\r\n                    transition-timing-function: ease;\r\n                  }\r\n            \r\n                  .expand:not(.pin) > .slider-knob > .slider-knob-inner {\r\n                    -webkit-transform: scale(1.5);\r\n                    transform: scale(1.5);\r\n                  }\r\n            \r\n                  .ring > .slider-knob > .slider-knob-inner {\r\n                    background-color: var(--paper-single-range-slider-knob-start-color, transparent);\r\n                    border: 2px solid var(--paper-single-range-slider-knob-start-border-color, var(--paper-grey-400));\r\n                  }\r\n            \r\n                  .slider-knob-inner::before {\r\n                    background-color: var(--paper-single-range-slider-pin-color, var(--google-blue-700));\r\n                  }\r\n            \r\n                  .pin > .slider-knob > .slider-knob-inner::before {\r\n                    content: \"\";\r\n                    position: absolute;\r\n                    top: 0;\r\n                    left: 50%;\r\n                    margin-left: -13px;\r\n                    width: 26px;\r\n                    height: 26px;\r\n                    border-radius: 50% 50% 50% 0;\r\n            \r\n                    -webkit-transform: rotate(-45deg) scale(0) translate(0);\r\n                    transform: rotate(-45deg) scale(0) translate(0);\r\n                  }\r\n            \r\n                  .slider-knob-inner::before,\r\n                  .slider-knob-inner::after {\r\n                    transition: -webkit-transform .18s ease, background-color .18s ease;\r\n                    transition: transform .18s ease, background-color .18s ease;\r\n                  }\r\n            \r\n                  .pin.ring > .slider-knob > .slider-knob-inner::before {\r\n                    background-color: var(--paper-single-range-slider-pin-start-color, var(--paper-grey-400));\r\n                  }\r\n            \r\n                  .pin.expand > .slider-knob > .slider-knob-inner::before {\r\n                    -webkit-transform: rotate(-45deg) scale(1) translate(17px, -17px);\r\n                    transform: rotate(-45deg) scale(1) translate(17px, -17px);\r\n                  }\r\n            \r\n                  .pin > .slider-knob > .slider-knob-inner::after {\r\n                    content: attr(value);\r\n                    position: absolute;\r\n                    top: 0;\r\n                    left: 50%;\r\n                    margin-left: -16px;\r\n                    width: 32px;\r\n                    height: 26px;\r\n                    text-align: center;\r\n                    color: var(--paper-single-range-slider-font-color, #fff);\r\n                    font-size: 10px;\r\n            \r\n                    -webkit-transform: scale(0) translate(0);\r\n                    transform: scale(0) translate(0);\r\n                    @apply paper-single-range-slider-knob-inner-text;\r\n                  }\r\n            \r\n                  .pin.expand > .slider-knob > .slider-knob-inner::after {\r\n                    -webkit-transform: scale(1) translate(0, -17px);\r\n                    transform: scale(1) translate(0, -17px);\r\n                  }\r\n            \r\n                  /* paper-input */\r\n                  .slider-input {\r\n                    width: 50px;\r\n                    overflow: hidden;\r\n                    --paper-input-container-input: {\r\n                      text-align: center;\r\n                    };\r\n                    @apply --paper-single-range-slider-input;\r\n                  }\r\n            \r\n                  /* disabled state */\r\n                  #sliderContainer.disabled {\r\n                    pointer-events: none;\r\n                  }\r\n            \r\n                  .disabled > .slider-knob > .slider-knob-inner {\r\n                    background-color: var(--paper-single-range-slider-disabled-knob-color, var(--paper-grey-400));\r\n                    border: 2px solid var(--paper-single-range-slider-disabled-knob-color, var(--paper-grey-400));\r\n                    -webkit-transform: scale3d(0.75, 0.75, 1);\r\n                    transform: scale3d(0.75, 0.75, 1);\r\n                  }\r\n            \r\n                  .disabled.ring > .slider-knob > .slider-knob-inner {\r\n                    background-color: var(--paper-single-range-slider-knob-start-color, transparent);\r\n                    border: 2px solid var(--paper-single-range-slider-knob-start-border-color, var(--paper-grey-400));\r\n                  }\r\n            \r\n                  paper-ripple {\r\n                    color: var(--paper-single-range-slider-knob-color, var(--google-blue-700));\r\n                  }\r\n                </style>\r\n            \r\n                <div id=\"sliderContainer\"\r\n                  class$=\"[[_getClassNames(disabled, pin, snaps, immediateValue, min, expand, dragging, transiting, editable)]]\">\r\n                  <div class=\"bar-container\">\r\n                    <paper-progress\r\n                      disabled$=\"[[disabled]]\"\r\n                      id=\"sliderBar\"\r\n                      aria-hidden=\"true\"\r\n                      min=\"[[min]]\"\r\n                      max=\"[[max]]\"\r\n                      step=\"[[step]]\"\r\n                      value=\"[[immediateValue]]\"\r\n                      secondary-progress=\"[[secondaryProgress]]\"\r\n                      on-down=\"_bardown\"\r\n                      on-up=\"_resetKnob\"\r\n                      on-track=\"_onTrack\">\r\n                    </paper-progress>\r\n                  </div>\r\n            \r\n                  <template is=\"dom-if\" if=\"[[snaps]]\">\r\n                    <div class=\"slider-markers\">\r\n                      <template is=\"dom-repeat\" items=\"[[markers]]\">\r\n                        <div class=\"slider-marker\"></div>\r\n                      </template>\r\n                    </div>\r\n                  </template>\r\n            \r\n                  <div id=\"sliderKnob\"\r\n                    class=\"slider-knob\"\r\n                    on-down=\"_knobdown\"\r\n                    on-up=\"_resetKnob\"\r\n                    on-track=\"_onTrack\"\r\n                    on-transitionend=\"_knobTransitionEnd\">\r\n                      <div class=\"slider-knob-inner\" value$=\"[[displayFunction(immediateValue)]]\"></div>\r\n                  </div>\r\n                </div>\r\n            \r\n                <template is=\"dom-if\" if=\"[[editable]]\">\r\n                  <paper-input\r\n                    id=\"input\"\r\n                    type=\"number\"\r\n                    step=\"[[step]]\"\r\n                    min=\"[[min]]\"\r\n                    max=\"[[max]]\"\r\n                    class=\"slider-input\"\r\n                    disabled$=\"[[disabled]]\"\r\n                    value=\"[[immediateValue]]\"\r\n                    on-change=\"_changeValue\"\r\n                    on-keydown=\"_inputKeyDown\"\r\n                    no-label-float>\r\n                  </paper-input>\r\n                </template>\r\n              </template>\r\n        `;\r\n    }\r\n    static get is() { return 'paper-single-range-slider' }\r\n\r\n    static get properties() {\r\n        return{\r\n            /**\r\n             * Used to customize the displayed value of the pin. E.g. the value can be prefixed with a '$' like '$99'\r\n             */\r\n            displayFunction: {\r\n                type: Function,\r\n                value: function () {\r\n                    return function (value) {\r\n                        return value;\r\n                    }\r\n                }\r\n            },\r\n\r\n            /**\r\n             * If true, the slider thumb snaps to tick marks evenly spaced based\r\n             * on the `step` property value.\r\n             */\r\n            snaps: {\r\n                type: Boolean,\r\n                value: false,\r\n                notify: true\r\n            },\r\n\r\n            /**\r\n             * If true, a pin with numeric value label is shown when the slider thumb\r\n             * is pressed. Use for settings for which users need to know the exact\r\n             * value of the setting.\r\n             */\r\n            pin: {\r\n                type: Boolean,\r\n                value: false,\r\n                notify: true\r\n            },\r\n\r\n            /**\r\n             * The number that represents the current secondary progress.\r\n             */\r\n            secondaryProgress: {\r\n                type: Number,\r\n                value: 0,\r\n                notify: true,\r\n                observer: '_secondaryProgressChanged'\r\n            },\r\n\r\n            /**\r\n             * If true, an input is shown and user can use it to set the slider value.\r\n             */\r\n            editable: {\r\n                type: Boolean,\r\n                value: false\r\n            },\r\n\r\n            /**\r\n             * The immediate value of the slider.  This value is updated while the user\r\n             * is dragging the slider.\r\n             */\r\n            immediateValue: {\r\n                type: Number,\r\n                value: 0,\r\n                readOnly: true,\r\n                notify: true\r\n            },\r\n\r\n            /**\r\n             * The maximum number of markers\r\n             */\r\n            maxMarkers: {\r\n                type: Number,\r\n                value: 0,\r\n                notify: true\r\n            },\r\n\r\n            /**\r\n             * If true, the knob is expanded\r\n             */\r\n            expand: {\r\n                type: Boolean,\r\n                value: false,\r\n                readOnly: true\r\n            },\r\n\r\n            /**\r\n             * True when the user is dragging the slider.\r\n             */\r\n            dragging: {\r\n                type: Boolean,\r\n                value: false,\r\n                readOnly: true\r\n            },\r\n\r\n            transiting: {\r\n                type: Boolean,\r\n                value: false,\r\n                readOnly: true\r\n            },\r\n\r\n            markers: {\r\n                type: Array,\r\n                readOnly: true,\r\n                value: function() {\r\n                    return [];\r\n                }\r\n            },\r\n            keyBindings: {\r\n                'left': '_leftKey',\r\n                'right': '_rightKey',\r\n                'down pagedown home': '_decrementKey',\r\n                'up pageup end': '_incrementKey'\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    static get observers() {\r\n        return [\r\n            '_updateKnob(value, min, max, snaps, step)',\r\n            '_valueChanged(value)',\r\n            '_immediateValueChanged(immediateValue)',\r\n            '_updateMarkers(maxMarkers, min, max, snaps)'\r\n        ]\r\n    }\r\n\r\n    constructor(){\r\n        super();\r\n\r\n        this._ensureAttribute('role','slider');\r\n        this._ensureAttribute('tabindex','0');\r\n        //this.sliderKnob = this.shadowRoot.querySelector('#sliderKnob');\r\n    }\r\n\r\n    ready() {\r\n        super.ready();\r\n        this.isReady = true;\r\n        this.sliderKnob = this.shadowRoot.querySelector('#sliderKnob');\r\n    }\r\n\r\n    /**\r\n     * Increases value by `step` but not above `max`.\r\n     * @method increment\r\n     */\r\n    increment() {\r\n        this.value = this._clampValue(this.value + this.step);\r\n    }\r\n\r\n    /**\r\n     * Decreases value by `step` but not below `min`.\r\n     * @method decrement\r\n     */\r\n    decrement() {\r\n        this.value = this._clampValue(this.value - this.step);\r\n    }\r\n\r\n    _updateKnob(value, min, max, snaps, step) {\r\n        this.setAttribute('aria-valuemin', min);\r\n        this.setAttribute('aria-valuemax', max);\r\n        this.setAttribute('aria-valuenow', value);\r\n\r\n        this._positionKnob(this._calcRatio(value) * 100);\r\n    }\r\n\r\n    _valueChanged() {\r\n        this.fire('value-change', {composed: true});\r\n    }\r\n\r\n    _immediateValueChanged() {\r\n        if (this.dragging) {\r\n            this.fire('immediate-value-change', {composed: true});\r\n        } else {\r\n            this.value = this.immediateValue;\r\n        }\r\n    }\r\n\r\n    _secondaryProgressChanged() {\r\n        this.secondaryProgress = this._clampValue(this.secondaryProgress);\r\n    }\r\n\r\n    _expandKnob() {\r\n        this._setExpand(true);\r\n    }\r\n\r\n    _resetKnob() {\r\n        this.cancelDebouncer('expandKnob');\r\n        this._setExpand(false);\r\n    }\r\n\r\n    _positionKnob(ratio) {\r\n        this._setImmediateValue(this._calcStep(this._calcKnobPosition(ratio)));\r\n        this._setRatio(this._calcRatio(this.immediateValue) * 100);\r\n\r\n        this.sliderKnob = this.shadowRoot.querySelector('#sliderKnob');\r\n        this.sliderKnob.style.left = this.ratio + '%';\r\n        if (this.dragging) {\r\n            this._knobstartx = (this.ratio * this._w) / 100;\r\n            this.translate3d(0, 0, 0, this.sliderKnob);\r\n        }\r\n    }\r\n\r\n    _calcKnobPosition(ratio) {\r\n        return (this.max - this.min) * ratio / 100 + this.min;\r\n    }\r\n\r\n    _onTrack(event) {\r\n        event.stopPropagation();\r\n        switch (event.detail.state) {\r\n            case 'start':\r\n                this._trackStart(event);\r\n                break;\r\n            case 'track':\r\n                this._trackX(event);\r\n                break;\r\n            case 'end':\r\n                this._trackEnd();\r\n                break;\r\n        }\r\n    }\r\n\r\n    _trackStart(event) {\r\n        this._setTransiting(false);\r\n        this._w = this.$.sliderBar.offsetWidth;\r\n        this._x = this.ratio * this._w / 100;\r\n        this._startx = this._x;\r\n        this._knobstartx = this._startx;\r\n        this._minx = - this._startx;\r\n        this._maxx = this._w - this._startx;\r\n        this.sliderKnob = this.shadowRoot.querySelector('#sliderKnob');\r\n        this.sliderKnob.classList.add('dragging');\r\n        this._setDragging(true);\r\n    }\r\n\r\n    _trackX(event) {\r\n        if (!this.dragging) {\r\n            this._trackStart(event);\r\n        }\r\n\r\n        var direction = this._isRTL ? -1 : 1;\r\n        var dx = Math.min(\r\n            this._maxx, Math.max(this._minx, event.detail.dx * direction));\r\n        this._x = this._startx + dx;\r\n\r\n        var immediateValue = this._calcStep(this._calcKnobPosition(this._x / this._w * 100));\r\n        this._setImmediateValue(immediateValue);\r\n\r\n        // update knob's position\r\n        this.sliderKnob = this.shadowRoot.querySelector('#sliderKnob');\r\n        var translateX = ((this._calcRatio(this.immediateValue) * this._w) - this._knobstartx);\r\n        this.translate3d(translateX + 'px', 0, 0, this.sliderKnob);\r\n    }\r\n\r\n    _trackEnd() {\r\n        this.sliderKnob = this.shadowRoot.querySelector('#sliderKnob');\r\n        var s = this.sliderKnob.style;\r\n\r\n        this.sliderKnob.classList.remove('dragging');\r\n        this._setDragging(false);\r\n        this._resetKnob();\r\n        this.value = this.immediateValue;\r\n\r\n        s.transform = s.webkitTransform = '';\r\n\r\n        this.fire('change', {composed: true});\r\n    }\r\n\r\n    _knobdown(event) {\r\n        this._expandKnob();\r\n\r\n        // cancel selection\r\n        event.preventDefault();\r\n\r\n        // set the focus manually because we will called prevent default\r\n        this.focus();\r\n    }\r\n\r\n    _bardown(event) {\r\n        this._w = this.$.sliderBar.offsetWidth;\r\n        var rect = this.$.sliderBar.getBoundingClientRect();\r\n        var ratio = (event.detail.x - rect.left) / this._w * 100;\r\n        if (this._isRTL) {\r\n            ratio = 100 - ratio;\r\n        }\r\n        var prevRatio = this.ratio;\r\n\r\n        this._setTransiting(true);\r\n\r\n        this._positionKnob(ratio);\r\n\r\n        this.debounce('expandKnob', this._expandKnob, 60);\r\n\r\n        // if the ratio doesn't change, sliderKnob's animation won't start\r\n        // and `_knobTransitionEnd` won't be called\r\n        // Therefore, we need to manually update the `transiting` state\r\n\r\n        if (prevRatio === this.ratio) {\r\n            this._setTransiting(false);\r\n        }\r\n\r\n        this.async(function() {\r\n            this.fire('change', {composed: true});\r\n        });\r\n\r\n        // cancel selection\r\n        event.preventDefault();\r\n\r\n        // set the focus manually because we will called prevent default\r\n        this.focus();\r\n    }\r\n\r\n    _knobTransitionEnd(event) {\r\n        this.sliderKnob = this.shadowRoot.querySelector('#sliderKnob');\r\n        if (event.target === this.sliderKnob) {\r\n            this._setTransiting(false);\r\n        }\r\n    }\r\n\r\n    _updateMarkers(maxMarkers, min, max, snaps) {\r\n        if (!snaps) {\r\n            this._setMarkers([]);\r\n        }\r\n        var steps = Math.round((max - min) / this.step);\r\n        if (steps > maxMarkers) {\r\n            steps = maxMarkers;\r\n        }\r\n        if (steps < 0 || !isFinite(steps)) {\r\n            steps = 0;\r\n        }\r\n        this._setMarkers(new Array(steps));\r\n    }\r\n\r\n    _mergeClasses(classes) {\r\n        return Object.keys(classes).filter(\r\n            function(className) {\r\n                return classes[className];\r\n            }).join(' ');\r\n    }\r\n\r\n    _getClassNames() {\r\n        return this._mergeClasses({\r\n            disabled: this.disabled,\r\n            pin: this.pin,\r\n            snaps: this.snaps,\r\n            ring: this.immediateValue <= this.min,\r\n            expand: this.expand,\r\n            dragging: this.dragging,\r\n            transiting: this.transiting,\r\n            editable: this.editable\r\n        });\r\n    }\r\n\r\n    get _isRTL() {\r\n        if (this.__isRTL === undefined) {\r\n            this.__isRTL = window.getComputedStyle(this)['direction'] === 'rtl';\r\n        }\r\n        return this.__isRTL;\r\n    }\r\n\r\n    _leftKey(event) {\r\n        if (this._isRTL)\r\n            this._incrementKey(event);\r\n        else\r\n            this._decrementKey(event);\r\n    }\r\n\r\n    _rightKey(event) {\r\n        if (this._isRTL)\r\n            this._decrementKey(event);\r\n        else\r\n            this._incrementKey(event);\r\n    }\r\n\r\n    _incrementKey(event) {\r\n        if (!this.disabled) {\r\n            if (event.detail.key === 'end') {\r\n                this.value = this.max;\r\n            } else {\r\n                this.increment();\r\n            }\r\n            this.fire('change');\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    _decrementKey(event) {\r\n        if (!this.disabled) {\r\n            if (event.detail.key === 'home') {\r\n                this.value = this.min;\r\n            } else {\r\n                this.decrement();\r\n            }\r\n            this.fire('change');\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    _changeValue(event) {\r\n        this.value = event.target.value;\r\n        this.fire('change', {composed: true});\r\n    }\r\n\r\n    _inputKeyDown(event) {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    // create the element ripple inside the `sliderKnob`\r\n    _createRipple() {\r\n        this.sliderKnob = this.shadowRoot.querySelector('#sliderKnob');\r\n        this._rippleContainer = this.sliderKnob;\r\n        return PaperInkyFocusBehaviorImpl._createRipple.call(this);//.call(this);\r\n    }\r\n\r\n    // Hide the ripple when user is not interacting with keyboard.\r\n    // This behavior is different from other ripple-y controls, but is\r\n    // according to spec: https://www.google.com/design/spec/components/sliders.html\r\n    _focusedChanged(receivedFocusFromKeyboard) {\r\n        if (receivedFocusFromKeyboard) {\r\n            this.ensureRipple();\r\n        }\r\n        if (this.hasRipple()) {\r\n            // note, ripple must be un-hidden prior to setting `holdDown`\r\n            if (receivedFocusFromKeyboard) {\r\n                this._ripple.style.display = '';\r\n            } else {\r\n                this._ripple.style.display = 'none';\r\n            }\r\n            this._ripple.holdDown = receivedFocusFromKeyboard;\r\n        }\r\n    }\r\n\r\n    getEle(tag) { return this.shadowRoot.querySelector(tag); }\r\n\r\n    /**\r\n     * Fired when the slider's value changes.\r\n     *\r\n     * @event value-change\r\n     */\r\n\r\n    /**\r\n     * Fired when the slider's immediateValue changes. Only occurs while the\r\n     * user is dragging.\r\n     *\r\n     * To detect changes to immediateValue that happen for any input (i.e.\r\n     * dragging, tapping, clicking, etc.) listen for immediate-value-changed\r\n     * instead.\r\n     *\r\n     * @event immediate-value-change\r\n     */\r\n\r\n    /**\r\n     * Fired when the slider's value changes due to user interaction.\r\n     *\r\n     * Changes to the slider's value due to changes in an underlying\r\n     * bound variable will not trigger this event.\r\n     *\r\n     * @event change\r\n     */\r\n}\r\n\r\nwindow.customElements.define('paper-single-range-slider', PaperSingleRangeSlider);\r\n", "import {html, PolymerElement} from '@polymer/polymer/polymer-element.js';\nimport { GestureEventListeners } from '@polymer/polymer/lib/mixins/gesture-event-listeners.js';\n\nimport './paper-single-range-slider.js'\n/**\n * `paper-range-slider`\n * A material design-style range-slider, composed of paper-slider elements\n *\n * @customElement\n * @polymer\n * @demo demo/index.html\n */\nclass PaperRangeSlider extends GestureEventListeners(PolymerElement) {\n    static get template() {\n        return html`\n        <style>\n              /* local styles go here */\n              :host {\n                @apply --layout;\n                @apply --layout-justified;\n                @apply --layout-center;\n  \n                --paper-range-slider-width: 200px;\n  \n                --paper-range-slider-lower-color:             var(--paper-grey-400);\n                --paper-range-slider-active-color:            var(--primary-color);\n                --paper-range-slider-higher-color:            var(--paper-grey-400);\n                --paper-range-slider-knob-color:              var(--primary-color);\n                --paper-range-slider-pin-color:               var(--primary-color);\n                --paper-range-slider-pin-start-color:         var(--paper-grey-400);\n                --paper-range-slider-knob-start-color:        transparent;\n                --paper-range-slider-knob-start-border-color: var(--paper-grey-400);\n              }\n  \n              #sliderOuterDiv_0 {\n                display: inline-block;\n                width: var(--paper-range-slider-width);\n              }\n  \n              #sliderOuterDiv_1 {\n                position: relative;\n                height: calc(30px + var(--paper-single-range-slider-height, 2px));\n                margin-left: 0;\n                margin-right: 0;\n                margin-top: 0;\n                margin-bottom: 0;\n              }\n  \n              /* mimic the size of the #sliderKnob of paper-single-range-slider */\n              .sliderKnobMinMax {\n                position: absolute;\n                left: 0;\n                top: 0;\n                margin-left: calc(-15px - var(--paper-single-range-slider-height, 2px)/2);\n                width: calc(30px + var(--paper-single-range-slider-height, 2px));\n                height: calc(30px + var(--paper-single-range-slider-height, 2px));\n                /*background: #2196F3; opacity: 0.3;*/\n              }\n  \n              .divSpanWidth {\n                  position:absolute;\n                  width:100%;\n                  display:block;\n                  top:0px;\n              }\n  \n              #sliderMax {\n                  line-height: normal;\n                  --paper-single-range-slider-bar-color:               transparent;\n                  --paper-single-range-slider-knob-color:              var(--paper-range-slider-knob-color);\n                  --paper-single-range-slider-pin-color:               var(--paper-range-slider-pin-color);\n                  --paper-single-range-slider-active-color:            var(--paper-range-slider-active-color);\n                  --paper-single-range-slider-secondary-color:         var(--paper-range-slider-higher-color);\n                  --paper-single-range-slider-pin-start-color:         var(--paper-range-slider-pin-start-color);\n                  --paper-single-range-slider-knob-start-color:        var(--paper-range-slider-knob-start-color);\n                  --paper-single-range-slider-knob-start-border-color: var(--paper-range-slider-knob-start-border-color);\n              }\n              #sliderMin {\n                  line-height: normal;\n                  --paper-single-range-slider-active-color:            var(--paper-range-slider-lower-color);\n                  --paper-single-range-slider-secondary-color:         transparent;\n                  --paper-single-range-slider-knob-color:              var(--paper-range-slider-knob-color);\n                  --paper-single-range-slider-pin-color:               var(--paper-range-slider-pin-color);\n                  --paper-single-range-slider-pin-start-color:         var(--paper-range-slider-pin-start-color);\n                  --paper-single-range-slider-knob-start-color:        var(--paper-range-slider-knob-start-color);\n                  --paper-single-range-slider-knob-start-border-color: var(--paper-range-slider-knob-start-border-color);\n              }\n          </style>\n  \n          <div id=\"sliderOuterDiv_0\" style=\"[[mainDivStyle]]\">\n              <div id=\"sliderOuterDiv_1\">\n                <!-- style=\"background: #2196F3; opacity:0.2;\" -->\n                <div id='backDiv' class=\"divSpanWidth\" on-down=\"_backDivDown\" on-tap=\"_backDivTap\"\n                     on-up=\"_backDivUp\" on-track=\"_backDivOnTrack\" on-transitionend=\"_backDivTransEnd\">\n                    <!-- must have this in order to force width/height -->\n                    <div id='backDivInner_0' style=\"line-height:200%;\"><br></div>\n                </div>\n  \n                <div class=\"divSpanWidth\" style=\"pointer-events: none;\">\n                  <paper-single-range-slider id='sliderMax' display-function=\"[[displayFunction]]\" disabled$=\"[[disabled]]\" on-down=\"_sliderMaxDown\"\n                                on-up=\"_sliderMaxUp\" step=\"[[step]]\" min=\"[[min]]\" max=\"[[max]]\"\n                                value=\"[[valueMax]]\" secondary-progress='[[max]]' style=\"width:100%;\">\n                  </paper-single-range-slider>\n                </div>\n  \n                <div class=\"divSpanWidth\" style=\"pointer-events: none;\">\n                  <paper-single-range-slider id='sliderMin' display-function=\"[[displayFunction]]\" disabled$=\"[[disabled]]\" on-down=\"_sliderMinDown\"\n                                on-up=\"_sliderMinUp\" noink step=\"[[step]]\" min=\"[[min]]\" max=\"[[max]]\"\n                                value=\"[[valueMin]]\" style=\"width:100%;\">\n                  </paper-single-range-slider>\n                </div>\n  \n                <!-- now add one real line -->\n                <div id='backDivInner_1' style=\"line-height:100%;\"><br></div>\n              </div>\n          </div>\n      `;\n    }\n    static get is() { return 'paper-range-slider' }\n\n    // -----------------------------------------------------------------------------------------------------------\n    // properties\n    // -----------------------------------------------------------------------------------------------------------\n    static get properties() {\n        return  {\n            /**\n             * Used to customize the displayed value of the pin. E.g. the value can be prefixed with a '$' like '$99'\n             */\n            displayFunction: {\n                type: Function,\n                value: function () {\n                    return function (value) {\n                        return value;\n                    }\n                }\n            },\n\n            /**\n             * the width of the element in pixels.\n             */\n            sliderWidth: {\n                type: String,\n                value: \"\",\n                notify: true,\n                reflectToAttribute: true\n            },\n\n            /**\n             * the style attribute of the element.\n             */\n            mainDivStyle: {\n                type: Object,\n                value: function() {return {}},\n                notify: true,\n                reflectToAttribute: true\n            },\n\n            /**\n             * the minimal value (lower range) of the slider.\n             */\n            min: {\n                type: Number,\n                value: 0,\n                notify: true,\n                reflectToAttribute: true\n            },\n\n            /**\n             * the maximal value (upper range) of the slider.\n             */\n            max: {\n                type: Number,\n                value: 100,\n                notify: true,\n                reflectToAttribute: true\n            },\n\n            /**\n             * the current value of the lower range of the slider.\n             */\n            valueMin: {\n                type: Number,\n                value: 0,\n                notify: false,\n                reflectToAttribute: true\n            },\n\n            /**\n             * the current value of the upper range of the slider.\n             */\n            valueMax: {\n                type: Number,\n                value: 100,\n                notify: false,\n                reflectToAttribute: true\n            },\n\n            /**\n             * the minimal step-change of a knob on the slider\n             */\n            step: {\n                type: Number,\n                value: 1,\n                notify: true,\n                reflectToAttribute: true\n            },\n\n            /**\n             * optional minimal value for the difference between valueMin and valueMax\n             * by default this is negative (valueDiffMin is ignored)\n             */\n            valueDiffMin: {\n                type: Number,\n                value: 0,\n                notify: true,\n                reflectToAttribute: true\n            },\n\n            /**\n             * optional maximal value for the difference between valueMin and valueMax\n             * by default this is negative (valueDiffMax is ignored)\n             */\n            valueDiffMax: {\n                type: Number,\n                value: 0,\n                notify: true,\n                reflectToAttribute: true\n            },\n\n            /**\n             * if true, pins with numeric value label are shown when the slider thumb\n             * is pressed. Use for settings for which users need to know the exact\n             * value of the setting.\n             */\n            alwaysShowPin: {\n                type: Boolean,\n                value: false,\n                notify: true\n            },\n\n            /**\n             * if true, pins with numeric value label are shown when the slider thumb\n             * is pressed. Use for settings for which users need to know the exact\n             * value of the setting.\n             */\n            pin: {\n                type: Boolean,\n                value: false,\n                notify: true\n            },\n\n            /**\n             * if true, the slider thumb snaps to tick marks evenly spaced based\n             * on the `step` property value.\n             */\n            snaps: {\n                type: Boolean,\n                value: false,\n                notify: true\n            },\n\n            /**\n             * if true, the slider is disabled.\n             */\n            disabled: {\n                type: Boolean,\n                value: false,\n                notify: true\n            },\n\n            /**\n             * an option to \"revert\" from the paper-range-slider to a single paper-single-range-slider.\n             */\n            singleSlider: {\n                type: Boolean,\n                value: false,\n                notify: true\n            },\n\n            /**\n             * time-window (in msec) to keep the slider._setTransiting(true) for the\n             * two paper-single-range-slider elements, when using the _setValuesTrans() method to change the\n             * selected range. This should be slightly higher than the transition time defined for the\n             * paper-single-range-slider (which, as of paper-single-range-slider-v1.0.11, is 0.08s/0.18s).\n             */\n            transDuration: {\n                type: Number,\n                value: 250,\n            },\n\n            /**\n             * if set to true, tapping the slider below or above the selected range\n             * will update the selected range.\n             */\n            tapValueExtend: {\n                type: Boolean,\n                value: true,\n                notify: true\n            },\n\n            /**\n             * if set to true, tapping the slider inside the selected range\n             * will update the selected range.\n             */\n            tapValueReduce: {\n                type: Boolean,\n                value: false,\n                notify: true\n            },\n\n            /**\n             * if set to true, tapping the slider will update the selected range,\n             * while keeping the same difference between valueMin and valueMax.\n             * tapValueMove supersedes tapValueExtend and tapValueReduce\n             */\n            tapValueMove: {\n                type: Boolean,\n                value: false,\n                notify: true\n            },\n        }\n    }\n\n\n    // -----------------------------------------------------------------------------------------------------------\n    // initial settings\n    // -----------------------------------------------------------------------------------------------------------\n    ready() {\n        super.ready();\n        this.inInit = true;\n\n        var this_      = this;\n        var nInitTries = 0;\n\n        var sliderMin = this.shadowRoot.querySelector(\"#sliderMin\");\n        var sliderMax = this.shadowRoot.querySelector(\"#sliderMax\");\n\n        // initialization once the paper-single-range-slider elements have been rendered\n        function _ready() {\n            if(sliderMin.isReady && sliderMax.isReady) {\n                this_.init();\n\n                // setup listeners for updating everything whenever a knob is affected\n                sliderMin.addEventListener('immediate-value-change', function(customEvent) {\n                    this_._setValueMinMax(this_._getValuesMinMax(this.immediateValue,null),'immediate-value-change');\n                });\n\n                sliderMax.addEventListener('immediate-value-change', function(customEvent) {\n                    this_._setValueMinMax(this_._getValuesMinMax(null,this.immediateValue),'immediate-value-change');\n                });\n\n                sliderMin.addEventListener('change', function(customEvent) {\n                    this_._setValueMinMax(this_._getValuesMinMax(this.immediateValue,null),'change');\n\n                    if(this_.alwaysShowPin) {\n                        this_.$.sliderMin._expandKnob();\n                    }\n                });\n\n                sliderMax.addEventListener('change', function(customEvent) {\n                    this_._setValueMinMax(this_._getValuesMinMax(null,this.immediateValue),'change');\n\n                    if(this_.alwaysShowPin) {\n                        this_.$.sliderMax._expandKnob();\n                    }\n                });\n\n                this_.inInit = false;\n            }\n            else {\n                if(nInitTries < 1000) {\n                    setTimeout(function() { _ready(); }, 10);\n                }\n                else {\n                    console.error(\"could not properly initialize the underlying paper-single-range-slider elements ...\");\n                }\n                nInitTries++;\n            }\n        }\n        _ready();\n\n        return;\n    }\n\n    /**\n     * initialize basic properties (can be called again by the user)\n     * @method init\n     */\n    init() {\n        this.setSingleSlider(this.singleSlider);\n        this.setDisabled(this.disabled);\n\n        // some basic properties\n        if(this.alwaysShowPin) { this.pin = true; }\n\n        this.shadowRoot.querySelector(\"#sliderMin\").pin   = this.pin;\n        this.shadowRoot.querySelector(\"#sliderMax\").pin   = this.pin;\n        this.shadowRoot.querySelector(\"#sliderMin\").snaps = this.snaps;\n        this.shadowRoot.querySelector(\"#sliderMax\").snaps = this.snaps;\n\n        if(this.sliderWidth != \"\") {\n            this.updateStyles({\n                '--paper-range-slider-width': this.sliderWidth,\n            });\n        }\n\n        // since the two single sliders are overlaid, we need to remove foreground color\n        this.sliderBar = this.shadowRoot.querySelector(\"#sliderMin\").getEle('#sliderBar');\n        if(this.sliderBar) {\n            this.progressContainer = this.sliderBar.shadowRoot.querySelector('#progressContainer');\n            if(this.progressContainer) this.progressContainer.style.background = \"transparent\";\n        }\n\n        // internal variable to prevent unneeded fire on updates\n        this._prevUpdateValues = [this.min, this.max];\n\n        // set internal variables to control the minimal and maximal difference between selected values\n        this._setValueDiff();\n\n        // initial setting after verifying this._valueDiffMin, this._valueDiffMax\n        this._setValueMinMax(this._getValuesMinMax(this.valueMin, this.valueMax),'init');\n\n        // activate the pins, and never hide\n        if(this.alwaysShowPin) {\n            this.shadowRoot.querySelector(\"#sliderMin\")._expandKnob();\n            this.shadowRoot.querySelector(\"#sliderMax\")._expandKnob();\n        }\n\n        return;\n    }\n\n    // internal variables for minimal/maximal difference between this.valueMin, this.valueMax\n    // each one is between zero and the maximal difference available in the range, and\n    // the this._valueDiffMin can not be larger than this._valueDiffMax\n    _setValueDiff() {\n        this._valueDiffMax = Math.max(this.valueDiffMax, 0);\n        this._valueDiffMin = Math.max(this.valueDiffMin, 0);\n\n        return;\n    }\n\n    // get a new set of min/max values, following predefined rules for overlap of the two\n    _getValuesMinMax(valueMin,valueMax) {\n        var hasMin = (valueMin != null && valueMin >= this.min && valueMin <= this.max);\n        var hasMax = (valueMax != null && valueMax >= this.min && valueMax <= this.max);\n\n        if(!hasMin && !hasMax) { return [this.valueMin,this.valueMax]; }\n\n        var valueNowMin = hasMin ? valueMin : this.valueMin;\n        var valueNowMax = hasMax ? valueMax : this.valueMax;\n\n        valueNowMin = Math.min(Math.max(valueNowMin, this.min), this.max)\n        valueNowMax = Math.min(Math.max(valueNowMax, this.min), this.max)\n\n        var diffNow  = valueNowMax - valueNowMin;\n\n        // the anchor is the valueMin if it is explicitly provided\n        if(hasMin) {\n            if(diffNow < this._valueDiffMin) {\n                valueNowMax = Math.min(this.max, valueNowMin + this._valueDiffMin);\n                diffNow  = valueNowMax - valueNowMin;\n                if(diffNow < this._valueDiffMin) {\n                    valueNowMin = valueNowMax - this._valueDiffMin;\n                }\n            }\n            else if(diffNow > this._valueDiffMax && this._valueDiffMax > 0) {\n                valueNowMax = valueNowMin + this._valueDiffMax;\n            }\n        }\n        // if no valueMin given, decide the anchor is valueMax\n        else {\n            if(diffNow < this._valueDiffMin) {\n                valueNowMin = Math.max(this.min, valueNowMax - this._valueDiffMin);\n                diffNow  = valueNowMax - valueNowMin;\n                if(diffNow < this._valueDiffMin) {\n                    valueNowMax = valueNowMin + this._valueDiffMin;\n                }\n            }\n            else if(diffNow > this._valueDiffMax && this._valueDiffMax > 0) {\n                valueNowMin = valueNowMax - this._valueDiffMax;\n            }\n        }\n\n        return [valueNowMin, valueNowMax];\n    }\n\n    // set the value of the low edge of the selected range\n    _setValueMin(value) {\n        value = Math.max(value, this.min);\n        this.shadowRoot.querySelector(\"#sliderMin\").value = value;\n        this.valueMin = value;\n        return;\n    }\n\n    // set the value of the high edge of the selected range\n    _setValueMax(value) {\n        value = Math.min(value, this.max);\n        this.shadowRoot.querySelector(\"#sliderMax\").value = value;\n        this.valueMax               = value;\n\n        return;\n    }\n\n    // set the values of the low/high edges of the selected range and broadcast the change\n    _setValueMinMax(valuesMinMax, eventName) {\n        this._setValueMin(valuesMinMax[0]);\n        this._setValueMax(valuesMinMax[1]);\n\n        // fire to indicate an update of this.valueMin and/or this.valueMax\n        this.updateValues(eventName);\n\n        return;\n    }\n\n    // set this.valueMin and/or this.valueMax (can input null values or out-of-range\n    // values in order to set only one of the two)\n    _setValuesNoTrans(valueMin,valueMax,eventName) {\n        // some sanity checks/changes\n        if(valueMin != null) {\n            if(valueMin < this.min || valueMin > this.max) valueMin = null;\n        }\n        if(valueMax != null) {\n            if(valueMax < this.min || valueMax > this.max) valueMax = null;\n        }\n        if(valueMin != null && valueMax != null) {\n            valueMin = Math.min(valueMin,valueMax);\n        }\n\n        // now update the values\n        this._setValueMinMax(this._getValuesMinMax(valueMin,valueMax), eventName);\n\n        return;\n    }\n\n    // _setValuesNoTrans with a transition\n    _setValuesTrans(valueMin,valueMax,eventName) {\n        this.shadowRoot.querySelector(\"#sliderMin\")._setTransiting(true);\n        this.shadowRoot.querySelector(\"#sliderMax\")._setTransiting(true);\n\n        this._setValuesNoTrans(valueMin,valueMax,eventName);\n\n        var this_ = this;\n        setTimeout(function() {\n            this_.$.sliderMin._setTransiting(false);\n            this_.$.sliderMax._setTransiting(false);\n        }, this_.transDuration);\n\n        return;\n    }\n\n    // interface for functions to control the draggable invisible div which\n    // spans the distance between the knobs\n    _backDivOnTrack(event) {\n        event.stopPropagation();\n\n        switch (event.detail.state) {\n            case 'start':\n                this._backDivTrackStart(event);\n                break;\n            case 'track':\n                this._backDivTrackDuring(event);\n                break;\n            case 'end':\n                this._backDivTrackEnd();\n                break;\n        }\n\n        return;\n    }\n\n    // place-holder function for possible later implementation\n    _backDivTrackStart(event) { return; }\n\n    // function to enable dragging both knobs by using the invisible\n    // div which spans the distance in between\n    _backDivTrackDuring(e) {\n        var sliderMin = this.shadowRoot.querySelector(\"#sliderMin\");\n        var sliderMax = this.shadowRoot.querySelector(\"#sliderMax\");\n\n        this._x1_Min = this._x0_Min + e.detail.dx;\n        var immediateValueMin = sliderMin._calcStep(this._getRatioPos(sliderMin, this._x1_Min/this._xWidth));\n\n        this._x1_Max = this._x0_Max + e.detail.dx;\n        var immediateValueMax = sliderMax._calcStep(this._getRatioPos(sliderMax, this._x1_Max/this._xWidth));\n\n        if(immediateValueMin >= this.min && immediateValueMax <= this.max) {\n            this._setValuesWithCurrentDiff(immediateValueMin, immediateValueMax, false);\n        }\n\n        return;\n    }\n\n    _setValuesWithCurrentDiff(valueMin, valueMax, useTrans) {\n        var diffMin = this._valueDiffMin;\n        var diffMax = this._valueDiffMax;\n\n        this._valueDiffMin = this.valueMax - this.valueMin;\n        this._valueDiffMax = this.valueMax - this.valueMin;\n\n        if(useTrans) this._setValuesTrans(valueMin, valueMax, '_setValuesWithCurrentDiff');\n        else         this._setValuesNoTrans(valueMin, valueMax, '_setValuesWithCurrentDiff');\n\n        this._valueDiffMin = diffMin;\n        this._valueDiffMax = diffMax;\n\n        return;\n    }\n\n    // place-holder function for at the end of the dragging event, so the following\n    _backDivTrackEnd() { return; }\n\n    // _sliderMinDown, _sliderMaxDown, _sliderMinUp, _sliderMaxUp\n    //      show/hide pins (if defined) for one knob, when the other knob is pressed\n    _sliderMinDown() {\n        this.shadowRoot.querySelector(\"#sliderMax\")._expandKnob();\n\n        return;\n    }\n\n    _sliderMaxDown(event) {\n        if(!this.singleSlider) {\n            this.shadowRoot.querySelector(\"#sliderMin\")._expandKnob();\n        }\n        else {\n            this._setValuesNoTrans(null,this._getEventValue(event),'_sliderMaxDown');\n        }\n\n        return;\n    }\n\n    _sliderMinUp() {\n        if(this.alwaysShowPin) this.shadowRoot.querySelector(\"#sliderMin\")._expandKnob();\n        else                   this.shadowRoot.querySelector(\"#sliderMax\")._resetKnob();\n\n        return;\n    }\n\n    _sliderMaxUp() {\n        if(this.alwaysShowPin) this.shadowRoot.querySelector(\"#sliderMax\")._expandKnob();\n        else {\n            this.shadowRoot.querySelector(\"#sliderMin\")._resetKnob();\n            if(this.singleSlider) this.shadowRoot.querySelector(\"#sliderMax\")._resetKnob();\n        }\n\n        return;\n    }\n\n    // function to calculate the value from an event\n    _getEventValue(event) {\n        var width = this.shadowRoot.querySelector(\"#sliderMax\").getEle('#sliderContainer').offsetWidth;\n        var rect  = this.shadowRoot.querySelector(\"#sliderMax\").getEle('#sliderContainer').getBoundingClientRect();\n        var ratio = (event.detail.x - rect.left) / width;\n        var value = this.min + ratio * (this.max - this.min);\n\n        return value;\n    }\n\n\n    // set the value if tapping the slider below or above the selected range\n    _backDivTap(event) {\n        this._setValueNow = function(valueMin,valueMax) {\n            if(this.tapValueMove) { this._setValuesWithCurrentDiff(valueMin,valueMax,true); }\n            else                  { this._setValuesTrans(valueMin,valueMax,'_backDivTap');  }\n            return;\n        };\n\n        var value = this._getEventValue(event);\n        if(value > this.valueMin && value < this.valueMax) {\n            if(this.tapValueReduce) {\n                var isLow = value < (this.valueMin + (this.valueMax - this.valueMin)/2);\n                if(isLow) { this._setValueNow(value,null); }\n                else      { this._setValueNow(null,value); }\n            }\n        }\n        else if(this.tapValueExtend || this.tapValueMove) {\n            if(value < this.valueMin) { this._setValueNow(value,null); }\n            if(value > this.valueMax) { this._setValueNow(null,value); }\n        }\n\n        return;\n    }\n\n    // initialization before starting the dragging of the invisible\n    // div which spans the distance in between\n    _backDivDown(event) {\n        // show pins if defined\n        this._sliderMinDown();\n        this._sliderMaxDown();\n\n        // get the initial positions of knobs before dragging starts\n        this._xWidth =  this.shadowRoot.querySelector(\"#sliderMin\").getEle('#sliderBar').offsetWidth;\n        this._x0_Min = (this.shadowRoot.querySelector(\"#sliderMin\").ratio / 100.) * this._xWidth;\n        this._x0_Max = (this.shadowRoot.querySelector(\"#sliderMax\").ratio / 100.) * this._xWidth;\n\n        return;\n    }\n\n    // finalization after ending the dragging of the invisible\n    // div which spans the distance in between\n    _backDivUp() {\n        // hide pins if defined\n        this._sliderMinUp();\n        this._sliderMaxUp();\n\n        return;\n    }\n\n    // place-holder function for possible later implementation\n    _backDivTransEnd(event) { return; }\n\n    // the position of the knob for a given single slider, for a given ratio\n    _getRatioPos(slider, ratio) {\n        return Math.max(slider.min, Math.min(slider.max, (slider.max - slider.min) * ratio + slider.min));\n    }\n\n    // helper function to cast to a boolean\n    _toBool(valIn) { return (valIn === \"false\" || valIn === \"0\") ? false : Boolean(valIn); }\n\n    /**\n     * set this.valueMin and/or this.valueMax (can input null values or out-of-range\n     * values in order to set only one of the two) - this is just a public\n     * wrapper for this._setValuesNoTrans(), but including transition animation\n     * @method _setValuesTrans\n     */\n    setValues(valueMin,valueMax,eventName) {\n        var eventNameNow = eventName ? eventName : 'setValues';\n        this._setValuesTrans(valueMin,valueMax,eventNameNow);\n        return;\n    }\n\n    /**\n     * fire whenever this.valueMin or this.valueMax are changed\n     * @method updateValues\n     */\n    updateValues(eventName) {\n        var isNewMin = (this._prevUpdateValues[0] !== this.valueMin);\n        var isNewMax = (this._prevUpdateValues[1] !== this.valueMax);\n        if(isNewMin || isNewMax) {\n            this._prevUpdateValues = [this.valueMin, this.valueMax];\n\n            // fire events\n            if(!this.inInit) {\n                this.dispatchEvent(new CustomEvent('updateValues', { bubbles:true, composed:true, detail:{this:this, eventName:eventName} }));\n\n                if(isNewMin) {\n                    this.dispatchEvent(\n                        new CustomEvent('value-min-changed', { bubbles:true, composed:true, detail:{this:this, value:this.valueMin, eventName:eventName} })\n                    );\n                }\n                if(isNewMax) {\n                    this.dispatchEvent(\n                        new CustomEvent('value-max-changed', { bubbles:true, composed:true, detail:{this:this, value:this.valueMax, eventName:eventName} })\n                    );\n                }\n            }\n        }\n        return;\n    }\n\n    /**\n     * set the minimal value (lower range) of the slider\n     * @method setMin\n     */\n    setMin(minIn) {\n        // paper-single-range-slider needs a safety check that the min value we are going to set is\n        // not larger than the max value which is already set\n        if(this.max < minIn) this.max = minIn;\n\n        this.min = minIn;\n        this._prevUpdateValues = [this.min, this.max];\n\n        // update the selected value if it is now outside of the lower bound,\n        // or just update the position of the overlay divs for the min/max knobs\n        if(this.valueMin < this.min) this._setValuesNoTrans(this.min,null,'setMin');\n\n        return;\n    }\n\n    /**\n     * set the maximal value (upper range) of the slider\n     * @method setMax\n     */\n    setMax(maxIn) {\n        // paper-single-range-slider needs a safety check that the min value we are going to set is\n        // not larger than the max value which is already set\n        if(this.min > maxIn) this.min = maxIn;\n\n        this.max = maxIn;\n        this._prevUpdateValues = [this.min, this.max];\n\n        // update the selected value if it is now outside of the upper bound,\n        // or just update the position of the overlay divs for the min/max knobs\n        if(this.valueMax > this.max) this._setValuesNoTrans(null,this.max,'setMax');\n\n        return;\n    }\n\n    /**\n     * set the minimal step-change of a knob on the slider\n     * @method setMax\n     */\n    setStep(stepIn) {\n        this.step = stepIn;\n        return;\n    }\n\n    /**\n     * get tne ratio (within [0,1]) corresponding to the min/max values\n     * @method getRatio\n     */\n    getRatio() {\n        var ratioMin = this.shadowRoot.querySelector(\"#sliderMin\").ratio / 100.;\n        var ratioMax = this.shadowRoot.querySelector(\"#sliderMax\").ratio / 100.;\n        return [ratioMin, ratioMax];\n    }\n\n    /**\n     * set the minimal difference between selected values\n     * @method setValueDiffMin\n     */\n    setValueDiffMin(valueDiffMin) {\n        this._valueDiffMin = valueDiffMin;\n        return;\n    }\n\n    /**\n     * set the maximal difference between selected values\n     * @method setValueDiffMax\n     */\n    setValueDiffMax(valueDiffMax) {\n        this._valueDiffMax = valueDiffMax;\n        return;\n    }\n\n    /**\n     * set the tapValueExtend property\n     * @method setValueDiffMax\n     */\n    setTapValueExtend(isTapValueExtend) {\n        this.tapValueExtend = this._toBool(isTapValueExtend);\n        return;\n    }\n\n    /**\n     * set the tapValueReduce property\n     * @method setValueDiffMax\n     */\n    setTapValueReduce(isTapValueReduce) {\n        this.tapValueReduce = this._toBool(isTapValueReduce);\n        return;\n    }\n\n    /**\n     * set the tapValueMove property\n     * @method setValueDiffMax\n     */\n    setTapValueMove(isTapValueMove) {\n        this.tapValueMove = this._toBool(isTapValueMove);\n        return;\n    }\n\n    /**\n     * set the disabled parameter\n     * @method setValueDiffMax\n     */\n    setDisabled(isDisabled) {\n        this.disabled = this._toBool(isDisabled);\n        var pointEvt  = this.disabled ? \"none\" : \"auto\";\n\n        this.shadowRoot.querySelector(\"#sliderMax\").getEle('#sliderKnob').style.pointerEvents = pointEvt;\n        this.shadowRoot.querySelector(\"#sliderMin\").getEle('#sliderKnob').style.pointerEvents = pointEvt;\n        this.shadowRoot.querySelector(\"#sliderOuterDiv_1\").style.pointerEvents                = pointEvt;\n\n        return;\n    }\n\n    /**\n     * change the slider between the default paper-range-slider and a paper-single-range-slider\n     * @method setValueDiffMax\n     */\n    setSingleSlider(isSingle) {\n        this.singleSlider = this._toBool(isSingle);\n\n        var sliderMin = this.shadowRoot.querySelector(\"#sliderMin\");\n        var sliderMax = this.shadowRoot.querySelector(\"#sliderMax\");\n        var backDiv   = this.shadowRoot.querySelector(\"#backDiv\");\n        var knobMin   = sliderMin.getEle('#sliderKnob');\n        var knobMax   = sliderMax.getEle('#sliderKnob');\n\n        if(isSingle) {\n            backDiv.style.display         = 'none';\n            sliderMax.style.pointerEvents = 'auto';\n            sliderMax.style.display       = '';\n            sliderMin.style.display       = 'none';\n            backDiv.style.cursor          = 'default';\n            knobMax.style.cursor          = 'default';\n            knobMin.style.cursor          = 'default';\n        }\n        else {\n            backDiv.style.display         = 'block';\n            sliderMax.style.pointerEvents = 'none';\n            sliderMax.style.display       = '';\n            sliderMin.style.display       = '';\n            backDiv.style.cursor          = 'ew-resize';\n            knobMax.style.cursor          = 'col-resize';\n            knobMin.style.cursor          = 'col-resize';\n        }\n\n        // disable some of the interface of the two single sliders,\n        // but keep the knobs active if not disabled\n        sliderMax.getEle('#sliderContainer').style.pointerEvents = this.singleSlider ? \"auto\" : \"none\";\n        sliderMin.getEle('#sliderContainer').style.pointerEvents = \"none\";\n\n        return;\n    }\n}\n\nwindow.customElements.define('paper-range-slider', PaperRangeSlider);\n", "import { ApolloClient, InMemoryCache } from '@apollo/client/core';\n\nconst client = new ApolloClient({\n  uri: `https://${process.env.SHOP_NAME}.myshopify.com/api/2021-01/graphql.json`,\n  cache: new InMemoryCache(),\n  headers: {\n    'Content-Type': 'application/graphql',\n    'X-Shopify-Storefront-Access-Token': `${process.env.STOREFRONT_ACCESS_TOKEN}`,\n  },\n});\n\nwindow.__APOLLO_CLIENT__ = client;\n", "/* eslint-disable import/prefer-default-export */\nimport 'paper-range-slider';\nimport './apollo-client';\nimport CompareTable from '../components/common/CompareTable';\n\nconst start = () => {\n  // add active class to menu item\n  const path = window.location.pathname;\n  const navigationElement = document.querySelector('#main-menu');\n  const activeLinkElement = navigationElement?.querySelector(\n    `[href*=\"${path}\"]`\n  );\n  const activeParentLinkElement = activeLinkElement?.closest('#main-menu>li>a');\n  activeParentLinkElement?.classList?.add('active');\n  // document.body.removeAttribute('hidden');\n  document.dispatchEvent(new CustomEvent('customElementsPrepared'));\n};\n\nif (/complete|interactive|loaded/.test(document.readyState)) {\n  console.log(document.readyState);\n  start();\n} else {\n  document.addEventListener('DOMContentLoaded', start, false);\n}\n\nexport { CompareTable };\n"],
  "mappings": "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A;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAgUA,KAAK,CAAE,MAAO,sCAEd,aAAa,CACpB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",
  "names": []
}
