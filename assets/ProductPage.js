import{a as St,b as Te}from"./chunk-T3VNKMFZ.js";import{a as ye,b as be}from"./chunk-USJPHQKU.js";import"./chunk-JLH2EYJI.js";import{E as $,F as je,a as Ae,b as de,c as ge,d as he,e as we,f as m,g as E,i as Oe,l as Pe,n as R,u as le}from"./chunk-NCQMUVAP.js";var Y=Ae((Ce,P)=>{var F,x,L,D,M,k,B,N,V,j,C,G,q,U,w,H,J,Z,z,K,W,X,Q,T;(function(i){var l=typeof global=="object"?global:typeof self=="object"?self:typeof this=="object"?this:{};typeof define=="function"&&define.amd?define("tslib",["exports"],function(e){i(f(l,f(e)))}):typeof P=="object"&&typeof P.exports=="object"?i(f(l,f(P.exports))):i(f(l));function f(e,t){return e!==l&&(typeof Object.create=="function"?Object.defineProperty(e,"__esModule",{value:!0}):e.__esModule=!0),function(r,n){return e[r]=t?t(r,n):n}}})(function(i){var l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])};F=function(e,t){if(typeof t!="function"&&t!==null)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");l(e,t);function r(){this.constructor=e}e.prototype=t===null?Object.create(t):(r.prototype=t.prototype,new r)},x=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++){t=arguments[r];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},L=function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(e!=null&&typeof Object.getOwnPropertySymbols=="function")for(var o=0,n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(r[n[o]]=e[n[o]]);return r},D=function(e,t,r,n){var o=arguments.length,a=o<3?t:n===null?n=Object.getOwnPropertyDescriptor(t,r):n,c;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")a=Reflect.decorate(e,t,r,n);else for(var u=e.length-1;u>=0;u--)(c=e[u])&&(a=(o<3?c(a):o>3?c(t,r,a):c(t,r))||a);return o>3&&a&&Object.defineProperty(t,r,a),a},M=function(e,t){return function(r,n){t(r,n,e)}},k=function(e,t){if(typeof Reflect=="object"&&typeof Reflect.metadata=="function")return Reflect.metadata(e,t)},B=function(e,t,r,n){function o(a){return a instanceof r?a:new r(function(c){c(a)})}return new(r||(r=Promise))(function(a,c){function u(y){try{s(n.next(y))}catch(b){c(b)}}function _(y){try{s(n.throw(y))}catch(b){c(b)}}function s(y){y.done?a(y.value):o(y.value).then(u,_)}s((n=n.apply(e,t||[])).next())})},N=function(e,t){var r={label:0,sent:function(){if(a[0]&1)throw a[1];return a[1]},trys:[],ops:[]},n,o,a,c;return c={next:u(0),throw:u(1),return:u(2)},typeof Symbol=="function"&&(c[Symbol.iterator]=function(){return this}),c;function u(s){return function(y){return _([s,y])}}function _(s){if(n)throw new TypeError("Generator is already executing.");for(;r;)try{if(n=1,o&&(a=s[0]&2?o.return:s[0]?o.throw||((a=o.return)&&a.call(o),0):o.next)&&!(a=a.call(o,s[1])).done)return a;switch(o=0,a&&(s=[s[0]&2,a.value]),s[0]){case 0:case 1:a=s;break;case 4:return r.label++,{value:s[1],done:!1};case 5:r.label++,o=s[1],s=[0];continue;case 7:s=r.ops.pop(),r.trys.pop();continue;default:if(a=r.trys,!(a=a.length>0&&a[a.length-1])&&(s[0]===6||s[0]===2)){r=0;continue}if(s[0]===3&&(!a||s[1]>a[0]&&s[1]<a[3])){r.label=s[1];break}if(s[0]===6&&r.label<a[1]){r.label=a[1],a=s;break}if(a&&r.label<a[2]){r.label=a[2],r.ops.push(s);break}a[2]&&r.ops.pop(),r.trys.pop();continue}s=t.call(e,r)}catch(y){s=[6,y],o=0}finally{n=a=0}if(s[0]&5)throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}},V=function(e,t){for(var r in e)r!=="default"&&!Object.prototype.hasOwnProperty.call(t,r)&&T(t,e,r)},T=Object.create?function(e,t,r,n){n===void 0&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){n===void 0&&(n=r),e[n]=t[r]},j=function(e){var t=typeof Symbol=="function"&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&typeof e.length=="number")return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},C=function(e,t){var r=typeof Symbol=="function"&&e[Symbol.iterator];if(!r)return e;var n=r.call(e),o,a=[],c;try{for(;(t===void 0||t-- >0)&&!(o=n.next()).done;)a.push(o.value)}catch(u){c={error:u}}finally{try{o&&!o.done&&(r=n.return)&&r.call(n)}finally{if(c)throw c.error}}return a},G=function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(C(arguments[t]));return e},q=function(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;for(var n=Array(e),o=0,t=0;t<r;t++)for(var a=arguments[t],c=0,u=a.length;c<u;c++,o++)n[o]=a[c];return n},U=function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e},w=function(e){return this instanceof w?(this.v=e,this):new w(e)},H=function(e,t,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n=r.apply(e,t||[]),o,a=[];return o={},c("next"),c("throw"),c("return"),o[Symbol.asyncIterator]=function(){return this},o;function c(p){n[p]&&(o[p]=function(v){return new Promise(function(S,d){a.push([p,v,S,d])>1||u(p,v)})})}function u(p,v){try{_(n[p](v))}catch(S){b(a[0][3],S)}}function _(p){p.value instanceof w?Promise.resolve(p.value.v).then(s,y):b(a[0][2],p)}function s(p){u("next",p)}function y(p){u("throw",p)}function b(p,v){p(v),a.shift(),a.length&&u(a[0][0],a[0][1])}},J=function(e){var t,r;return t={},n("next"),n("throw",function(o){throw o}),n("return"),t[Symbol.iterator]=function(){return this},t;function n(o,a){t[o]=e[o]?function(c){return(r=!r)?{value:w(e[o](c)),done:o==="return"}:a?a(c):c}:a}},Z=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t=e[Symbol.asyncIterator],r;return t?t.call(e):(e=typeof j=="function"?j(e):e[Symbol.iterator](),r={},n("next"),n("throw"),n("return"),r[Symbol.asyncIterator]=function(){return this},r);function n(a){r[a]=e[a]&&function(c){return new Promise(function(u,_){c=e[a](c),o(u,_,c.done,c.value)})}}function o(a,c,u,_){Promise.resolve(_).then(function(s){a({value:s,done:u})},c)}},z=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e};var f=Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t};K=function(e){if(e&&e.__esModule)return e;var t={};if(e!=null)for(var r in e)r!=="default"&&Object.prototype.hasOwnProperty.call(e,r)&&T(t,e,r);return f(t,e),t},W=function(e){return e&&e.__esModule?e:{default:e}},X=function(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)},Q=function(e,t,r){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,r),r},i("__extends",F),i("__assign",x),i("__rest",L),i("__decorate",D),i("__param",M),i("__metadata",k),i("__awaiter",B),i("__generator",N),i("__exportStar",V),i("__createBinding",T),i("__values",j),i("__read",C),i("__spread",G),i("__spreadArrays",q),i("__spreadArray",U),i("__await",w),i("__asyncGenerator",H),i("__asyncDelegator",J),i("__asyncValues",Z),i("__makeTemplateObject",z),i("__importStar",K),i("__importDefault",W),i("__classPrivateFieldGet",X),i("__classPrivateFieldSet",Q)})});var fe=de(St());var ee=de(Y()),{__extends:Re,__assign:te,__rest:$e,__decorate:Fe,__param:xe,__metadata:Le,__awaiter:De,__generator:Me,__exportStar:ke,__createBinding:Be,__values:Ne,__read:Ve,__spread:Ge,__spreadArrays:qe,__spreadArray:Ue,__await:He,__asyncGenerator:Je,__asyncDelegator:Ze,__asyncValues:ze,__makeTemplateObject:Ke,__importStar:We,__importDefault:Xe,__classPrivateFieldGet:Qe,__classPrivateFieldSet:Ye}=ee.default;function re(i){return i.toLowerCase()}var pe=[/([a-z0-9])([A-Z])/g,/([A-Z])([A-Z][a-z])/g],me=/[^A-Z0-9]+/gi;function ae(i,l){l===void 0&&(l={});for(var f=l.splitRegexp,e=f===void 0?pe:f,t=l.stripRegexp,r=t===void 0?me:t,n=l.transform,o=n===void 0?re:n,a=l.delimiter,c=a===void 0?" ":a,u=ne(ne(i,e,"$1\0$2"),r,"\0"),_=0,s=u.length;u.charAt(_)==="\0";)_++;for(;u.charAt(s-1)==="\0";)s--;return u.slice(_,s).split("\0").map(o).join(c)}function ne(i,l,f){return l instanceof RegExp?i.replace(l,f):l.reduce(function(e,t){return e.replace(t,f)},i)}function oe(i){return i.charAt(0).toUpperCase()+i.substr(1)}function _e(i){return oe(i.toLowerCase())}function I(i,l){return l===void 0&&(l={}),ae(i,te({delimiter:" ",transform:_e},l))}var ve=R(({relatedProducts:i,fetchIsFinished:l})=>m`<div class="container">
    <div class="row">
      <div class="col">
        ${$({title:"RELATED PRODUCTS"})}
        ${l?m` <div
              class="slick_carousel product-m"
              data-slick='{"slidesToShow": 4,"slidesToScroll": 1, "autoplay": false, "autoplaySpeed": 1000, "infinite": false, "arrows": true,"dots": false, "responsive":[{"breakpoint": 1367,"settings":{"slidesToShow": 4 }},{"breakpoint": 1024,"settings":{"slidesToShow": 4 }},{"breakpoint": 767,"settings":{"slidesToShow": 2 }},{"breakpoint": 577,"settings":{"slidesToShow": 1 }} ]}'
            >
              ${i.map(f=>m`${ye({product:f,itemClassList:{grid:"col-lg-3 col-md-6 col-grid-box"}})}`)}
            </div>`:m`${be()}`}
      </div>
    </div>
  </div>`),ie=ve;var se=new WeakMap,ce=ge(i=>l=>{if(!(l instanceof we))throw new Error("unsafeHTML can only be used in text bindings");let f=se.get(l);if(f!==void 0&&he(i)&&i===f.value&&l.value===f.fragment)return;let e=document.createElement("template");e.innerHTML=i;let t=document.importNode(e.content,!0);l.setValue(t),se.set(l,{value:i,fragment:t})});var Se=R(({specificationList:i,description:l})=>{let f=/<iframe\s+[^>]+><\/iframe>/g,e=l.match(f)?.[0]??"",t=l.replace(e,"");return E(()=>{if(e!==""){let n=le(e)?.firstElementChild?.getAttribute("src"),o=document.querySelector("#video-wrapper");o&&n&&!o.firstElementChild&&o.appendChild(le(`<iframe class="embed-responsive-item" src="${n}" allowfullscreen></iframe>`))}},[]),m`<div class="container">
    <div class="row">
      <div class="col">${$({title:"SPECIFICATIONS"})}</div>
    </div>
    <div class="row">
      <div class="col-12 col-md-6 table-responsive"">
        <table class="table table-bordered">
          <tbody>
            ${Object.entries(i).slice(0,Object.keys(i).length/2+1).map(([r,n])=>m`<tr>
                    <th scope="row">${r}</th>
                    <td>
                      ${Array.isArray(n)?n.map((o,a)=>m`${a<n.length-1?m`${o}<br />`:o}`):n}
                    </td>
                  </tr>`)}
          </tbody>
        </table>
      </div>
      <div class="col-12 col-md-6 table-responsive"">
        <table class="table table-bordered">
          <tbody>
            ${Object.entries(i).slice(Object.keys(i).length/2+1).map(([r,n])=>m`<tr>
                    <th scope="row">${r}</th>
                    <td>
                      ${Array.isArray(n)?n.map((o,a)=>m`${a<n.length-1?m`${o}<br />`:o}`):n}
                    </td>
                  </tr>`)}
          </tbody>
        </table>
      </div>
    </div>
    <div class="row">
      <div class="col">${ce(t)}</div>
    </div>
  </div>`}),ue=Se;function Ee({productJson:i,similarMetafield:l,productMetafield:f,productTotalInventory:e}){let t=JSON.parse(i);t.totalInventory=Number(e);let r=JSON.parse(f),n=[{Brand:t.vendor},{Availability:t.totalInventory>0?m`<span class="instock-lable"
              ><i class="fa fa-check-circle" aria-hidden="true"></i
              >INSTOCK</span
            >`:t.available?m`<span class="instock-lable"
              ><i class="fa fa-check-circle" aria-hidden="true"></i
              >PREORDER</span
            >`:m`<span class="outofstock-lable">OUTOFSTOCK</span>`},...t.tags.filter(d=>d.startsWith("dtm_")).map(d=>({[I(d.split("_")[1])]:d.split("_")?.[2]??!0})),...Object.entries(r).map(([d,h])=>({[I(d)]:h}))].reduce((d,h)=>{let[g]=Object.values(h),[A]=Object.keys(h);return d[A]=g,d},{}),o=JSON.parse(l),{state:a,dispatch:c,queryAllProducts:u}=new(Te((0,fe.default)(t.type,{lower:!0})))({defaultSortBy:"best-selling",initialValueFilterKeyPairs:{}}),[_,s]=Oe(1);E(()=>{setTimeout(()=>s(_+1),1e3)}),E(async()=>{let d=await u();c({type:"setAllProducts",payload:d}),c({type:"setFetchIsFinished",payload:!0})},[]);let{allProducts:y,fetchIsFinished:b}=a,p=(d,h)=>{let g=0;return o.forEach((A,O)=>{switch(A){case"collection":{g+=(10-O)*0;break}case"type":{g+=(10-O)*0;break}case"price50":{g+=(10-O)*(Math.abs(t.price/100-d.minVariantPrice)-Math.abs(t.price/100-h.minVariantPrice));break}case"brand":{g+=(10-O)*(Math.abs(t.vendor.localeCompare(d.brand))-Math.abs(t.vendor.localeCompare(h.brand)))*100;break}default:break}}),g},v=d=>d.title!==t.title&&Math.abs(d.minVariantPrice-t.price/100)<=200,S=y.sort(p).filter(v).slice(0,10);return m`${t.type==="Barbeques"?m`<section
          class="specifications-wrapper ratio_square product-specifications"
        >
          ${ue({specificationList:n,description:t.description})}
        </section>`:null}
    <section
      class="related-products-wrapper ratio_square product-related equal_height"
    >
      ${ie({relatedProducts:S,fetchIsFinished:b})}
    </section>`}[je,{tagName:"product-page",renderer:Ee,options:{observedAttributes:["product-json","product-total-inventory","similar-metafield","product-metafield"],useShadowDOM:!1}}].forEach(i=>{customElements.define(i.tagName,Pe(i.renderer,i.options))});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5qcyIsICIuLi9zcmMvcGFnZXMvUHJvZHVjdFBhZ2UuanMiLCAiLi4vc3JjL25vZGVfbW9kdWxlcy90c2xpYi9tb2R1bGVzL2luZGV4LmpzIiwgIi4uL3NyYy9ub2RlX21vZHVsZXMvbG93ZXItY2FzZS9zcmMvaW5kZXgudHMiLCAiLi4vc3JjL25vZGVfbW9kdWxlcy9uby1jYXNlL3NyYy9pbmRleC50cyIsICIuLi9zcmMvbm9kZV9tb2R1bGVzL3VwcGVyLWNhc2UtZmlyc3Qvc3JjL2luZGV4LnRzIiwgIi4uL3NyYy9ub2RlX21vZHVsZXMvY2FwaXRhbC1jYXNlL3NyYy9pbmRleC50cyIsICIuLi9zcmMvY29tcG9uZW50cy9wcm9kdWN0UGFnZS9SZWxhdGVkUHJvZHVjdHMuanMiLCAiLi4vc3JjL25vZGVfbW9kdWxlcy9saXQtaHRtbC9zcmMvZGlyZWN0aXZlcy91bnNhZmUtaHRtbC50cyIsICIuLi9zcmMvY29tcG9uZW50cy9wcm9kdWN0UGFnZS9TcGVjaWZpY2F0aW9ucy5qcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIGdsb2JhbCwgZGVmaW5lLCBTeXN0ZW0sIFJlZmxlY3QsIFByb21pc2UgKi9cclxudmFyIF9fZXh0ZW5kcztcclxudmFyIF9fYXNzaWduO1xyXG52YXIgX19yZXN0O1xyXG52YXIgX19kZWNvcmF0ZTtcclxudmFyIF9fcGFyYW07XHJcbnZhciBfX21ldGFkYXRhO1xyXG52YXIgX19hd2FpdGVyO1xyXG52YXIgX19nZW5lcmF0b3I7XHJcbnZhciBfX2V4cG9ydFN0YXI7XHJcbnZhciBfX3ZhbHVlcztcclxudmFyIF9fcmVhZDtcclxudmFyIF9fc3ByZWFkO1xyXG52YXIgX19zcHJlYWRBcnJheXM7XHJcbnZhciBfX3NwcmVhZEFycmF5O1xyXG52YXIgX19hd2FpdDtcclxudmFyIF9fYXN5bmNHZW5lcmF0b3I7XHJcbnZhciBfX2FzeW5jRGVsZWdhdG9yO1xyXG52YXIgX19hc3luY1ZhbHVlcztcclxudmFyIF9fbWFrZVRlbXBsYXRlT2JqZWN0O1xyXG52YXIgX19pbXBvcnRTdGFyO1xyXG52YXIgX19pbXBvcnREZWZhdWx0O1xyXG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldDtcclxudmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQ7XHJcbnZhciBfX2NyZWF0ZUJpbmRpbmc7XHJcbihmdW5jdGlvbiAoZmFjdG9yeSkge1xyXG4gICAgdmFyIHJvb3QgPSB0eXBlb2YgZ2xvYmFsID09PSBcIm9iamVjdFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgPT09IFwib2JqZWN0XCIgPyBzZWxmIDogdHlwZW9mIHRoaXMgPT09IFwib2JqZWN0XCIgPyB0aGlzIDoge307XHJcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcclxuICAgICAgICBkZWZpbmUoXCJ0c2xpYlwiLCBbXCJleHBvcnRzXCJdLCBmdW5jdGlvbiAoZXhwb3J0cykgeyBmYWN0b3J5KGNyZWF0ZUV4cG9ydGVyKHJvb3QsIGNyZWF0ZUV4cG9ydGVyKGV4cG9ydHMpKSk7IH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICBmYWN0b3J5KGNyZWF0ZUV4cG9ydGVyKHJvb3QsIGNyZWF0ZUV4cG9ydGVyKG1vZHVsZS5leHBvcnRzKSkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgZmFjdG9yeShjcmVhdGVFeHBvcnRlcihyb290KSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBjcmVhdGVFeHBvcnRlcihleHBvcnRzLCBwcmV2aW91cykge1xyXG4gICAgICAgIGlmIChleHBvcnRzICE9PSByb290KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoaWQsIHYpIHsgcmV0dXJuIGV4cG9ydHNbaWRdID0gcHJldmlvdXMgPyBwcmV2aW91cyhpZCwgdikgOiB2OyB9O1xyXG4gICAgfVxyXG59KVxyXG4oZnVuY3Rpb24gKGV4cG9ydGVyKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG5cclxuICAgIF9fZXh0ZW5kcyA9IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxuXHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIF9fcmVzdCA9IGZ1bmN0aW9uIChzLCBlKSB7XHJcbiAgICAgICAgdmFyIHQgPSB7fTtcclxuICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH07XHJcblxyXG4gICAgX19kZWNvcmF0ZSA9IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgICAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbiAgICB9O1xyXG5cclxuICAgIF9fcGFyYW0gPSBmdW5jdGlvbiAocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbiAgICB9O1xyXG5cclxuICAgIF9fbWV0YWRhdGEgPSBmdW5jdGlvbiAobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgICAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xyXG4gICAgfTtcclxuXHJcbiAgICBfX2F3YWl0ZXIgPSBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgX19nZW5lcmF0b3IgPSBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xyXG4gICAgICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICAgICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICAgICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBfX2V4cG9ydFN0YXIgPSBmdW5jdGlvbihtLCBvKSB7XHJcbiAgICAgICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBwKSkgX19jcmVhdGVCaW5kaW5nKG8sIG0sIHApO1xyXG4gICAgfTtcclxuXHJcbiAgICBfX2NyZWF0ZUJpbmRpbmcgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICAgICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XHJcbiAgICB9KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICAgICAgb1trMl0gPSBtW2tdO1xyXG4gICAgfSk7XHJcblxyXG4gICAgX192YWx1ZXMgPSBmdW5jdGlvbiAobykge1xyXG4gICAgICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XHJcbiAgICAgICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICAgICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xyXG4gICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB9O1xyXG5cclxuICAgIF9fcmVhZCA9IGZ1bmN0aW9uIChvLCBuKSB7XHJcbiAgICAgICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICAgICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgICAgIGZpbmFsbHkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhcjtcclxuICAgIH07XHJcblxyXG4gICAgLyoqIEBkZXByZWNhdGVkICovXHJcbiAgICBfX3NwcmVhZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xyXG4gICAgICAgIHJldHVybiBhcjtcclxuICAgIH07XHJcblxyXG4gICAgLyoqIEBkZXByZWNhdGVkICovXHJcbiAgICBfX3NwcmVhZEFycmF5cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgICAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxyXG4gICAgICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICAgICAgcmV0dXJuIHI7XHJcbiAgICB9O1xyXG5cclxuICAgIF9fc3ByZWFkQXJyYXkgPSBmdW5jdGlvbiAodG8sIGZyb20pIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBmcm9tLmxlbmd0aCwgaiA9IHRvLmxlbmd0aDsgaSA8IGlsOyBpKyssIGorKylcclxuICAgICAgICAgICAgdG9bal0gPSBmcm9tW2ldO1xyXG4gICAgICAgIHJldHVybiB0bztcclxuICAgIH07XHJcblxyXG4gICAgX19hd2FpdCA9IGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbiAgICB9O1xyXG5cclxuICAgIF9fYXN5bmNHZW5lcmF0b3IgPSBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICAgICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgICAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgICAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgICAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICAgICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG4gICAgfTtcclxuXHJcbiAgICBfX2FzeW5jRGVsZWdhdG9yID0gZnVuY3Rpb24gKG8pIHtcclxuICAgICAgICB2YXIgaSwgcDtcclxuICAgICAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cclxuICAgIH07XHJcblxyXG4gICAgX19hc3luY1ZhbHVlcyA9IGZ1bmN0aW9uIChvKSB7XHJcbiAgICAgICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgICAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgICAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XHJcbiAgICAgICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG4gICAgfTtcclxuXHJcbiAgICBfX21ha2VUZW1wbGF0ZU9iamVjdCA9IGZ1bmN0aW9uIChjb29rZWQsIHJhdykge1xyXG4gICAgICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICAgICAgcmV0dXJuIGNvb2tlZDtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcclxuICAgIH0pIDogZnVuY3Rpb24obywgdikge1xyXG4gICAgICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcclxuICAgIH07XHJcblxyXG4gICAgX19pbXBvcnRTdGFyID0gZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcclxuICAgICAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIF9faW1wb3J0RGVmYXVsdCA9IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgICAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxuICAgIH07XHJcblxyXG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9IGZ1bmN0aW9uIChyZWNlaXZlciwgcHJpdmF0ZU1hcCkge1xyXG4gICAgICAgIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gZ2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcHJpdmF0ZU1hcC5nZXQocmVjZWl2ZXIpO1xyXG4gICAgfTtcclxuXHJcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gZnVuY3Rpb24gKHJlY2VpdmVyLCBwcml2YXRlTWFwLCB2YWx1ZSkge1xyXG4gICAgICAgIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gc2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwcml2YXRlTWFwLnNldChyZWNlaXZlciwgdmFsdWUpO1xyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0ZXIoXCJfX2V4dGVuZHNcIiwgX19leHRlbmRzKTtcclxuICAgIGV4cG9ydGVyKFwiX19hc3NpZ25cIiwgX19hc3NpZ24pO1xyXG4gICAgZXhwb3J0ZXIoXCJfX3Jlc3RcIiwgX19yZXN0KTtcclxuICAgIGV4cG9ydGVyKFwiX19kZWNvcmF0ZVwiLCBfX2RlY29yYXRlKTtcclxuICAgIGV4cG9ydGVyKFwiX19wYXJhbVwiLCBfX3BhcmFtKTtcclxuICAgIGV4cG9ydGVyKFwiX19tZXRhZGF0YVwiLCBfX21ldGFkYXRhKTtcclxuICAgIGV4cG9ydGVyKFwiX19hd2FpdGVyXCIsIF9fYXdhaXRlcik7XHJcbiAgICBleHBvcnRlcihcIl9fZ2VuZXJhdG9yXCIsIF9fZ2VuZXJhdG9yKTtcclxuICAgIGV4cG9ydGVyKFwiX19leHBvcnRTdGFyXCIsIF9fZXhwb3J0U3Rhcik7XHJcbiAgICBleHBvcnRlcihcIl9fY3JlYXRlQmluZGluZ1wiLCBfX2NyZWF0ZUJpbmRpbmcpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX3ZhbHVlc1wiLCBfX3ZhbHVlcyk7XHJcbiAgICBleHBvcnRlcihcIl9fcmVhZFwiLCBfX3JlYWQpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX3NwcmVhZFwiLCBfX3NwcmVhZCk7XHJcbiAgICBleHBvcnRlcihcIl9fc3ByZWFkQXJyYXlzXCIsIF9fc3ByZWFkQXJyYXlzKTtcclxuICAgIGV4cG9ydGVyKFwiX19zcHJlYWRBcnJheVwiLCBfX3NwcmVhZEFycmF5KTtcclxuICAgIGV4cG9ydGVyKFwiX19hd2FpdFwiLCBfX2F3YWl0KTtcclxuICAgIGV4cG9ydGVyKFwiX19hc3luY0dlbmVyYXRvclwiLCBfX2FzeW5jR2VuZXJhdG9yKTtcclxuICAgIGV4cG9ydGVyKFwiX19hc3luY0RlbGVnYXRvclwiLCBfX2FzeW5jRGVsZWdhdG9yKTtcclxuICAgIGV4cG9ydGVyKFwiX19hc3luY1ZhbHVlc1wiLCBfX2FzeW5jVmFsdWVzKTtcclxuICAgIGV4cG9ydGVyKFwiX19tYWtlVGVtcGxhdGVPYmplY3RcIiwgX19tYWtlVGVtcGxhdGVPYmplY3QpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX2ltcG9ydFN0YXJcIiwgX19pbXBvcnRTdGFyKTtcclxuICAgIGV4cG9ydGVyKFwiX19pbXBvcnREZWZhdWx0XCIsIF9faW1wb3J0RGVmYXVsdCk7XHJcbiAgICBleHBvcnRlcihcIl9fY2xhc3NQcml2YXRlRmllbGRHZXRcIiwgX19jbGFzc1ByaXZhdGVGaWVsZEdldCk7XHJcbiAgICBleHBvcnRlcihcIl9fY2xhc3NQcml2YXRlRmllbGRTZXRcIiwgX19jbGFzc1ByaXZhdGVGaWVsZFNldCk7XHJcbn0pO1xyXG4iLCAiLyogZXNsaW50LWRpc2FibGUgbm8tbmVzdGVkLXRlcm5hcnkgKi9cbmltcG9ydCB7IGh0bWwsIHVzZUVmZmVjdCwgdXNlU3RhdGUsIGNvbXBvbmVudCB9IGZyb20gJ0BhcG9sbG8tZWxlbWVudHMvaGF1bnRlZCc7XG5pbXBvcnQgc2x1Z2lmeSBmcm9tICdzbHVnaWZ5JztcbmltcG9ydCB7IGNhcGl0YWxDYXNlIH0gZnJvbSAnY2FwaXRhbC1jYXNlJztcbmltcG9ydCB7IENvbXBhcmVUYWJsZSB9IGZyb20gJy4uL3NoYXJlZC9pbmRleCc7XG5pbXBvcnQgUmVsYXRlZFByb2R1Y3RzIGZyb20gJy4uL2NvbXBvbmVudHMvcHJvZHVjdFBhZ2UvUmVsYXRlZFByb2R1Y3RzJztcbmltcG9ydCBTcGVjaWZpY2F0aW9ucyBmcm9tICcuLi9jb21wb25lbnRzL3Byb2R1Y3RQYWdlL1NwZWNpZmljYXRpb25zJztcbmltcG9ydCB1c2VQcm9kdWN0VHlwZSBmcm9tICcuLi9wcm9kdWN0VHlwZXMnO1xuXG5mdW5jdGlvbiBQcm9kdWN0UGFnZSh7XG4gIHByb2R1Y3RKc29uLFxuICBzaW1pbGFyTWV0YWZpZWxkLFxuICBwcm9kdWN0TWV0YWZpZWxkLFxuICBwcm9kdWN0VG90YWxJbnZlbnRvcnksXG59KSB7XG4gIGNvbnN0IHByb2R1Y3QgPSBKU09OLnBhcnNlKHByb2R1Y3RKc29uKTtcbiAgcHJvZHVjdC50b3RhbEludmVudG9yeSA9IE51bWJlcihwcm9kdWN0VG90YWxJbnZlbnRvcnkpO1xuICBjb25zdCBtZXRhZmllbGQgPSBKU09OLnBhcnNlKHByb2R1Y3RNZXRhZmllbGQpO1xuICAvLyBjb25zb2xlLmxvZygncHJvZHVjdCcsIHByb2R1Y3QpO1xuXG4gIGNvbnN0IHNwZWNpZmljYXRpb25MaXN0ID0gW1xuICAgIHsgQnJhbmQ6IHByb2R1Y3QudmVuZG9yIH0sXG4gICAge1xuICAgICAgQXZhaWxhYmlsaXR5OlxuICAgICAgICBwcm9kdWN0LnRvdGFsSW52ZW50b3J5ID4gMFxuICAgICAgICAgID8gaHRtbGA8c3BhbiBjbGFzcz1cImluc3RvY2stbGFibGVcIlxuICAgICAgICAgICAgICA+PGkgY2xhc3M9XCJmYSBmYS1jaGVjay1jaXJjbGVcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2lcbiAgICAgICAgICAgICAgPklOU1RPQ0s8L3NwYW5cbiAgICAgICAgICAgID5gXG4gICAgICAgICAgOiBwcm9kdWN0LmF2YWlsYWJsZVxuICAgICAgICAgID8gaHRtbGA8c3BhbiBjbGFzcz1cImluc3RvY2stbGFibGVcIlxuICAgICAgICAgICAgICA+PGkgY2xhc3M9XCJmYSBmYS1jaGVjay1jaXJjbGVcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2lcbiAgICAgICAgICAgICAgPlBSRU9SREVSPC9zcGFuXG4gICAgICAgICAgICA+YFxuICAgICAgICAgIDogaHRtbGA8c3BhbiBjbGFzcz1cIm91dG9mc3RvY2stbGFibGVcIj5PVVRPRlNUT0NLPC9zcGFuPmAsXG4gICAgfSxcbiAgICAuLi5wcm9kdWN0LnRhZ3NcbiAgICAgIC5maWx0ZXIoKHQpID0+IHQuc3RhcnRzV2l0aCgnZHRtXycpKVxuICAgICAgLm1hcCgodGFnKSA9PiAoe1xuICAgICAgICBbY2FwaXRhbENhc2UodGFnLnNwbGl0KCdfJylbMV0pXTogdGFnLnNwbGl0KCdfJyk/LlsyXSA/PyB0cnVlLFxuICAgICAgfSkpLFxuICAgIC4uLk9iamVjdC5lbnRyaWVzKG1ldGFmaWVsZCkubWFwKChba2V5LCB2YWx1ZV0pID0+ICh7XG4gICAgICBbY2FwaXRhbENhc2Uoa2V5KV06IHZhbHVlLFxuICAgIH0pKSxcbiAgXS5yZWR1Y2UoKGFjYywgY3VyKSA9PiB7XG4gICAgY29uc3QgW3ZhbHVlXSA9IE9iamVjdC52YWx1ZXMoY3VyKTtcbiAgICBjb25zdCBba2V5XSA9IE9iamVjdC5rZXlzKGN1cik7XG4gICAgYWNjW2tleV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG5cbiAgLy8gY29uc29sZS5sb2coc3BlY2lmaWNhdGlvbkxpc3QpO1xuXG4gIGNvbnN0IHNpbWlsYXIgPSBKU09OLnBhcnNlKHNpbWlsYXJNZXRhZmllbGQpO1xuICBjb25zdCB7IHN0YXRlLCBkaXNwYXRjaCwgcXVlcnlBbGxQcm9kdWN0cyB9ID0gbmV3ICh1c2VQcm9kdWN0VHlwZShcbiAgICBzbHVnaWZ5KHByb2R1Y3QudHlwZSwgeyBsb3dlcjogdHJ1ZSB9KVxuICApKSh7XG4gICAgZGVmYXVsdFNvcnRCeTogJ2Jlc3Qtc2VsbGluZycsXG4gICAgaW5pdGlhbFZhbHVlRmlsdGVyS2V5UGFpcnM6IHt9LFxuICB9KTtcblxuICBjb25zdCBbY291bnQsIHNldENvdW50XSA9IHVzZVN0YXRlKDEpO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldFRpbWVvdXQoKCkgPT4gc2V0Q291bnQoY291bnQgKyAxKSwgMTAwMCk7XG4gIH0pO1xuXG4gIHVzZUVmZmVjdChhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgcHJvZHVjdHMgPSBhd2FpdCBxdWVyeUFsbFByb2R1Y3RzKCk7XG4gICAgLy8gY29uc29sZS5sb2coJ2FsbFByb2R1Y3RzOicsIHByb2R1Y3RzKTtcbiAgICBkaXNwYXRjaCh7IHR5cGU6ICdzZXRBbGxQcm9kdWN0cycsIHBheWxvYWQ6IHByb2R1Y3RzIH0pO1xuICAgIGRpc3BhdGNoKHsgdHlwZTogJ3NldEZldGNoSXNGaW5pc2hlZCcsIHBheWxvYWQ6IHRydWUgfSk7XG4gIH0sIFtdKTtcblxuICBjb25zdCB7IGFsbFByb2R1Y3RzLCBmZXRjaElzRmluaXNoZWQgfSA9IHN0YXRlO1xuXG4gIGNvbnN0IHNvcnRlciA9IChhLCBiKSA9PiB7XG4gICAgbGV0IGNvbXBhcmVSZXN1bHQgPSAwO1xuICAgIHNpbWlsYXIuZm9yRWFjaCgodCwgaWR4KSA9PiB7XG4gICAgICBzd2l0Y2ggKHQpIHtcbiAgICAgICAgY2FzZSAnY29sbGVjdGlvbic6IHtcbiAgICAgICAgICBjb21wYXJlUmVzdWx0ICs9ICgxMCAtIGlkeCkgKiAwO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ3R5cGUnOiB7XG4gICAgICAgICAgY29tcGFyZVJlc3VsdCArPSAoMTAgLSBpZHgpICogMDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdwcmljZTUwJzoge1xuICAgICAgICAgIGNvbXBhcmVSZXN1bHQgKz1cbiAgICAgICAgICAgICgxMCAtIGlkeCkgKlxuICAgICAgICAgICAgKE1hdGguYWJzKHByb2R1Y3QucHJpY2UgLyAxMDAgLSBhLm1pblZhcmlhbnRQcmljZSkgLVxuICAgICAgICAgICAgICBNYXRoLmFicyhwcm9kdWN0LnByaWNlIC8gMTAwIC0gYi5taW5WYXJpYW50UHJpY2UpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdicmFuZCc6IHtcbiAgICAgICAgICBjb21wYXJlUmVzdWx0ICs9XG4gICAgICAgICAgICAoMTAgLSBpZHgpICpcbiAgICAgICAgICAgIChNYXRoLmFicyhwcm9kdWN0LnZlbmRvci5sb2NhbGVDb21wYXJlKGEuYnJhbmQpKSAtXG4gICAgICAgICAgICAgIE1hdGguYWJzKHByb2R1Y3QudmVuZG9yLmxvY2FsZUNvbXBhcmUoYi5icmFuZCkpKSAqXG4gICAgICAgICAgICAxMDA7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gY29tcGFyZVJlc3VsdDtcbiAgfTtcblxuICBjb25zdCBmaWx0ZXJGdW5jID0gKHApID0+XG4gICAgcC50aXRsZSAhPT0gcHJvZHVjdC50aXRsZSAmJlxuICAgIE1hdGguYWJzKHAubWluVmFyaWFudFByaWNlIC0gcHJvZHVjdC5wcmljZSAvIDEwMCkgPD0gMjAwO1xuXG4gIGNvbnN0IHJlbGF0ZWRQcm9kdWN0cyA9IGFsbFByb2R1Y3RzXG4gICAgLnNvcnQoc29ydGVyKVxuICAgIC5maWx0ZXIoZmlsdGVyRnVuYylcbiAgICAuc2xpY2UoMCwgMTApO1xuXG4gIHJldHVybiBodG1sYCR7cHJvZHVjdC50eXBlID09PSAnQmFyYmVxdWVzJ1xuICAgICAgPyBodG1sYDxzZWN0aW9uXG4gICAgICAgICAgY2xhc3M9XCJzcGVjaWZpY2F0aW9ucy13cmFwcGVyIHJhdGlvX3NxdWFyZSBwcm9kdWN0LXNwZWNpZmljYXRpb25zXCJcbiAgICAgICAgPlxuICAgICAgICAgICR7U3BlY2lmaWNhdGlvbnMoe1xuICAgICAgICAgICAgc3BlY2lmaWNhdGlvbkxpc3QsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogcHJvZHVjdC5kZXNjcmlwdGlvbixcbiAgICAgICAgICB9KX1cbiAgICAgICAgPC9zZWN0aW9uPmBcbiAgICAgIDogbnVsbH1cbiAgICA8c2VjdGlvblxuICAgICAgY2xhc3M9XCJyZWxhdGVkLXByb2R1Y3RzLXdyYXBwZXIgcmF0aW9fc3F1YXJlIHByb2R1Y3QtcmVsYXRlZCBlcXVhbF9oZWlnaHRcIlxuICAgID5cbiAgICAgICR7UmVsYXRlZFByb2R1Y3RzKHsgcmVsYXRlZFByb2R1Y3RzLCBmZXRjaElzRmluaXNoZWQgfSl9XG4gICAgPC9zZWN0aW9uPmA7XG59XG5cbltcbiAgQ29tcGFyZVRhYmxlLFxuICB7XG4gICAgdGFnTmFtZTogJ3Byb2R1Y3QtcGFnZScsXG4gICAgcmVuZGVyZXI6IFByb2R1Y3RQYWdlLFxuICAgIG9wdGlvbnM6IHtcbiAgICAgIG9ic2VydmVkQXR0cmlidXRlczogW1xuICAgICAgICAncHJvZHVjdC1qc29uJyxcbiAgICAgICAgJ3Byb2R1Y3QtdG90YWwtaW52ZW50b3J5JyxcbiAgICAgICAgJ3NpbWlsYXItbWV0YWZpZWxkJyxcbiAgICAgICAgJ3Byb2R1Y3QtbWV0YWZpZWxkJyxcbiAgICAgIF0sXG4gICAgICB1c2VTaGFkb3dET006IGZhbHNlLFxuICAgIH0sXG4gIH0sXG5dLmZvckVhY2goKHBDb21wb25lbnQpID0+IHtcbiAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKFxuICAgIHBDb21wb25lbnQudGFnTmFtZSxcbiAgICBjb21wb25lbnQocENvbXBvbmVudC5yZW5kZXJlciwgcENvbXBvbmVudC5vcHRpb25zKVxuICApO1xufSk7XG4iLCAiaW1wb3J0IHRzbGliIGZyb20gJy4uL3RzbGliLmpzJztcclxuY29uc3Qge1xyXG4gICAgX19leHRlbmRzLFxyXG4gICAgX19hc3NpZ24sXHJcbiAgICBfX3Jlc3QsXHJcbiAgICBfX2RlY29yYXRlLFxyXG4gICAgX19wYXJhbSxcclxuICAgIF9fbWV0YWRhdGEsXHJcbiAgICBfX2F3YWl0ZXIsXHJcbiAgICBfX2dlbmVyYXRvcixcclxuICAgIF9fZXhwb3J0U3RhcixcclxuICAgIF9fY3JlYXRlQmluZGluZyxcclxuICAgIF9fdmFsdWVzLFxyXG4gICAgX19yZWFkLFxyXG4gICAgX19zcHJlYWQsXHJcbiAgICBfX3NwcmVhZEFycmF5cyxcclxuICAgIF9fc3ByZWFkQXJyYXksXHJcbiAgICBfX2F3YWl0LFxyXG4gICAgX19hc3luY0dlbmVyYXRvcixcclxuICAgIF9fYXN5bmNEZWxlZ2F0b3IsXHJcbiAgICBfX2FzeW5jVmFsdWVzLFxyXG4gICAgX19tYWtlVGVtcGxhdGVPYmplY3QsXHJcbiAgICBfX2ltcG9ydFN0YXIsXHJcbiAgICBfX2ltcG9ydERlZmF1bHQsXHJcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0LFxyXG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCxcclxufSA9IHRzbGliO1xyXG5leHBvcnQge1xyXG4gICAgX19leHRlbmRzLFxyXG4gICAgX19hc3NpZ24sXHJcbiAgICBfX3Jlc3QsXHJcbiAgICBfX2RlY29yYXRlLFxyXG4gICAgX19wYXJhbSxcclxuICAgIF9fbWV0YWRhdGEsXHJcbiAgICBfX2F3YWl0ZXIsXHJcbiAgICBfX2dlbmVyYXRvcixcclxuICAgIF9fZXhwb3J0U3RhcixcclxuICAgIF9fY3JlYXRlQmluZGluZyxcclxuICAgIF9fdmFsdWVzLFxyXG4gICAgX19yZWFkLFxyXG4gICAgX19zcHJlYWQsXHJcbiAgICBfX3NwcmVhZEFycmF5cyxcclxuICAgIF9fc3ByZWFkQXJyYXksXHJcbiAgICBfX2F3YWl0LFxyXG4gICAgX19hc3luY0dlbmVyYXRvcixcclxuICAgIF9fYXN5bmNEZWxlZ2F0b3IsXHJcbiAgICBfX2FzeW5jVmFsdWVzLFxyXG4gICAgX19tYWtlVGVtcGxhdGVPYmplY3QsXHJcbiAgICBfX2ltcG9ydFN0YXIsXHJcbiAgICBfX2ltcG9ydERlZmF1bHQsXHJcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0LFxyXG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCxcclxufTtcclxuIiwgIi8qKlxuICogTG9jYWxlIGNoYXJhY3RlciBtYXBwaW5nIHJ1bGVzLlxuICovXG5pbnRlcmZhY2UgTG9jYWxlIHtcbiAgcmVnZXhwOiBSZWdFeHA7XG4gIG1hcDogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcbn1cblxuLyoqXG4gKiBTb3VyY2U6IGZ0cDovL2Z0cC51bmljb2RlLm9yZy9QdWJsaWMvVUNEL2xhdGVzdC91Y2QvU3BlY2lhbENhc2luZy50eHRcbiAqL1xuY29uc3QgU1VQUE9SVEVEX0xPQ0FMRTogUmVjb3JkPHN0cmluZywgTG9jYWxlPiA9IHtcbiAgdHI6IHtcbiAgICByZWdleHA6IC9cXHUwMTMwfFxcdTAwNDl8XFx1MDA0OVxcdTAzMDcvZyxcbiAgICBtYXA6IHtcbiAgICAgIFx1MDEzMDogXCJcXHUwMDY5XCIsXG4gICAgICBJOiBcIlxcdTAxMzFcIixcbiAgICAgIElcdTAzMDc6IFwiXFx1MDA2OVwiLFxuICAgIH0sXG4gIH0sXG4gIGF6OiB7XG4gICAgcmVnZXhwOiAvXFx1MDEzMC9nLFxuICAgIG1hcDoge1xuICAgICAgXHUwMTMwOiBcIlxcdTAwNjlcIixcbiAgICAgIEk6IFwiXFx1MDEzMVwiLFxuICAgICAgSVx1MDMwNzogXCJcXHUwMDY5XCIsXG4gICAgfSxcbiAgfSxcbiAgbHQ6IHtcbiAgICByZWdleHA6IC9cXHUwMDQ5fFxcdTAwNEF8XFx1MDEyRXxcXHUwMENDfFxcdTAwQ0R8XFx1MDEyOC9nLFxuICAgIG1hcDoge1xuICAgICAgSTogXCJcXHUwMDY5XFx1MDMwN1wiLFxuICAgICAgSjogXCJcXHUwMDZBXFx1MDMwN1wiLFxuICAgICAgXHUwMTJFOiBcIlxcdTAxMkZcXHUwMzA3XCIsXG4gICAgICBcdTAwQ0M6IFwiXFx1MDA2OVxcdTAzMDdcXHUwMzAwXCIsXG4gICAgICBcdTAwQ0Q6IFwiXFx1MDA2OVxcdTAzMDdcXHUwMzAxXCIsXG4gICAgICBcdTAxMjg6IFwiXFx1MDA2OVxcdTAzMDdcXHUwMzAzXCIsXG4gICAgfSxcbiAgfSxcbn07XG5cbi8qKlxuICogTG9jYWxpemVkIGxvd2VyIGNhc2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsb2NhbGVMb3dlckNhc2Uoc3RyOiBzdHJpbmcsIGxvY2FsZTogc3RyaW5nKSB7XG4gIGNvbnN0IGxhbmcgPSBTVVBQT1JURURfTE9DQUxFW2xvY2FsZS50b0xvd2VyQ2FzZSgpXTtcbiAgaWYgKGxhbmcpIHJldHVybiBsb3dlckNhc2Uoc3RyLnJlcGxhY2UobGFuZy5yZWdleHAsIChtKSA9PiBsYW5nLm1hcFttXSkpO1xuICByZXR1cm4gbG93ZXJDYXNlKHN0cik7XG59XG5cbi8qKlxuICogTG93ZXIgY2FzZSBhcyBhIGZ1bmN0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbG93ZXJDYXNlKHN0cjogc3RyaW5nKSB7XG4gIHJldHVybiBzdHIudG9Mb3dlckNhc2UoKTtcbn1cbiIsICJpbXBvcnQgeyBsb3dlckNhc2UgfSBmcm9tIFwibG93ZXItY2FzZVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIE9wdGlvbnMge1xuICBzcGxpdFJlZ2V4cD86IFJlZ0V4cCB8IFJlZ0V4cFtdO1xuICBzdHJpcFJlZ2V4cD86IFJlZ0V4cCB8IFJlZ0V4cFtdO1xuICBkZWxpbWl0ZXI/OiBzdHJpbmc7XG4gIHRyYW5zZm9ybT86IChwYXJ0OiBzdHJpbmcsIGluZGV4OiBudW1iZXIsIHBhcnRzOiBzdHJpbmdbXSkgPT4gc3RyaW5nO1xufVxuXG4vLyBTdXBwb3J0IGNhbWVsIGNhc2UgKFwiY2FtZWxDYXNlXCIgLT4gXCJjYW1lbCBDYXNlXCIgYW5kIFwiQ0FNRUxDYXNlXCIgLT4gXCJDQU1FTCBDYXNlXCIpLlxuY29uc3QgREVGQVVMVF9TUExJVF9SRUdFWFAgPSBbLyhbYS16MC05XSkoW0EtWl0pL2csIC8oW0EtWl0pKFtBLVpdW2Etel0pL2ddO1xuXG4vLyBSZW1vdmUgYWxsIG5vbi13b3JkIGNoYXJhY3RlcnMuXG5jb25zdCBERUZBVUxUX1NUUklQX1JFR0VYUCA9IC9bXkEtWjAtOV0rL2dpO1xuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgc3RyaW5nIGludG8gc29tZXRoaW5nIG90aGVyIGxpYnJhcmllcyBjYW4gbWFuaXB1bGF0ZSBlYXNpZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub0Nhc2UoaW5wdXQ6IHN0cmluZywgb3B0aW9uczogT3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICBzcGxpdFJlZ2V4cCA9IERFRkFVTFRfU1BMSVRfUkVHRVhQLFxuICAgIHN0cmlwUmVnZXhwID0gREVGQVVMVF9TVFJJUF9SRUdFWFAsXG4gICAgdHJhbnNmb3JtID0gbG93ZXJDYXNlLFxuICAgIGRlbGltaXRlciA9IFwiIFwiLFxuICB9ID0gb3B0aW9ucztcblxuICBsZXQgcmVzdWx0ID0gcmVwbGFjZShcbiAgICByZXBsYWNlKGlucHV0LCBzcGxpdFJlZ2V4cCwgXCIkMVxcMCQyXCIpLFxuICAgIHN0cmlwUmVnZXhwLFxuICAgIFwiXFwwXCJcbiAgKTtcbiAgbGV0IHN0YXJ0ID0gMDtcbiAgbGV0IGVuZCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgLy8gVHJpbSB0aGUgZGVsaW1pdGVyIGZyb20gYXJvdW5kIHRoZSBvdXRwdXQgc3RyaW5nLlxuICB3aGlsZSAocmVzdWx0LmNoYXJBdChzdGFydCkgPT09IFwiXFwwXCIpIHN0YXJ0Kys7XG4gIHdoaWxlIChyZXN1bHQuY2hhckF0KGVuZCAtIDEpID09PSBcIlxcMFwiKSBlbmQtLTtcblxuICAvLyBUcmFuc2Zvcm0gZWFjaCB0b2tlbiBpbmRlcGVuZGVudGx5LlxuICByZXR1cm4gcmVzdWx0LnNsaWNlKHN0YXJ0LCBlbmQpLnNwbGl0KFwiXFwwXCIpLm1hcCh0cmFuc2Zvcm0pLmpvaW4oZGVsaW1pdGVyKTtcbn1cblxuLyoqXG4gKiBSZXBsYWNlIGByZWAgaW4gdGhlIGlucHV0IHN0cmluZyB3aXRoIHRoZSByZXBsYWNlbWVudCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gcmVwbGFjZShpbnB1dDogc3RyaW5nLCByZTogUmVnRXhwIHwgUmVnRXhwW10sIHZhbHVlOiBzdHJpbmcpIHtcbiAgaWYgKHJlIGluc3RhbmNlb2YgUmVnRXhwKSByZXR1cm4gaW5wdXQucmVwbGFjZShyZSwgdmFsdWUpO1xuICByZXR1cm4gcmUucmVkdWNlKChpbnB1dCwgcmUpID0+IGlucHV0LnJlcGxhY2UocmUsIHZhbHVlKSwgaW5wdXQpO1xufVxuIiwgIi8qKlxuICogVXBwZXIgY2FzZSB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGFuIGlucHV0IHN0cmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVwcGVyQ2FzZUZpcnN0KGlucHV0OiBzdHJpbmcpIHtcbiAgcmV0dXJuIGlucHV0LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgaW5wdXQuc3Vic3RyKDEpO1xufVxuIiwgImltcG9ydCB7IG5vQ2FzZSwgT3B0aW9ucyB9IGZyb20gXCJuby1jYXNlXCI7XG5pbXBvcnQgeyB1cHBlckNhc2VGaXJzdCB9IGZyb20gXCJ1cHBlci1jYXNlLWZpcnN0XCI7XG5cbmV4cG9ydCB7IE9wdGlvbnMgfTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNhcGl0YWxDYXNlVHJhbnNmb3JtKGlucHV0OiBzdHJpbmcpIHtcbiAgcmV0dXJuIHVwcGVyQ2FzZUZpcnN0KGlucHV0LnRvTG93ZXJDYXNlKCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FwaXRhbENhc2UoaW5wdXQ6IHN0cmluZywgb3B0aW9uczogT3B0aW9ucyA9IHt9KSB7XG4gIHJldHVybiBub0Nhc2UoaW5wdXQsIHtcbiAgICBkZWxpbWl0ZXI6IFwiIFwiLFxuICAgIHRyYW5zZm9ybTogY2FwaXRhbENhc2VUcmFuc2Zvcm0sXG4gICAgLi4ub3B0aW9ucyxcbiAgfSk7XG59XG4iLCAiaW1wb3J0IHsgaHRtbCwgdmlydHVhbCB9IGZyb20gJ0BhcG9sbG8tZWxlbWVudHMvaGF1bnRlZCc7XG5pbXBvcnQgUHJvZHVjdEl0ZW0gZnJvbSAnLi4vY29tbW9uL1Byb2R1Y3RJdGVtJztcbmltcG9ydCBQcm9kdWN0TGlzdExvYWRpbmcgZnJvbSAnLi4vY29tbW9uL1Byb2R1Y3RMaXN0TG9hZGluZyc7XG5pbXBvcnQgVGl0bGVCYW5uZXIgZnJvbSAnLi4vY29tbW9uL1RpdGxlQmFubmVyJztcblxuY29uc3QgUmVsYXRlZFByb2R1Y3RzID0gdmlydHVhbChcbiAgKHsgcmVsYXRlZFByb2R1Y3RzLCBmZXRjaElzRmluaXNoZWQgfSkgPT4gaHRtbGA8ZGl2IGNsYXNzPVwiY29udGFpbmVyXCI+XG4gICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgPGRpdiBjbGFzcz1cImNvbFwiPlxuICAgICAgICAke1RpdGxlQmFubmVyKHsgdGl0bGU6ICdSRUxBVEVEIFBST0RVQ1RTJyB9KX1cbiAgICAgICAgJHtmZXRjaElzRmluaXNoZWRcbiAgICAgICAgICA/IGh0bWxgIDxkaXZcbiAgICAgICAgICAgICAgY2xhc3M9XCJzbGlja19jYXJvdXNlbCBwcm9kdWN0LW1cIlxuICAgICAgICAgICAgICBkYXRhLXNsaWNrPSd7XCJzbGlkZXNUb1Nob3dcIjogNCxcInNsaWRlc1RvU2Nyb2xsXCI6IDEsIFwiYXV0b3BsYXlcIjogZmFsc2UsIFwiYXV0b3BsYXlTcGVlZFwiOiAxMDAwLCBcImluZmluaXRlXCI6IGZhbHNlLCBcImFycm93c1wiOiB0cnVlLFwiZG90c1wiOiBmYWxzZSwgXCJyZXNwb25zaXZlXCI6W3tcImJyZWFrcG9pbnRcIjogMTM2NyxcInNldHRpbmdzXCI6e1wic2xpZGVzVG9TaG93XCI6IDQgfX0se1wiYnJlYWtwb2ludFwiOiAxMDI0LFwic2V0dGluZ3NcIjp7XCJzbGlkZXNUb1Nob3dcIjogNCB9fSx7XCJicmVha3BvaW50XCI6IDc2NyxcInNldHRpbmdzXCI6e1wic2xpZGVzVG9TaG93XCI6IDIgfX0se1wiYnJlYWtwb2ludFwiOiA1NzcsXCJzZXR0aW5nc1wiOntcInNsaWRlc1RvU2hvd1wiOiAxIH19IF19J1xuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAke3JlbGF0ZWRQcm9kdWN0cy5tYXAoXG4gICAgICAgICAgICAgICAgKHByb2R1Y3QpID0+XG4gICAgICAgICAgICAgICAgICBodG1sYCR7UHJvZHVjdEl0ZW0oe1xuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0LFxuICAgICAgICAgICAgICAgICAgICBpdGVtQ2xhc3NMaXN0OiB7IGdyaWQ6ICdjb2wtbGctMyBjb2wtbWQtNiBjb2wtZ3JpZC1ib3gnIH0sXG4gICAgICAgICAgICAgICAgICB9KX1gXG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L2Rpdj5gXG4gICAgICAgICAgOiBodG1sYCR7UHJvZHVjdExpc3RMb2FkaW5nKCl9YH1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5gXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBSZWxhdGVkUHJvZHVjdHM7XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuXG5pbXBvcnQge2lzUHJpbWl0aXZlfSBmcm9tICcuLi9saWIvcGFydHMuanMnO1xuaW1wb3J0IHtkaXJlY3RpdmUsIE5vZGVQYXJ0LCBQYXJ0fSBmcm9tICcuLi9saXQtaHRtbC5qcyc7XG5cbmludGVyZmFjZSBQcmV2aW91c1ZhbHVlIHtcbiAgcmVhZG9ubHkgdmFsdWU6IHVua25vd247XG4gIHJlYWRvbmx5IGZyYWdtZW50OiBEb2N1bWVudEZyYWdtZW50O1xufVxuXG4vLyBGb3IgZWFjaCBwYXJ0LCByZW1lbWJlciB0aGUgdmFsdWUgdGhhdCB3YXMgbGFzdCByZW5kZXJlZCB0byB0aGUgcGFydCBieSB0aGVcbi8vIHVuc2FmZUhUTUwgZGlyZWN0aXZlLCBhbmQgdGhlIERvY3VtZW50RnJhZ21lbnQgdGhhdCB3YXMgbGFzdCBzZXQgYXMgYSB2YWx1ZS5cbi8vIFRoZSBEb2N1bWVudEZyYWdtZW50IGlzIHVzZWQgYXMgYSB1bmlxdWUga2V5IHRvIGNoZWNrIGlmIHRoZSBsYXN0IHZhbHVlXG4vLyByZW5kZXJlZCB0byB0aGUgcGFydCB3YXMgd2l0aCB1bnNhZmVIVE1MLiBJZiBub3QsIHdlJ2xsIGFsd2F5cyByZS1yZW5kZXIgdGhlXG4vLyB2YWx1ZSBwYXNzZWQgdG8gdW5zYWZlSFRNTC5cbmNvbnN0IHByZXZpb3VzVmFsdWVzID0gbmV3IFdlYWtNYXA8Tm9kZVBhcnQsIFByZXZpb3VzVmFsdWU+KCk7XG5cbi8qKlxuICogUmVuZGVycyB0aGUgcmVzdWx0IGFzIEhUTUwsIHJhdGhlciB0aGFuIHRleHQuXG4gKlxuICogTm90ZSwgdGhpcyBpcyB1bnNhZmUgdG8gdXNlIHdpdGggYW55IHVzZXItcHJvdmlkZWQgaW5wdXQgdGhhdCBoYXNuJ3QgYmVlblxuICogc2FuaXRpemVkIG9yIGVzY2FwZWQsIGFzIGl0IG1heSBsZWFkIHRvIGNyb3NzLXNpdGUtc2NyaXB0aW5nXG4gKiB2dWxuZXJhYmlsaXRpZXMuXG4gKi9cbmV4cG9ydCBjb25zdCB1bnNhZmVIVE1MID0gZGlyZWN0aXZlKCh2YWx1ZTogdW5rbm93bikgPT4gKHBhcnQ6IFBhcnQpOiB2b2lkID0+IHtcbiAgaWYgKCEocGFydCBpbnN0YW5jZW9mIE5vZGVQYXJ0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcigndW5zYWZlSFRNTCBjYW4gb25seSBiZSB1c2VkIGluIHRleHQgYmluZGluZ3MnKTtcbiAgfVxuXG4gIGNvbnN0IHByZXZpb3VzVmFsdWUgPSBwcmV2aW91c1ZhbHVlcy5nZXQocGFydCk7XG5cbiAgaWYgKHByZXZpb3VzVmFsdWUgIT09IHVuZGVmaW5lZCAmJiBpc1ByaW1pdGl2ZSh2YWx1ZSkgJiZcbiAgICAgIHZhbHVlID09PSBwcmV2aW91c1ZhbHVlLnZhbHVlICYmIHBhcnQudmFsdWUgPT09IHByZXZpb3VzVmFsdWUuZnJhZ21lbnQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG4gIHRlbXBsYXRlLmlubmVySFRNTCA9IHZhbHVlIGFzIHN0cmluZzsgIC8vIGlubmVySFRNTCBjYXN0cyB0byBzdHJpbmcgaW50ZXJuYWxseVxuICBjb25zdCBmcmFnbWVudCA9IGRvY3VtZW50LmltcG9ydE5vZGUodGVtcGxhdGUuY29udGVudCwgdHJ1ZSk7XG4gIHBhcnQuc2V0VmFsdWUoZnJhZ21lbnQpO1xuICBwcmV2aW91c1ZhbHVlcy5zZXQocGFydCwge3ZhbHVlLCBmcmFnbWVudH0pO1xufSk7XG4iLCAiaW1wb3J0IHsgdW5zYWZlSFRNTCB9IGZyb20gJ2xpdC1odG1sL2RpcmVjdGl2ZXMvdW5zYWZlLWh0bWwnO1xuaW1wb3J0IHsgaHRtbCwgdXNlRWZmZWN0LCB2aXJ0dWFsIH0gZnJvbSAnQGFwb2xsby1lbGVtZW50cy9oYXVudGVkJztcbmltcG9ydCBUaXRsZUJhbm5lciBmcm9tICcuLi9jb21tb24vVGl0bGVCYW5uZXInO1xuaW1wb3J0IHsgY3JlYXRlRnJhZ21lbnRGcm9tU3RyaW5nIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2hlbHBlcnMnO1xuXG5jb25zdCBTcGVjaWZpY2F0aW9ucyA9IHZpcnR1YWwoKHsgc3BlY2lmaWNhdGlvbkxpc3QsIGRlc2NyaXB0aW9uIH0pID0+IHtcbiAgLy8gY29uc29sZS5sb2coc3BlY2lmaWNhdGlvbkxpc3QsIGRlc2NyaXB0aW9uKTtcbiAgY29uc3QgcmVnZXhwID0gLzxpZnJhbWVcXHMrW14+XSs+PFxcL2lmcmFtZT4vZztcbiAgY29uc3QgaWZyYW1lSFRNTFN0cmluZyA9IGRlc2NyaXB0aW9uLm1hdGNoKHJlZ2V4cCk/LlswXSA/PyAnJztcbiAgY29uc3QgY2xlYW5lZERlc2NyaXB0aW9uID0gZGVzY3JpcHRpb24ucmVwbGFjZShpZnJhbWVIVE1MU3RyaW5nLCAnJyk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoaWZyYW1lSFRNTFN0cmluZyAhPT0gJycpIHtcbiAgICAgIGNvbnN0IGlmcmFtZUZyYWdtZW50ID0gY3JlYXRlRnJhZ21lbnRGcm9tU3RyaW5nKGlmcmFtZUhUTUxTdHJpbmcpO1xuICAgICAgY29uc3QgaWZyYW1lU3JjID0gaWZyYW1lRnJhZ21lbnQ/LmZpcnN0RWxlbWVudENoaWxkPy5nZXRBdHRyaWJ1dGUoJ3NyYycpO1xuICAgICAgY29uc3QgdmlkZW9XcmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3ZpZGVvLXdyYXBwZXInKTtcbiAgICAgIGlmICh2aWRlb1dyYXBwZXIgJiYgaWZyYW1lU3JjICYmICF2aWRlb1dyYXBwZXIuZmlyc3RFbGVtZW50Q2hpbGQpIHtcbiAgICAgICAgdmlkZW9XcmFwcGVyLmFwcGVuZENoaWxkKFxuICAgICAgICAgIGNyZWF0ZUZyYWdtZW50RnJvbVN0cmluZyhcbiAgICAgICAgICAgIGA8aWZyYW1lIGNsYXNzPVwiZW1iZWQtcmVzcG9uc2l2ZS1pdGVtXCIgc3JjPVwiJHtpZnJhbWVTcmN9XCIgYWxsb3dmdWxsc2NyZWVuPjwvaWZyYW1lPmBcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbXSk7XG5cbiAgcmV0dXJuIGh0bWxgPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPlxuICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjb2xcIj4ke1RpdGxlQmFubmVyKHsgdGl0bGU6ICdTUEVDSUZJQ0FUSU9OUycgfSl9PC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgPGRpdiBjbGFzcz1cImNvbC0xMiBjb2wtbWQtNiB0YWJsZS1yZXNwb25zaXZlXCJcIj5cbiAgICAgICAgPHRhYmxlIGNsYXNzPVwidGFibGUgdGFibGUtYm9yZGVyZWRcIj5cbiAgICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgICAke09iamVjdC5lbnRyaWVzKHNwZWNpZmljYXRpb25MaXN0KVxuICAgICAgICAgICAgICAuc2xpY2UoMCwgT2JqZWN0LmtleXMoc3BlY2lmaWNhdGlvbkxpc3QpLmxlbmd0aCAvIDIgKyAxKVxuICAgICAgICAgICAgICAubWFwKFxuICAgICAgICAgICAgICAgIChba2V5LCB2YWx1ZV0pID0+XG4gICAgICAgICAgICAgICAgICBodG1sYDx0cj5cbiAgICAgICAgICAgICAgICAgICAgPHRoIHNjb3BlPVwicm93XCI+JHtrZXl9PC90aD5cbiAgICAgICAgICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICAgICAgICAgICR7QXJyYXkuaXNBcnJheSh2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdmFsdWUubWFwKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChsaW5lLCBpZHgpID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sYCR7aWR4IDwgdmFsdWUubGVuZ3RoIC0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGh0bWxgJHtsaW5lfTxiciAvPmBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBsaW5lfWBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB2YWx1ZX1cbiAgICAgICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICAgIDwvdHI+YFxuICAgICAgICAgICAgICApfVxuICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgIDwvdGFibGU+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjb2wtMTIgY29sLW1kLTYgdGFibGUtcmVzcG9uc2l2ZVwiXCI+XG4gICAgICAgIDx0YWJsZSBjbGFzcz1cInRhYmxlIHRhYmxlLWJvcmRlcmVkXCI+XG4gICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAgJHtPYmplY3QuZW50cmllcyhzcGVjaWZpY2F0aW9uTGlzdClcbiAgICAgICAgICAgICAgLnNsaWNlKE9iamVjdC5rZXlzKHNwZWNpZmljYXRpb25MaXN0KS5sZW5ndGggLyAyICsgMSlcbiAgICAgICAgICAgICAgLm1hcChcbiAgICAgICAgICAgICAgICAoW2tleSwgdmFsdWVdKSA9PlxuICAgICAgICAgICAgICAgICAgaHRtbGA8dHI+XG4gICAgICAgICAgICAgICAgICAgIDx0aCBzY29wZT1cInJvd1wiPiR7a2V5fTwvdGg+XG4gICAgICAgICAgICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICAgICAgICAgICAke0FycmF5LmlzQXJyYXkodmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHZhbHVlLm1hcChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobGluZSwgaWR4KSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbGAke2lkeCA8IHZhbHVlLmxlbmd0aCAtIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBodG1sYCR7bGluZX08YnIgLz5gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbGluZX1gXG4gICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdmFsdWV9XG4gICAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgICA8L3RyPmBcbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICA8L3RhYmxlPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgPGRpdiBjbGFzcz1cImNvbFwiPiR7dW5zYWZlSFRNTChjbGVhbmVkRGVzY3JpcHRpb24pfTwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5gO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IFNwZWNpZmljYXRpb25zO1xuIl0sCiAgIm1hcHBpbmdzIjogIm1RQUFBLGtCQWVBLEdBQUksR0FDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0osQUFBQyxVQUFVLEVBQVMsQ0FDaEIsR0FBSSxHQUFPLE1BQU8sU0FBVyxTQUFXLE9BQVMsTUFB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
