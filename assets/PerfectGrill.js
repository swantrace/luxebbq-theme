import{a as Dt,b as dt}from"./chunk-T3VNKMFZ.js";import{a as ut,b as ct}from"./chunk-URQKBNG2.js";import"./chunk-JLH2EYJI.js";import{E as ht,F as pt,a as Gt,b as at,f as c,g as O,l as st,n as h,p as V,q as N}from"./chunk-NCQMUVAP.js";var U=Gt((Ct,L)=>{var se=200,P="__lodash_hash_undefined__",pe=1/0,ue="[object Function]",he="[object GeneratorFunction]",de=/[\\^$.*+?()[\]{}|]/g,fe=/^\[object .+?Constructor\]$/,ge=typeof global=="object"&&global&&global.Object===Object&&global,me=typeof self=="object"&&self&&self.Object===Object&&self,$=ge||me||Function("return this")();function be(e,t){var r=e?e.length:0;return!!r&&ve(e,t,0)>-1}function ye(e,t,r){for(var l=-1,a=e?e.length:0;++l<a;)if(r(t,e[l]))return!0;return!1}function xe(e,t,r,l){for(var a=e.length,i=r+(l?1:-1);l?i--:++i<a;)if(t(e[i],i,e))return i;return-1}function ve(e,t,r){if(t!==t)return xe(e,ke,r);for(var l=r-1,a=e.length;++l<a;)if(e[l]===t)return l;return-1}function ke(e){return e!==e}function _e(e,t){return e.has(t)}function Se(e,t){return e==null?void 0:e[t]}function Ge(e){var t=!1;if(e!=null&&typeof e.toString!="function")try{t=!!(e+"")}catch(r){}return t}function T(e){var t=-1,r=Array(e.size);return e.forEach(function(l){r[++t]=l}),r}var Ce=Array.prototype,Pe=Function.prototype,D=Object.prototype,w=$["__core-js_shared__"],q=function(){var e=/[^.]+$/.exec(w&&w.keys&&w.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}(),H=Pe.toString,A=D.hasOwnProperty,$e=D.toString,we=RegExp("^"+H.call(A).replace(de,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Ae=Ce.splice,Ie=I($,"Map"),R=I($,"Set"),x=I(Object,"create");function g(e){var t=-1,r=e?e.length:0;for(this.clear();++t<r;){var l=e[t];this.set(l[0],l[1])}}function Re(){this.__data__=x?x(null):{}}function Oe(e){return this.has(e)&&delete this.__data__[e]}function je(e){var t=this.__data__;if(x){var r=t[e];return r===P?void 0:r}return A.call(t,e)?t[e]:void 0}function Ee(e){var t=this.__data__;return x?t[e]!==void 0:A.call(t,e)}function Be(e,t){var r=this.__data__;return r[e]=x&&t===void 0?P:t,this}g.prototype.clear=Re;g.prototype.delete=Oe;g.prototype.get=je;g.prototype.has=Ee;g.prototype.set=Be;function b(e){var t=-1,r=e?e.length:0;for(this.clear();++t<r;){var l=e[t];this.set(l[0],l[1])}}function Fe(){this.__data__=[]}function Ne(e){var t=this.__data__,r=_(t,e);if(r<0)return!1;var l=t.length-1;return r==l?t.pop():Ae.call(t,r,1),!0}function Me(e){var t=this.__data__,r=_(t,e);return r<0?void 0:t[r][1]}function Le(e){return _(this.__data__,e)>-1}function Te(e,t){var r=this.__data__,l=_(r,e);return l<0?r.push([e,t]):r[l][1]=t,this}b.prototype.clear=Fe;b.prototype.delete=Ne;b.prototype.get=Me;b.prototype.has=Le;b.prototype.set=Te;function y(e){var t=-1,r=e?e.length:0;for(this.clear();++t<r;){var l=e[t];this.set(l[0],l[1])}}function De(){this.__data__={hash:new g,map:new(Ie||b),string:new g}}function qe(e){return S(this,e).delete(e)}function He(e){return S(this,e).get(e)}function Ke(e){return S(this,e).has(e)}function Ue(e,t){return S(this,e).set(e,t),this}y.prototype.clear=De;y.prototype.delete=qe;y.prototype.get=He;y.prototype.has=Ke;y.prototype.set=Ue;function G(e){var t=-1,r=e?e.length:0;for(this.__data__=new y;++t<r;)this.add(e[t])}function Je(e){return this.__data__.set(e,P),this}function Ve(e){return this.__data__.has(e)}G.prototype.add=G.prototype.push=Je;G.prototype.has=Ve;function _(e,t){for(var r=e.length;r--;)if(We(e[r][0],t))return r;return-1}function Ze(e){if(!K(e)||ze(e))return!1;var t=Qe(e)||Ge(e)?we:fe;return t.test(Ye(e))}function et(e,t,r){var l=-1,a=be,i=e.length,u=!0,n=[],p=n;if(r)u=!1,a=ye;else if(i>=se){var d=t?null:Xe(e);if(d)return T(d);u=!1,a=_e,p=new G}else p=t?[]:n;e:for(;++l<i;){var o=e[l],f=t?t(o):o;if(o=r||o!==0?o:0,u&&f===f){for(var v=p.length;v--;)if(p[v]===f)continue e;t&&p.push(f),n.push(o)}else a(p,f,r)||(p!==n&&p.push(f),n.push(o))}return n}var Xe=R&&1/T(new R([,-0]))[1]==pe?function(e){return new R(e)}:tt;function S(e,t){var r=e.__data__;return rt(t)?r[typeof t=="string"?"string":"hash"]:r.map}function I(e,t){var r=Se(e,t);return Ze(r)?r:void 0}function rt(e){var t=typeof e;return t=="string"||t=="number"||t=="symbol"||t=="boolean"?e!=="__proto__":e===null}function ze(e){return!!q&&q in e}function Ye(e){if(e!=null){try{return H.call(e)}catch(t){}try{return e+""}catch(t){}}return""}function lt(e){return e&&e.length?et(e):[]}function We(e,t){return e===t||e!==e&&t!==t}function Qe(e){var t=K(e)?$e.call(e):"";return t==ue||t==he}function K(e){var t=typeof e;return!!e&&(t=="object"||t=="function")}function tt(){}L.exports=lt});var Y=at(Dt());var ie=h(({availability:e,handleAvailabilityChanged:t})=>c`<div class="form-check form-check-inline">
        <input
          class="form-check-input"
          type="checkbox"
          id="In-stock"
          value="true"
          ?checked=${e.includes("true")}
          @change=${r=>{let l=r.target.closest(".perfect-grill-selector-input").querySelectorAll('input[type="checkbox"]'),a=Array.from(l).filter(i=>i.checked===!0).map(i=>i.value);t(a)}}
        />
        <label class="form-check-label" for="In-stock">In-stock</label>
      </div>
      <div class="form-check form-check-inline">
        <input
          class="form-check-input"
          type="checkbox"
          id="Pre-order"
          value="false"
          ?checked=${e.includes("false")}
          @change=${r=>{let l=r.target.closest(".perfect-grill-selector-input").querySelectorAll('input[type="checkbox"]'),a=Array.from(l).filter(i=>i.checked===!0).map(i=>i.value);t(a)}}
        />
        <label class="form-check-label" for="Pre-order">Pre-order</label>
      </div>`),E=ie;var ne=h(({brandInfo:e,selectedCookTypesAndBrands:t,handleSelectedCookTypesAndBrandsChanged:r})=>c`<select
      class="w-100"
      value="${t?.[0]?.[1]?.[0]}"
      @change=${l=>r([[t[0][0],[l.target.value]]])}
    >
      <option
        value
        ?selected=${(t?.[0]?.[1]??[]).length===0}
      >
        Select a brand
      </option>
      ${e?.find(([l])=>l===t?.[0]?.[0])?.[1]?.map(l=>c`<option
              ?selected=${l===t?.[0]?.[1]?.[0]}
              value=${l}
            >
              ${l}
            </option>`)}
    </select>`),B=ne;var ce=h(({cookTypeLogos:e,selectedCookTypesAndBrands:t,handleSelectedCookTypesAndBrandsChanged:r})=>{let l=t?.[0]?.[0]??"Gas Grill";return c` ${Object.entries(e).map(([a,i])=>c`
        <div
          style="cursor:pointer;"
          class=${`cook-type-logo-wrapper${l===a?" active":" inactive"}`}
          @click=${()=>r(t?.[0]?.[0]===a?t:[[a,[]]])}
        >
          <i class="icon-${i} iconfont text-center"></i>
        </div>
      `)}`}),F=ce;var oe=h(({currentGrillCookingAreaRange:e,grillCookingAreaMinAndMax:t,handleGrillCookingAreaRangeChanged:r})=>{let[l,a]=t??N,[i,u]=e??N;return c`<style is="custom-style">
        .cooking-area-paper-range-slider {
          --paper-range-slider-width: 610px;
          max-width: 600px;
          --primary-color: #fb711c;
          --paper-single-range-slider-height: 4px;
        }
      </style>
      <paper-range-slider
        class="cooking-area-paper-range-slider price-paper-range-slider"
        id="price-range-slider"
        step="1"
        always-show-pin
        min=${l}
        max=${a}
        value-min=${i}
        value-max=${u}
        @updateValues=${n=>{r([n.target.valueMin,n.target.valueMax])}}
      ></paper-range-slider>`}),M=oe;var m=at(U()),it=h(({sideBurner:e,searBurner:t,rearRotisserie:r,selectedGrillTypes:l,selectedStandTypes:a,handleSideBurnerChanged:i,handleSearBurnerChanged:u,handleRearRotisserieChanged:n,handleGrillTypeChanged:p,handleStandTypeChanged:d})=>c`<div class="form-check form-check-inline">
        <input
          class="form-check-input"
          type="checkbox"
          id="sideBurner"
          ?checked=${!!e}
          @change=${o=>{i(o.target.checked)}}
        />
        <label class="form-check-label" for="sideBurner">Side Burner</label>
      </div>
      <div class="form-check form-check-inline">
        <input
          class="form-check-input"
          type="checkbox"
          id="searBurner"
          ?checked=${t}
          @change=${o=>{u(o.target.checked)}}
        />
        <label class="form-check-label" for="searBurner">Sear Burner</label>
      </div>
      <div class="form-check form-check-inline">
        <input
          class="form-check-input"
          type="checkbox"
          id="rearRotisserie"
          ?checked=${r}
          @change=${o=>{n(o.target.checked)}}
        />
        <label class="form-check-label" for="rearRotisserie"
          >Rear Rotisserie</label
        >
      </div>
      <div class="form-check form-check-inline">
        <input
          class="form-check-input"
          type="checkbox"
          id="castIronGrill"
          ?checked=${l.includes("Cast Iron Grill")}
          @change=${()=>{p((0,m.default)([...l,"Cast Iron Grill"]))}}
        />
        <label class="form-check-label" for="castIronGrill"
          >Cast Iron Grill</label
        >
      </div>
      <div class="form-check form-check-inline">
        <input
          class="form-check-input"
          type="checkbox"
          id="stainlessSteelGrill"
          ?checked=${l.includes("Stainless Steel Grill")}
          @change=${()=>{p((0,m.default)([...l,"Stainless Steel Grill"]))}}
        />
        <label class="form-check-label" for="stainlessSteelGrill"
          >Stainless Steel Grill</label
        >
      </div>
      <div class="form-check form-check-inline">
        <input
          class="form-check-input"
          type="checkbox"
          id="ceramicCoatedGrill"
          ?checked=${l.includes("Ceramic Coated Grill")}
          @change=${()=>{p((0,m.default)([...l,"Ceramic Coated Grill"]))}}
        />
        <label class="form-check-label" for="ceramicCoatedGrill"
          >Ceramic Coated Grill</label
        >
      </div>
      <div class="form-check form-check-inline">
        <input
          class="form-check-input"
          type="checkbox"
          id="freeStanding"
          ?checked=${a.includes("Free Standing")}
          @change=${()=>{d((0,m.default)([...a,"Free Standing"]))}}
        />
        <label class="form-check-label" for="freeStanding">Free Standing</label>
      </div>
      <div class="form-check form-check-inline">
        <input
          class="form-check-input"
          type="checkbox"
          id="builtIn"
          ?checked=${a.includes("Built In")}
          @change=${()=>{d((0,m.default)([...a,"Built In"]))}}
        />
        <label class="form-check-label" for="builtIn">Built In</label>
      </div>
      <div class="form-check form-check-inline">
        <input
          class="form-check-input"
          type="checkbox"
          id="portable"
          ?checked=${a.includes("Portable")}
          @change=${()=>{d((0,m.default)([...a,"Portable"]))}}
        />
        <label class="form-check-label" for="portable">Portable</label>
      </div>`),J=it;var nt=h(({currentPriceRange:e,priceRangeMinAndMax:t,handlePriceRangeChanged:r})=>{let[l,a]=t??V,[i,u]=e??V;return c`<style is="custom-style">
        .price-paper-range-slider {
          --paper-range-slider-width: 610px;
          max-width: 600px;
          --primary-color: #fb711c;
          --paper-single-range-slider-height: 4px;
        }
      </style>
      <paper-range-slider
        class="price-paper-range-slider"
        id="price-range-slider"
        step="1"
        always-show-pin
        min=${l}
        max=${a}
        value-min=${i}
        value-max=${u}
        @updateValues=${n=>{r([n.target.valueMin,n.target.valueMax])}}
      ></paper-range-slider>`}),W=nt;function ot(){let{state:e,dispatch:t,cookTypeLogos:r,brandInfo:l,priceRangeMinAndMax:a,grillCookingAreaMinAndMax:i}=ct(),{selectedCookTypesAndBrands:u,availability:n,currentPriceRange:p,currentGrillCookingAreaRange:d,sideBurner:o,searBurner:f,rearRotisserie:v,selectedStandTypes:C,selectedGrillTypes:k}=e;O(()=>{t({type:"changeCookTypesAndBrands",payload:[["Gas Grill",[]]]})},[]);let j=s=>{t({type:"changeCookTypesAndBrands",payload:s})},Q=s=>{t({type:"changePriceRange",payload:s})},Z=s=>{t({type:"changeGrillCookingAreaRange",payload:s})},X=s=>{t({type:"changeAvailability",payload:s})},ee=s=>{t({type:"changeSideBurner",payload:s})},te=s=>{t({type:"changeSearBurner",payload:s})},re=s=>{t({type:"changeRearRotisserie",payload:s})},le=s=>{t({type:"changeGrillType",payload:s})},ae=s=>{t({type:"changeStandType",payload:s})};return c`<div
      class="d-flex justify-content-between align-items-center label-input-wrapper py-3"
    >
      <h3 class="text-sm-left text-xl-right perfect-grill-selector-label">
        Cook Type
      </h3>
      <div
        class="d-flex text-right justify-content-end perfect-grill-selector-input"
      >
        ${F({cookTypeLogos:r,selectedCookTypesAndBrands:u,handleSelectedCookTypesAndBrandsChanged:j})}
      </div>
    </div>
    <div
      class="d-flex justify-content-between align-items-center label-input-wrapper py-3"
    >
      <h3 class="text-sm-left text-xl-right perfect-grill-selector-label">
        Brand
      </h3>
      <div
        class="d-flex text-right justify-content-end perfect-grill-selector-input"
      >
        ${B({brandInfo:l,selectedCookTypesAndBrands:u,handleSelectedCookTypesAndBrandsChanged:j})}
      </div>
    </div>
    <div
      class="d-flex justify-content-between align-items-center label-input-wrapper py-3"
    >
      <h3 class="text-sm-left text-xl-right perfect-grill-selector-label">
        Price Range
      </h3>
      <div
        class="d-flex text-right justify-content-end perfect-grill-selector-input"
      >
        ${W({currentPriceRange:p,priceRangeMinAndMax:a,handlePriceRangeChanged:Q})}
      </div>
    </div>
    <div
      class="d-flex justify-content-between align-items-center label-input-wrapper py-3"
    >
      <h3 class="text-sm-left text-xl-right perfect-grill-selector-label">
        Grill Cooking Area
      </h3>
      <div
        class="d-flex text-right justify-content-end perfect-grill-selector-input"
      >
        ${M({currentGrillCookingAreaRange:d,grillCookingAreaMinAndMax:i,handleGrillCookingAreaRangeChanged:Z})}
      </div>
    </div>
    <div
      class="d-flex justify-content-between align-items-center label-input-wrapper py-3"
    >
      <h3 class="text-sm-left text-xl-right perfect-grill-selector-label">
        Availability
      </h3>
      <div
        class="d-flex text-right justify-content-start perfect-grill-selector-input flex-wrap"
      >
        ${E({availability:n,handleAvailabilityChanged:X})}
      </div>
    </div>
    <div
      class="d-flex justify-content-between align-items-center label-input-wrapper py-3"
    >
      <h3 class="text-sm-left text-xl-right perfect-grill-selector-label">
        Key Features
      </h3>
      <div
        class="d-flex text-right justify-content-start perfect-grill-selector-input flex-wrap"
      >
        ${J({sideBurner:o,searBurner:f,rearRotisserie:v,selectedGrillTypes:k,selectedStandTypes:C,handleSideBurnerChanged:ee,handleSearBurnerChanged:te,handleRearRotisserieChanged:re,handleGrillTypeChanged:le,handleStandTypeChanged:ae})}
      </div>
    </div>`}var z={tagName:"perfect-grill-selectors",renderer:ot,options:{observedAttributes:[],useShadowDOM:!1}};function ft({cookTypesAndBrands:e,cookTypeLogos:t,priceRangeMinAndMax:r,grillCookingAreaMinAndMax:l,defaultSortBy:a,emptyCollectionImage:i}){let{state:u,dispatch:n,queryAllProducts:p,queryFirstPageProducts:d,getFilteredSortedProducts:o,getFilteredSortedProductsOfCurrentPage:f,getPageCount:v,getDisplayedPageNumbers:C}=new(dt((0,Y.default)("Barbeques",{lower:!0})))({defaultSortBy:a,initiaValueFilterKeyPairs:{}});return O(async()=>{let k=await p();console.log("products from queryAllProducts",k),n({type:"setAllProducts",payload:k}),n({type:"setFetchIsFinished",payload:!0})},[]),console.log("state",u),c`${ut({children:c`<section class="section-b-space pt-0">
      <div class="collection-wrapper">
        <div class="container dtm">
          <div class="row">
            <div
              class="col-lg-10 mx-auto perfect-grill-selectors-wrapper pt-5 px-md-5 pb-md-5"
            >
              ${ht({title:"WHAT'S YOUR PERFECT GRILL?"})}
              <perfect-grill-selectors></perfect-grill-selectors>
            </div>
          </div>
          <div class="row pt-5">
            <div
              class="col-lg-10 mx-auto perfect-grill-product-list-wrapper pt-md-5"
            >
              <product-type-main-content></product-type-main-content>
            </div>
          </div>
        </div>
      </div>
    </section>`,brandInfo:JSON.parse(e??'[["Gas Grill",[]], ["Charcoal Grill",[]], ["Offset Smoker",[]], ["Pellet Grill",[]], ["Pizza Oven",[]]}'),cookTypeLogos:JSON.parse(t??'{"Gas Grill":"", "Charcoal Grill":"", "Smokers":"", "Pellet Grill":"", "Oven":""}'),currentPriceRange:JSON.parse(r),currentGrillCookingAreaRange:JSON.parse(l),collectionTitle:"Matching Grills",queryFirstPageProducts:d,getFilteredSortedProducts:o,getFilteredSortedProductsOfCurrentPage:f,getPageCount:v,getDisplayedPageNumbers:C,state:u,dispatch:n,emptyCollectionImage:i})}`}[z,pt,{tagName:"perfect-grill",renderer:ft,options:{observedAttributes:["cook-types-and-brands","cook-type-logos","price-range-min-and-max","grill-cooking-area-min-and-max","default-sort-by","empty-collection-image"],useShadowDOM:!1}}].forEach(e=>{customElements.define(e.tagName,st(e.renderer,e.options))});
//# sourceMappingURL=data:application/json;base64,
