{"id":"../node_modules/@apollo/client/utilities/observables/Observable.js","dependencies":[{"name":"/home/qhong/projects/luxebbq/theme/node_modules/@apollo/client/utilities/observables/Observable.js.map","includedInParent":true,"mtime":1614598712608},{"name":"/home/qhong/projects/luxebbq/theme/package.json","includedInParent":true,"mtime":1614903197160},{"name":"/home/qhong/projects/luxebbq/theme/node_modules/@apollo/client/utilities/package.json","includedInParent":true,"mtime":1614598712608},{"name":"zen-observable","loc":{"line":1,"column":23},"parent":"/home/qhong/projects/luxebbq/theme/node_modules/@apollo/client/utilities/observables/Observable.js","resolved":"/home/qhong/projects/luxebbq/theme/node_modules/zen-observable/index.js"},{"name":"symbol-observable","loc":{"line":2,"column":7},"parent":"/home/qhong/projects/luxebbq/theme/node_modules/@apollo/client/utilities/observables/Observable.js","resolved":"/home/qhong/projects/luxebbq/theme/node_modules/symbol-observable/es/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"Observable\", {\n  enumerable: true,\n  get: function () {\n    return _zenObservable.default;\n  }\n});\n\nvar _zenObservable = _interopRequireDefault(require(\"zen-observable\"));\n\nrequire(\"symbol-observable\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_zenObservable.default.prototype['@@observable'] = function () {\n  return this;\n};"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/utilities/observables/Observable.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":13,"column":0}},{"source":"../../../src/utilities/observables/Observable.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":15,"column":0}},{"source":"../../../src/utilities/observables/Observable.ts","name":null,"original":{"line":21,"column":1},"generated":{"line":19,"column":0}},{"source":"../../../src/utilities/observables/Observable.ts","name":null,"original":{"line":21,"column":12},"generated":{"line":19,"column":23}},{"source":"../../../src/utilities/observables/Observable.ts","name":null,"original":{"line":21,"column":1},"generated":{"line":19,"column":32}},{"source":"../../../src/utilities/observables/Observable.ts","name":null,"original":{"line":21,"column":30},"generated":{"line":19,"column":33}},{"source":"../../../src/utilities/observables/Observable.ts","name":null,"original":{"line":21,"column":1},"generated":{"line":19,"column":47}},{"source":"../../../src/utilities/observables/Observable.ts","name":null,"original":{"line":21,"column":48},"generated":{"line":19,"column":51}},{"source":"../../../src/utilities/observables/Observable.ts","name":null,"original":{"line":21,"column":48},"generated":{"line":19,"column":63}},{"source":"../../../src/utilities/observables/Observable.ts","name":null,"original":{"line":21,"column":62},"generated":{"line":20,"column":0}},{"source":"../../../src/utilities/observables/Observable.ts","name":null,"original":{"line":21,"column":69},"generated":{"line":20,"column":9}},{"source":"../../../src/utilities/observables/Observable.ts","name":null,"original":{"line":21,"column":62},"generated":{"line":20,"column":13}},{"source":"../../../src/utilities/observables/Observable.ts","name":null,"original":{"line":21,"column":76},"generated":{"line":21,"column":0}},{"source":"../../../src/utilities/observables/Observable.ts","name":null,"original":{"line":21,"column":1},"generated":{"line":21,"column":1}}],"sources":{"../../../src/utilities/observables/Observable.ts":"import Observable from 'zen-observable';\n\n// This simplified polyfill attempts to follow the ECMAScript Observable\n// proposal (https://github.com/zenparsing/es-observable)\nimport 'symbol-observable';\n\nexport type ObservableSubscription = ZenObservable.Subscription;\nexport type Observer<T> = ZenObservable.Observer<T>;\nexport type Subscriber<T> = ZenObservable.Subscriber<T>;\n\n// Use global module augmentation to add RxJS interop functionality. By\n// using this approach (instead of subclassing `Observable` and adding an\n// ['@@observable']() method), we ensure the exported `Observable` retains all\n// existing type declarations from `@types/zen-observable` (which is important\n// for projects like `apollo-link`).\ndeclare global {\n  interface Observable<T> {\n    ['@@observable'](): Observable<T>;\n  }\n}\n(Observable.prototype as any)['@@observable'] = function () { return this; };\nexport { Observable };\n"},"lineCount":null}},"error":null,"hash":"0bc73c7edb59999ff88b7efe0d1a28c4","cacheData":{"env":{}}}