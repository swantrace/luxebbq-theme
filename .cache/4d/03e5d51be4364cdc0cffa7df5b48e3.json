{"id":"../node_modules/@apollo-elements/interfaces/apollo-element.js","dependencies":[{"name":"/home/qhong/projects/luxebbq/theme/node_modules/@apollo-elements/interfaces/apollo-element.js.map","includedInParent":true,"mtime":1614903032567},{"name":"/home/qhong/projects/luxebbq/theme/package.json","includedInParent":true,"mtime":1614903197160},{"name":"/home/qhong/projects/luxebbq/theme/node_modules/@apollo-elements/interfaces/package.json","includedInParent":true,"mtime":1614903032567},{"name":"@apollo-elements/mixins/apollo-element-mixin","loc":{"line":1,"column":35},"parent":"/home/qhong/projects/luxebbq/theme/node_modules/@apollo-elements/interfaces/apollo-element.js","resolved":"/home/qhong/projects/luxebbq/theme/node_modules/@apollo-elements/mixins/apollo-element-mixin.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ApolloElementElement = void 0;\n\nvar _apolloElementMixin = require(\"@apollo-elements/mixins/apollo-element-mixin\");\n\nclass ApolloElementElement extends (0, _apolloElementMixin.ApolloElementMixin)(HTMLElement) {}\n\nexports.ApolloElementElement = ApolloElementElement;"},"sourceMaps":{"js":{"mappings":[{"source":"apollo-element.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":8,"column":0}},{"source":"apollo-element.ts","name":null,"original":{"line":86,"column":6},"generated":{"line":10,"column":0}},{"source":"apollo-element.ts","name":null,"original":{"line":86,"column":13},"generated":{"line":10,"column":6}},{"source":"apollo-element.ts","name":null,"original":{"line":86,"column":6},"generated":{"line":10,"column":26}},{"source":"apollo-element.ts","name":null,"original":{"line":87,"column":10},"generated":{"line":10,"column":35}},{"source":"apollo-element.ts","name":null,"original":{"line":87,"column":29},"generated":{"line":10,"column":79}},{"source":"apollo-element.ts","name":null,"original":{"line":87,"column":10},"generated":{"line":10,"column":90}},{"source":"apollo-element.ts","name":null,"original":{"line":86,"column":6},"generated":{"line":10,"column":91}},{"source":"apollo-element.ts","name":null,"original":{"line":87,"column":41},"generated":{"line":10,"column":92}}],"sources":{"apollo-element.ts":"import type { GraphQLError } from '@apollo-elements/interfaces';\n\nimport type {\n  ApolloClient,\n  ApolloError,\n  DocumentNode,\n  NormalizedCacheObject,\n  OperationVariables,\n  TypedDocumentNode,\n} from '@apollo/client/core';\n\nimport type { CustomElement } from './constructor';\nimport type { Data, Variables } from './operation';\n\nimport { ApolloElementMixin } from '@apollo-elements/mixins/apollo-element-mixin';\n\n/**\n * Common base interface for apollo elements\n *\n * @element\n *\n * @fires 'apollo-element-connected' when the element connects to the dom\n * @fires 'apollo-element-disconnected' when the element disconnects from the dom\n */\nexport declare abstract class ApolloElementInterface extends CustomElement {\n  declare static documentType: 'document'|'query'|'mutation'|'subscription';\n\n  /** data */\n  abstract data: unknown | null;\n\n  /** Operation variables */\n  abstract variables: unknown | null;\n\n  /** The Apollo Client instance. */\n  declare client: ApolloClient<NormalizedCacheObject> | null;\n\n  /**\n   * GraphQL operation document i.e. query, subscription, or mutation.\n   * Must be a parsed GraphQL DocumentNode, so use `graphql-tag`.\n   * If unset, the element can derive the document from the first\n   * light-DOM `<script type=\"application/graphql\">` child.\n   */\n  declare document: DocumentNode | TypedDocumentNode | null;\n\n  /** Context passed to the link execution chain. */\n  declare context?: Record<string, unknown>;\n\n  /** Latest error */\n  declare error: Error | ApolloError | null;\n\n  /** Latest errors */\n  declare errors: readonly GraphQLError[] | null;\n\n  /** Whether a request is in flight. */\n  declare loading: boolean;\n\n  constructor(...a: any[]);\n\n  connectedCallback(): void;\n\n  declare protected mo?: MutationObserver;\n\n  /**\n   * Lifecycle callback that reacts to changes in the GraphQL document\n   */\n  protected documentChanged?(document: this['document']): void;\n\n  /**\n   * Lifecycle callback that reacts to changes in the operation variables\n   */\n  protected variablesChanged?(variables: this['variables']): void;\n\n  /**\n   * Gets operation variables from the element's JSON script child\n   */\n  protected getDOMVariables(): this['variables'];\n\n  /**\n   * Get a GraphQL DocumentNode from the element's GraphQL script child\n   */\n  protected getDOMGraphQLDocument(): this['document'];\n\n  private onDOMMutation(records: MutationRecord[]): void;\n}\n\nexport class ApolloElementElement<D = unknown, V = OperationVariables>\n  extends ApolloElementMixin(HTMLElement) {\n    /** data */\n    declare data: Data<D> | null;\n\n    /** Operation variables */\n    declare variables: Variables<D, V> | null;\n}\n"},"lineCount":null}},"error":null,"hash":"090c6755726bd2207def88478a483db9","cacheData":{"env":{}}}