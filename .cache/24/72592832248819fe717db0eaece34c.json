{"id":"../node_modules/@apollo-elements/interfaces/apollo-subscription.js","dependencies":[{"name":"/home/qhong/projects/luxebbq/theme/node_modules/@apollo-elements/interfaces/apollo-subscription.js.map","includedInParent":true,"mtime":1614903032567},{"name":"/home/qhong/projects/luxebbq/theme/package.json","includedInParent":true,"mtime":1614903197160},{"name":"/home/qhong/projects/luxebbq/theme/node_modules/@apollo-elements/interfaces/package.json","includedInParent":true,"mtime":1614903032567},{"name":"@apollo-elements/mixins/apollo-subscription-mixin","loc":{"line":1,"column":40},"parent":"/home/qhong/projects/luxebbq/theme/node_modules/@apollo-elements/interfaces/apollo-subscription.js","resolved":"/home/qhong/projects/luxebbq/theme/node_modules/@apollo-elements/mixins/apollo-subscription-mixin.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ApolloSubscriptionElement = void 0;\n\nvar _apolloSubscriptionMixin = require(\"@apollo-elements/mixins/apollo-subscription-mixin\");\n\nclass ApolloSubscriptionElement extends (0, _apolloSubscriptionMixin.ApolloSubscriptionMixin)(HTMLElement) {}\n\nexports.ApolloSubscriptionElement = ApolloSubscriptionElement;"},"sourceMaps":{"js":{"mappings":[{"source":"apollo-subscription.ts","name":null,"original":{"line":16,"column":0},"generated":{"line":8,"column":0}},{"source":"apollo-subscription.ts","name":null,"original":{"line":177,"column":6},"generated":{"line":10,"column":0}},{"source":"apollo-subscription.ts","name":null,"original":{"line":177,"column":13},"generated":{"line":10,"column":6}},{"source":"apollo-subscription.ts","name":null,"original":{"line":177,"column":6},"generated":{"line":10,"column":31}},{"source":"apollo-subscription.ts","name":null,"original":{"line":178,"column":10},"generated":{"line":10,"column":40}},{"source":"apollo-subscription.ts","name":null,"original":{"line":178,"column":34},"generated":{"line":10,"column":94}},{"source":"apollo-subscription.ts","name":null,"original":{"line":178,"column":10},"generated":{"line":10,"column":105}},{"source":"apollo-subscription.ts","name":null,"original":{"line":177,"column":6},"generated":{"line":10,"column":106}},{"source":"apollo-subscription.ts","name":null,"original":{"line":178,"column":52},"generated":{"line":10,"column":107}}],"sources":{"apollo-subscription.ts":"import type {\n  ApolloClient,\n  ApolloError,\n  DocumentNode,\n  FetchPolicy,\n  FetchResult,\n  NormalizedCacheObject,\n  Observable,\n  OperationVariables,\n  SubscriptionOptions,\n} from '@apollo/client/core';\n\nimport type { ComponentDocument, Data, Variables } from './operation';\nimport type { ApolloElementInterface } from './apollo-element';\n\nimport { ApolloSubscriptionMixin } from '@apollo-elements/mixins/apollo-subscription-mixin';\n\nexport interface SubscriptionResult<TData> {\n  /** whether the subscription is loading */\n  loading: boolean;\n  /** subscription data */\n  data: TData | null;\n  /** subscription error */\n  error: ApolloError | null;\n}\n\nexport interface SubscriptionDataOptions<D = unknown, V = OperationVariables> {\n  subscription: DocumentNode | ComponentDocument<D>;\n  variables?: Variables<D, V>;\n  fetchPolicy?: FetchPolicy;\n  shouldResubscribe?:\n    | boolean\n    | ((options: SubscriptionDataOptions<D, V>) => boolean);\n  client?: ApolloClient<NormalizedCacheObject>;\n  skip?: boolean;\n}\n\nexport interface OnSubscriptionDataParams<TData = unknown> {\n  client: ApolloClient<NormalizedCacheObject>;\n  subscriptionData: SubscriptionResult<TData>;\n}\n\n/**\n * Common interface for subscription elements\n *\n * See [`ApolloElementInterface`](https://apolloelements.dev/api/interfaces/element) for more information on events\n *\n * @element\n *\n * @fires 'apollo-subscription-result' when the subscription updates\n * @fires 'apollo-error' when the query rejects\n */\nexport declare abstract class ApolloSubscriptionInterface<D, V = OperationVariables>\n  extends ApolloElementInterface {\n  /**\n   * Latest subscription data.\n   */\n  declare data: Data<D> | null;\n\n  /**\n   * An object map from variable name to variable value, where the variables are used within the GraphQL subscription.\n   *\n   * Setting variables will initiate the subscription, unless [`noAutoSubscribe`](#noautosubscribe) is also set.\n   *\n   * @summary Subscription variables.\n   */\n  declare variables: Variables<D, V> | null;\n\n  /**\n   * Specifies the FetchPolicy to be used for this subscription.\n   */\n  declare fetchPolicy?: FetchPolicy;\n\n  /**\n   * The time interval (in milliseconds) on which this subscription should be refetched from the server.\n   */\n  declare pollInterval?: number;\n\n  /**\n   * Whether or not updates to the network status should trigger next on the observer of this subscription.\n   */\n  declare notifyOnNetworkStatusChange: boolean;\n\n  /**\n   * Observable watching this element's subscription.\n   */\n  declare observable?: Observable<FetchResult<Data<D>>>;\n\n  /**\n   * Subscription to the observable\n   */\n  declare observableSubscription?: ZenObservable.Subscription;\n\n  /**\n   * A GraphQL document containing a single subscription.\n   */\n  declare subscription: DocumentNode | ComponentDocument<D> | null;\n\n  /**\n   * If true, the element will not begin querying data until you manually call `subscribe`\n   */\n  declare noAutoSubscribe: boolean;\n\n  /**\n   * If skip is true, the query will be skipped entirely\n   */\n  declare skip: boolean;\n\n  /**\n   * Determines if your subscription should be unsubscribed and subscribed again.\n   */\n  declare shouldResubscribe: SubscriptionDataOptions['shouldResubscribe'];\n\n  constructor(...a: any[]);\n\n  /**\n   * Resets the observable and subscribes.\n   */\n  public subscribe(params?: Partial<SubscriptionDataOptions<D, V>>): void\n\n  /**\n   * Cancels and clears the subscription\n   */\n  public cancel(): void\n\n  /** Flags an element that's ready and able to auto subscribe */\n  public get canAutoSubscribe(): boolean;\n\n  /**\n   * Determines whether the element should attempt to subscribe i.e. begin querying\n   * Override to prevent subscribing unless your conditions are met\n   */\n  shouldSubscribe(\n    options?: Partial<SubscriptionOptions<Variables<D, V>, Data<D>>>\n  ): boolean\n\n  /**\n   * Determines whether the element is able to automatically subscribe\n   */\n  protected canSubscribe(options?: Partial<SubscriptionOptions<Variables<D, V>, Data<D>>>): boolean\n\n  /**\n   * Callback for when data is updated\n   */\n  onSubscriptionData?(result: OnSubscriptionDataParams<Data<D>>): void;\n\n  /**\n   * Callback for when error is updated\n   */\n  onError?(error: ApolloError): void;\n\n  /**\n   * Callback for when subscription completes.\n   */\n  onSubscriptionComplete?(): void;\n\n  private initObservable(params?: Partial<SubscriptionDataOptions<D, V>>): void;\n\n  /**\n   * Sets `data`, `loading`, and `error` on the instance when new subscription results arrive.\n   */\n  private nextData(result: FetchResult<Data<D>>): void;\n\n  /**\n   * Sets `error` and `loading` on the instance when the subscription errors.\n   */\n  private nextError(error: ApolloError): void;\n\n  /**\n   * Shuts down the subscription\n   */\n  private onComplete(): void;\n\n  private endSubscription(): void;\n}\n\nexport class ApolloSubscriptionElement<D = unknown, V = OperationVariables>\n  extends ApolloSubscriptionMixin(HTMLElement)<D, V> { }\n"},"lineCount":null}},"error":null,"hash":"8b585bfabb871f720ce69e51bf02f4b4","cacheData":{"env":{}}}